package HostCommands
import Commands
import GameConstants
import DisplayTextToPlayer
import Host
import GroupUtils
import Ids
import ErrorHandling
import HumanPlayerMetadata
import UnitMetadata

constant string COMMAND_DAY = "day"
constant string COMMAND_NIGHT = "night"
constant string COMMAND_SEE = "see"
constant string COMMAND_KILL_SELECTED_UNITS = "kill"
constant string COMMAND_REMOVE_SELECTED_UNITS = "remove"
constant string COMMAND_MOVE_SELECTED_UNITS = "move"
constant string COMMAND_CREATE_ITEM = "item"
constant string COMMAND_CREATE_UNIT = "unit"
constant string COMMAND_ADD_MATS = "mats"

function startNextDay()
  SetTimeOfDay(TIME_OF_DAY)

function startNextNight()
  SetTimeOfDay(TIME_OF_NIGHT)

function turnOnMapVisibility()
  if (IsFogEnabled())
    displayMessageToPlayer(g_HostPlayer, "Disabled fog of war")
    FogEnableOff()
    FogMaskEnableOff()
  else
    displayMessageToPlayer(g_HostPlayer, "Enabled fog of war")
    FogEnableOn()
    FogMaskEnableOn()

function killSelectedUnits()
  let ug = getGroup()
  ug.enumUnitsSelected(g_HostPlayer, null)
  for u from ug
    u.kill()
  ug.release()

function removeSelectedUnits()
  let ug = getGroup()
  ug.enumUnitsSelected(g_HostPlayer, null)
  for u from ug
    u.remove()
  ug.release()

function moveSelectedUnits()
  let cameraLoc = GetCameraTargetPositionLoc()
  let cameraPos = vec2(GetLocationX(cameraLoc), GetLocationY(cameraLoc))
  let ug = getGroup()
  ug.enumUnitsSelected(GetTriggerPlayer(), null)
  for u in ug
    u.setPos(cameraPos)
  ug.release()
  RemoveLocation(cameraLoc)

function createItemAtCameraPos()
  let cameraLoc = GetCameraTargetPositionLoc()
  let cameraPos = vec2(GetLocationX(cameraLoc), GetLocationY(cameraLoc))

  let args = getCommandArgs()
  let itemIdArg = args.get(0)

  let id = itemIdArg.toId()
  if (id == -1)
    error("Couldn't parse item id from arg 0 \"{0}\"".format(itemIdArg))
    return

  let itm = CreateItem(id, cameraPos.x, cameraPos.y)
  if (itm != null)
    displayMessageToPlayer(g_HostPlayer, "Created " + itm.getName())

  RemoveLocation(cameraLoc)

function createUnitAtCameraPos()
  let cameraLoc = GetCameraTargetPositionLoc()
  let cameraPos = vec2(GetLocationX(cameraLoc), GetLocationY(cameraLoc))

  let args = getCommandArgs()
  let playerIdArg = args.get(0)
  let unitIdArg = args.get(1)
  
  let p = Player(playerIdArg.toInt())
  if (p == null)
    error("Couldn't parse player id from argument 0 \"{0}\"".format(playerIdArg))
    return

  let id = unitIdArg.toId()
  if (id == -1)
    error("Couldn't parse unit id from argument 1 \"{0}\"".format(unitIdArg))
    return

  let u = createUnitTLS(p, id, cameraPos.x, cameraPos.y, GetRandomDirectionDeg())
  if (u != null)
    displayMessageToPlayer(g_HostPlayer, "Created " + u.getName())

  RemoveLocation(cameraLoc)

function addMats()
  let args = getCommandArgs()
  let playerIdArg = args.get(0)
  let matsArg = args.get(1)

  let p = Player(playerIdArg.toInt())
  if (p == null)
    error("Couldn't parse player id from argument 0 \"{0}\"".format(playerIdArg))
    return

  let mats = matsArg.toInt()
  if (mats == -1)
    error("Couldn't parse material count from argument 1 \"{0}\"".format(matsArg))
    return

  let playerMetadata = p.getMetadata() castTo HumanPlayerMetadata
  if (playerMetadata == null)
    error("Can't give materials to player \"{0}\"".format(p.getName()))

  playerMetadata.giveMaterials(mats)
  displayMessageToPlayer(p, "Gave {0} materials to {1}".format(I2S(mats), p.getNameColored()))

init
  registerHostCommand(COMMAND_DAY, function startNextDay)
  registerHostCommand(COMMAND_NIGHT, function startNextNight)
  registerHostCommand(COMMAND_SEE, function turnOnMapVisibility)
  registerHostCommand(COMMAND_KILL_SELECTED_UNITS, function killSelectedUnits)
  registerHostCommand(COMMAND_REMOVE_SELECTED_UNITS, function removeSelectedUnits)
  registerHostCommand(COMMAND_MOVE_SELECTED_UNITS, function moveSelectedUnits)
  registerHostCommand(COMMAND_CREATE_ITEM, function createItemAtCameraPos)
  registerHostCommand(COMMAND_CREATE_UNIT, function createUnitAtCameraPos)
  registerHostCommand(COMMAND_ADD_MATS, function addMats)