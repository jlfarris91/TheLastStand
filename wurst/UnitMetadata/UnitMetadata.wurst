package UnitMetadata
import Composition
import HashMap
import LinkedList
import public UnitMetadataExtensions
import ErrorHandling
import OnUnitEnterLeave
import HashList
import Type
import ErrorIf
// import Reflection

HashMap<unit, IUnitMetadata> g_unitMetadataMap
LinkedList<IUnitMetadataFactory> g_unitMetadataFactories
HashList<int> g_ignoreAdd
HashList<int> g_ignoreRemove

// ============================================================================
public interface IUnitMetadata extends IComposite
  function getUnit() returns unit
  function setUnit(unit u)

// ============================================================================
public interface IUnitMetadataFactory
  function createUnit(unit u) returns IUnitMetadata

// ============================================================================
public abstract class UnitComponent extends Component

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  function getUnit() returns unit
    return (_owner castTo IUnitMetadata).getUnit()

// ============================================================================
public class UnitMetadata implements IUnitMetadata
  protected unit _unit
  private CompositionManager _compositionManager

  // --------------------------------------------------------------------------
  construct(unit u)
    setUnit(u)

  // --------------------------------------------------------------------------
  ondestroy
    unregisterUnitMetadata(this)
    _unit = null

  // --------------------------------------------------------------------------
  override function getUnit() returns unit
    return _unit

  // --------------------------------------------------------------------------
  override function setUnit(unit u)
    let oldUnit = _unit
    let newUnit = u
    if (oldUnit != null)
      unregisterUnitMetadata(this)
    _unit = newUnit
    registerUnitMetadata(this)
    onUnitChanged(oldUnit, newUnit)
    // if (oldUnit != null)
    //   Log.info(typeIdToTypeName(this.typeId) + " replaced " + I2S(oldUnit.getTypeId()) + " with " + I2S(newUnit.getTypeId()))

  // --------------------------------------------------------------------------
  protected function onUnitChanged(unit _oldUnit, unit _newUnit)
    skip

  // --------------------------------------------------------------------------
  override function addComponent(IComponent component) returns IComponent
    if (_compositionManager == null)
      _compositionManager = new CompositionManager()
    return _compositionManager.addComponent(component)

  // --------------------------------------------------------------------------
  override function getComponent(Type componentType) returns IComponent
    return _compositionManager != null ? _compositionManager.getComponent(componentType) : null

// ============================================================================
public function unit.getMetadata() returns IUnitMetadata
  return g_unitMetadataMap.get(this)

// ============================================================================
public function unit.getMetadataRequired() returns IUnitMetadata
  if (g_unitMetadataMap.has(this) == false)
    error("No metadata found for unit " + this.getName())
  return this.getMetadata()

// ============================================================================
public function registerUnitMetadataFactory(IUnitMetadataFactory factory)
  ErrorIf.argumentIsNull(factory, "factory")
  g_unitMetadataFactories.addAt(factory, 0)

// ============================================================================
public function unregisterUnitMetadataFactory(IUnitMetadataFactory factory)
  ErrorIf.argumentIsNull(factory, "factory")
  g_unitMetadataFactories.remove(factory)

// ============================================================================
public function constructUnitMetadata(unit u) returns IUnitMetadata
  ErrorIf.argumentIsNull(u, "u")
  for factory in g_unitMetadataFactories
    var uu = factory.createUnit(u)
    if (uu != null)
      return uu
  return new UnitMetadata(u)

// ============================================================================
public function registerUnitMetadata(IUnitMetadata metadata)
  ErrorIf.argumentIsNull(metadata, "metadata")
  let u = metadata.getUnit()
  if (g_unitMetadataMap.has(u))
    error("Unit already has a metadata object assigned")
  g_unitMetadataMap.put(u, metadata)
  // Log.info("registerUnitMetadata - registered metadata for unit " + u.getName())

// ============================================================================
public function unregisterUnitMetadata(IUnitMetadata metadata)
  ErrorIf.argumentIsNull(metadata, "metadata")  
  let u = metadata.getUnit()
  if (u == null)
    error("Metadata has no unit set")  
  g_unitMetadataMap.remove(u)
  // Log.info("unregisterUnitMetadata - unregistered metadata for unit " + u.getName())

// ============================================================================
public function replaceUnitTLS(unit whichUnit, integer newUnitId, integer unitStateMethod) returns unit
  ErrorIf.argumentIsNull(whichUnit, "whichUnit")

  let existingMetadata = whichUnit.getMetadata()

  if (existingMetadata != null)
    pauseMetadataRemoval(whichUnit.getTypeId())
    pauseMetadataGeneration(newUnitId)
  // else
  //   Log.info("replaceUnitTLS: no metadata exists for " + whichUnit.getName())

  let newUnit = ReplaceUnitBJ(whichUnit, newUnitId, unitStateMethod)

  if (existingMetadata != null)
    existingMetadata.setUnit(newUnit)
  //   Log.info("replaceUnitTLS: reassigned metadata")
  // else
  //   Log.info("Wait now the metadata is null")
    
  return newUnit

// ============================================================================
public function createUnitTLS(player owner, integer unitId, vec2 pos, real face) returns unit
  return createUnitTLS(owner, unitId, pos.x, pos.y, face)

// ============================================================================
public function createUnitTLS(player owner, integer unitId, real x, real y, real face) returns unit
  pauseMetadataGeneration(unitId)
  let newUnit = CreateUnit(owner, unitId, x, y, face)
  constructUnitMetadata(newUnit)
  // Log.info("createUnitTLS: created metadata for unit " + newUnit.getName())
  return newUnit

// ============================================================================
public function createUnitTLS(IUnitMetadata metadata, player owner, integer unitId, real x, real y, real face) returns unit
  ErrorIf.argumentIsNull(metadata, "metadata")
  pauseMetadataGeneration(unitId)
  // let oldUnit = metadata.getUnit()
  let newUnit = CreateUnit(owner, unitId, x, y, face)
  metadata.setUnit(newUnit)
  // Log.info("createUnitTLS: reassigned metadata from unit " + (oldUnit != null ? oldUnit.getName() : "null") + " to unit " + newUnit.getName())
  return newUnit

// ============================================================================
public function removeUnitTLS(unit u)
  pauseMetadataRemoval(u.getTypeId())
  u.remove()

// ============================================================================
public function pauseMetadataGeneration(int unitTypeId)
  g_ignoreAdd.add(unitTypeId)
  // Log.info("pausing metadata generation for " + I2S(unitTypeId))

// ============================================================================
function resumeMetadataGeneration(int unitTypeId)
  g_ignoreAdd.remove(unitTypeId)
  // Log.info("resuming metadata generation for " + I2S(unitTypeId))

// ============================================================================
public function pauseMetadataRemoval(int unitTypeId)
  g_ignoreRemove.add(unitTypeId)
  // Log.info("pausing metadata removal for " + I2S(unitTypeId))

// ============================================================================
function resumeMetadataRemoval(int unitTypeId)
  g_ignoreRemove.remove(unitTypeId)
  // Log.info("resuming metadata removal for " + I2S(unitTypeId))

// ============================================================================
function onUnitEnteredMap()
  let u = getEnterLeaveUnit()
  let id = u.getTypeId()
  let shouldGenerateMetadata = g_ignoreAdd.isEmpty() or not g_ignoreAdd.has(id)

  // if (g_ignoreAdd.has(id))
  //   Log.info("onUnitEnteredMap: ignoring unit " + u.getName())
  // else
  //   Log.info("onUnitEnteredMap: creating metadata for unit " + u.getName())

  if (shouldGenerateMetadata)
    constructUnitMetadata(u)
    // let metadata = constructUnitMetadata(u)
    // if (metadata != null)
    //   Log.info("Registered metadata for unit " + u.getName() + " " + I2S(id))
  else
    resumeMetadataGeneration(id)

// ============================================================================
function onUnitRemovedFromMap()
  let u = getEnterLeaveUnit()
  let id = u.getTypeId()
  let shouldRemoveMetadata = g_ignoreRemove.isEmpty() or not g_ignoreRemove.has(id)

  // if (not shouldRemoveMetadata)
  //   Log.info("onUnitRemovedFromMap: ignoring unit " + u.getName())
  // else
  //   Log.info("onUnitRemovedFromMap: removing metadata for unit " + u.getName())

  if (shouldRemoveMetadata)
    let metadata = u.getMetadata()
    if (metadata != null)
      unregisterUnitMetadata(metadata)
      destroy metadata
      // Log.info("Unregistered metadata for unit " + u.getName() + " " + I2S(id))
  else
    resumeMetadataRemoval(id)

// ============================================================================
init
  g_unitMetadataMap = new HashMap<unit, IUnitMetadata>()
  g_unitMetadataFactories = new LinkedList<IUnitMetadataFactory>()
  g_ignoreAdd = new HashList<int>()
  g_ignoreRemove = new HashList<int>()

  onEnter(function onUnitEnteredMap)
  onLeave(function onUnitRemovedFromMap)