package BlackboardBehaviors
import Behaviors
import BlackboardManager
import Blackboard
import ComposableUnit
import BrainComponent
import Type

// ============================================================================
public class BlackboardBehavior extends BlackboardWorkItemBase
  private IBehaviorTree _behavior
  private BehaviorTreeExecutionPriority _priority
  private string _name

  construct(string name, IBehaviorTree behavior, BehaviorTreeExecutionPriority priority)
    _name = name
    _behavior = behavior
    _priority = priority

  ondestroy
    destroy _behavior
    _behavior = null

  // --------------------------------------------------------------------------
  override function toString() returns string
    return _name
  
  // --------------------------------------------------------------------------
  override function canWork(ComposableUnit smartUnit) returns bool
    let brain = smartUnit.getComponent(Type(BrainComponent.typeId)) castTo BrainComponent
    return brain != null

  // --------------------------------------------------------------------------
  override function giveWork(ComposableUnit smartUnit)
    let brain = smartUnit.getComponent(Type(BrainComponent.typeId)) castTo BrainComponent
    brain.pushBehavior(_behavior.clone(), _priority)      

// ============================================================================
public class CheckBlackboard extends BehaviorBase

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(CheckBlackboard other)
    super(other)
    skip

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "CheckBlackboard"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new CheckBlackboard(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let u = context.getUnit()

    if (g_Blackboard.queryWork(u))
      return BehaviorState.SUCCESS

    return BehaviorState.RUNNING

// ============================================================================
public class PopBehaviorTreeBehavior extends BehaviorBase

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(PopBehaviorTreeBehavior other)
    super(other)
    skip

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "PopBehaviorTree"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new PopBehaviorTreeBehavior(this)
    
  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    let smartUnit = context.getUnit()
    let brain = smartUnit.getComponent(Type(BrainComponent.typeId)) castTo BrainComponent
    brain.popBehavior()

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    return BehaviorState.SUCCESS

// ============================================================================
public class BlackboardListenerBehaviorTree extends BehaviorTree

  // --------------------------------------------------------------------------
  construct()
    super("BlackboardListenerBehaviorTree")
    setRoot(new CheckBlackboard())