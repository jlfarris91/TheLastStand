package Zombies
import GroupUtils
import GameConstants
import HumanPlayers
import PlayerMetadata
import UndeadSpawnPoints
import Camp
import GameSettings
import HashMap
import HashList
import UnitExtensions
import RegisterEvents
import FX
import ErrorHandling
import Math

timer g_SpawnTimer
HashMap<player, PlayerZombieMetadata> g_PlayerMetadata
HashMap<unit, Zombie> g_Zombies

public class Zombies

  static function stopSpawning()
    g_SpawnTimer.pause()
    print("Stopped spawning zombies")

  static function startSpawning()
    g_SpawnTimer.startPeriodic(ZOMBIES_SPAWN_INTERVAL, function spawnZombiesNearPlayers)
    print("Started spawning zombies")
  
  static function killAllUndead()
    var ug = getGroup()
    ug.enumUnitsOfPlayer(PLAYER_UNDEAD, null)
    for u in ug
      u.kill()
    ug.release()

function getClosestZombieTarget(player p, vec2 pos) returns unit
  var distance = 100000000.0
  var camp = p.getCamp()
  var isSecure = camp.getIsSecure()
  unit target = null

  var ug = getGroup()
  ug.enumUnitsOfPlayer(p, null)

  for u in ug
    if (((isSecure and u.isStructure()) or (not isSecure and not u.isStructure())) and not u.isInvulnerable())
      var d = u.getPos().distanceToSq(pos)
      if (d < distance)
        target = u
        distance = d    

  if (target == null)
    target = p.getHeroUnit()

  return target

function spawnZombieNearPlayer(player p, vec2 pos) returns Zombie
  var zombie = createZombie(pos.x, pos.y)
  zombie.targetPlayer = p

  var target = getClosestZombieTarget(p, zombie.getPos())

  if (target != null)
    zombie.zombieUnit.issueTargetOrder("attack", target)
  else
    BlzSetUnitRealField(zombie.zombieUnit, UNIT_RF_ACQUISITION_RANGE, 99999.0)

  return zombie

function spawnZombiesNearPlayer(player p)
  if (p.getIsDead())
    return

  var camp = p.getCamp()
  var center = camp.getCenter()
  var playerMetadata = g_PlayerMetadata.get(p)

  int zombieCount = playerMetadata.zombies.size()
  int max = R2I(GameSettings.zombies_SpawnsMaxPerPlayer)

  if (zombieCount == max)
    return

  var numberOfSpawnPoints = R2I(GameSettings.zombies_SpawnsPerTick)
  numberOfSpawnPoints = clamp(max - zombieCount, 1, numberOfSpawnPoints)

  if (numberOfSpawnPoints == 1)
    var sp = g_UndeadSpawnPointManager.getRandomSpawnPointInRange(center, ZOMBIES_SPAWN_RANGE)  
    var zombie = spawnZombieNearPlayer(p, sp.getPos())
    playerMetadata.zombies.add(zombie)
  else
    var spawnPoints = g_UndeadSpawnPointManager.getRandomSpawnPointsInRange(center, ZOMBIES_SPAWN_RANGE, numberOfSpawnPoints)
    for sp in spawnPoints
      if (zombieCount < max)
        var zombie = spawnZombieNearPlayer(p, sp.getPos())
        playerMetadata.zombies.add(zombie)
        zombieCount++
    destroy spawnPoints

function spawnZombiesNearPlayers()
  for p in g_PlayingHumanPlayers
    spawnZombiesNearPlayer(p)

function createZombie(real x, real y) returns Zombie
  var u = CreateUnit(PLAYER_UNDEAD, UNIT_ID_NIGHT_ZOMBIE, x, y, GetRandomDirectionDeg())
  u.setScale(GetRandomReal(0.8, 1.2))
  u.setAnimation("birth")
  u.setMoveSpeed(u.getMoveSpeed() * GetRandomReal(0.8, 1.2))

  var zombie = new Zombie(u)
  g_Zombies.put(u, zombie)

  return zombie

function destroyZombieMetadata(unit u)
  var zombie = g_Zombies.get(u)
  
  var playerMetadata = g_PlayerMetadata.get(zombie.targetPlayer)
  if (playerMetadata == null)
    error("Couldn't find player metadata for zombie")
  
  playerMetadata.zombies.remove(zombie)

  destroy zombie

  g_Zombies.remove(u)

function onZombieKilled()
  var dyingUnit = GetDyingUnit()
  var killingUnit = GetKillingUnit()

  if (dyingUnit.getTypeId() != UNIT_ID_NIGHT_ZOMBIE)
    return

  destroyZombieMetadata(dyingUnit)

  if (GetRandomReal(0.0, 1.0) > ZOMBIES_MATERIALS_DROP_CHANCE)
    killingUnit.getOwner().giveMaterials(ZOMBIES_MATERIALS_DROP_AMOUNT)
    FX.createGoldCreditEffect(dyingUnit.getX(), dyingUnit.getY())
    FX.createMaterialsTag(dyingUnit.getX(), dyingUnit.getY(), ZOMBIES_MATERIALS_DROP_AMOUNT, killingUnit.getOwner())

class PlayerZombieMetadata
  player p
  HashList<Zombie> zombies

  construct(player p)
    this.p = p
    this.zombies = new HashList<Zombie>()

class Zombie
  unit zombieUnit
  player targetPlayer

  construct(unit zombie)
    this.zombieUnit = zombie

  function getPos() returns vec2
    return zombieUnit.getPos()

init
  g_SpawnTimer = CreateTimer()
  g_PlayerMetadata = new HashMap<player, PlayerZombieMetadata>()
  g_Zombies = new HashMap<unit, Zombie>()

  for p in g_HumanPlayers
    g_PlayerMetadata.put(p, new PlayerZombieMetadata(p))

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onZombieKilled)