package Tent
import Camp
import Events
import Notifications
import ObjectIdGenerator
import Unit_Notification
import Icons
import DisplayTextToPlayer
import WeightedSet
import TlsUnitIds
import UnitMetadata
import SurvivorSpawnManager
import Orders
import MainItemLibrary
import SurvivorUnit
import RandomSpawnPointProvider

constant int NOTIFICATION_NEW_SURVIVOR = compiletime(HERO_ID_GEN.next())
constant real SPAWN_SURVIVOR_RANGE_MIN = 1024.0 * 1.0
constant real SPAWN_SURVIVOR_RANGE_MAX = 1024.0 * 2.0

// ============================================================================
@compiletime public function createNewSurvivorNotification()
  new NotificationDefinition(NOTIFICATION_NEW_SURVIVOR)
  ..setIconGameInterface(Icons.bTNVillagerMan)

// ============================================================================
public class Tent extends CampUnit
  private Action m_unitConstructedEventHandler

  // --------------------------------------------------------------------------
  construct(ICamp camp)
    super(camp)
    listenToUnitConstructedEvent()

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToUnitConstructedEvent()

  // --------------------------------------------------------------------------
  private function onConstructed()
    spawnSurvivorUnit()

  // --------------------------------------------------------------------------
  private function spawnSurvivorUnit()
    
    let u = getUnit()
    if (u == null)
      return

    let p = u.getOwner()
    if (p == null)
      return

    if (p.getCurrentSupply() >= p.getMaxSupply())
      return
  
    let weightedSet = new WeightedSet<int>()
    ..add(TlsUnitIds.survivorMale, 40)
    ..add(TlsUnitIds.survivorMilitia, 4)
    ..add(TlsUnitIds.survivorSpearman, 2)
    ..add(TlsUnitIds.survivorMedic, 2)
    ..add(TlsUnitIds.survivorMarksman, 1)

    let unitId = weightedSet.getRandom()

    let spawnPoint = getSpawnPoint(u.getPos())

    let survivor = createUnitTLS(p, unitId, spawnPoint, GetRandomDirectionDeg())
    let survivorMetadata = survivor.getMetadataRequired()

    // For instance, give the Marksman his Hunting Rifle
    let jobItemId = getJobItemTypeForUnitType(unitId)
    if (jobItemId != -1)
      let itm = g_MainItemLibrary.createItem(jobItemId, survivor.getPos())
      survivor.addItemHandle(itm)

    // TODO: give them a non-job item
    //if (passesChanceCheck(SURVIVORS_ITEM_CHANCE))
    //  g_MainItemLibrary.giveRandomItemToUnit(survivor, SURVIVORS_ITEM_CHANCES)

    let survivorUnit = survivorMetadata.getUnit()
    survivorUnit.issuePointOrderById(OrderIds.move, u.getPos())
    
    let message = survivorMetadata.getName() + " has joined your camp!"
    displayMessageToPlayer(p, message)
    showNotification(p, message) (Notification notification) ->
      let survivorUnit2 = survivorMetadata.getUnit()
      if (survivorUnit2 != null)
        p.panCameraTo(survivorUnit2.getPos())
        p.selectSingle(survivorUnit2)

  // --------------------------------------------------------------------------
  private function getSpawnPoint(vec2 pos) returns vec2

    // Use RandomSpawnPointProvider since it automatically grows the range
    // if no spawn point could be found
    let spawnPointProvider = new RandomSpawnPointProvider(g_survivorSpawnManager)
    ..setRange(SPAWN_SURVIVOR_RANGE_MIN, SPAWN_SURVIVOR_RANGE_MAX)

    let spawnPoint = spawnPointProvider.getSpawnPoint(pos)

    destroy spawnPointProvider

    return spawnPoint

  // --------------------------------------------------------------------------
  private function listenToUnitConstructedEvent()
    unlistenToUnitConstructedEvent()
    if (m_unitConstructedEventHandler == null)
      m_unitConstructedEventHandler = PlayerUnitEvents.unitConstructed.add() -> 
        if (GetConstructedStructure() == getUnit())
          onConstructed()

  // --------------------------------------------------------------------------
  private function unlistenToUnitConstructedEvent()
    if (m_unitConstructedEventHandler != null)
      PlayerUnitEvents.unitConstructed.remove(m_unitConstructedEventHandler)
      destroy m_unitConstructedEventHandler
      m_unitConstructedEventHandler = null