package Gate
import RegisterEvents
import Camp
import Unit_Gate
import UnitMetadata

// ============================================================================
public class Gate extends CampStructure
  private bool _isOpen
  private int _angle

  // --------------------------------------------------------------------------
  construct(ICamp camp, unit u)
    super(camp, u)
    this.updateState()

  // --------------------------------------------------------------------------
  function getIsOpen() returns bool
    return this._isOpen

  // --------------------------------------------------------------------------
  function getIsClosed() returns bool
    return not this._isOpen

  // --------------------------------------------------------------------------
  override function setUnit(unit newUnit)
    super.setUnit(newUnit)
    this.updateState()

  // --------------------------------------------------------------------------
  function openGate()
    if (this._isOpen)
      return
    let unitId = this._unit.getTypeId()
    let upgradeId = GateUtility.getOpenGateId(_angle)
    if (unitId != upgradeId)
      IssueTrainOrderByIdBJ(this._unit, upgradeId)
    updateState()

  // --------------------------------------------------------------------------
  function closeGate()
    if (not this._isOpen)
      return
    let unitId = this._unit.getTypeId()
    let upgradeId = GateUtility.getClosedGateId(_angle)
    if (unitId != upgradeId)
      IssueTrainOrderByIdBJ(this._unit, upgradeId)
    updateState()

  // --------------------------------------------------------------------------
  protected function updateState()
    _angle = GateUtility.getGateAngle(_unit.getTypeId())
    if (this._unit.isClosedGate())
      _unit.setAnimation("stand")
      _unit.setPathing(true)
      _isOpen = false
    else if (this._unit.isOpenGate())
      _unit.setAnimation("death alternate")
      _unit.setPathing(false)
      _isOpen = true

// ============================================================================
function onGateUpgradeFinished()
  let caster = GetTriggerUnit()
  if (not caster.isGate())
    return
  let gate = caster.getMetadata() castTo Gate
  if (gate != null)
    gate.updateState()

// ============================================================================
function onGateUpgradeStart()
  let caster = GetTriggerUnit()
  if (not caster.isGate())
    return
  let gate = caster.getMetadata() castTo Gate
  if (gate != null)
    gate.updateState()

// ============================================================================
function onGateAttacked()
  let caster = GetTriggerUnit()
  if (not caster.isGate())
    return
  let gate = caster.getMetadata() castTo Gate
  if (gate != null and gate.getIsClosed())
    gate.getUnit().setAnimation("hit")
    ResetUnitAnimation(gate.getUnit())

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_START, function onGateUpgradeStart)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onGateUpgradeFinished)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED, function onGateAttacked)
