package Gate
import RegisterEvents
import Camp
import Unit_GateCommon
import UnitMetadata
import TerrainUtils
import CardinalUnitDefinition
import GateCardinalUnitDefinition
import ClosureTimers

// ============================================================================
public class Gate extends CampUnit
  private bool m_isOpen
  private CardinalUnitAngle m_angle
  private GateCardinalUnitDefinitionHelper m_helper

  // --------------------------------------------------------------------------
  construct(ICamp camp)
    super(camp)

  // --------------------------------------------------------------------------
  function getIsOpen() returns bool
    return this.m_isOpen

  // --------------------------------------------------------------------------
  function getIsClosed() returns bool
    return not this.m_isOpen

  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)
    this.updateState()

  // --------------------------------------------------------------------------
  function openGate()
    if (this.m_isOpen)
      return
    let unitId = this.getUnit().getTypeId()
    let upgradeId = m_helper.getOpenId(m_angle)
    if (unitId != upgradeId)
      IssueTrainOrderByIdBJ(this.getUnit(), upgradeId)
    updateState()

  // --------------------------------------------------------------------------
  function closeGate()
    if (not this.m_isOpen)
      return
    let unitId = this.getUnit().getTypeId()
    let upgradeId = m_helper.getClosedId(m_angle)
    if (unitId != upgradeId)
      IssueTrainOrderByIdBJ(this.getUnit(), upgradeId)
    updateState()

  // --------------------------------------------------------------------------
  protected function updateState()
    let gateUnit = getUnit()
    let unitId = gateUnit.getTypeId()

    m_helper = getGateHelperForUnitType(unitId)
    if (m_helper == null)
      Log.error("Gate does not have an associated helper")
      return
    
    let optionalAngle = m_helper.getAngleForUnitType(unitId)
    if (not optionalAngle.hasValue)
      Log.error("Somehow this unit does not have an associated CardinalUnitAngle")
      return

    m_angle = optionalAngle.value
    m_isOpen = gateUnit.isOpenGate()

    removeAllGateAnimationProperties(gateUnit)
    gateUnit.addAnimationProperties(getGateAnimationProperties(m_angle, m_isOpen))
    gateUnit.setPathing(not m_isOpen)

    nullTimer(() -> triggerPathingUpdate())

  // --------------------------------------------------------------------------
  private function triggerPathingUpdate()
    let tile = this.getUnit().getPos().getTile()
    tile.setPathing(PATHING_TYPE_WALKABILITY, false)
    tile.setPathing(PATHING_TYPE_WALKABILITY, true)

// ============================================================================
function onGateUpgradeFinished()
  let caster = GetTriggerUnit()
  if (not caster.isGate())
    return
  let gate = caster.getMetadata() castTo Gate
  if (gate != null)
    gate.updateState()

// ============================================================================
function onGateUpgradeStart()
  let caster = GetTriggerUnit()
  if (not caster.isGate())
    return
  let gate = caster.getMetadata() castTo Gate
  if (gate != null)
    gate.updateState()

// ============================================================================
function onGateAttacked()
  let caster = GetTriggerUnit()
  if (not caster.isGate())
    return
  let gate = caster.getMetadata() castTo Gate
  if (gate != null and gate.getIsClosed())
    gate.getUnit().setAnimation("hit")
    ResetUnitAnimation(gate.getUnit())

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_START, function onGateUpgradeStart)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onGateUpgradeFinished)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED, function onGateAttacked)
