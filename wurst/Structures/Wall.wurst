package Wall
import Camp
import RegisterEvents
import Math
import TlsUnitIds
import TlsAbilityIds
import HumanPlayerMetadata
import UnitMetadata

// ============================================================================
public class Wall extends CampStructure
  private bool _isOpen
  private int _index
  private int _angle

  // --------------------------------------------------------------------------
  construct(ICamp camp, unit u)
    super(camp, u)
    this._index = 0
    this._isOpen = false
    this._angle = this._unit.getFacingAngle().degrees().toInt()

  // --------------------------------------------------------------------------
  function rotateClockwise()
    this.rotateWall(-1)

  // --------------------------------------------------------------------------
  function rotateCounterClockwise()
    this.rotateWall(1)

  // --------------------------------------------------------------------------
  private function rotateWall(int dir)
    let pos = this._unit.getPos()
    let owner = this._unit.getOwner()

    this._camp.removeUnit(this)
    this._unit.remove()

    int nextUnitId

    if (this._index % 2 == 0)
      nextUnitId = TlsUnitIds.wallCorner
      if (dir > 0)
        this._angle = wrapMaxEx(this._angle + 90 * dir, 0, 360)
    else
      nextUnitId = TlsUnitIds.wallHorizontal
      if (dir < 0)
        this._angle = wrapMaxEx(this._angle - 90 * dir, 0, 360)

    let replaced = createUnitTLS(this, owner, nextUnitId, pos.x, pos.y, I2R(this._angle))

    let rot = replaced.getFacingAngle().degrees()
    print("Wall rotation is now " + R2S(rot))

    this._unit = replaced
    this._camp.addUnit(this)

    replaced.setLife(this._unit.getLife())
    owner.select(replaced)
    
    this._index = wrap(this._index + dir, 0, 7)

// ============================================================================
public function unit.isWall() returns bool
  let unitId = this.getTypeId()
  return unitId == TlsUnitIds.wallCorner or
         unitId == TlsUnitIds.wallHorizontal

// ============================================================================
function onRotateClockwiseCast()
  var caster = GetSpellAbilityUnit()
  if (not caster.isWall())
    return
  
  let playerMetadata = caster.getOwnerHumanMetadata()
  if (playerMetadata == null)
    return

  let camp = playerMetadata.getCamp()
  
  let wall = camp.getStructure(caster) castTo Wall
  if (wall != null)
    wall.rotateClockwise()

// ============================================================================
function onRotateCounterClockwiseCast()
  var caster = GetSpellAbilityUnit()
  if (not caster.isWall())
    return
  
  let playerMetadata = caster.getOwnerHumanMetadata()
  if (playerMetadata == null)
    return

  let camp = playerMetadata.getCamp()
  
  let wall = camp.getStructure(caster) castTo Wall
  if (wall != null)
    wall.rotateCounterClockwise()

// ============================================================================
init
  registerSpellEffectEvent(TlsAbilityIds.rotateClockwise, function onRotateClockwiseCast)
  registerSpellEffectEvent(TlsAbilityIds.rotateCounterClockwise, function onRotateCounterClockwiseCast)
