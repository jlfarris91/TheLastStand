package UndeadSpawnPoints
import SpawnPoints
import GroupUtils
import TimerUtils
import GameConstants

constant real SPAWN_POINT_UPDATE_INTERVAL = 3.0
constant real TEST_RADIUS = 800.0

public UndeadSpawnPointManager g_UndeadSpawnPointManager

// ============================================================================
public class UndeadSpawnPointManager implements ISpawnPointManager
  private SpawnPointManager _sourceManager
  private SpawnPointList _spawnPoints

  // --------------------------------------------------------------------------
  construct(SpawnPointManager sourceManager)
    this._sourceManager = sourceManager
    this._spawnPoints = new SpawnPointList()

  // --------------------------------------------------------------------------
  ondestroy
    destroy _spawnPoints

  // --------------------------------------------------------------------------
  override function getSpawnPoints() returns SpawnPointList
    return _spawnPoints

  // --------------------------------------------------------------------------
  protected function updateSpawnPoints()
    this._spawnPoints.clear()
    for sp in _sourceManager.getSpawnPoints()
      this.updateSpawnPoint(sp)
    //Log.info("undead spawn points: " + I2S(_spawnPoints.size()))

  // --------------------------------------------------------------------------
  private function updateSpawnPoint(ISpawnPoint sp)
    let ug = getGroup()
    let cnd = Condition(function doesFilterUnitInvalidateUndeadSpawnPoint)
    ug.enumUnitsInRange(sp.getPos(), TEST_RADIUS, cnd)

    if (ug.isEmpty())
      this._spawnPoints.add(sp)

    DestroyCondition(cnd)
    ug.release()

// ============================================================================
function doesFilterUnitInvalidateUndeadSpawnPoint() returns bool
  let u = GetFilterUnit()
  return u.isAlive() and u.isEnemyOf(PLAYER_UNDEAD) and not u.isInvulnerable()

// ============================================================================
function updateSpawnPoints()
  g_UndeadSpawnPointManager.updateSpawnPoints()

// ============================================================================
init
  g_UndeadSpawnPointManager = new UndeadSpawnPointManager(g_SpawnPointManager)

  var t = getTimer()
  t.startPeriodic(SPAWN_POINT_UPDATE_INTERVAL, function updateSpawnPoints)