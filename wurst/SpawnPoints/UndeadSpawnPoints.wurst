package UndeadSpawnPoints
import SpawnPoints
import GroupUtils
import TimerUtils
import GameConstants

constant real SPAWN_POINT_UPDATE_INTERVAL = 2.0
constant real TEST_RADIUS = 1024.0

public UndeadSpawnPointManager g_UndeadSpawnPointManager

// ============================================================================
// UndeadSpawnPointManager
// ============================================================================
public class UndeadSpawnPointManager
  private SpawnPointManager sourceManager
  private SpawnPointList spawnPoints

  construct(SpawnPointManager sourceManager)
    this.sourceManager = sourceManager
    this.spawnPoints = new SpawnPointList()

  function iterator() returns LLIterator<ISpawnPoint>
    return this.spawnPoints.iterator()

  function getRandomSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
    return getRandomSpawnPointInRangeFromList(spawnPoints, pos, range)

  function getRandomSpawnPointsInRange(vec2 pos, real range, int count) returns SpawnPointList
    return getRandomSpawnPointsInRangeFromList(spawnPoints, pos, range, count)

  function getRandomSpawnPointsInRangeWeighted(vec2 pos, real range, int count) returns SpawnPointList
    return getRandomSpawnPointsInRangeFromListWeighted(spawnPoints, pos, range, count)

  protected function updateSpawnPoints()
    this.spawnPoints.clear()
    for sp in sourceManager
      this.updateSpawnPoint(sp)
    Log.info("Number of zombie spawn points: " + I2S(this.spawnPoints.size()))

  private function updateSpawnPoint(ISpawnPoint sp)
    let ug = getGroup()
    ug.enumUnitsInRange(sp.getPos(), TEST_RADIUS)
    
    var isValidForUndead = true

    for u in ug
      if (u.isAlive() and u.isEnemyOf(PLAYER_UNDEAD) and not u.isInvulnerable())
        isValidForUndead = false

    if (isValidForUndead)
      this.spawnPoints.add(sp)

    ug.release()

function updateSpawnPoints()
  g_UndeadSpawnPointManager.updateSpawnPoints()

init
  g_UndeadSpawnPointManager = new UndeadSpawnPointManager(g_SpawnPointManager)

  var t = getTimer()
  t.startPeriodic(SPAWN_POINT_UPDATE_INTERVAL, function updateSpawnPoints)