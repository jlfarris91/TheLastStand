package UndeadSpawnPoints
import SpawnPoints
import GameConstants
import ClosureTimers
import GridList
import Bounds
import MapBounds
import Enumerable
import Unit_SpawnPoint

constant real SPAWN_POINT_UPDATE_INTERVAL = 3.0
constant real TEST_RADIUS = 800.0

public UndeadSpawnPointManager g_UndeadSpawnPointManager

// ============================================================================
public class UndeadSpawnPointManager implements ISpawnPointManager
  private static group s_testGroup = CreateGroup()
  private ISpawnPointManager _sourceManager
  private CallbackPeriodic _updateCB
  private GridList<ISpawnPoint> _spawnPoints

  // --------------------------------------------------------------------------
  construct(ISpawnPointManager sourceManager)
    _sourceManager = sourceManager

    let gridSize = SPAWN_POINT_COLLISION_SIZE
    let width = R2I(playableMapRect.width() / gridSize)
    let height = R2I(playableMapRect.height() / gridSize)

    _spawnPoints = new GridList<ISpawnPoint>(bounds(playableMin, playableMax), width, height)
    
    startUpdating()

  // --------------------------------------------------------------------------
  ondestroy
    stopUpdating()
    destroy _spawnPoints
    _spawnPoints = null
    _sourceManager = null

  // --------------------------------------------------------------------------
  override function getSpawnPoints() returns IEnumerable<ISpawnPoint>
    return _spawnPoints

  // --------------------------------------------------------------------------
  override function getSpawnPointsInRange(vec2 pos, real range) returns IEnumerable<ISpawnPoint>
    return _spawnPoints.getElementsInRange(pos, range) (ISpawnPoint sp) ->
      return sp.getPos()

  // --------------------------------------------------------------------------
  function startUpdating()
    if (_updateCB == null)
      _updateCB = doPeriodically(SPAWN_POINT_UPDATE_INTERVAL) (CallbackPeriodic cb) ->
        updateSpawnPoints()

  // --------------------------------------------------------------------------
  function stopUpdating()
    if (_updateCB != null)
      destroy _updateCB

  // --------------------------------------------------------------------------
  protected function updateSpawnPoints()
    _spawnPoints.clear()

    _sourceManager.getSpawnPoints().forEach() (ISpawnPoint sp) ->
      if (isSpawnPointValid(sp))
        _spawnPoints.add(sp, sp.getPos())

    Log.info("Undead spawn points: " + I2S(_spawnPoints.size()))

  // --------------------------------------------------------------------------
  private function isSpawnPointValid(ISpawnPoint sp) returns bool

    s_testGroup.enumUnitsInRange(sp.getPos(), TEST_RADIUS)

    var isValid = true

    for u from s_testGroup
      if (doesUnitInvalidateUndeadSpawnPoint(u))
        isValid = false
        break

    return isValid

  // ============================================================================
  private function doesUnitInvalidateUndeadSpawnPoint(unit u) returns bool
    return u.isAlive()
           and u.isEnemyOf(PLAYER_UNDEAD)
           and not u.isInvulnerable()

// ============================================================================
init
  g_UndeadSpawnPointManager = new UndeadSpawnPointManager(g_SpawnPointManager)