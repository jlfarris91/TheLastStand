package SpawnPointManager
import SpawnPointList
import SpawnPoint

@configurable constant int SPAWN_POINT_UNIT_ID = 'h00I'

public SpawnPointManager g_SpawnPointManager

// ============================================================================
public interface ISpawnPointManager
  function getSpawnPoints() returns SpawnPointList

// ============================================================================
public class SpawnPointManager implements ISpawnPointManager
  private SpawnPointList _spawnPoints

  // --------------------------------------------------------------------------
  construct()
    this._spawnPoints = new SpawnPointList()

  // --------------------------------------------------------------------------
  function registerSpawnPointUnit(unit u)
    let sp = new SpawnPoint(u.getName(), u.getPos())
    this._spawnPoints.add(sp)
    u.remove()

  // --------------------------------------------------------------------------
  function registerSpawnPoint(SpawnPoint sp)
    this._spawnPoints.add(sp)

  // --------------------------------------------------------------------------
  override function getSpawnPoints() returns SpawnPointList
    return _spawnPoints

  // --------------------------------------------------------------------------
  protected function size() returns int
    return this._spawnPoints.size()

// ============================================================================
public function ISpawnPointManager.getSpawnPointsInRange(vec2 pos, real range) returns SpawnPointList
  return this.getSpawnPoints().getSpawnPointsInRange(pos, range)

// ============================================================================
public function ISpawnPointManager.getClosestSpawnPoint(vec2 pos, real range) returns ISpawnPoint
  return this.getSpawnPoints().getClosestSpawnPoint(pos, range)

// ============================================================================
public function ISpawnPointManager.getClosestSpawnPoints(vec2 pos, real range, int count) returns SpawnPointList
  return this.getSpawnPoints().getClosestSpawnPoints(pos, range, count)

// ============================================================================
public function ISpawnPointManager.getFurthestSpawnPoint(vec2 pos, real range) returns ISpawnPoint
  return this.getSpawnPoints().getFurthestSpawnPoint(pos, range)

// ============================================================================
public function ISpawnPointManager.getFurthestSpawnPoints(vec2 pos, real range, int count) returns SpawnPointList
  return this.getSpawnPoints().getFurthestSpawnPoints(pos, range, count)

// ============================================================================
public function ISpawnPointManager.getRandomSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
  return this.getSpawnPoints().getRandomSpawnPointInRange(pos, range)

// ============================================================================
public function ISpawnPointManager.getRandomSpawnPointsInRange(vec2 pos, real range, int count) returns SpawnPointList
  return this.getSpawnPoints().getRandomSpawnPointsInRange(pos, range, count)

// ============================================================================
/** Registers all spawn points that exist at map startup */
function registerAllSpawnPoints()
  let ug = GetUnitsOfTypeIdAll(SPAWN_POINT_UNIT_ID)
  var i = 0
  for u in ug
    if (u.getTypeId() == SPAWN_POINT_UNIT_ID)
      g_SpawnPointManager.registerSpawnPointUnit(u)
      i++
  ug.destr()
  //Log.info("Number of spawn points: " + I2S(i))

// ============================================================================
init
  g_SpawnPointManager = new SpawnPointManager()
  registerAllSpawnPoints()