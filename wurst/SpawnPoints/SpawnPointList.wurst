package SpawnPointList
import LinkedList
import LinkedListExtensions
import SpawnPoint

// ============================================================================
public class SpawnPointList extends LinkedList<ISpawnPoint>

  // --------------------------------------------------------------------------
  function getSpawnPointsInRange(vec2 pos, real range) returns SpawnPointList
    let rr = range * range
    let spawnPointsInRange = filter() (ISpawnPoint sp) ->
      return sp.getPos().distanceToSq(pos) < rr
    return spawnPointsInRange castTo SpawnPointList

  // --------------------------------------------------------------------------
  function getClosestSpawnPoint(vec2 pos, real range) returns ISpawnPoint
    ISpawnPoint spawnPoint = null
    var closestRR = range * range

    for sp in this
      var dd = sp.getPos().distanceToSq(pos)
      if (dd < closestRR)
        spawnPoint = sp
        closestRR = dd

    return spawnPoint

  // --------------------------------------------------------------------------
  function getClosestSpawnPoints(vec2 pos, real range, int count) returns SpawnPointList
    let rr = range * range

    let spawnPointsWithinRange = filter() (ISpawnPoint sp) ->
      return sp.getPos().distanceToSq(pos) < rr

    spawnPointsWithinRange.sortWith() (ISpawnPoint sp1, ISpawnPoint sp2) ->
      return sp1.getPos().distanceToSq(pos) < sp2.getPos().distanceToSq(pos) ? 1 : -1

    let finalList = spawnPointsWithinRange.take(count) castTo SpawnPointList

    destroy spawnPointsWithinRange

    return finalList

  // --------------------------------------------------------------------------
  function getFurthestSpawnPoint(vec2 pos, real range) returns ISpawnPoint
    let rr = range * range
    ISpawnPoint spawnPoint = null
    var furthestRR = 0.0

    for sp in this
      var dd = sp.getPos().distanceToSq(pos)
      if (dd < rr and dd > furthestRR)
        spawnPoint = sp
        furthestRR = dd

    return spawnPoint

  // --------------------------------------------------------------------------
  function getFurthestSpawnPoints(vec2 pos, real range, int count) returns SpawnPointList
    let rr = range * range

    let spawnPointsWithinRange = filter() (ISpawnPoint sp) ->
      return sp.getPos().distanceToSq(pos) < rr

    spawnPointsWithinRange.sortWith() (ISpawnPoint sp1, ISpawnPoint sp2) ->
      return sp1.getPos().distanceToSq(pos) < sp2.getPos().distanceToSq(pos) ? -1 : 1

    let finalList = spawnPointsWithinRange.take(count) castTo SpawnPointList

    destroy spawnPointsWithinRange

    return finalList

  // --------------------------------------------------------------------------
  function getRandomSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
    let spawnPointsInRange = getSpawnPointsInRange(pos, range)
    let spawnPoint = spawnPointsInRange.getRandom()
    destroy spawnPointsInRange
    return spawnPoint

  // --------------------------------------------------------------------------
  function getRandomSpawnPointsInRange(vec2 pos, real range, int count) returns SpawnPointList
    let spawnPointsInRange = getSpawnPointsInRange(pos, range)
    let weightedPoints = spawnPointsInRange.toWeightedSet() (sp) ->
      return sp.getPos().distanceToSq(pos)
    let spawnPoints = weightedPoints.popRandom(count)
    destroy weightedPoints
    destroy spawnPointsInRange
    return spawnPoints castTo SpawnPointList