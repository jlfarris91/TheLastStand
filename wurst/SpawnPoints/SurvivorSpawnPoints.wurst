package SurvivorSpawnPoints
import SpawnPoints
import GroupUtils
import TimerUtils
import GameConstants
import HumanPlayers
import LinkedListExtensions

constant real SPAWN_POINT_UPDATE_INTERVAL = 2.0
constant real TEST_RADIUS = 512.0

public SurvivorSpawnPointManager g_SurvivorSpawnPointManager

// ============================================================================
// SurvivorSpawnPointManager
// ============================================================================
public class SurvivorSpawnPointManager
  private SpawnPointManager sourceManager
  private SpawnPointList spawnPoints

  construct(SpawnPointManager sourceManager)
    this.sourceManager = sourceManager
    this.spawnPoints = new SpawnPointList()

  function iterator() returns LLIterator<ISpawnPoint>
    return this.spawnPoints.iterator()

  function getRandomSpawnPoint() returns ISpawnPoint
    return this.spawnPoints.getRandom()

  function getRandomSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
    return getRandomSpawnPointInRangeFromList(spawnPoints, pos, range)

  function getRandomSpawnPointsInRange(vec2 pos, real range, int count) returns SpawnPointList
    return getRandomSpawnPointsInRangeFromList(spawnPoints, pos, range, count)

  function getRandomSpawnPointsInRangeWeighted(vec2 pos, real range, int count) returns SpawnPointList
    return getRandomSpawnPointsInRangeFromListWeighted(spawnPoints, pos, range, count)

  function getClosestSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
    return getClosestSpawnPointInRangeFromList(spawnPoints, pos, range)
    
  function updateSpawnPointsNow()
    this.spawnPoints.clear()
    for sp in sourceManager
      this.updateSpawnPoint(sp)
    //print("Survivor spawn points: " + I2S(this.spawnPoints.size()))

  private function updateSpawnPoint(ISpawnPoint sp)
    let ug = getGroup()
    ug.enumUnitsInRange(sp.getPos(), TEST_RADIUS)
    
    var isValidForUndead = true

    for u in ug
      if (u.isAlive() and (u.isEnemyOf(PLAYER_VILLAGERS) or g_HumanPlayers.has(u.getOwner())))
        isValidForUndead = false

    if (isValidForUndead)
      this.spawnPoints.add(sp)

    ug.release()

function updateSpawnPoints()
  g_SurvivorSpawnPointManager.updateSpawnPointsNow()

init
  g_SurvivorSpawnPointManager = new SurvivorSpawnPointManager(g_SpawnPointManager)

  var t = getTimer()
  t.startPeriodic(SPAWN_POINT_UPDATE_INTERVAL, function updateSpawnPoints)