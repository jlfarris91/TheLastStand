package SpawnPoints
import public LinkedList
import WeightedSet
import ErrorHandling

@configurable constant int SPAWN_POINT_UNIT_ID = 'h00I'

public SpawnPointManager g_SpawnPointManager

// ============================================================================
// ISpawnPoint
// ============================================================================
public interface ISpawnPoint
  function getName() returns string
  function getPos() returns vec2
  function getIsEnabled() returns bool

// ============================================================================
// SpawnPoint
// ============================================================================
public class SpawnPoint implements ISpawnPoint
  private vec2 pos
  private string name
  private bool isEnabled

  construct(string name, vec2 pos)
    this.name = name
    this.pos = pos

  override function getName() returns string
    return this.name

  override function getPos() returns vec2
    return this.pos

  override function getIsEnabled() returns bool
    return this.isEnabled

// ============================================================================
// SpawnPointList
// ============================================================================
public class SpawnPointList extends LinkedList<ISpawnPoint>

// ============================================================================
// ISpawnPointManager
// ============================================================================
public interface ISpawnPointManager
  function iterator() returns LLIterator<ISpawnPoint>
  function getRandomSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
  function getRandomSpawnPointsInRange(vec2 pos, real range, int count) returns SpawnPointList

// ============================================================================
// SpawnPointManager
// ============================================================================
public class SpawnPointManager
  private SpawnPointList spawnPoints

  construct()
    this.spawnPoints = new SpawnPointList()

  function registerSpawnPointUnit(unit u)
    let sp = new SpawnPoint(u.getName(), u.getPos())
    this.spawnPoints.add(sp)
    u.remove()

  function iterator() returns LLIterator<ISpawnPoint>
    return this.spawnPoints.iterator()

  function getRandomSpawnPointInRange(vec2 pos, real range) returns ISpawnPoint
    return getRandomSpawnPointInRangeFromList(spawnPoints, pos, range)

  function getRandomSpawnPointsInRange(vec2 pos, real range, int count) returns SpawnPointList
    return getRandomSpawnPointsInRangeFromList(spawnPoints, pos, range, count)

  protected function size() returns int
    return this.spawnPoints.size()

// ============================================================================
/** Picks a random spawn point in range of a position from a given list */
public function getRandomSpawnPointInRangeFromList(SpawnPointList list, vec2 pos, real range) returns ISpawnPoint
  var weightedSet = new WeightedSet<ISpawnPoint>()
  let rr = range * range

  for sp in list
    var dd = sp.getPos().distanceToSq(pos)
    if (dd < rr)
      weightedSet.add(sp, (rr - dd) / rr)

  ISpawnPoint pickedSp

  if (weightedSet.isEmpty())
    error("Could not find any spawn points within " + R2S(range) + " of " + pos.toString())
    pickedSp = list.getFirst()
  else
    pickedSp = weightedSet.getRandom()

  destroy weightedSet

  return pickedSp

// ============================================================================
/** Picks random N spawn points in range of a position from a given list */
public function getRandomSpawnPointsInRangeFromList(SpawnPointList list, vec2 pos, real range, int count) returns SpawnPointList
  var weightedSet = new WeightedSet<ISpawnPoint>()
  let rr = range * range

  for sp in list
    var dd = sp.getPos().distanceToSq(pos)
    if (dd < rr)
      weightedSet.add(sp, 1.0)

  var pickedSpList = new SpawnPointList()

  if (weightedSet.size() == 0)
    error("Could not find any spawn points within " + R2S(range) + " of " + pos.toString())
    return pickedSpList

  ISpawnPoint sp2 = null
  for i = 0 to count - 1
    // if there are not enough points, just repeat the last popped point
    if (not weightedSet.isEmpty())
      sp2 = weightedSet.popRandom()
    pickedSpList.push(sp2)

  destroy weightedSet

  return pickedSpList

// ============================================================================
/** Picks random N spawn points in range of a position from a given list */
public function getRandomSpawnPointsInRangeFromListWeighted(SpawnPointList list, vec2 pos, real range, int count) returns SpawnPointList
  var weightedSet = new WeightedSet<ISpawnPoint>()
  let rr = range * range

  for sp in list
    var dd = sp.getPos().distanceToSq(pos)
    if (dd < rr)
      weightedSet.add(sp, (rr - dd) / rr)

  var pickedSpList = new SpawnPointList()

  if (weightedSet.size() == 0)
    error("Could not find any spawn points within " + R2S(range) + " of " + pos.toString())
    return pickedSpList

  ISpawnPoint sp2 = null
  for i = 0 to count - 1
    // if there are not enough points, just repeat the last popped point
    if (not weightedSet.isEmpty())
      sp2 = weightedSet.popRandom()
    pickedSpList.push(sp2)

  destroy weightedSet

  return pickedSpList

// ============================================================================
/** Picks random N spawn points in range of a position from a given list */
public function getClosestSpawnPointInRangeFromList(SpawnPointList list, vec2 pos, real range) returns ISpawnPoint
  let rr = range * range
  ISpawnPoint spawnPoint = null
  var closestRR = rr

  for sp in list
    var dd = sp.getPos().distanceToSq(pos)
    if (dd < closestRR)
      spawnPoint = sp
      closestRR = dd

  return spawnPoint

// ============================================================================
// Registers all spawn points that exist at map startup
// ============================================================================
function registerAllSpawnPoints()
  let ug = GetUnitsOfTypeIdAll(SPAWN_POINT_UNIT_ID)
  for u in ug
    if (u.getTypeId() == SPAWN_POINT_UNIT_ID)
      g_SpawnPointManager.registerSpawnPointUnit(u)

  ug.destr()

// ============================================================================
init
  g_SpawnPointManager = new SpawnPointManager()
  registerAllSpawnPoints()