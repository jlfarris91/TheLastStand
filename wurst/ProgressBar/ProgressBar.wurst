package ProgressBar
import UnitPool
import ClosureTimers
import Unit_ProgressBar
import Math
import LinkedList

constant player PROGRESS_BAR_OWNER = DUMMY_PLAYER
constant real PROGRESS_BAR_UPDATE_PROGRESS_INTERVAL = ANIMATION_PERIOD//0.01
constant real PROGRESS_BAR_UPDATE_POSITION_INTERVAL = ANIMATION_PERIOD
constant int DEATH_ANIMATION_INDEX = 0
constant int ZERO_ANIMATION_INDEX = 1

LinkedList<ProgressBar> g_updateVisuals
LinkedList<ProgressBar> g_updatePositions

// ============================================================================
public class ProgressBar
  private unit _bar
  private unit _target
  private vec2 _offset
  private real _currentValue
  private real _targetValue
  private real _speed
  private colorA _color

  private real _currentAlpha
  private real _targetAlpha
  private real _alphaSpeed

  // --------------------------------------------------------------------------
  construct()
    _bar = getDummyUnit(PROGRESS_BAR_DUMMY_ID)
    _target = null
    _offset = ZERO2
    _currentValue = 0.0
    _targetValue = 0.0
    _speed = 1.0
    _alphaSpeed = 3.0

    show(false)
    reset()
  
  // --------------------------------------------------------------------------
  ondestroy
    unregisterForVisualUpdate()
    unregisterForPositionUpdate()
    releaseDummyUnit(_bar)
    _bar = null
    _target = null
    _currentValue = 0
    _targetValue = 0

  // --------------------------------------------------------------------------
  function setPercentage(real percentage01)
    setPercentage(percentage01, _speed)

  // --------------------------------------------------------------------------
  function setPercentage(real percentage01, real speed)
    let delta = RAbsBJ(percentage01 - _currentValue)
    if (delta > 0.01)
      _targetValue = percentage01
      _speed = speed
      registerForVisualUpdate()

  // --------------------------------------------------------------------------
  function setPercentageNow(real percentage01)
    _currentValue = percentage01
    _targetValue = percentage01
    setAnimationIndexByPercentage(percentage01)

  // --------------------------------------------------------------------------
  function getPercentage() returns real
    return _currentValue

  // --------------------------------------------------------------------------
  function getPos() returns vec2
    return _bar.getPos() - _offset

  // --------------------------------------------------------------------------
  function setPos(vec2 pos)
    _bar.setPos(pos + _offset)

  // --------------------------------------------------------------------------
  function getOffset() returns vec2
    return _offset

  // --------------------------------------------------------------------------
  function setOffset(vec2 pos)
    _offset = pos

  // --------------------------------------------------------------------------
  function getHeight() returns real
    return _bar.getFlyHeight()

  // --------------------------------------------------------------------------
  function setHeight(real offset)
    _bar.setFlyHeight(offset, 0)

  // --------------------------------------------------------------------------
  function setScale(real scale)
    _bar.setScale(scale)

  // --------------------------------------------------------------------------
  function setColor(playercolor color)
    _bar.setColor(color)

  // --------------------------------------------------------------------------
  function setColor(colorA color)
    _bar.setVertexColor(color)
    _color = color
    registerForVisualUpdate()

  // --------------------------------------------------------------------------
  function setTarget(unit u)
    _target = u
    updatePosition()
    if (u != null)
      registerForPositionUpdate()

  // --------------------------------------------------------------------------
  function getTarget() returns unit
    return _target

  // --------------------------------------------------------------------------
  function setSpeed(real speed)
    _speed = speed
  
  // --------------------------------------------------------------------------
  function getSpeed() returns real
    return _speed

  // --------------------------------------------------------------------------
  function show(bool flag)
    registerForVisualUpdate()
    _targetAlpha = flag ? 1.0 : 0.0

  // --------------------------------------------------------------------------
  function reset()
    _bar.setAnimation(ZERO_ANIMATION_INDEX)
    _currentValue = 0.0

  // --------------------------------------------------------------------------
  function updateVisuals(real dt)
    let doneUpdatingProgress = updateProgress(dt)
    let doneUpdatingAlpha = updateAlpha(dt)
    if (doneUpdatingProgress and doneUpdatingAlpha)
      unregisterForVisualUpdate()
        
  // --------------------------------------------------------------------------
  function updatePosition()
    if (_target != null)
      setPos(_target.getPos())

  // --------------------------------------------------------------------------
  private function updateProgress(real dt) returns bool
    _currentValue = moveTowards(_currentValue, _targetValue, _speed * dt)
    setAnimationIndexByPercentage(_currentValue)

    let valueDelta = RAbsBJ(_targetValue - _currentValue)
    if (valueDelta <= 0.01)
      _currentValue = _targetValue
      return true

    return false

  // --------------------------------------------------------------------------
  private function updateAlpha(real dt) returns bool
    _currentAlpha = moveTowards(_currentAlpha, _targetAlpha, _alphaSpeed * dt)
    
    let alpha = lerpInt(0, 255, _currentAlpha)
    _bar.setVertexColor(colorA(_color.red, _color.green, _color.blue, alpha))

    let alphaDelta = RAbsBJ(_targetAlpha - _currentAlpha)
    if (alphaDelta <= 0.01)
      _currentAlpha = _targetAlpha
      return true

    return false

  // --------------------------------------------------------------------------
  private function setAnimationIndexByPercentage(real t)
    let animationIndex = clamp(R2I(t * 100.0), 0, 100)
    _bar.setAnimation(2 + animationIndex)

  // --------------------------------------------------------------------------
  private function registerForVisualUpdate()
    unregisterForVisualUpdate()
    g_updateVisuals.add(this)

  // --------------------------------------------------------------------------
  private function unregisterForVisualUpdate()
    g_updateVisuals.remove(this)

  // --------------------------------------------------------------------------
  private function registerForPositionUpdate()
    unregisterForPositionUpdate()
    g_updatePositions.add(this)

  // --------------------------------------------------------------------------
  private function unregisterForPositionUpdate()
    g_updatePositions.remove(this)

// ============================================================================
function getDummyUnit(int unitId) returns unit
  return createUnitPooled(PROGRESS_BAR_OWNER, unitId, ZERO2, angle(0))

// ============================================================================
function releaseDummyUnit(unit u)
  u.setAnimation(DEATH_ANIMATION_INDEX)
  u.release()
  
// ============================================================================
init
  g_updateVisuals = new LinkedList<ProgressBar>()
  g_updatePositions = new LinkedList<ProgressBar>()

  doPeriodically(PROGRESS_BAR_UPDATE_PROGRESS_INTERVAL) (CallbackPeriodic cb) ->
    for progressBar in g_updateVisuals
      if (progressBar != null)
        progressBar.updateVisuals(PROGRESS_BAR_UPDATE_PROGRESS_INTERVAL)
  
  doPeriodically(PROGRESS_BAR_UPDATE_POSITION_INTERVAL) (CallbackPeriodic cb) ->
    for progressBar in g_updatePositions
      if (progressBar != null)
        progressBar.updateVisuals(PROGRESS_BAR_UPDATE_POSITION_INTERVAL)