package TextProgressBar
import Math
import Vector

constant int PROGRESS_BAR_SMALL_LENGTH = 10
constant colorA PROGRESS_BAR_SMALL_FOREGROUND = colorA(0, 170, 0, 255)
constant colorA PROGRESS_BAR_SMALL_BACKGROUND = colorA(0, 64, 0, 255)

constant int PROGRESS_BAR_LENGTH_LARGE = 10
constant colorA PROGRESS_BAR_LARGE_FOREGROUND = colorA(0, 170, 0, 255)
constant colorA PROGRESS_BAR_LARGE_BACKGROUND = colorA(0, 64, 0, 255)

constant string PROGRESS_BAR_CHAR = "l"

public TextProgressBar g_ProgressBar

// ============================================================================
// ProgressBar
// ============================================================================
public class TextProgressBar
  Vector<string> _text

  construct(int length, colorA foreground, colorA background)
    this._text = createProgressTextList(length, foreground, background)

  function getLength() returns int
    return this._text.size()

  function sample(real t) returns string
    let a = clamp(R2I(t * I2R(this.getLength())), 0, getLength() - 1)
    return _text.get(a)

function createProgressTextList(int length, colorA foreground, colorA background) returns Vector<string>
  let list = new Vector<string>()
  for i = 0 to length - 1
    let str = createProgressString(
      i,
      length,
      foreground,
      background)
    list.add(str)
  return list

function createProgressString(int i, int length, colorA foreground, colorA background) returns string
  var s = foreground.toColorString()
  let lr = I2R(max(length - 1, 1))
  let t = I2R(i) / lr
  var b = false
  for j = 0 to length - 1
    let t2 = I2R(j) / lr
    if (not b and (i == 0 or t2 > t))
      b = true
      s = s + "|r" + background.toColorString()
    s = s + PROGRESS_BAR_CHAR
  return s + "|r"

init
  g_ProgressBar = new TextProgressBar(
    PROGRESS_BAR_SMALL_LENGTH,
    PROGRESS_BAR_SMALL_FOREGROUND,
    PROGRESS_BAR_SMALL_BACKGROUND)