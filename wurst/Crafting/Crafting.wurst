package Crafting
import ErrorHandling
import Vector
import UnitMetadata
import RegisterEvents
import BuildItems
import ItemBuildUnitDefinition
import TlsItemDefinition
import TooltipBuilder
import ClosureTimers
import ChannelAbilityPreset
import Events

@configurable public constant int ITEM_RECIPE_MAX_COMPONENTS = 6
public constant int ITEM_RECIPE_PARTIAL = -1

public tuple itemRecipeComponent(TlsItemDefinition itemDefinition, int count)
public tuple itemRecipeDefinition(TlsItemDefinition itemDef, int buildUnitTypeId, int iconAbilTypeId)

int array[ITEM_RECIPE_MAX_COMPONENTS] g_tempComponentCount

// --------------------------------------------------------------------------
public function itemRecipeDefinition(TlsItemDefinition itemDef) returns itemRecipeDefinition
  return itemRecipeDefinition(itemDef, compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))

// ============================================================================
public class ItemRecipe
  private itemRecipeComponent array[6] m_components
  private int m_componentsCount = 0
  private int m_id = 0
  private itemRecipeDefinition m_definition
  private int m_goldCost = 0
  private int m_lumberCost = 0
  private int m_buildTime = 0
  private string m_tooltipBasic = null

  // ----------------------------------------------------------------------------
  construct(itemRecipeDefinition def)
    if (def.itemDef == null)
      argumentNullError("itemDefinition")
    m_definition = def
    BuildItems.register(def.itemDef.getNewId(), def.buildUnitTypeId)

  // ----------------------------------------------------------------------------
  function getId() returns int
    return m_id

  // --------------------------------------------------------------------------
  function getItemDefinition() returns TlsItemDefinition
    return m_definition.itemDef

  // ----------------------------------------------------------------------------
  function getItemTypeId() returns int
    return m_definition.itemDef.getNewId()

  // ----------------------------------------------------------------------------
  function getItemBuildUnitTypeId() returns int
    return m_definition.buildUnitTypeId

  // ----------------------------------------------------------------------------
  function getPartialIconAbilityId() returns int
    return m_definition.iconAbilTypeId

  // ----------------------------------------------------------------------------
  function getTooltipBasic() returns string
    return m_tooltipBasic

  // ----------------------------------------------------------------------------
  function setTooltipBasic(string value)
    m_tooltipBasic = value

  // ----------------------------------------------------------------------------
  function getComponentCount() returns int
    return m_componentsCount

  // ----------------------------------------------------------------------------
  function getComponent(int index) returns itemRecipeComponent
    return m_components[index]

  // ----------------------------------------------------------------------------
  function addComponent(TlsItemDefinition itemDefinition, int count)
    if (m_componentsCount == 6)
      error("An ItemRecipe can have a max of 6 components")
    m_components[m_componentsCount].itemDefinition = itemDefinition
    m_components[m_componentsCount].count = count
    m_componentsCount++
    m_id = getHashCode()

  // ----------------------------------------------------------------------------
  function getGoldCost() returns int
    return m_goldCost

  // ----------------------------------------------------------------------------
  function setGoldCost(int value)
    m_goldCost = value

  // ----------------------------------------------------------------------------
  function getLumberCost() returns int
    return m_lumberCost
  
  // ----------------------------------------------------------------------------
  function setLumberCost(int value)
    m_lumberCost = value

  // ----------------------------------------------------------------------------
  function getBuildTime() returns int
    return m_buildTime
  
  // ----------------------------------------------------------------------------
  function setBuildTime(int value)
    m_buildTime = value

  // ----------------------------------------------------------------------------
  /** Returns the number of items that can be created given the items in the units inventory.
      Returns -1 if any amount of any components are only partially satisfied. */
  function countNumberOfCraftableItemsInUnitInventory(unit u) returns int

    var hasAnyComponents = false

    for i = 0 to m_componentsCount-1
    //{
      let comp = m_components[i]
      g_tempComponentCount[i] = 0      
      for itm in u.inventory()
        if (itm != null and itm.getTypeId() == comp.itemDefinition.getNewId())
          g_tempComponentCount[i] += max(itm.getCharges(), 1)
          hasAnyComponents = true
    //}

    var minNumberOfCraftableItems = INT_MAX
    for i = 0 to m_componentsCount-1
    //{
      if (m_components[i].count == 0)
        error("Recipe has no components")
      let numberOfSatisfiedItems = (g_tempComponentCount[i].toReal() / m_components[i].count).floor()
      minNumberOfCraftableItems = min(minNumberOfCraftableItems, numberOfSatisfiedItems)
    //}

    return (minNumberOfCraftableItems == 0 and hasAnyComponents) ? ITEM_RECIPE_PARTIAL : minNumberOfCraftableItems

  // ----------------------------------------------------------------------------
  /** Only call this if the unit is certain to have the right amount of items */
  function consumeItems(unit u)

    for i = 0 to m_componentsCount-1
    //{
      let comp = m_components[i]
      g_tempComponentCount[i] = 0
      var count = m_components[i].count
      for itm in u.inventory()
      //{
        if (itm != null and itm.getTypeId() == comp.itemDefinition.getNewId())
          let itemCharges = max(itm.getCharges(), 1)
          if (count >= itemCharges)
            count -= itemCharges
            itm.remove()
          else
            itm.setCharges(itemCharges - count)
            count = 0
          if (count == 0)
            break
      //}
    //}

  // ----------------------------------------------------------------------------
  function getHashCode() returns int
    var id = 37
    id *= getItemTypeId()
    id *= m_componentsCount
    for i = 0 to m_componentsCount-1
      id *= m_components[i].itemDefinition.getNewId().moduloInt(17)
      id *= m_components[i].count.moduloInt(17)
    return id

// ============================================================================
public class ItemRecipeBook
  private Vector<ItemRecipe> m_recipes = new Vector<ItemRecipe>()
  private string m_defaultVerb = "Craft"

  // ----------------------------------------------------------------------------
  ondestroy
    for itemRecipe in m_recipes
      destroy itemRecipe
    m_recipes.clear()
    m_recipes = null

  // ----------------------------------------------------------------------------
  function setDefaultVerb(string value)
    m_defaultVerb = value

  // ----------------------------------------------------------------------------
  function addRecipe(itemRecipeDefinition def) returns ItemRecipe
    let itemRecipe = new ItemRecipe(def)
    m_recipes.add(itemRecipe)
    return itemRecipe

  // ----------------------------------------------------------------------------
  function addRecipe(ItemRecipe itemRecipe)
    m_recipes.add(itemRecipe)

  // ----------------------------------------------------------------------------
  function getRecipe(int id) returns ItemRecipe
    for recipe in m_recipes
      if (recipe.getId() == id)
        return recipe
    return null

  // ----------------------------------------------------------------------------
  function getRecipes(int itemTypeId, Vector<ItemRecipe> outRecipes) returns int
    var count = 0
    for recipe in m_recipes
      if (recipe.getItemTypeId() == itemTypeId)
        outRecipes.add(recipe)
        count++
    return count

  // ----------------------------------------------------------------------------
  function compile()
    for recipe in m_recipes
      compileRecipe(recipe)
      
  // --------------------------------------------------------------------------
  private function compileRecipe(ItemRecipe recipe)
    let tooltipBasic = recipe.getTooltipBasic() != null
      ? recipe.getTooltipBasic()
      : m_defaultVerb + " " + recipe.getItemDefinition().getName()

    let itemBuildUnitDef = ItemBuildUnitDefinition.create(recipe.getItemDefinition(), recipe.getItemBuildUnitTypeId(), tooltipBasic)
      ..setGoldCost(recipe.getGoldCost())
      ..setLumberCost(recipe.getLumberCost())
      ..setBuildTime(recipe.getBuildTime())

    let tooltipBuilder = new TooltipBuilder()

    let tooltipExtended = itemBuildUnitDef.getTooltipExtended()

    let componentsItem = tooltipBuilder.addItem(new ItemRecipeComponentsTooltipItem())

    for i = 0 to recipe.getComponentCount()-1
      let comp = recipe.getComponent(i)
      componentsItem.addValue("{0} x{1}".format(comp.itemDefinition.getName(), comp.count.toString()))

    itemBuildUnitDef.setTooltipExtended(tooltipExtended + "|n" + tooltipBuilder.getTooltipExtended())

    new ItemRecipePartialIconAbilityDefinition(recipe.getPartialIconAbilityId())
      ..setTooltipNormal(1, itemBuildUnitDef.getTooltipBasic())
      ..setTooltipNormalExtended(1, itemBuildUnitDef.getTooltipExtended())
      ..setIconNormal(itemBuildUnitDef.getIconGameInterfaceDisabled())

    destroy tooltipBuilder

  // ----------------------------------------------------------------------------
  function iterator() returns VectorIterator<ItemRecipe>
    return m_recipes.iterator()

// ============================================================================
class ItemRecipeComponentsTooltipItem extends TooltipItem
  construct()
    super("Components:")
    setAlwaysPutSubItemsOnNewLine(true)
    setShowItemBullets(true)
    setPrependSpacerLine(true)

// ============================================================================
class ItemRecipePartialIconAbilityDefinition extends AbilityDefinitionCriticalStrikecreep
  // --------------------------------------------------------------------------
  construct(int id)
    super(id)
    presetButtonPosNormal(0, 0)
    presetChancetoCriticalStrike(lvl -> 0.0)
    presetChancetoEvade(lvl -> 0.0)

constant int MAX_COOKING_RECIPE_ABILITY_COUNT = 10

// ============================================================================
public class CookingRecipe extends ItemRecipe
  private int array[MAX_COOKING_RECIPE_ABILITY_COUNT] m_abilityIds
  private int m_abilityIdCount = 0

  // ----------------------------------------------------------------------------
  construct(itemRecipeDefinition def)
    super(def)
    for i = 0 to MAX_COOKING_RECIPE_ABILITY_COUNT-1
      m_abilityIds[i] = 0

  // ----------------------------------------------------------------------------
  function addAbilityId(int abilityId)
    m_abilityIds[m_abilityIdCount] = abilityId
    m_abilityIdCount++

  // ----------------------------------------------------------------------------
  function getAbilityId(int index) returns int
    return m_abilityIds[index]

  // ----------------------------------------------------------------------------
  function getAbilityIdCount() returns int
    return m_abilityIdCount

// ============================================================================
public class CookingRecipeBook extends ItemRecipeBook

  // ----------------------------------------------------------------------------
  override function addRecipe(itemRecipeDefinition def) returns CookingRecipe
    let itemRecipe = new CookingRecipe(def)
    super.addRecipe(itemRecipe)
    return itemRecipe

  // ----------------------------------------------------------------------------
  override function getRecipe(int id) returns CookingRecipe
    return super.getRecipe(id) castTo CookingRecipe

// ============================================================================
public class CraftingComponent extends UnitComponent
  private ItemRecipeBook m_recipeBook = null
  private Event1<ItemRecipe> m_onCraftedItem = null

  // ----------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  ondestroy

    if (m_onCraftedItem != null)
      destroy m_onCraftedItem
      m_onCraftedItem = null

  // ----------------------------------------------------------------------------
  function setRecipeBook(ItemRecipeBook recipeBook)
    if (m_recipeBook != recipeBook)
    //{
      if (m_recipeBook != null)
        clearStockedUnits()
      m_recipeBook = recipeBook
      update()
    //}

  // ----------------------------------------------------------------------------
  function getRecipeBook() returns ItemRecipeBook
    return m_recipeBook 

  // --------------------------------------------------------------------------
  function onCraftedItem() returns IEvent1<ItemRecipe>
    if (m_onCraftedItem == null)
      m_onCraftedItem = new Event1<ItemRecipe>()
    return m_onCraftedItem

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()

    if (not ownerUnit.hasAbility('Asud'))
      ownerUnit.addAbility('Asud')

    update()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()

    clearStockedUnits()

  // ----------------------------------------------------------------------------
  protected function update()

    let ownerUnit = getOwnerUnit()

    if (m_recipeBook == null)
      return

    for recipe in m_recipeBook
    //{
      let count = recipe.countNumberOfCraftableItemsInUnitInventory(ownerUnit)

      let partialIconAbilId = recipe.getPartialIconAbilityId()
      if (count == ITEM_RECIPE_PARTIAL)
        ownerUnit.addAbility(partialIconAbilId)
      else
        ownerUnit.removeAbility(partialIconAbilId)

      if (count > 0)
        AddUnitToStock(ownerUnit, recipe.getItemBuildUnitTypeId(), count, count)
      else
        RemoveUnitFromStock(ownerUnit, recipe.getItemBuildUnitTypeId())
    //}

  // --------------------------------------------------------------------------
  private function clearStockedUnits()
    let ownerUnit = getOwnerUnit()
    for recipe in m_recipeBook
      RemoveUnitFromStock(ownerUnit, recipe.getItemBuildUnitTypeId())

  // --------------------------------------------------------------------------
  protected function onSoldUnit(unit soldUnit)
    for recipe in m_recipeBook
      if (recipe.getItemBuildUnitTypeId() == soldUnit.getTypeId())
        craftItem(recipe)
        return
    Log.warn("Unable to find recipe matching sold unit")   

  // --------------------------------------------------------------------------
  private function craftItem(ItemRecipe recipe)
    let ownerUnit = getOwnerUnit()

    recipe.consumeItems(ownerUnit)
    
    if (m_onCraftedItem != null)
      m_onCraftedItem.call(recipe)
    else
      ownerUnit.addItemById(recipe.getItemTypeId())

// ============================================================================
public function IUnitMetadata.getCraftingComponent() returns CraftingComponent
  return this.getComponent(CraftingComponent.typeId) castTo CraftingComponent

// ============================================================================
public function IUnitMetadata.getOrAddCraftingComponent() returns CraftingComponent
  var component = this.getCraftingComponent()
  if (component == null)
    component = this.addComponent(new CraftingComponent(this)) castTo CraftingComponent
  return component

// ============================================================================
function onUnitPickupItem()
  let manipulatingUnit = GetManipulatingUnit()
  
  let metadata = manipulatingUnit.getMetadata()
  if (metadata == null)
    return
  
  let comp = metadata.getCraftingComponent()
  if (comp != null and comp.getEnabled())
    comp.dispatchAfter(0.0, () -> comp.update())

// ============================================================================
function onUnitSell()
  let sellingUnit = GetSellingUnit()
  let soldUnit = GetSoldUnit()

  let metadata = sellingUnit.getMetadata()
  if (metadata == null)
    return
  
  let comp = metadata.getCraftingComponent()
  if (comp != null and comp.getEnabled())
    comp.onSoldUnit(soldUnit)

// ============================================================================
init

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, function onUnitPickupItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM, function onUnitPickupItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_STACK_ITEM, function onUnitPickupItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL, function onUnitSell)