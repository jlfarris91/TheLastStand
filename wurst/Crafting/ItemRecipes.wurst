package ItemRecipes
import Crafting
import TlsItemDefinition
import HashList
import LinkedList
import ObjectIdGenerator

import Item_Armor
import Item_ManaPotion
import AttackDamageItem
import Item_AttackSpeed
import Item_Food
import OperationsManual

public LinkedList<ItemRecipeBook> g_recipeBooks
public ItemRecipeBook g_forgeRecipeBook
public CookingRecipeBook g_campFireRecipeBook

// ============================================================================
class ItemRecipeObjectDefs
  
  // Forge
  protected static constant itemRecipeDefinition armor2           = itemRecipeDefinition(g_itemDef_armor2,            compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition armor3           = itemRecipeDefinition(g_itemDef_armor3,            compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition manaPot2         = itemRecipeDefinition(g_itemDef_manaPot2,          compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition manaPot3         = itemRecipeDefinition(g_itemDef_manaPot3,          compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition attackSpeed2     = itemRecipeDefinition(g_itemDef_attackSpeed2,      compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition attackSpeed3     = itemRecipeDefinition(g_itemDef_attackSpeed3,      compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition attackDamage2    = itemRecipeDefinition(g_itemDef_attackDamage2,     compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition attackDamage3    = itemRecipeDefinition(g_itemDef_attackDamage3,     compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition attackDamage4    = itemRecipeDefinition(g_itemDef_attackDamage4,     compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition operationManual2 = itemRecipeDefinition(g_itemDef_operationManual2,  compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition operationManual3 = itemRecipeDefinition(g_itemDef_operationManual3,  compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  
  // Camp fire
  protected static constant itemRecipeDefinition cookedMeat       = itemRecipeDefinition(g_itemDef_cookedMeat,      compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition cookedChicken    = itemRecipeDefinition(g_itemDef_cookedChicken,   compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition cookedFrog       = itemRecipeDefinition(g_itemDef_cookedFrog,      compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))
  protected static constant itemRecipeDefinition bleuCheeseSteak  = itemRecipeDefinition(g_itemDef_bleuCheeseSteak, compiletime(UNIT_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()))

// ============================================================================
@compiletime function createRecipes()

  g_recipeBooks = new LinkedList<ItemRecipeBook>()

  g_forgeRecipeBook = new ItemRecipeBook()..setDefaultVerb("Forge")
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.manaPot2)          ..addComponent(g_itemDef_manaPot1, 2)         ..setGoldCost(0)..setLumberCost(0)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.manaPot3)          ..addComponent(g_itemDef_manaPot2, 2)         ..setGoldCost(0)..setLumberCost(0)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.armor2)            ..addComponent(g_itemDef_armor1, 2)           ..setGoldCost(0)..setLumberCost(50)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.armor3)            ..addComponent(g_itemDef_armor2, 2)           ..setGoldCost(1)..setLumberCost(150)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.attackSpeed2)      ..addComponent(g_itemDef_attackSpeed1, 2)     ..setGoldCost(0)..setLumberCost(60)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.attackSpeed3)      ..addComponent(g_itemDef_attackSpeed2, 2)     ..setGoldCost(1)..setLumberCost(160)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.attackDamage2)     ..addComponent(g_itemDef_attackDamage1, 2)    ..setGoldCost(0)..setLumberCost(40)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.attackDamage3)     ..addComponent(g_itemDef_attackDamage2, 2)    ..setGoldCost(1)..setLumberCost(140)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.attackDamage4)     ..addComponent(g_itemDef_attackDamage3, 2)    ..setGoldCost(2)..setLumberCost(340)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.operationManual2)  ..addComponent(g_itemDef_operationManual1, 2) ..setGoldCost(1)..setLumberCost(140)
  g_forgeRecipeBook.addRecipe(ItemRecipeObjectDefs.operationManual3)  ..addComponent(g_itemDef_operationManual2, 2) ..setGoldCost(2)..setLumberCost(240)
  g_forgeRecipeBook.compile()
  g_recipeBooks.add(g_forgeRecipeBook)

  g_campFireRecipeBook = new CookingRecipeBook()..setDefaultVerb("Cook")
  
  g_campFireRecipeBook.addRecipe(ItemRecipeObjectDefs.cookedMeat)
    ..setTooltipBasic("Cook Steak")
    ..addComponent(g_itemDef_rawMeat, 1)
    ..addAbilityId(TlsAbilityIds.campFireRestoreHealth1)
  
  g_campFireRecipeBook.addRecipe(ItemRecipeObjectDefs.cookedChicken)
    ..setTooltipBasic("Cook Chicken")
    ..addComponent(g_itemDef_rawChicken, 1)
    ..addAbilityId(TlsAbilityIds.campFireRestoreHealth1)
  
  g_campFireRecipeBook.addRecipe(ItemRecipeObjectDefs.cookedFrog)
    ..setTooltipBasic("Cook Frog")
    ..addComponent(g_itemDef_frog, 1)
    ..addAbilityId(TlsAbilityIds.campFireRestoreHealth1)
  
  g_campFireRecipeBook.addRecipe(ItemRecipeObjectDefs.bleuCheeseSteak)
    ..setTooltipBasic("Cook Bleu Cheese Steak")
    ..addComponent(g_itemDef_rawMeat, 1)
    ..addComponent(g_itemDef_bleuCheese, 1)
    ..addAbilityId(TlsAbilityIds.campFireRestoreHealth1)
    ..addAbilityId(TlsAbilityIds.campFireAttackBonus1)

  g_campFireRecipeBook.compile()
  g_recipeBooks.add(g_campFireRecipeBook)

// ============================================================================
init
  if (g_forgeRecipeBook == null)
    createRecipes()

// ============================================================================
@test function validateRecipeIds()

  createRecipes()

  let allIds = new HashList<int>()

  for recipeBook in g_recipeBooks
    for recipe in recipeBook
      let hashCode = recipe.getHashCode()
      Log.info(recipe.getItemDefinition().getName() + ": " + hashCode.toString())
      allIds.has(hashCode).assertFalse()
      hashCode.assertEquals(recipe.getHashCode())
      allIds.add(hashCode)