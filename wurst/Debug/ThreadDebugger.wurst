package ThreadDebugger
import Frame
import ProjectConstants
import DebuggerDialog
import TabPanel
import Jobs

// ============================================================================
class ThreadDebugger extends DebuggerRealtimeUpdateFrame
  private int m_lastThreadIdGen
  private TabPanel m_tabPanel

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "ThreadDebugger", GAME_UI, "", 0))

    m_tabPanel = new TabPanel()
    addChild(m_tabPanel)

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real _)

    if (Thread.getStaticThreadIdGen() != m_lastThreadIdGen)
      rebuildTabPanel()

  // --------------------------------------------------------------------------
  private function rebuildTabPanel()

    m_lastThreadIdGen = Thread.getStaticThreadIdGen()

    let prevSelectedContentId = m_tabPanel.getSelectedContentId()
    m_tabPanel.removeAllContent()

    for thread in Thread.getAllThreads()
      m_tabPanel.addContent(thread.getName(), new ThreadInfoFrame(thread))

    if (m_tabPanel.getContent(prevSelectedContentId) != null)
      m_tabPanel.setSelectedContentId(prevSelectedContentId)

// ============================================================================
public class ThreadInfoFrame extends DebuggerRealtimeUpdateFrame
  private Thread m_thread

  // --------------------------------------------------------------------------
  construct(Thread thread)
    super(createFrame("TEXTAREA", "TIF", GAME_UI, "", 0))
    m_thread = thread

  // --------------------------------------------------------------------------
  override protected function realtimeUpdate(real _dt)

    let contentFrame = getFrameHandle()

    BlzFrameSetText(contentFrame, "Status: q:{0} sw:{1} w:{2} p:{3} c:{4} t:{5}".format(
      m_thread.getRemainingWorkCount().toString(),
      m_thread.getTotalSubWorkCompletedCount().toString(),
      m_thread.getCompletedJobsCount().toString(),
      m_thread.getProcessedCount().toString(),
      m_thread.getCanceledWorkCount().toString(),
      m_thread.getTimedOutWorkCount().toString()))
    
    let readQueue = m_thread.getReadQueue()
    contentFrame.addText("Read queue: " + readQueue.size().toString())
    
    for job in readQueue
      if (job != null)
        let requeuedCount = job.getRequeueCount()
        contentFrame.addText(" > " + job.getDebuggerStateString() + (requeuedCount > 0 ? " [reqd:{0}]".format(requeuedCount.toString()) : ""))
      else
        contentFrame.addText(" > NULL")
    
    contentFrame.addText("")

    let writeQueue = m_thread.getReadQueue()
    contentFrame.addText("Write queue: " + writeQueue.size().toString())
    
    for job in writeQueue
      if (job != null)
        let requeuedCount = job.getRequeueCount()
        contentFrame.addText(" > " + job.getDebuggerStateString() + (requeuedCount > 0 ? " [reqd:{0}]".format(requeuedCount.toString()) : ""))
      else
        contentFrame.addText(" > NULL")


// ============================================================================
init
  if (DEV_ENVIRONMENT)
    DebuggerDialog.registerFrame("THRD", () -> new ThreadDebugger())