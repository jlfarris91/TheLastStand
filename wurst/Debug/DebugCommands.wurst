package DebugCommands
import ChatCommands
import ClosureTimers
import Godlike
import ErrorHandling
import GameInstance
import Wave
import GroupUtils
import MainItemLibrary
import UnitMetadata
import HumanPlayerComponent
import WeatherManager
import Time
import Reputation
import PlayerExtensions
import UnitPropertiesComponent
import UnitRecycler
import ObjectIds
import HumanPlayers
import UnitExtensions
import ProjectConstants
import PowerSourceComponent
import PoweredComponent
import Survivors
import DevChatCommandHandler
import LinkedList
import Action
import HashList
import SyncSimpleExtensions
import SpawnWave
import Runnable
import UndeadTargetingComponent
import GroupExtensions
import BuildingUndeadTargetComponent
import GridCachedSpawnManager
import PlayerSpawnPointProviders
import DebuggerDialog

constant string COMMAND_GODLIKE = "godlike"
constant string COMMAND_SPAWNONE = "spawnone"
constant string COMMAND_DAY = "day"
constant string COMMAND_NIGHT = "night"
constant string COMMAND_SKIP_TO_DAY = "skipToDay"
constant string COMMAND_SKIP_TO_NIGHT = "skipToNight"
constant string COMMAND_SEE = "see"
constant string COMMAND_KILL_SELECTED_UNITS = "kill"
constant string COMMAND_REMOVE_SELECTED_UNITS = "remove"
constant string COMMAND_MOVE_SELECTED_UNITS = "move"
constant string COMMAND_CREATE_ITEM = "item"
constant string COMMAND_CREATE_UNIT = "unit"
constant string COMMAND_ADD_MATS = "mats"
constant string COMMAND_SHOW_WAVES = "waves"
constant string COMMAND_LOG_LEVEL = "loglvl"
constant string COMMAND_WEATHER = "weather"
constant string COMMAND_CLEARWEATHER = "clearweather"
constant string COMMAND_TOGGLEWEATHERUPDATE = "toggleweatherupdate"
constant string COMMAND_SETFOG = "setfog"
constant string COMMAND_RESETFOG = "resetfog"
constant string COMMAND_SETLEVEL = "setlevel"
constant string COMMAND_RESETLEVEL = "resetlevel"
constant string COMMAND_TODSCALE = "timescale"
constant string COMMAND_TOD = "time"
constant string COMMAND_TOGGLE_GRACE_PERIOD = "graceperiod"
constant string COMMAND_REPUTATION = "rep"
constant string COMMAND_SETREPUTATION = "setrep"
constant string COMMAND_UPDATEREPUTATION = "updaterep"
constant string COMMAND_SPAWNALLITEMS = "spawnitems"
constant string COMMAND_UNITPROPS = "showprops"
constant string COMMAND_SETUNITPROP = "setprop"
constant string COMMAND_CLEARUNITPROP = "clearprop"
constant string COMMAND_SETHEALTH = "sethp"
constant string COMMAND_SETMANA = "setmana"
constant string COMMAND_PAUSE = "pause"
constant string COMMAND_RESUME = "resume"
constant string COMMAND_RECYCLERSTATS = "recycler"
constant string COMMAND_ATTACKSENABLED = "setAttacksEnabled"
constant string COMMAND_CHECKPATH = "checkpath"
constant string COMMAND_SPAWNSURVIVOR = "spawnSurvivor"
constant string COMMAND_SELECTALL = "selectAll"
constant string COMMAND_LINK = "link"
constant string COMMAND_UNLINK = "unlink"
constant string COMMAND_GAMESPEED = "gameSpeed"
constant string COMMAND_KILLALL = "killAll"
constant string COMMAND_SPAWNPOINTS = "spawnPoints"
constant string COMMAND_POS = "pos"
constant string COMMAND_USEITEM = "useItem"
constant string COMMAND_WORKINGGROUP = "workingGroup"
constant string COMMAND_TYPE = "type"
constant string COMMAND_SELECTNONE = "selectNone"
constant string COMMAND_LOGGING = "logging"
constant string COMMAND_ISSUE_ORDER = "order"
constant string COMMAND_DEBUGGER = "debugger"

DevChatCommandHandler g_commandHandler
fogmodifier array g_seeVisionModifiers
group g_workingGroup = CreateGroup()

// ============================================================================
function getFirstWorkingGroupUnit(player p) returns unit
  g_workingGroup.refresh()
  if (not g_workingGroup.isEmpty())
    for u in g_workingGroup
      return u
  return p.getFirstSelectedUnit()

// ============================================================================
function getWorkingGroupUnits(player p) returns LinkedList<unit>
  let workingUnits = new LinkedList<unit>()
  g_workingGroup.refresh()
  if (not g_workingGroup.isEmpty())
    for u in g_workingGroup
      workingUnits.add(u)
    return workingUnits
  return p.getSelectedUnits()

// ============================================================================
function forEachWorkingGroupUnit(player p, Action1<unit> action) returns int
  action.acquire()
  let workingUnits = getWorkingGroupUnits(p)
  if (workingUnits.isEmpty())
    chatCommandPrintToPlayer(p, "Must have at least one unit selected or in working group")
    return 0
  var count = 0
  for u in workingUnits
    action.call(u)
    count++
  destroy workingUnits
  action.release()
  return count

// ============================================================================
function godlike()
  let commandPlayer = getChatCommandPlayer()
  if (isGodModeEnabled())
    disableGodMode()
    chatCommandPrintToPlayer(commandPlayer, "Disabled God Mode")
  else
    chatCommandPrintToPlayer(commandPlayer, "Enabled God Mode")
    enableGodMode()

// ============================================================================
function spawnone()
  let command = getChatCommand()

  let playerId = command.getArgument(0).getInt()
  let dayNightWave = command.getArgument(1).getString().toLowerCase()
  let waveId = command.getArgument(2).getInt()

  var spawnWaveId = -1
  let spawnWaveIdArg = command.getArgument(3)
  if (spawnWaveIdArg != null)
    spawnWaveId = spawnWaveIdArg.getInt()

  let p = players[playerId]
  if (p == null)
    error("Found no player with id " + playerId.toString())

  let playerWaves = g_GameInstance.getPlayerWaves(p)
  if (playerWaves == null)
    error("Player waves is null for player " + p.getName())
    return

  Wave wave = null

  if (dayNightWave == "day")
    wave = playerWaves.getDayWaves().getLatestWave(waveId)    
  if dayNightWave == "night"
    wave = playerWaves.getNightWaves().getLatestWave(waveId)

  if (wave == null)
    error("Found no wave at index " + waveId.toString())
    return

  let spawnWaves = wave.getSpawnWaves()
  
  if (spawnWaveId != -1)
  // {
    let spawnWave = spawnWaves.get(spawnWaveId)

    if (spawnWave == null)
      error("Found no spawn wave at index " + spawnWaveId.toString())
      return

    spawnWave.activate(true)
    chatCommandPrintToPlayer(p, "Activated {0} {1} spawn wave {2} once".format(dayNightWave, waveId.toString(), spawnWave.getDefinition().getName()))
    return
  // }

  if (spawnWaves.isEmpty())
    error("Wave {0} has no registered spawn waves ".format(waveId.toString()))
    return

  for spawnWave in spawnWaves
    spawnWave.activate(true)
    chatCommandPrintToPlayer(p, "Activated {0} {1} spawn wave {2} once".format(dayNightWave, waveId.toString(), spawnWave.getDefinition().getName()))

// ============================================================================
function startNextDay()
  g_GameInstance.startNextDay()

// ============================================================================
function startNextNight()
  g_GameInstance.startNextNight()

// ============================================================================
function togglePlayerVisibility(player p, bool wasEnabled)
  let currentVision = g_seeVisionModifiers[p.getId()]
  if (wasEnabled and currentVision == null)
    g_seeVisionModifiers[p.getId()] = createVision(p, GetPlayableMapRect(), false)..start()
  else if (not wasEnabled and currentVision != null)
    currentVision.destr()
    g_seeVisionModifiers[p.getId()] = null

// ============================================================================
function turnOnMapVisibility()
  let commandPlayer = getChatCommandPlayer()
  let targetPlayerArg = getChatCommand().getArgument(0)

  var targetPlayer = commandPlayer
  if (targetPlayerArg != null)
    let targetPlayerStr = targetPlayerArg.getString()
    if (targetPlayerStr.toLowerCase() == "all")
      targetPlayer = null
    else
      let targetPlayerId = targetPlayerStr.toInt()
      if (players[targetPlayerId] != null)
        targetPlayer = players[targetPlayerId]

  var wasEnabledForAnyPlayer = false

  if (targetPlayer == null)
  //{
    for p in g_PlayingHumanPlayers
      if (g_seeVisionModifiers[p.getId()] != null)
        wasEnabledForAnyPlayer = true
        break
    for p in g_PlayingHumanPlayers
      togglePlayerVisibility(p, not wasEnabledForAnyPlayer)
    chatCommandPrintToPlayer(commandPlayer, wasEnabledForAnyPlayer ? "Enabled vision for all players" : "Disabled vision for all players")
  //}
  else
  //{
    wasEnabledForAnyPlayer = g_seeVisionModifiers[targetPlayer.getId()] != null
    togglePlayerVisibility(targetPlayer, not wasEnabledForAnyPlayer)
    chatCommandPrintToPlayer(commandPlayer, wasEnabledForAnyPlayer ? "Enabled vision for " + targetPlayer.getName() : "Disabled vision for " + targetPlayer.getName())
  //}
  
  chatCommandPrintToPlayer(commandPlayer, wasEnabledForAnyPlayer ? "Enabled vision for all players" : "Disabled vision for all players")

// ============================================================================
function killSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  let unitCount = forEachWorkingGroupUnit(commandPlayer, u -> u.kill())
  chatCommandPrintToPlayer(commandPlayer, "Killed {0} units".format(unitCount.toString()))

// ============================================================================
function removeSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  let unitCount = forEachWorkingGroupUnit(commandPlayer, u -> u.remove())
  chatCommandPrintToPlayer(commandPlayer, "Removed {0} units".format(unitCount.toString()))

// ============================================================================
function moveSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  let command = getChatCommand()
  let xArg = command.getArgument(0)
  let yArg = command.getArgument(1)

  if (xArg == null or yArg == null)
  //{
    let cameraPos = vec2(GetCameraTargetPositionX(), GetCameraTargetPositionY())

    cameraPos.sync(commandPlayer) cameraPosSyncd ->
      let unitCount1 = forEachWorkingGroupUnit(commandPlayer, u -> u.setXY(cameraPosSyncd))
      chatCommandPrintToPlayer(commandPlayer, "Moved {0} units".format(unitCount1.toString()))

    return
  //}

  let x = xArg.getReal()
  let y = yArg.getReal()

  let unitCount = forEachWorkingGroupUnit(commandPlayer, u -> u.setXY(vec2(x, y)))
  chatCommandPrintToPlayer(commandPlayer, "Moved {0} units".format(unitCount.toString()))

// ============================================================================
function createItemForSelectedUnit()

  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let itemId = command.getArgument(0).getRawCode()

  var count = 1
  let countArg = command.getArgument(1)
  if (countArg != null)
    count = countArg.getInt()
  
  forEachWorkingGroupUnit(commandPlayer) u ->
    for i = 1 to count
      let itm = g_MainItemLibrary.createItem(itemId, u.getPos())
      if (itm != null)
        chatCommandPrintToPlayer(commandPlayer, "Created " + count.toString() + " item(s) of type " + itm.getName())  

// ============================================================================
function createUnitAtCameraPos()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let unitId = command.getArgument(1).getRawCode()
  let count = command.getArgument(2).getInt()

  let p = players[playerId]
  if (p == null)
    error("Player id argument is invalid")
    return

  let cameraPos = vec2(GetCameraTargetPositionX(), GetCameraTargetPositionY())
  cameraPos.sync(commandPlayer) cameraPosSyncd ->
  //{
    string unitName = null
    for i = 1 to count
      let u = createUnitTLS(p, unitId, cameraPosSyncd.x, cameraPosSyncd.y, GetRandomDirectionDeg())
      if (u != null and unitName == null)
        unitName = u.getName()
    
    if (unitName != null)
      chatCommandPrintToPlayer(commandPlayer, "Created " + I2S(count) + " " + unitName)
  //}

// ============================================================================
function addMats()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let matsCount = command.getArgument(1).getInt()

  let p = players[playerId]
  if (p == null)
    error("Player id argument is invalid")
    return

  let playerMetadata = p.getHumanPlayerComponent()
  if (playerMetadata == null)
    error("Can't give materials to player \"{0}\"".format(p.getName()))
    return

  playerMetadata.getOwnerPlayer().addLumber(matsCount)
  chatCommandPrintToPlayer(commandPlayer, "Gave {0} materials to {1}".format(I2S(matsCount), p.getNameColored()))

// ============================================================================
function skipToDay()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let day = command.getArgument(0).getInt()
  chatCommandPrintToPlayer(commandPlayer, "Skipping to day {0}...".format(I2S(day)))
  g_GameInstance.skipToDay(day)
    
// ============================================================================
function skipToNight()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let night = command.getArgument(0).getInt()
  chatCommandPrintToPlayer(commandPlayer, "Skipping to night {0}...".format(I2S(night)))
  g_GameInstance.skipToNight(night)

// ============================================================================
function setLogLevel()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let levelArg = command.getArgument(0).getString().toLowerCase()

  switch (levelArg)
    case "trace"
      DEBUG_LEVEL = Loglevel.TRACE
    case "debug"
      DEBUG_LEVEL = Loglevel.DEBUG
    case "info"
      DEBUG_LEVEL = Loglevel.INFO
    case "warning"
      DEBUG_LEVEL = Loglevel.WARNING
    case "error"
      DEBUG_LEVEL = Loglevel.ERROR
    default
      error("Couldn't parse log level string from argument 0 \"{0}\"".format(levelArg)) 

  chatCommandPrintToPlayer(commandPlayer, "Set log level to " + levelArg)

// ============================================================================
function setWeatherEffect()
  let command = getChatCommand()
  let effectName = command.getArgument(0).getString()

  switch (effectName)
    case "fog"
      Weather.setWeatherEffect(WeatherEffectType.FOG)
    case "lightrain"
      Weather.setWeatherEffect(WeatherEffectType.RAIN_LIGHT)
    case "heavyrain"
      Weather.setWeatherEffect(WeatherEffectType.RAIN_HEAVY)
    case "none"
      Weather.setWeatherEffect(WeatherEffectType.NONE)

// ============================================================================
function clearWeatherEffects()
  Weather.clearWeatherEffects()

// ============================================================================
function setTerrainFog()
  let command = getChatCommand()
  let style = command.getArgument(0).getInt()
  let zstart = command.getArgument(1).getReal()
  let zend = command.getArgument(2).getReal()
  let density = command.getArgument(3).getReal()
  let r = command.getArgument(4).getReal()
  let g = command.getArgument(5).getReal()
  let b = command.getArgument(6).getReal()

  SetTerrainFogEx(style, zstart, zend, density, r, g, b)

// ============================================================================
function resetTerrainFog()
  ResetTerrainFog()

// ============================================================================
function toggleWeatherUpdate()
  let commandPlayer = getChatCommandPlayer()
  Weather.toggleWeatherUpdate()
  chatCommandPrintToPlayer(commandPlayer, "Weather update: " + Weather.isUpdatingFog().toString())

// ============================================================================
function setLevel()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let level = command.getArgument(0).getInt()
  
  let unitCount = forEachWorkingGroupUnit(commandPlayer) u ->
    u.resetLevelAndXP()
    u.setLevel(level, false)

  chatCommandPrintToPlayer(commandPlayer, "Set level of {0} units to level {1}".format(unitCount.toString(), level.toString()))

// ============================================================================
function resetLevel()
  let commandPlayer = getChatCommandPlayer()
  
  let unitCount = forEachWorkingGroupUnit(commandPlayer) u ->
    u.resetLevelAndXP()

  chatCommandPrintToPlayer(commandPlayer, "Reset level of {0} units to level 1".format(unitCount.toString()))

// ============================================================================
function todScale()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let speedArg = command.getArgument(0)

  if (speedArg == null)
    chatCommandPrintToPlayer(commandPlayer, "Time of Day Scale is {0}%".format(GetTimeOfDayScalePercentBJ().toString()))
    return

  let speed = speedArg.getReal()  
  g_GameInstance.setTimeOfDayScalePercent(speed)
  chatCommandPrintToPlayer(commandPlayer, "Time of Day Scale set to {0}%".format(GetTimeOfDayScalePercentBJ().toString()))

// ============================================================================
function timeOfDay()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let timeOfDayArg = command.getArgument(0)

  if (timeOfDayArg == null)
    chatCommandPrintToPlayer(commandPlayer, "Time of Day is {0}".format(GetTimeOfDay().toString()))
    return

  let timeOfDay = timeOfDayArg.getReal()
  SetTimeOfDay(timeOfDay)
  chatCommandPrintToPlayer(commandPlayer, "Time of Day set to {0}".format(GetTimeOfDay().toString()))

// ============================================================================
function toggleGracePeriod()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let valueArg = command.getArgument(0)

  if (valueArg != null)
    let value = valueArg.getBool()
    g_GameInstance.setUpdateGracePeriod(false)
    g_GameInstance.setGracePeriodActive(value)

  chatCommandPrintToPlayer(commandPlayer, "Grace period is {0}".format(g_GameInstance.isGracePeriodActive() ? "active" : "inactive"))

// ============================================================================
function printReputation()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  
  let playerId = command.getArgument(0).getInt()
  let _player = players[playerId]
  if (_player == null)
    error("Player id argument is invalid")
    return

  let playerRep = ReputationUtility.getPlayerReputation(_player)

  chatCommandPrintToPlayer(commandPlayer, "Total Rep: {0}".format(playerRep.getTotalReputation01().toString()))
  chatCommandPrintToPlayer(commandPlayer, "Shelter: {0} Defense: {1} Power: {2} Tech: {3}".format(
    playerRep.getReputation(ReputationType.Shelter).toString(),
    playerRep.getReputation(ReputationType.Defense).toString(),
    playerRep.getReputation(ReputationType.Power).toString(),
    playerRep.getReputation(ReputationType.Tech).toString()))

// ============================================================================
function setReputation()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let repTypeStr = command.getArgument(1).getString().toLowerCase()
  let repValue = command.getArgument(2).getInt()
  
  let _player = players[playerId]
  if (_player == null)
    error("Player id argument is invalid")
    return

  let playerRep = ReputationUtility.getPlayerReputation(_player)
  
  var repType = ReputationType.Shelter

  switch (repTypeStr)
    case "Shelter"
      repType = ReputationType.Shelter
    case "Defense"
      repType = ReputationType.Defense
    case "Power"
      repType = ReputationType.Power
    case "Tech"
      repType = ReputationType.Tech

  playerRep.setReputation(repType, repValue)

  chatCommandPrintToPlayer(commandPlayer, "Set player {0} {1} rep to {2}".format(
    _player.getName(),
    repTypeStr,
    repValue.toString()))

// ============================================================================
function updateReputation()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  
  let _player = players[playerId]
  if (_player == null)
    error("Player id argument is invalid")
    return

  let playerRep = ReputationUtility.getPlayerReputation(_player)
  playerRep.update()

  chatCommandPrintToPlayer(commandPlayer, "Updated player {0} reputation".format(_player.getName()))

  chatCommandPrintToPlayer(commandPlayer, "Total Rep: {0}".format(playerRep.getTotalReputation01().toString()))
  chatCommandPrintToPlayer(commandPlayer, "Shelter: {0} Defense: {1} Power: {2} Tech: {3}".format(
    playerRep.getReputation(ReputationType.Shelter).toString(),
    playerRep.getReputation(ReputationType.Defense).toString(),
    playerRep.getReputation(ReputationType.Power).toString(),
    playerRep.getReputation(ReputationType.Tech).toString()))

// ============================================================================
function spawnAllItems()
  let commandPlayer = getChatCommandPlayer()

  let g = getGroup()
  g.enumUnitsSelected(commandPlayer, null)
  if (g.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "Must selected a unit to give the items to")
    g.release()
    return

  let selectedUnit = g.getUnitAt(0)
  g.release()

  let pos = selectedUnit.getPos()

  for commonItem in g_MainItemLibrary.commonSet
    let itm = g_MainItemLibrary.commonSet.createItem(commonItem.id, pos)
    chatCommandPrintToPlayer(commandPlayer, "Created common item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

  for rareItem in g_MainItemLibrary.rareSet
    let itm = g_MainItemLibrary.rareSet.createItem(rareItem.id, pos)
    chatCommandPrintToPlayer(commandPlayer, "Created rare item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

  for epicItem in g_MainItemLibrary.epicSet
    let itm = g_MainItemLibrary.epicSet.createItem(epicItem.id, pos)
    chatCommandPrintToPlayer(commandPlayer, "Created epic item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

  for legendaryItem in g_MainItemLibrary.legendarySet
    let itm = g_MainItemLibrary.legendarySet.createItem(legendaryItem.id, pos)
    chatCommandPrintToPlayer(commandPlayer, "Created legendary item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

// ============================================================================
function showSelectedUnitStats()
  let commandPlayer = getChatCommandPlayer()

  let selectedUnit = getFirstWorkingGroupUnit(commandPlayer)
  if (selectedUnit == null)
    chatCommandPrintToPlayer(commandPlayer, "Must have a unit selected")
    return

  let metadata = selectedUnit.getMetadata()
  if (metadata == null)
    chatCommandPrintToPlayer(commandPlayer, "Selected unit does not have metadata")
    return

  let comp = metadata.getUnitPropertiesComponent()
  if (comp == null)
    chatCommandPrintToPlayer(commandPlayer, "Unit does not have properties component")
    return

  comp.printDebug((message) -> chatCommandPrintToPlayer(commandPlayer, message))

// ============================================================================
function setSelectedUnitProperty()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let propName = command.getArgument(0).getString()
  let op = command.getArgument(1).getString()
  let value = command.getArgument(2).getReal()
  let durationArg = command.getArgument(3)

  let selectedUnits = getWorkingGroupUnits(commandPlayer)
  if (selectedUnits.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "Must have at least one unit selected")
    destroy selectedUnits
    return

  let unitProp = UnitProperties.getPropertyByShortName(propName)
  if (unitProp == UnitProperty.__COUNT)
    chatCommandPrintToPlayer(commandPlayer, "Could not find unit property with name " + propName + ". Try instead: ")
    for i = 0 to UnitProperties.count - 1
      chatCommandPrintToPlayer(commandPlayer, UnitProperties.getPropertyShortName(i castTo UnitProperty))
    return

  let duration = durationArg != null ? durationArg.getReal() : 0.0

  for u in selectedUnits
  //{
    let metadata = u.getMetadata()
    if (metadata != null)
      let comp = metadata.getOrAddUnitPropertiesComponent()
      if (comp != null)
        let smartValue = comp.getProperty(unitProp)

        switch (op)
          case "base"
            smartValue.affectBase(value, duration)
          case "scale"
            smartValue.affectScale(value, duration)
          case "add"
            smartValue.affectAdd(value, duration)
          case "sub"
            smartValue.affectSub(value, duration)

        comp.printDebug((message) -> chatCommandPrintToPlayer(commandPlayer, message))
  //}

  destroy selectedUnits

// ============================================================================
function clearSelectedUnitProperty()
  let commandPlayer = getChatCommandPlayer()

  let selectedUnits = getWorkingGroupUnits(commandPlayer)
  if (selectedUnits.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "Must have at least one unit selected")
    destroy selectedUnits
    return
  
  for u in selectedUnits
  //{
    let metadata = u.getMetadata()
    if (metadata != null)
      let comp = metadata.getOrAddUnitPropertiesComponent()
      if (comp != null)
      
        for i = 0 to UnitProperties.count - 1
          let prop = i castTo UnitProperty
          if (comp.hasProperty(prop))
            comp.getProperty(prop).clearAffectors()

        comp.printDebug((message) -> chatCommandPrintToPlayer(commandPlayer, message))
  //}

  destroy selectedUnits

// ============================================================================
function setSelectedUnitHealth()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let value = command.getArgument(0).getReal()
  forEachWorkingGroupUnit(commandPlayer, u -> u.setHP(value))
  chatCommandPrintToPlayer(commandPlayer, "Set unit health to {0}".format(value.toString()))

// ============================================================================
function setSelectedUnitMana()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let value = command.getArgument(0).getReal()
  forEachWorkingGroupUnit(commandPlayer, u -> u.setMana(value))
  chatCommandPrintToPlayer(commandPlayer, "Set unit mana to {0}".format(value.toString()))

// ============================================================================
function pauseSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  forEachWorkingGroupUnit(commandPlayer, u -> u.pause())
  chatCommandPrintToPlayer(commandPlayer, "Paused unit(s)")

// ============================================================================
function resumeSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  forEachWorkingGroupUnit(commandPlayer, u -> u.unpause())
  chatCommandPrintToPlayer(commandPlayer, "Resumed unit(s)")

// ============================================================================
function showRecyclerStats()
  let commandPlayer = getChatCommandPlayer()

  commandPlayer.forEachSelectedUnit() (unit arg) ->
    arg.unpause()

  chatCommandPrintToPlayer(commandPlayer, "===== UnitRecycler =====")

  for unitId in g_unitIdToUnitRecyclerMap
    let recycler = g_unitIdToUnitRecyclerMap.get(unitId)
    if (recycler != null)
      let unitName = UnitId2String(unitId)
      chatCommandPrintToPlayer(commandPlayer, "{0} ({1}) : {2} active {3} inactive".format(unitName, unitId.toRawCode(), recycler.getActiveCount().toString(), recycler.getInactiveCount().toString()))

// ============================================================================
function setAttacksEnabled()
  let commandPlayer = getChatCommandPlayer()
  let attacksEnabled = getChatCommand().getArgument(0).getInt()

  forEachWorkingGroupUnit(commandPlayer) (unit _unit) ->
    _unit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, attacksEnabled == 1 or attacksEnabled == 3)
    _unit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 1, attacksEnabled == 2 or attacksEnabled == 3)

// ============================================================================
function linkSelectedUnits()
  let commandPlayer = getChatCommandPlayer()

  PowerSourceComponent source = null
  PowerSourceComponent backup = null

  let selectedUnits = commandPlayer.getSelectedUnits()

  for u in selectedUnits
    let metadata = u.getMetadata()
    if (metadata != null)
      let sourceComp = metadata.getPowerSourceComponent()
      let consumerComp = metadata.getPoweredComponent()
      if (sourceComp != null)
        if (consumerComp == null)
          source = sourceComp
        else
          backup = sourceComp

  if (source == null)
    source = backup

  if (source == null)
    chatCommandPrintToPlayer(commandPlayer, "No power source selected")
    destroy selectedUnits
    return

  var consumerCount = 0

  for u in selectedUnits
    let metadata = u.getMetadata()
    if (metadata != null)
      let consumerComp = metadata.getPoweredComponent()
      if (consumerComp != null and source.getOwnerUnit() != u)
        consumerComp.link(source)
        source.tryLink(consumerComp)
        consumerCount++

  if (consumerCount == 0)
    chatCommandPrintToPlayer(commandPlayer, "No power consumers selected")
    destroy selectedUnits
    return

  chatCommandPrintToPlayer(commandPlayer, "Linked " + consumerCount.toString() + " consumer(s) to source " + source.getOwnerUnit().getName())
  destroy selectedUnits

// ============================================================================
function unlinkSelectedUnits()
  let commandPlayer = getChatCommandPlayer()

  let selectedUnits = commandPlayer.getSelectedUnits()

  var consumerCount = 0

  for u in selectedUnits
    let metadata = u.getMetadata()
    if (metadata != null)
      let comp = metadata.getPoweredComponent()
      if (comp != null)
        let source = comp.getPowerSource()
        if (source != null)
          source.unlink(comp)
          comp.unlink()
        consumerCount++

  if (consumerCount == 0)
    chatCommandPrintToPlayer(commandPlayer, "No power consumers selected")
    destroy selectedUnits
    return

  chatCommandPrintToPlayer(commandPlayer, "Unlinked " + consumerCount.toString() + " consumer(s)")
  destroy selectedUnits

// ============================================================================
function setGameSpeed()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let value = command.getArgument(0).getReal()

  g_GameInstance.setGameSpeed(value)

  chatCommandPrintToPlayer(commandPlayer, "Set the game speed to " + value.toString() + "x")

// ============================================================================
function checkPath()
  let commandPlayer = getChatCommandPlayer()
  let targetPlayerId = getChatCommand().getArgument(0).getInt()

  let targetPlayer = players[targetPlayerId]
  if (targetPlayer == null or not targetPlayer.isPlayingHumanPlayer())
    chatCommandPrintToPlayer(commandPlayer, "PLAYER must be the id of a playing human player")
    return

  BuildingUndeadTargetComponent.runPathCheckersForAllStructures(targetPlayer)
  chatCommandPrintToPlayer(commandPlayer, "Starting path check for player " + targetPlayer.getName())

// ============================================================================
function spawnSurvivor()
  let commandPlayer = getChatCommandPlayer()
  let targetPlayerId = getChatCommand().getArgument(0).getInt()
  let count = getChatCommand().getArgument(1).getInt()
  let forceArg = getChatCommand().getArgument(2)

  let targetPlayer = players[targetPlayerId]
  if (targetPlayer == null or not targetPlayer.isPlayingHumanPlayer())
    chatCommandPrintToPlayer(commandPlayer, "PLAYER must be the id of a playing human player")
    return

  var forceOp = false
  if (forceArg != null)
    forceOp = forceArg.getBool()

  if (forceOp)
    for i = 0 to count - 1
      SurvivorUtility.spawnSurvivorUnitForPlayer(targetPlayer)
  else
    for i = 0 to count - 1
      SurvivorUtility.trySpawnSurvivorForPlayer(targetPlayer)

// ============================================================================
function selectAll()
  let commandPlayer = getChatCommandPlayer()
  let unitType = getChatCommand().getArgument(0).getRawCode()

  var count = 0
  let temp = getGroup()

  temp.enumUnitsOfType(unitType, null)
  if (temp.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "ERROR: Unknown unit type {0} ({1})".format(UnitId2String(unitType), unitType.toString()))
  else
    for u in temp
      commandPlayer.select(u)
      count++

  temp.release()

  if (count > 0)
    chatCommandPrintToPlayer(commandPlayer, "Selected {0} {1}".format(count.toString(), UnitId2String(unitType)))
  else
    chatCommandPrintToPlayer(commandPlayer, "No {0} could be selected".format(UnitId2String(unitType)))

// ============================================================================
function killAll()
  let commandPlayer = getChatCommandPlayer()
  let unitType = getChatCommand().getArgument(0).getRawCode()

  var count = 0
  let temp = getGroup()

  temp.enumUnitsOfType(unitType, null)
  if (temp.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "ERROR: Unknown unit type {0} ({1})".format(UnitId2String(unitType), unitType.toString()))
  else
    for u in temp
      if (u.isAlive())
        u.kill()
        count++

  temp.release()

  if (count > 0)
    chatCommandPrintToPlayer(commandPlayer, "Killed {0} {1}".format(count.toString(), UnitId2String(unitType)))
  else
    chatCommandPrintToPlayer(commandPlayer, "No {0} alive to kill".format(UnitId2String(unitType)))

// ============================================================================
function spawnPoints()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let spawnerTypeArg = command.getArgument(1)
  let operationArg = command.getArgument(2)

  let targetPlayer = players[playerId]
  if (targetPlayer == null or not targetPlayer.isPlayingHumanPlayer())
    chatCommandPrintToPlayer(commandPlayer, "Player must be a playing human player")
    return

  if (spawnerTypeArg == null)
    return

  let spawnerType = spawnerTypeArg.getString()
  GridCachedSpawnManager spawnManager

  switch (spawnerType)
    case "friendly"
      spawnManager = getCachedFriendlySpawnPointProvider(targetPlayer) castTo GridCachedSpawnManager
    case "hostile"
      spawnManager = getCachedHostileSpawnPointProvider(targetPlayer) castTo GridCachedSpawnManager
    default
      chatCommandPrintToPlayer(commandPlayer, "Unknown spawn manager type")
      return

  if (operationArg == null)
    spawnManager.setShowDebug(not spawnManager.getShowDebug())
    chatCommandPrintToPlayer(commandPlayer, (spawnManager.getShowDebug() ? "Showing {0} spawn points" : "Hiding {0} spawn points").format(spawnerType))
    return

  let operation = operationArg.getString()

  switch (operation)    
    case "invalidate"
      spawnManager.invalidateSpawnPoints()
      chatCommandPrintToPlayer(commandPlayer, "Invalidating all {0} spawn points".format(spawnerType))

    default
      chatCommandPrintToPlayer(commandPlayer, "Unknown operation " + operation)
      return

// ============================================================================
function pos()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let xArg = command.getArgument(0)
  let yArg = command.getArgument(1)

  let selectedUnits = getWorkingGroupUnits(commandPlayer)
  if (selectedUnits.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "Must have at least one unit selected or in working group")
  else if (xArg == null or yArg == null)
  //{
    var average = ZERO2
    var count = 0

    for u in selectedUnits
      average += u.getPos()
      count++

    chatCommandPrintToPlayer(commandPlayer, "Position: " + (average / count.toReal()).toString())
  //}
  else
  //{
    let x = xArg.getReal()
    let y = yArg.getReal()
    var count = 0
    for u in selectedUnits
      u.setPos(x, y)
      count++
    chatCommandPrintToPlayer(commandPlayer, "Move {0} unit(s) to ({1}, {2})".format(count.toString(), x.toString(), y.toString()))
  //}

  destroy selectedUnits

// ============================================================================
function useItem()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let itemOrSlotId = command.getArgument(0).getString()
  let targetArg = command.getArgument(1)
  let xArg = command.getArgument(2)
  let yArg = command.getArgument(3)

  let selectedUnits = getWorkingGroupUnits(commandPlayer)
  if (selectedUnits.isEmpty())
    chatCommandPrintToPlayer(commandPlayer, "Must have at least one unit selected")
    destroy selectedUnits
    return
  
  var hasItem = false
  var isSlotId = false
  var itemId = 0

  let slotId = itemOrSlotId.toInt()
  if (slotId >= 0 and slotId < 6)
    isSlotId = true
    for u in selectedUnits
      let itm = u.itemInSlot(slotId)
      if (itm != null)
        hasItem = true
  else 
    itemId = itemOrSlotId.fromRawCode()
    for u in selectedUnits
      let itm = u.getItemById(itemId)
      if (itm != null)
        hasItem = true

  if (not hasItem)
    chatCommandPrintToPlayer(commandPlayer, "No selected unit has item " + (isSlotId ? "in slot " + itemOrSlotId : " of type " + itemOrSlotId))
    destroy selectedUnits
    return
      
  if (targetArg == null)
    if (isSlotId)
      for u in selectedUnits
        let itm = u.itemInSlot(slotId)
        if (itm != null)
          u.useItem(itm)
    else
      for u in selectedUnits
        let itm = u.getItemById(itemId)
        if (itm != null)
          u.useItem(itm)
    chatCommandPrintToPlayer(commandPlayer, "Ordered selected units to use item " + (isSlotId ? "in slot " + itemOrSlotId : " of type " + itemOrSlotId))
    destroy selectedUnits
    return

  switch (targetArg.getString())
    case "self"
      if (isSlotId)
        for u in selectedUnits
          let itm = u.itemInSlot(slotId)
          if (itm != null)
            u.useItemTarget(itm, u)
      else
        for u in selectedUnits
          let itm = u.getItemById(itemId)
          if (itm != null)
            u.useItemTarget(itm, u)
      chatCommandPrintToPlayer(commandPlayer, "Ordered selected units to use item " + (isSlotId ? "in slot " + itemOrSlotId : " of type " + itemOrSlotId) + " on themselves")
      destroy selectedUnits
      return

    case "selfPos"
      if (isSlotId)
        for u in selectedUnits
          let itm = u.itemInSlot(slotId)
          if (itm != null)
            u.useItemPoint(itm, u.getPos())
      else
        for u in selectedUnits
          let itm = u.getItemById(itemId)
          if (itm != null)
            u.useItemPoint(itm, u.getPos())
      chatCommandPrintToPlayer(commandPlayer, "Ordered selected units to use item " + (isSlotId ? "in slot " + itemOrSlotId : " of type " + itemOrSlotId) + " at their position")
      destroy selectedUnits
      return

    case "pos"
      let x = xArg.getString().toReal()
      let y = yArg.getString().toReal()
      let pos = vec2(x, y)
      if (isSlotId)
        for u in selectedUnits
          let itm = u.itemInSlot(slotId)
          if (itm != null)
            u.useItemPoint(itm, pos)
      else
        for u in selectedUnits
          let itm = u.getItemById(itemId)
          if (itm != null)
            u.useItemPoint(itm, pos)
      chatCommandPrintToPlayer(commandPlayer, "Ordered selected units to use item " + (isSlotId ? "in slot " + itemOrSlotId : " of type " + itemOrSlotId) + " at position " + pos.toString())
      destroy selectedUnits
      return

// ============================================================================
function workingGroup()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let opArg = command.getArgument(0)

  g_workingGroup.refresh()

  if (opArg == null)
    chatCommandPrintToPlayer(commandPlayer, "Working group contains {0} units".format(g_workingGroup.size().toString()))
    return

  let selectedUnits = commandPlayer.getSelectedUnits()

  switch (opArg.getString())
    case "add"
      for u in selectedUnits
        g_workingGroup.addUnit(u)
    case "remove"
      for u in selectedUnits
        g_workingGroup.removeUnit(u)
    case "clear"
      g_workingGroup.clear()
    case "addType"
      let val = command.getArgument(1).getString().fromRawCode()
      let g = getGroup()
      g.enumUnitsOfType(val, null)
      g_workingGroup.addGroup(g)
      g.release()
    default
      chatCommandPrintToPlayer(commandPlayer, "Unknown operation {0}".format(opArg.getString()))
      destroy selectedUnits
      return

  g_workingGroup.refresh()
  
  chatCommandPrintToPlayer(commandPlayer, "Working group contains {0} units".format(g_workingGroup.size().toString()))

  destroy selectedUnits

// ============================================================================
function printType()
  let commandPlayer = getChatCommandPlayer()

  let uniqueTypeIds = new HashList<int>()
  forEachWorkingGroupUnit(commandPlayer, u -> uniqueTypeIds.add(u.getTypeId()))

  for id in uniqueTypeIds
    chatCommandPrintToPlayer(commandPlayer, "Type: {0} ({1})".format(UnitId2String(id), id.toRawCode()))

  destroy uniqueTypeIds

// ============================================================================
function selectNone()
  let commandPlayer = getChatCommandPlayer()
  commandPlayer.clearSelection()
  chatCommandPrintToPlayer(commandPlayer, "Cleared selection")

// ============================================================================
function logging()
  let commandPlayer = getChatCommandPlayer()
  let command = getChatCommand()

  switch (command.getArgument(0).getString())
    case "spawning"
      g_enableSpawnWaveLogging = not g_enableSpawnWaveLogging
      chatCommandPrintToPlayer(commandPlayer, (g_enableSpawnWaveLogging ? "Enabled spawn wave debugging" : "Disabled spawn wave debugging"))
    case "runnable"
      g_enableRunnableLogging = not g_enableRunnableLogging
      chatCommandPrintToPlayer(commandPlayer, (g_enableRunnableLogging ? "Enabled runnable debugging" : "Disabled runnable debugging"))
    case "utc"
      g_enableUTCLogging = not g_enableUTCLogging
      chatCommandPrintToPlayer(commandPlayer, (g_enableUTCLogging ? "Enabled utc debugging" : "Disabled utc debugging"))
    case "butc"
      g_enableBUTCDebugging = not g_enableBUTCDebugging
      chatCommandPrintToPlayer(commandPlayer, (g_enableBUTCDebugging ? "Enabled butc debugging" : "Disabled butc debugging"))
    default
      chatCommandPrintToPlayer(commandPlayer, "Unknown system name: " + command.getArgument(0).getString())

// ============================================================================
function issueOrder()
  let commandPlayer = getChatCommandPlayer()
  let command = getChatCommand()
  let orderType = command.getArgument(0).getString()
  let order = command.getArgument(1).getString()

  let units = getWorkingGroupUnits(commandPlayer)
  var succeeded = false

  switch (orderType)
    case "immediate"
      for u in units
        succeeded = u.issueImmediateOrder(order) or succeeded
    case "point"
      let x = command.getArgument(2).getString().toReal()
      let y = command.getArgument(3).getString().toReal()
      for u in units
        succeeded = u.issuePointOrder(order, vec2(x, y)) or succeeded
    case "target"
      let target = units.get(units.size() - 1)
      for u in units
        if (u != target)
          succeeded = u.issueTargetOrder(order, target) or succeeded
    case "self"
      for u in units
        succeeded = u.issueTargetOrder(order, u) or succeeded

  destroy units
  chatCommandPrintToPlayer(commandPlayer, (succeeded ? "Successfully issued " + orderType +" order " + order : "Failed to issue " + orderType + " order " + order))

// ============================================================================
function debugger()
  let commandPlayer = getChatCommandPlayer()
  if (DebuggerDialog.getIsVisible())
    DebuggerDialog.hide()
    chatCommandPrintToPlayer(commandPlayer, "Hiding debugger")
  else
    DebuggerDialog.show()
    chatCommandPrintToPlayer(commandPlayer, "Showing debugger")

// ============================================================================
function registerDebugCommands()

  g_commandHandler.registerCommandDefinition(COMMAND_GODLIKE, function godlike)

  g_commandHandler.registerCommandDefinition(COMMAND_SPAWNONE, function spawnone)
    ..addArgument(new ChatCommandArgument("PLAYER_ID", ChatCommandArgumentType.INT, false))
    ..addArgument(new ChatCommandArgument("WAVE_TYPE", ChatCommandArgumentType.STRING, false)..setStringOptions("day", "night"))
    ..addArgument(new ChatCommandArgument("WAVE_ID", ChatCommandArgumentType.INT, false))
    ..addArgument(new ChatCommandArgument("SPAWN_WAVE_ID", ChatCommandArgumentType.INT, true))

  g_commandHandler.registerCommandDefinition(COMMAND_DAY, function startNextDay)
  g_commandHandler.registerCommandDefinition(COMMAND_NIGHT, function startNextNight)

  g_commandHandler.registerCommandDefinition(COMMAND_SEE, function turnOnMapVisibility)
  ..addStringArgument("PLAYER", true)

  g_commandHandler.registerCommandDefinition(COMMAND_KILL_SELECTED_UNITS, function killSelectedUnits)
  g_commandHandler.registerCommandDefinition(COMMAND_REMOVE_SELECTED_UNITS, function removeSelectedUnits)
  g_commandHandler.registerCommandDefinition(COMMAND_MOVE_SELECTED_UNITS, function moveSelectedUnits)
    ..addRealArgument("X", true)
    ..addRealArgument("Y", true)

  g_commandHandler.registerCommandDefinition(COMMAND_CREATE_ITEM, function createItemForSelectedUnit)
    ..addFourCCArgument("ITEM_ID", false)
    ..addIntegerArgument("ITEM_COUNT", true)

  g_commandHandler.registerCommandDefinition(COMMAND_CREATE_UNIT, function createUnitAtCameraPos)
    ..addIntegerArgument("PLAYER_ID", false)
    ..addFourCCArgument("UNIT_ID", false)
    ..addIntegerArgument("UNIT_COUNT", false)

  g_commandHandler.registerCommandDefinition(COMMAND_ADD_MATS, function addMats)
    ..addIntegerArgument("PLAYER_ID", false)
    ..addIntegerArgument("MATERIALS_COUNT", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SKIP_TO_DAY, function skipToDay)
    ..addIntegerArgument("DAY_ID", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SKIP_TO_NIGHT, function skipToNight)
    ..addIntegerArgument("NIGHT_ID", false)

  g_commandHandler.registerCommandDefinition(COMMAND_LOG_LEVEL, function setLogLevel)
    ..addArgument(new ChatCommandArgument("LOG_LEVEL", ChatCommandArgumentType.STRING, false)..setStringOptions("trace", "debug", "info", "warning", "error"))

  g_commandHandler.registerCommandDefinition(COMMAND_WEATHER, function setWeatherEffect)
    ..addArgument(new ChatCommandArgument("EFFECT", ChatCommandArgumentType.STRING, false)..setStringOptions("fog", "lightrain", "heavyrain", "none"))
  
  g_commandHandler.registerCommandDefinition(COMMAND_CLEARWEATHER, function clearWeatherEffects)

  g_commandHandler.registerCommandDefinition(COMMAND_SETFOG, function setTerrainFog)
    ..addArgument(new ChatCommandArgument("STYLE", ChatCommandArgumentType.INT, false)..setIntOptions(0, 1, 2))
    ..addRealArgument("ZSTART", false)
    ..addRealArgument("ZEND", false)
    ..addRealArgument("DENSITY", false)
    ..addRealArgument("R", false)
    ..addRealArgument("G", false)
    ..addRealArgument("B", false)

  g_commandHandler.registerCommandDefinition(COMMAND_RESETFOG, function resetTerrainFog)
  g_commandHandler.registerCommandDefinition(COMMAND_TOGGLEWEATHERUPDATE, function toggleWeatherUpdate)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETLEVEL, function setLevel)
    ..addIntegerArgument("LEVEL", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_RESETLEVEL, function resetLevel)

  g_commandHandler.registerCommandDefinition(COMMAND_TODSCALE, function todScale)
    ..setDescription("Gets and sets the time of day scale percentage. Use the optional SCALE argument to set the time of day scale.")
    ..addRealArgument("SCALE", true, "The time of day scalar percentage [0.0-100.0]")
  
  g_commandHandler.registerCommandDefinition(COMMAND_TOD, function timeOfDay)
    ..setDescription("Gets and sets the time of day. Use the optional TIME argument to set the time of day.")
    ..addRealArgument("TIME", true, "The time of day [0.0-24.0]. Day starts at {0} and night starts at {1}.".format(TIME_OF_DAY.toString(), TIME_OF_NIGHT.toString()))
  
  g_commandHandler.registerCommandDefinition(COMMAND_TOGGLE_GRACE_PERIOD, function toggleGracePeriod)
    ..setDescription("Gets and sets whether the grace period is enabled")
    ..addBoolArgument("VALUE", true, "Whether or not the grace period is enabled.")
  
  g_commandHandler.registerCommandDefinition(COMMAND_REPUTATION, function printReputation)
    ..setDescription("Prints a player's reputation values")
    ..addIntegerArgument("PLAYER_ID", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETREPUTATION, function setReputation)
    ..setDescription("Sets a player's reputation values")
    ..addIntegerArgument("PLAYER_ID", false)
    ..addArgument(new ChatCommandArgument("REP_TYPE", ChatCommandArgumentType.STRING, false)..setStringOptions("Shelter", "Defense", "Power", "Tech"))
    ..addIntegerArgument("REP_VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_UPDATEREPUTATION, function updateReputation)
    ..setDescription("Updates a player's reputation values")
    ..addIntegerArgument("PLAYER_ID", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SPAWNALLITEMS, function spawnAllItems)
    ..setDescription("Spawns all items in the main item library")
  
  g_commandHandler.registerCommandDefinition(COMMAND_UNITPROPS, function showSelectedUnitStats)
    ..setDescription("Prints the stats of a selected unit")
  
  let unitPropNameArg = new ChatCommandArgument("PROP_NAME", ChatCommandArgumentType.STRING, false)
  for i = 0 to UnitProperties.count - 1
    unitPropNameArg.addStringOption(UnitProperties.getPropertyShortName(i castTo UnitProperty))

  g_commandHandler.registerCommandDefinition(COMMAND_SETUNITPROP, function setSelectedUnitProperty)
    ..setDescription("Sets the property of a selected unit")
    ..addArgument(unitPropNameArg)
    ..addArgument(new ChatCommandArgument("OP", ChatCommandArgumentType.STRING, false)..setStringOptions("base", "scale", "add", "sub"))
    ..addRealArgument("VALUE", false)
    ..addRealArgument("DURATION", true)

  g_commandHandler.registerCommandDefinition(COMMAND_CLEARUNITPROP, function clearSelectedUnitProperty)
    ..setDescription("Clears all affectors from the given property of a selected unit")
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETHEALTH, function setSelectedUnitHealth)
    ..setDescription("Sets the health of the selected unit")
    ..addRealArgument("VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETMANA, function setSelectedUnitMana)
    ..setDescription("Sets the mana of the selected unit")
    ..addRealArgument("VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_PAUSE, function pauseSelectedUnits)
    ..setDescription("Pauses the selected units")
  
  g_commandHandler.registerCommandDefinition(COMMAND_PAUSE, function resumeSelectedUnits)
    ..setDescription("Resumes the selected units")
  
  g_commandHandler.registerCommandDefinition(COMMAND_RECYCLERSTATS, function showRecyclerStats)
    ..setDescription("Shows information about active unit recyclers")
  
  g_commandHandler.registerCommandDefinition(COMMAND_ATTACKSENABLED, function setAttacksEnabled)
    ..setDescription("Sets which attacks are enabled for the selected units.")
    ..addArgument(new ChatCommandArgument("WEAPON_INDEX", ChatCommandArgumentType.INT, false)..setIntOptions(0, 1, 2, 3)..setDescription("0 - None, 1 - Attack 1, 2 - Attack 2, 3 - Both"))

  g_commandHandler.registerCommandDefinition(COMMAND_LINK, function linkSelectedUnits)
    ..setDescription("Shows information about active unit recyclers")

  g_commandHandler.registerCommandDefinition(COMMAND_UNLINK, function unlinkSelectedUnits)
    ..setDescription("Shows information about active unit recyclers")

  g_commandHandler.registerCommandDefinition(COMMAND_GAMESPEED, function setGameSpeed)
    ..setDescription("Sets the game speed")
    ..addRealArgument("Speed", false)
  g_commandHandler.registerCommandDefinition(COMMAND_CHECKPATH, function checkPath)
    ..setDescription("Starts a path checker for a given player")
    ..addIntegerArgument("PLAYER", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SPAWNSURVIVOR, function spawnSurvivor)
    ..setDescription("Tries to spawn one or more random survivors for a player")
    ..addIntegerArgument("PLAYER", false)
    ..addIntegerArgument("COUNT", false)
    ..addBoolArgument("FORCE", true)

  g_commandHandler.registerCommandDefinition(COMMAND_SELECTALL, function selectAll)
    ..setDescription("Selects all types of a unit")
    ..addFourCCArgument("UNIT_TYPE", false)
  g_commandHandler.registerCommandDefinition(COMMAND_LINK, function linkSelectedUnits)
    ..setDescription("Shows information about active unit recyclers")

  g_commandHandler.registerCommandDefinition(COMMAND_UNLINK, function unlinkSelectedUnits)
    ..setDescription("Shows information about active unit recyclers")

  g_commandHandler.registerCommandDefinition(COMMAND_GAMESPEED, function setGameSpeed)
    ..setDescription("Sets the game speed")
    ..addRealArgument("Speed", false)

  g_commandHandler.registerCommandDefinition(COMMAND_KILLALL, function killAll)
    ..setDescription("Kills all types of a unit")
    ..addFourCCArgument("UNIT_TYPE", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SPAWNPOINTS, function spawnPoints)
    ..setDescription("Spawn point operations")
    ..addIntegerArgument("PLAYER_ID", false)
    ..addArgument(new ChatCommandArgument("SPAWN_MGR", ChatCommandArgumentType.STRING, true)..setStringOptions("hostile", "friendly"))
    ..addArgument(new ChatCommandArgument("OPERATION", ChatCommandArgumentType.STRING, true)..setStringOptions("invalidate", "enable", "disable", "center", "setcenter"))

  g_commandHandler.registerCommandDefinition(COMMAND_POS, function pos)
    ..setDescription("Gets or sets the center of the currently selected units")
    ..addRealArgument("X", true)
    ..addRealArgument("Y", true)
    
  g_commandHandler.registerCommandDefinition(COMMAND_USEITEM, function useItem)
    ..setDescription("Orders the selected units to use an item in their inventory")
    ..addStringArgument("ITEM_OR_SLOT", false)
    ..addStringArgument("TARGET", true)
    ..addStringArgument("ARG1", true)
    ..addStringArgument("ARG2", true)

  g_commandHandler.registerCommandDefinition(COMMAND_WORKINGGROUP, function workingGroup)
    ..setDescription("Manipulates the working unit group")
    ..addStringArgument("OP", true)
    ..addStringArgument("OP_ARG1", true)

  g_commandHandler.registerCommandDefinition(COMMAND_TYPE, function printType)
    ..setDescription("Prints the fourcc types of the selected units or items")

  g_commandHandler.registerCommandDefinition(COMMAND_SELECTNONE, function selectNone)
    ..setDescription("Clears the players selection")

  g_commandHandler.registerCommandDefinition(COMMAND_LOGGING, function logging)
    ..setDescription("Enables different system logging")
    ..addStringArgument("SYSTEM", false)

  g_commandHandler.registerCommandDefinition(COMMAND_ISSUE_ORDER, function issueOrder)
    ..setDescription("Issues an order to the units in the working group")
    ..addArgument(new ChatCommandArgument("ORDER_TYPE", ChatCommandArgumentType.STRING, false)..setStringOptions("immediate", "point", "target", "self"))
    ..addStringArgument("ORDER", false)
    ..addStringArgument("ARG1", true)
    ..addStringArgument("ARG2", true)

  g_commandHandler.registerCommandDefinition(COMMAND_DEBUGGER, function debugger)
    ..setDescription("Toggles visibility of the debugger frame")

// ============================================================================
init

  if (DEV_ENVIRONMENT)
  //{
    g_commandHandler = new DevChatCommandHandler("Debug", null)
    registerChatCommandHandler(g_commandHandler, -1)

    nullTimer(() -> registerDebugCommands())
  //}