package DebugCommands
import ChatCommands
import DisplayTextToPlayer
import Host
import MemoryTrackingMultiboard
import ClosureTimers
import Godlike
import ErrorHandling
import GameInstance
import Wave
import GroupUtils
import MainItemLibrary
import UnitMetadata
import HumanPlayerMetadata
import LinkedList
import WeatherManager
import Time
import Reputation
import PlayerExtensions
import UnitPropertiesComponent
import UnitRecycler
import ObjectIds
import HumanPlayers
import UnitExtensions
import ProjectConstants
import PowerSourceComponent
import PoweredComponent

constant string COMMAND_MEMORYTRACKER = "mem"
constant string COMMAND_GODLIKE = "godlike"
constant string COMMAND_SPAWNONE = "spawnone"
constant string COMMAND_DAY = "day"
constant string COMMAND_NIGHT = "night"
constant string COMMAND_SKIP_TO_DAY = "skipToDay"
constant string COMMAND_SKIP_TO_NIGHT = "skipToNight"
constant string COMMAND_SEE = "see"
constant string COMMAND_KILL_SELECTED_UNITS = "kill"
constant string COMMAND_REMOVE_SELECTED_UNITS = "remove"
constant string COMMAND_MOVE_SELECTED_UNITS = "move"
constant string COMMAND_CREATE_ITEM = "item"
constant string COMMAND_CREATE_UNIT = "unit"
constant string COMMAND_ADD_MATS = "mats"
constant string COMMAND_SHOW_WAVES = "waves"
constant string COMMAND_LOG_LEVEL = "loglvl"
constant string COMMAND_WEATHER = "weather"
constant string COMMAND_CLEARWEATHER = "clearweather"
constant string COMMAND_TOGGLEWEATHERUPDATE = "toggleweatherupdate"
constant string COMMAND_SETFOG = "setfog"
constant string COMMAND_RESETFOG = "resetfog"
constant string COMMAND_SETLEVEL = "setlevel"
constant string COMMAND_RESETLEVEL = "resetlevel"
constant string COMMAND_TODSCALE = "timescale"
constant string COMMAND_TOD = "time"
constant string COMMAND_TOGGLE_GRACE_PERIOD = "graceperiod"
constant string COMMAND_REPUTATION = "rep"
constant string COMMAND_SETREPUTATION = "setrep"
constant string COMMAND_UPDATEREPUTATION = "updaterep"
constant string COMMAND_SPAWNALLITEMS = "spawnitems"
constant string COMMAND_UNITPROPS = "showprops"
constant string COMMAND_SETUNITPROP = "setprop"
constant string COMMAND_SETHEALTH = "sethp"
constant string COMMAND_SETMANA = "setmana"
constant string COMMAND_PAUSE = "pause"
constant string COMMAND_RESUME = "resume"
constant string COMMAND_RECYCLERSTATS = "recycler"
constant string COMMAND_ATTACKSENABLED = "setAttacksEnabled"
constant string COMMAND_LINK = "link"
constant string COMMAND_UNLINK = "unlink"
constant string COMMAND_GAMESPEED = "gameSpeed"

DebugChatCommandHandler g_commandHandler
MemoryTrackingMultiboard g_memoryTrackingMultiboard
fogmodifier array g_seeVisionModifiers

// ============================================================================
public class DebugChatCommandHandler extends ChatCommandHandler

  // --------------------------------------------------------------------------
  construct(string name, quest _quest)
    super(name, _quest)

  // --------------------------------------------------------------------------
  override function handleChatCommand(player p, string command, LinkedList<string> commandArgs) returns bool
    if (not p.isHost())
      return false
    return super.handleChatCommand(p, command, commandArgs)    

// ============================================================================
function showMemoryTrackerMultiboard()
  let commandPlayer = getChatCommandPlayer()
  let command = getChatCommand()

  let optionArg = command.getArgument(0)
  if (optionArg != null)
    let option = optionArg.getString()
    if (option == "page")
      let pageIndex = command.getArgument(1).getString().toInt()
      g_memoryTrackingMultiboard.setPageIndex(pageIndex)
      displayMessageToPlayer(commandPlayer, "Setting memory tracking multiboard page index " + pageIndex.toString())
    if (option == "sort")
      let sortColumn = command.getArgument(1).getString().toInt()
      g_memoryTrackingMultiboard.setSortColumn(sortColumn)
      displayMessageToPlayer(commandPlayer, "Setting memory tracking multiboard sorting column " + sortColumn.toString())
    if (option == "dir")
      let sortDirection = command.getArgument(1).getString() == "asc" ? SortDirection.Ascending : SortDirection.Descending
      g_memoryTrackingMultiboard.setSortDirection(sortDirection)
      displayMessageToPlayer(commandPlayer, "Setting memory tracking multiboard sorting direction " + (sortDirection == SortDirection.Ascending ? "Ascending" : "Descending"))
  else
    if (g_memoryTrackingMultiboard.isShowing())
      displayMessageToPlayer(commandPlayer, "Hiding memory tracking multiboard")
      g_memoryTrackingMultiboard.hide()
    else
      displayMessageToPlayer(commandPlayer, "Showing memory tracking multiboard")
      g_memoryTrackingMultiboard.updateMultiboardRows()
      g_memoryTrackingMultiboard.show()

// ============================================================================
function godlike()
  let commandPlayer = getChatCommandPlayer()
  if (isGodModeEnabled())
    disableGodMode()
    displayMessageToPlayer(commandPlayer, "Disabled God Mode")
  else
    displayMessageToPlayer(commandPlayer, "Enabled God Mode")
    enableGodMode()

// ============================================================================
function spawnone()
  let command = getChatCommand()

  let playerId = command.getArgument(0).getInt()
  let dayNightWave = command.getArgument(1).getString().toLowerCase()
  let waveId = command.getArgument(2).getInt()

  var spawnWaveId = -1
  let spawnWaveIdArg = command.getArgument(3)
  if (spawnWaveIdArg != null)
    spawnWaveId = spawnWaveIdArg.getInt()

  let p = Player(playerId)
  if (p == null)
    error("Found no player with id " + playerId.toString())

  let playerWaves = g_GameInstance.getPlayerWaves(p)
  if (playerWaves == null)
    error("Player waves is null for player " + p.getName())
    return

  Wave wave = null

  if (dayNightWave == "day")
    wave = playerWaves.getDayWaves().getLatestWave(waveId)    
  if dayNightWave == "night"
    wave = playerWaves.getNightWaves().getLatestWave(waveId)

  if (wave == null)
    error("Found no wave at index " + waveId.toString())
    return

  let spawnWaves = wave.getSpawnWaves()
  
  if (spawnWaveId != -1)
  // {
    let spawnWave = spawnWaves.getItem(spawnWaveId)

    if (spawnWave == null)
      error("Found no spawn wave at index " + spawnWaveId.toString())
      return

    spawnWave.activate()
    displayMessageToPlayer(p, "Activated {0} {1} spawn wave {2} once".format(dayNightWave, waveId.toString(), spawnWave.getDefinition().getName()))
    return
  // }

  if (spawnWaves.isEmpty())
    error("Wave {0} has no registered spawn waves ".format(waveId.toString()))
    return

  for spawnWave in spawnWaves
    spawnWave.activate()
    displayMessageToPlayer(p, "Activated {0} {1} spawn wave {2} once".format(dayNightWave, waveId.toString(), spawnWave.getDefinition().getName()))

// ============================================================================
function startNextDay()
  g_GameInstance.startNextDay()

// ============================================================================
function startNextNight()
  g_GameInstance.startNextNight()

// ============================================================================
function turnOnMapVisibility()
  let commandPlayer = getChatCommandPlayer()

  var enabled = false
  for p in g_PlayingHumanPlayers
  //{
    if (g_seeVisionModifiers[p.getId()] == null)
      g_seeVisionModifiers[p.getId()] = createVision(p, GetPlayableMapRect(), false)
      enabled = true
    else
      g_seeVisionModifiers[p.getId()].destr()
      g_seeVisionModifiers[p.getId()] = null
  //}
  
  displayMessageToPlayer(commandPlayer, enabled ? "Enabled vision for all players" : "Disabled vision for all players")

// ============================================================================
function killSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  let ug = getGroup()
  ug.enumUnitsSelected(commandPlayer, null)
  for u from ug
    u.kill()
  ug.release()

// ============================================================================
function removeSelectedUnits()
  let commandPlayer = getChatCommandPlayer()
  let ug = getGroup()
  ug.enumUnitsSelected(commandPlayer, null)
  for u from ug
    u.remove()
  ug.release()

// ============================================================================
function moveSelectedUnits()
  let cameraLoc = GetCameraTargetPositionLoc()
  let cameraPos = vec2(GetLocationX(cameraLoc), GetLocationY(cameraLoc))
  let ug = getGroup()
  ug.enumUnitsSelected(GetTriggerPlayer(), null)
  for u in ug
    u.setPos(cameraPos)
  ug.release()
  RemoveLocation(cameraLoc)

// ============================================================================
function createItemForSelectedUnit()

  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let itemId = command.getArgument(0).getRawCode()

  var count = 1
  let countArg = command.getArgument(1)
  if (countArg != null)
    count = countArg.getInt()

  let g = getGroup()
  g.enumUnitsSelected(commandPlayer, null)
  if (g.isEmpty())
    displayMessageToPlayer(commandPlayer, "Must selected a unit to give the items to")
    g.release()
    return

  let selectedUnit = g.getUnitAt(0)
  g.release()

  let pos = selectedUnit.getPos()

  for i = 1 to count
    let itm = g_MainItemLibrary.createItem(itemId, pos)
    if (itm != null)
      displayMessageToPlayer(commandPlayer, "Created " + count.toString() + " item(s) of type " + itm.getName())

// ============================================================================
function createUnitAtCameraPos()
  let cameraLoc = GetCameraTargetPositionLoc()
  let cameraPos = vec2(GetLocationX(cameraLoc), GetLocationY(cameraLoc))

  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let unitId = command.getArgument(1).getRawCode()
  let count = command.getArgument(2).getInt()

  let p = Player(playerId)
  if (p == null)
    error("Player id argument is invalid")

  string unitName = null
  for i = 1 to count
    let u = createUnitTLS(p, unitId, cameraPos.x, cameraPos.y, GetRandomDirectionDeg())
    if (u != null and unitName == null)
      unitName = u.getName()
  
  if (unitName != null)
    displayMessageToPlayer(commandPlayer, "Created " + I2S(count) + " " + unitName)

  RemoveLocation(cameraLoc)

// ============================================================================
function addMats()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let matsCount = command.getArgument(1).getInt()

  let p = Player(playerId)
  if (p == null)
    error("Player id argument is invalid")
    return

  let playerMetadata = p.getMetadata() castTo HumanPlayerMetadata
  if (playerMetadata == null)
    error("Can't give materials to player \"{0}\"".format(p.getName()))
    return

  playerMetadata.giveMaterials(matsCount)
  displayMessageToPlayer(commandPlayer, "Gave {0} materials to {1}".format(I2S(matsCount), p.getNameColored()))

// ============================================================================
function skipToDay()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let day = command.getArgument(0).getInt()
  displayMessageToPlayer(commandPlayer, "Skipping to day {0}...".format(I2S(day)))
  g_GameInstance.skipToDay(day)
    
// ============================================================================
function skipToNight()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let night = command.getArgument(0).getInt()
  displayMessageToPlayer(commandPlayer, "Skipping to night {0}...".format(I2S(night)))
  g_GameInstance.skipToNight(night)  

// ============================================================================
function showWavesMultiboard()
  
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let waveMultiboard = g_GameInstance.getWaveMultiboard()

  if (command.getArgumentCount() == 0)
    waveMultiboard.setPlayer(null)
    waveMultiboard.setDisplayTarget(null)
    waveMultiboard.hide()
    displayMessageToPlayer(commandPlayer, "Hiding wave multiboard")
    return

  let playerId = command.getArgument(0).getInt()
  let p = Player(playerId)
  if (p == null)
    error("Player id argument is invalid")
    return

  waveMultiboard.setPlayer(p)
  waveMultiboard.setDisplayTarget(commandPlayer)
  waveMultiboard.show()
  displayMessageToPlayer(commandPlayer, "Showing wave multiboard")

// ============================================================================
function setLogLevel()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let levelArg = command.getArgument(0).getString().toLowerCase()

  switch (levelArg)
    case "trace"
      DEBUG_LEVEL = Loglevel.TRACE
    case "debug"
      DEBUG_LEVEL = Loglevel.DEBUG
    case "info"
      DEBUG_LEVEL = Loglevel.INFO
    case "warning"
      DEBUG_LEVEL = Loglevel.WARNING
    case "error"
      DEBUG_LEVEL = Loglevel.ERROR
    default
      error("Couldn't parse log level string from argument 0 \"{0}\"".format(levelArg)) 

  displayMessageToPlayer(commandPlayer, "Set log level to " + levelArg)

// ============================================================================
function setWeatherEffect()
  let command = getChatCommand()
  let effectName = command.getArgument(0).getString()

  switch (effectName)
    case "fog"
      Weather.setWeatherEffect(WeatherEffectType.FOG)
    case "lightrain"
      Weather.setWeatherEffect(WeatherEffectType.RAIN_LIGHT)
    case "heavyrain"
      Weather.setWeatherEffect(WeatherEffectType.RAIN_HEAVY)
    case "none"
      Weather.setWeatherEffect(WeatherEffectType.NONE)

// ============================================================================
function clearWeatherEffects()
  Weather.clearWeatherEffects()

// ============================================================================
function setTerrainFog()
  let command = getChatCommand()
  let style = command.getArgument(0).getInt()
  let zstart = command.getArgument(1).getReal()
  let zend = command.getArgument(2).getReal()
  let density = command.getArgument(3).getReal()
  let r = command.getArgument(4).getReal()
  let g = command.getArgument(5).getReal()
  let b = command.getArgument(6).getReal()

  SetTerrainFogEx(style, zstart, zend, density, r, g, b)

// ============================================================================
function resetTerrainFog()
  ResetTerrainFog()

// ============================================================================
function toggleWeatherUpdate()
  let commandPlayer = getChatCommandPlayer()
  Weather.toggleWeatherUpdate()
  displayMessageToPlayer(commandPlayer, "Weather update: " + Weather.isUpdatingFog().toString())

// ============================================================================
function setLevel()
  let command = getChatCommand()
  let level = command.getArgument(0).getInt()

  let commandPlayer = getChatCommandPlayer()
  let ug = getGroup()
  ug.enumUnitsSelected(commandPlayer, null)
  for u from ug
    u.resetLevelAndXP()
    u.setLevel(level, false)
  ug.release()

// ============================================================================
function resetLevel()
  let commandPlayer = getChatCommandPlayer()
  let ug = getGroup()
  ug.enumUnitsSelected(commandPlayer, null)
  for u from ug
    u.resetLevelAndXP()
  ug.release()

// ============================================================================
function todScale()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let speedArg = command.getArgument(0)

  if (speedArg == null)
    displayMessageToPlayer(commandPlayer, "Time of Day Scale is {0}%".format(GetTimeOfDayScalePercentBJ().toString()))
    return

  let speed = speedArg.getReal()  
  g_GameInstance.setTimeOfDayScalePercent(speed)
  displayMessageToPlayer(commandPlayer, "Time of Day Scale set to {0}%".format(GetTimeOfDayScalePercentBJ().toString()))

// ============================================================================
function timeOfDay()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let timeOfDayArg = command.getArgument(0)

  if (timeOfDayArg == null)
    displayMessageToPlayer(commandPlayer, "Time of Day is {0}".format(GetTimeOfDay().toString()))
    return

  let timeOfDay = timeOfDayArg.getReal()
  SetTimeOfDay(timeOfDay)
  displayMessageToPlayer(commandPlayer, "Time of Day set to {0}".format(GetTimeOfDay().toString()))

// ============================================================================
function toggleGracePeriod()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let valueArg = command.getArgument(0)

  if (valueArg != null)
    let value = valueArg.getBool()
    g_GameInstance.setUpdateGracePeriod(false)
    g_GameInstance.setGracePeriodActive(value)

  displayMessageToPlayer(commandPlayer, "Grace period is {0}".format(g_GameInstance.isGracePeriodActive() ? "active" : "inactive"))

// ============================================================================
function printReputation()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  
  let playerId = command.getArgument(0).getInt()
  let _player = Player(playerId)
  if (_player == null)
    error("Player id argument is invalid")
    return

  let playerRep = ReputationUtility.getPlayerReputation(_player)

  displayMessageToPlayer(commandPlayer, "Total Rep: {0}".format(playerRep.getTotalReputation01().toString()))
  displayMessageToPlayer(commandPlayer, "Shelter: {0} Defense: {1} Power: {2} Tech: {3}".format(
    playerRep.getReputation(ReputationType.Shelter).toString(),
    playerRep.getReputation(ReputationType.Defense).toString(),
    playerRep.getReputation(ReputationType.Power).toString(),
    playerRep.getReputation(ReputationType.Tech).toString()))

// ============================================================================
function setReputation()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  let repTypeStr = command.getArgument(1).getString().toLowerCase()
  let repValue = command.getArgument(2).getInt()
  
  let _player = Player(playerId)
  if (_player == null)
    error("Player id argument is invalid")
    return

  let playerRep = ReputationUtility.getPlayerReputation(_player)
  
  var repType = ReputationType.Shelter

  switch (repTypeStr)
    case "Shelter"
      repType = ReputationType.Shelter
    case "Defense"
      repType = ReputationType.Defense
    case "Power"
      repType = ReputationType.Power
    case "Tech"
      repType = ReputationType.Tech

  playerRep.setReputation(repType, repValue)

  displayMessageToPlayer(commandPlayer, "Set player {0} {1} rep to {2}".format(
    _player.getName(),
    repTypeStr,
    repValue.toString()))

// ============================================================================
function updateReputation()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let playerId = command.getArgument(0).getInt()
  
  let _player = Player(playerId)
  if (_player == null)
    error("Player id argument is invalid")
    return

  let playerRep = ReputationUtility.getPlayerReputation(_player)
  playerRep.update()

  displayMessageToPlayer(commandPlayer, "Updated player {0} reputation".format(_player.getName()))

  displayMessageToPlayer(commandPlayer, "Total Rep: {0}".format(playerRep.getTotalReputation01().toString()))
  displayMessageToPlayer(commandPlayer, "Shelter: {0} Defense: {1} Power: {2} Tech: {3}".format(
    playerRep.getReputation(ReputationType.Shelter).toString(),
    playerRep.getReputation(ReputationType.Defense).toString(),
    playerRep.getReputation(ReputationType.Power).toString(),
    playerRep.getReputation(ReputationType.Tech).toString()))

// ============================================================================
function spawnAllItems()
  let commandPlayer = getChatCommandPlayer()

  let g = getGroup()
  g.enumUnitsSelected(commandPlayer, null)
  if (g.isEmpty())
    displayMessageToPlayer(commandPlayer, "Must selected a unit to give the items to")
    g.release()
    return

  let selectedUnit = g.getUnitAt(0)
  g.release()

  let pos = selectedUnit.getPos()

  for commonItem in g_MainItemLibrary.commonSet
    let itm = g_MainItemLibrary.commonSet.createItem(commonItem.id, pos)
    displayMessageToPlayer(commandPlayer, "Created common item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

  for rareItem in g_MainItemLibrary.rareSet
    let itm = g_MainItemLibrary.rareSet.createItem(rareItem.id, pos)
    displayMessageToPlayer(commandPlayer, "Created rare item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

  for epicItem in g_MainItemLibrary.epicSet
    let itm = g_MainItemLibrary.epicSet.createItem(epicItem.id, pos)
    displayMessageToPlayer(commandPlayer, "Created epic item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

  for legendaryItem in g_MainItemLibrary.legendarySet
    let itm = g_MainItemLibrary.legendarySet.createItem(legendaryItem.id, pos)
    displayMessageToPlayer(commandPlayer, "Created legendary item {0} ({1})".format(itm.getName(), itm.getTypeId().toString()))

// ============================================================================
function showSelectedUnitStats()
  let commandPlayer = getChatCommandPlayer()

  let selectedUnit = commandPlayer.getFirstSelectedUnit()
  if (selectedUnit == null)
    displayMessageToPlayer(commandPlayer, "Must have a unit selected")
    return

  let metadata = selectedUnit.getMetadata()
  if (metadata == null)
    displayMessageToPlayer(commandPlayer, "Selected unit does not have metadata")
    return

  let comp = metadata.getUnitPropertiesComponent()
  if (comp == null)
    displayMessageToPlayer(commandPlayer, "Unit does not have properties component")
    return

  comp.printDebug((message) -> displayMessageToPlayer(commandPlayer, message))

// ============================================================================
function setSelectedUnitProperty()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let propName = command.getArgument(0).getString()
  let propValue = command.getArgument(1).getReal()

  let selectedUnit = commandPlayer.getFirstSelectedUnit()
  if (selectedUnit == null)
    displayMessageToPlayer(commandPlayer, "Must have a unit selected")
    return

  let metadata = selectedUnit.getMetadata()
  if (metadata == null)
    displayMessageToPlayer(commandPlayer, "Selected unit does not have metadata")
    return

  let comp = metadata.getOrAddUnitPropertiesComponent()

  switch (propName)
    case "critchance"
      comp.setCritChancePercentage(propValue)
    case "critmult"
      comp.setCritDamageMultiplier(propValue)
    case "critbonus"
      comp.setCritBonusDamage(propValue)
    case "evade"
      comp.setEvadeChancePercentage(propValue)
    case "lifesteal"
      comp.setLifeStealPercentage(propValue)

  comp.printDebug((message) -> displayMessageToPlayer(commandPlayer, message))

// ============================================================================
function setSelectedUnitHealth()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let value = command.getArgument(0).getReal()

  let selectedUnit = commandPlayer.getFirstSelectedUnit()
  if (selectedUnit == null)
    displayMessageToPlayer(commandPlayer, "Must have a unit selected")
    return

  selectedUnit.setHP(value)

  displayMessageToPlayer(commandPlayer, "Set unit health to {0}".format(value.toString()))

// ============================================================================
function setSelectedUnitMana()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let value = command.getArgument(0).getReal()

  let selectedUnit = commandPlayer.getFirstSelectedUnit()
  if (selectedUnit == null)
    displayMessageToPlayer(commandPlayer, "Must have a unit selected")
    return

  selectedUnit.setMana(value)

  displayMessageToPlayer(commandPlayer, "Set unit mana to {0}".format(value.toString()))

// ============================================================================
function pauseSelectedUnits()
  let commandPlayer = getChatCommandPlayer()

  commandPlayer.forEachSelectedUnit() (unit arg) ->
    arg.pause()

  displayMessageToPlayer(commandPlayer, "Paused unit(s)")

// ============================================================================
function resumeSelectedUnits()
  let commandPlayer = getChatCommandPlayer()

  commandPlayer.forEachSelectedUnit() (unit arg) ->
    arg.unpause()

  displayMessageToPlayer(commandPlayer, "Resumed unit(s)")

// ============================================================================
function showRecyclerStats()
  let commandPlayer = getChatCommandPlayer()

  commandPlayer.forEachSelectedUnit() (unit arg) ->
    arg.unpause()

  displayMessageToPlayer(commandPlayer, "===== UnitRecycler =====")

  for unitId in g_unitIdToUnitRecyclerMap
    let recycler = g_unitIdToUnitRecyclerMap.get(unitId)
    if (recycler != null)
      let unitName = UnitId2String(unitId)
      displayMessageToPlayer(commandPlayer, "{0} ({1}) : {2} active {3} inactive".format(unitName, unitId.toRawCode(), recycler.getActiveCount().toString(), recycler.getInactiveCount().toString()))

// ============================================================================
function setAttacksEnabled()
  let commandPlayer = getChatCommandPlayer()
  let attacksEnabled = getChatCommand().getArgument(0).getInt()

  commandPlayer.forEachSelectedUnit() (unit _unit) ->
    _unit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, attacksEnabled == 1 or attacksEnabled == 3)
    _unit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 1, attacksEnabled == 2 or attacksEnabled == 3)

// ============================================================================
function linkSelectedUnits()
  let commandPlayer = getChatCommandPlayer()

  PowerSourceComponent source = null
  PowerSourceComponent backup = null

  let selectedUnits = commandPlayer.getSelectedUnits()

  for u in selectedUnits
    let metadata = u.getMetadata()
    if (metadata != null)
      let sourceComp = metadata.getPowerSourceComponent()
      let consumerComp = metadata.getPoweredComponent()
      if (sourceComp != null)
        if (consumerComp == null)
          source = sourceComp
        else
          backup = sourceComp

  if (source == null)
    source = backup

  if (source == null)
    displayMessageToPlayer(commandPlayer, "No power source selected")
    destroy selectedUnits
    return

  var consumerCount = 0

  for u in selectedUnits
    let metadata = u.getMetadata()
    if (metadata != null)
      let consumerComp = metadata.getPoweredComponent()
      if (consumerComp != null and source.getOwnerUnit() != u)
        consumerComp.link(source)
        source.tryLink(consumerComp)
        consumerCount++

  if (consumerCount == 0)
    displayMessageToPlayer(commandPlayer, "No power consumers selected")
    destroy selectedUnits
    return

  displayMessageToPlayer(commandPlayer, "Linked " + consumerCount.toString() + " consumer(s) to source " + source.getOwnerUnit().getName())
  destroy selectedUnits

// ============================================================================
function unlinkSelectedUnits()
  let commandPlayer = getChatCommandPlayer()

  let selectedUnits = commandPlayer.getSelectedUnits()

  var consumerCount = 0

  for u in selectedUnits
    let metadata = u.getMetadata()
    if (metadata != null)
      let comp = metadata.getPoweredComponent()
      if (comp != null)
        let source = comp.getPowerSource()
        if (source != null)
          source.unlink(comp)
          comp.unlink()
        consumerCount++

  if (consumerCount == 0)
    displayMessageToPlayer(commandPlayer, "No power consumers selected")
    destroy selectedUnits
    return

  displayMessageToPlayer(commandPlayer, "Unlinked " + consumerCount.toString() + " consumer(s)")
  destroy selectedUnits

// ============================================================================
function setGameSpeed()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()
  let value = command.getArgument(0).getReal()

  g_GameInstance.setGameSpeed(value)

  displayMessageToPlayer(commandPlayer, "Set the game speed to " + value.toString() + "x")

// ============================================================================
function registerDebugCommands()

  g_commandHandler.registerCommandDefinition(COMMAND_MEMORYTRACKER, function showMemoryTrackerMultiboard)
    ..addStringArgument("OPT", true)
    ..addStringArgument("OPT_VAL", true)

  g_commandHandler.registerCommandDefinition(COMMAND_GODLIKE, function godlike)

  g_commandHandler.registerCommandDefinition(COMMAND_SPAWNONE, function spawnone)
    ..addArgument(new ChatCommandArgument("PLAYER_ID", ChatCommandArgumentType.INT, false))
    ..addArgument(new ChatCommandArgument("WAVE_TYPE", ChatCommandArgumentType.STRING, false)..setStringOptions("day", "night"))
    ..addArgument(new ChatCommandArgument("WAVE_ID", ChatCommandArgumentType.INT, false))
    ..addArgument(new ChatCommandArgument("SPAWN_WAVE_ID", ChatCommandArgumentType.INT, true))

  g_commandHandler.registerCommandDefinition(COMMAND_DAY, function startNextDay)
  g_commandHandler.registerCommandDefinition(COMMAND_NIGHT, function startNextNight)
  g_commandHandler.registerCommandDefinition(COMMAND_SEE, function turnOnMapVisibility)
  g_commandHandler.registerCommandDefinition(COMMAND_KILL_SELECTED_UNITS, function killSelectedUnits)
  g_commandHandler.registerCommandDefinition(COMMAND_REMOVE_SELECTED_UNITS, function removeSelectedUnits)
  g_commandHandler.registerCommandDefinition(COMMAND_MOVE_SELECTED_UNITS, function moveSelectedUnits)

  g_commandHandler.registerCommandDefinition(COMMAND_CREATE_ITEM, function createItemForSelectedUnit)
    ..addFourCCArgument("ITEM_ID", false)
    ..addIntegerArgument("ITEM_COUNT", true)

  g_commandHandler.registerCommandDefinition(COMMAND_CREATE_UNIT, function createUnitAtCameraPos)
    ..addIntegerArgument("PLAYER_ID", false)
    ..addFourCCArgument("UNIT_ID", false)
    ..addIntegerArgument("UNIT_COUNT", false)

  g_commandHandler.registerCommandDefinition(COMMAND_ADD_MATS, function addMats)
    ..addIntegerArgument("PLAYER_ID", false)
    ..addIntegerArgument("MATERIALS_COUNT", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SKIP_TO_DAY, function skipToDay)
    ..addIntegerArgument("DAY_ID", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SKIP_TO_NIGHT, function skipToNight)
    ..addIntegerArgument("NIGHT_ID", false)

  g_commandHandler.registerCommandDefinition(COMMAND_SHOW_WAVES, function showWavesMultiboard)
    ..addIntegerArgument("PLAYER_ID", true)

  g_commandHandler.registerCommandDefinition(COMMAND_LOG_LEVEL, function setLogLevel)
    ..addArgument(new ChatCommandArgument("LOG_LEVEL", ChatCommandArgumentType.STRING, false)..setStringOptions("trace", "debug", "info", "warning", "error"))

  g_commandHandler.registerCommandDefinition(COMMAND_WEATHER, function setWeatherEffect)
    ..addArgument(new ChatCommandArgument("EFFECT", ChatCommandArgumentType.STRING, false)..setStringOptions("fog", "lightrain", "heavyrain", "none"))
  
  g_commandHandler.registerCommandDefinition(COMMAND_CLEARWEATHER, function clearWeatherEffects)

  g_commandHandler.registerCommandDefinition(COMMAND_SETFOG, function setTerrainFog)
    ..addArgument(new ChatCommandArgument("STYLE", ChatCommandArgumentType.INT, false)..setIntOptions(0, 1, 2))
    ..addRealArgument("ZSTART", false)
    ..addRealArgument("ZEND", false)
    ..addRealArgument("DENSITY", false)
    ..addRealArgument("R", false)
    ..addRealArgument("G", false)
    ..addRealArgument("B", false)

  g_commandHandler.registerCommandDefinition(COMMAND_RESETFOG, function resetTerrainFog)
  g_commandHandler.registerCommandDefinition(COMMAND_TOGGLEWEATHERUPDATE, function toggleWeatherUpdate)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETLEVEL, function setLevel)
    ..addIntegerArgument("LEVEL", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_RESETLEVEL, function resetLevel)

  g_commandHandler.registerCommandDefinition(COMMAND_TODSCALE, function todScale)
    ..setDescription("Gets and sets the time of day scale percentage. Use the optional SCALE argument to set the time of day scale.")
    ..addRealArgument("SCALE", true, "The time of day scalar percentage [0.0-100.0]")
  
  g_commandHandler.registerCommandDefinition(COMMAND_TOD, function timeOfDay)
    ..setDescription("Gets and sets the time of day. Use the optional TIME argument to set the time of day.")
    ..addRealArgument("TIME", true, "The time of day [0.0-24.0]. Day starts at {0} and night starts at {1}.".format(TIME_OF_DAY.toString(), TIME_OF_NIGHT.toString()))
  
  g_commandHandler.registerCommandDefinition(COMMAND_TOGGLE_GRACE_PERIOD, function toggleGracePeriod)
    ..setDescription("Gets and sets whether the grace period is enabled")
    ..addBoolArgument("VALUE", true, "Whether or not the grace period is enabled.")
  
  g_commandHandler.registerCommandDefinition(COMMAND_REPUTATION, function printReputation)
    ..setDescription("Prints a player's reputation values")
    ..addIntegerArgument("PLAYER_ID", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETREPUTATION, function setReputation)
    ..setDescription("Sets a player's reputation values")
    ..addIntegerArgument("PLAYER_ID", false)
    ..addArgument(new ChatCommandArgument("REP_TYPE", ChatCommandArgumentType.STRING, false)..setStringOptions("Shelter", "Defense", "Power", "Tech"))
    ..addIntegerArgument("REP_VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_UPDATEREPUTATION, function updateReputation)
    ..setDescription("Updates a player's reputation values")
    ..addIntegerArgument("PLAYER_ID", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SPAWNALLITEMS, function spawnAllItems)
    ..setDescription("Spawns all items in the main item library")
  
  g_commandHandler.registerCommandDefinition(COMMAND_UNITPROPS, function showSelectedUnitStats)
    ..setDescription("Prints the stats of a selected unit")
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETUNITPROP, function setSelectedUnitProperty)
    ..setDescription("Sets the property of a selected unit")
    ..addArgument(new ChatCommandArgument("PROP_NAME", ChatCommandArgumentType.STRING, false)
      ..setStringOptions("critchance", "critmult", "critbonus", "evade", "lifesteal"))
    ..addRealArgument("PROP_VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETHEALTH, function setSelectedUnitHealth)
    ..setDescription("Sets the health of the selected unit")
    ..addRealArgument("VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_SETMANA, function setSelectedUnitMana)
    ..setDescription("Sets the mana of the selected unit")
    ..addRealArgument("VALUE", false)
  
  g_commandHandler.registerCommandDefinition(COMMAND_PAUSE, function pauseSelectedUnits)
    ..setDescription("Pauses the selected units")
  
  g_commandHandler.registerCommandDefinition(COMMAND_PAUSE, function resumeSelectedUnits)
    ..setDescription("Resumes the selected units")
  
  g_commandHandler.registerCommandDefinition(COMMAND_RECYCLERSTATS, function showRecyclerStats)
    ..setDescription("Shows information about active unit recyclers")
  
  g_commandHandler.registerCommandDefinition(COMMAND_ATTACKSENABLED, function setAttacksEnabled)
    ..setDescription("Sets which attacks are enabled for the selected units.")
    ..addArgument(new ChatCommandArgument("WEAPON_INDEX", ChatCommandArgumentType.INT, false)..setIntOptions(0, 1, 2, 3)..setDescription("0 - None, 1 - Attack 1, 2 - Attack 2, 3 - Both"))

  g_commandHandler.registerCommandDefinition(COMMAND_LINK, function linkSelectedUnits)
    ..setDescription("Shows information about active unit recyclers")

  g_commandHandler.registerCommandDefinition(COMMAND_UNLINK, function unlinkSelectedUnits)
    ..setDescription("Shows information about active unit recyclers")

  g_commandHandler.registerCommandDefinition(COMMAND_GAMESPEED, function setGameSpeed)
    ..setDescription("Sets the game speed")
    ..addRealArgument("Speed", false)

// ============================================================================
init

  if (DEV_ENVIRONMENT)
  //{
    g_commandHandler = new DebugChatCommandHandler("Debug", null)
    registerChatCommandHandler(g_commandHandler, -1)

    nullTimer(() -> registerDebugCommands())

    nullTimer() () -> 
      g_memoryTrackingMultiboard = new MemoryTrackingMultiboard()
      ..hide()
  //}