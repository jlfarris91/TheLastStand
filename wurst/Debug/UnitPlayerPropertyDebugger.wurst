package UnitPlayerPropertyDebugger
import Frame
import ClosureTimers
import UnitPropertiesComponent
import PlayerProperties
import ProjectConstants
import DebuggerDialog
import Host
import PlayerExtensions
import SmartValue

group g_tempGroup = CreateGroup()

// ============================================================================
class UnitPropertyDebugger extends Frame

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("TEXTAREA", "UnitPropDebugger", GAME_UI, "", 0))

    doPeriodically(0.1) (CallbackPeriodic cb) ->
      update()

  // --------------------------------------------------------------------------
  function update()

    let frameHandle = getFrameHandle()

    if (frameHandle.isVisible() == false)
      return

    let selectedUnit = g_HostPlayer.getFirstSelectedUnit()

    if (selectedUnit == null)
      BlzFrameSetText(frameHandle, "Select a unit")
      return

    BlzFrameSetText(frameHandle, "===== Properties for {0}: =====".format(selectedUnit.getName()))

    let comp = selectedUnit.getUnitPropertiesComponent()
    if (comp == null)
      BlzFrameAddText(frameHandle, "Unit has no properties component")
      return

    for i = 0 to UnitProperties.count - 1
      let propId = i castTo UnitProperty
      let prop = comp.getProperty(propId)
      addSmartValueTextToFrame(frameHandle, UnitProperties.getPropertyFriendlyName(propId), comp.getPropertyValueAsString(propId), prop)

// ============================================================================
class PlayerPropertyDebugger extends Frame

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("TEXTAREA", "PlayerPropDebugger", GAME_UI, "", 0))

    doPeriodically(0.1) (CallbackPeriodic cb) ->
      update()

  // --------------------------------------------------------------------------
  function update()

    let frameHandle = getFrameHandle()

    if (frameHandle.isVisible() == false)
      return

    let selectedUnit = g_HostPlayer.getFirstSelectedUnit()

    if (selectedUnit == null)
      BlzFrameSetText(frameHandle, "Select a unit")
      return

    let selectedPlayer = selectedUnit.getOwner()

    BlzFrameSetText(frameHandle, "===== Properties for {0}: =====".format(selectedPlayer.getName()))

    for i = 0 to PlayerProperties.count - 1
      let propId = i castTo PlayerProperty
      let prop = selectedPlayer.getProperty(propId)
      addSmartValueTextToFrame(frameHandle, PlayerProperties.getPropertyFriendlyName(propId), selectedPlayer.getPropertyValueAsString(propId), prop)
    
// ============================================================================
function addSmartValueTextToFrame(framehandle frameHandle, string propName, string propValue, SmartValue smartValue)

  let source = smartValue.getSource()
  let affectors = smartValue.getAffectors()

  var propState = ""

  if (source != null or (affectors != null and not affectors.isEmpty()))
  //{
    if (source != null)
      propState += "SRC:{0} ".format(source.getValue().toString())

    for affector in affectors
    //{
      switch (affector.m_type)
        case AffectorType.BASE
          propState += "B:{0} ".format(affector.m_value.toString())
        case AffectorType.SCALE
          propState += "S:{0} ".format(affector.m_value.toString())
        case AffectorType.ABSOLUTE
          propState += "A:{0} ".format(affector.m_value.toString())
      if (affector.getDurationSeconds() > 0.0)
        propState += affector.getRemainingSeconds().toString() + "s "
    //}
  //}

  BlzFrameAddText(frameHandle, "{0} : {1} {2}".format(propName, propValue, propState))  

// ============================================================================
init
  if (DEV_ENVIRONMENT)
    DebuggerDialog.registerFrame("UNIT PROPS", () -> new UnitPropertyDebugger())
    DebuggerDialog.registerFrame("PLAYER PROPS", () -> new PlayerPropertyDebugger())