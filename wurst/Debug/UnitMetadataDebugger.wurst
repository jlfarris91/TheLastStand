package UnitMetadataDebugger
import ProjectConstants
import DebuggerDialog
import PlayerExtensions
import Host
import UnitMetadata
import ColorUtility
import Reflection

// ============================================================================
class UnitMetadataDebugger extends DebuggerRealtimeUpdateFrame

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("TEXTAREA", "UnitMetadata", GAME_UI, "", 0))

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real _)

    let frame = getFrameHandle()

    let selectedUnit = g_HostPlayer.getFirstSelectedUnit()

    if (selectedUnit == null)
      frame.setText("Select a unit")
      return
    
    let metadata = selectedUnit.getMetadata() castTo UnitMetadata

    if (metadata == null)
      frame.setText("Selected unit has no metadata".colorize(Colors.red))
      return

    frame.setOrAddText("Selected unit: " + selectedUnit.getName())

    for comp in metadata.getComponents()
      frame.setOrAddText(typeIdToTypeName(comp.typeId) + ": " + (comp.getEnabled() ? "enabled" : "disabled"))    

// ============================================================================
init
  if (DEV_ENVIRONMENT)
    DebuggerDialog.registerFrame("UNIT", () -> new UnitMetadataDebugger())