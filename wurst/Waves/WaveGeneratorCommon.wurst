package WaveGeneratorCommon
import StandardUnitModifiers
import Range
import GameConstants
import Elites
import WaveSpawning
import StringBuilder
import StringExtensions
import Math
import TlsUpgradeIds
import Spawning

public StandardUnitModifiers g_zombieMeleeModifiers
public StandardUnitModifiers g_eliteMeleeModifiers
public StandardUnitModifiers g_eliteRangedModifiers
public StandardUnitModifiers g_eliteAirModifiers

public StandardUnitModifiers g_necromancerSkeletonWarriorModifiers
public StandardUnitModifiers g_necromancerSkeletonMageModifiers
public StandardUnitModifiers g_necromancerSkeletonChampionModifiers
public StandardUnitModifiers g_tombstoneLesserDarkMinionModifiers
public StandardUnitModifiers g_tombstoneDarkMinionModifiers
public StandardUnitModifiers g_tombstoneGreaterDarkMinionModifiers

// ============================================================================
public function getStandardGoldRewardForWave(SpawnWaveContext context) returns int
  return context.waveNumber - 1

// ============================================================================
public function SpawnWaveDefinition.setupForElite()
  // this..showMinimapIcon(MINIMAP_ICON_PATH_ELITE, MINIMAP_ICON_COLOR_ELITE)

// ============================================================================
public function SpawnWaveDefinition.setupForBoss()
  this..showMinimapIcon(MINIMAP_ICON_PATH_BOSS, MINIMAP_ICON_COLOR_BOSS)
      ..pingOnGroupSpawn(MINIMAP_ICON_COLOR_BOSS)
      ..setTechIdToAdvance(TlsUpgradeIds.bossesKilled)

// ============================================================================
/* Wave starts at 1 */
public function calculateWaveGoldReward(int wave, real diff) returns int

  // No gold reward on the last night or any boss nights since bosses drop gold coins
  if (wave == TOTAL_NIGHTS or wave % 5 == 0)
    return 0

  let bossGoldAmountPerWave = GOLD_PER_BOSS * max(((diff - 0.5) / 2.0).floor() + 1, 1)
  let bossGoldAmountTotal = bossGoldAmountPerWave * BOSS_WAVE_TOTAL_SCALAR

  let expectedGoldDrops = calculateGoldDropAmount(wave, diff)

  var totalGoldDiffAdjusted = GOLD_TOTAL_BASE + max((diff - 1).floor(), 0) * GOLD_PER_DIFF
  totalGoldDiffAdjusted -= bossGoldAmountTotal

  let waveSectionIndex = clamp(((wave - 1.0) / 5.0).floor(), 0, 2)
  let goldPerc = GOLD_PERC_VALUES[waveSectionIndex]
  let baseGoldReward = ((totalGoldDiffAdjusted * goldPerc) / 4.0).floor() - expectedGoldDrops

  return baseGoldReward

// ============================================================================
public function calculateGoldDropAmount(SpawnWaveContext context) returns int
  return calculateGoldDropAmount(context.waveNumber, context.getDifficultyCoeff())

// ============================================================================
public function calculateGoldDropAmount(int wave, real diff) returns int
  return ((wave / 5.0) + max(((diff - 0.5) / 2.0).floor() + 1, 1)).floor()

// ============================================================================
public function calculateMaxAliveCountForZombies(SpawnContext context) returns int
  return 8 + max(context.getDifficultyCoeff().floor(), 0) * 2

// ============================================================================
public function calculateMaxAliveCountForElites(SpawnContext context) returns int
  return 2 + max(((context.getDifficultyCoeff() - 0.5) / 2.0).ceil(), 0)

// ============================================================================
public function calculateMaxSpawnCountForElites(SpawnContext context) returns int
  return calculateMaxAliveCountForElites(context) * 3

// ============================================================================
public function calculateSpawnsPerGoldDropForElites(SpawnContext context) returns int
  return calculateMaxAliveCountForElites(context)

// ============================================================================
public function calculateGoldDropAmountForElites(SpawnContext context) returns int
  return max(((context.getDifficultyCoeff() - 0.5) / 2.0).floor() + 1, 1)

// ============================================================================
public function calculateMaxAliveCountForBoss(SpawnContext context) returns int
  return max(((context.getDifficultyCoeff() - 0.5) / 2.0).floor() + 1, 1)

// ============================================================================
public function calculateMaxSpawnCountForBoss(SpawnContext context) returns int
  return calculateMaxAliveCountForBoss(context)

// ============================================================================
function initialize()

  g_zombieMeleeModifiers = new StandardUnitModifiers()
  g_zombieMeleeModifiers.baseHealth = 160
  g_zombieMeleeModifiers.baseArmor = 1
  g_zombieMeleeModifiers.baseDamageRange = rangeInt(8, 12)
  g_zombieMeleeModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_zombieMeleeModifiers.sightRange = ELITE_SIGHT_RANGE
  g_zombieMeleeModifiers.preferOrganicTargets = false

  g_eliteMeleeModifiers = new StandardUnitModifiers()
  g_eliteMeleeModifiers.baseHealth = 640
  g_eliteMeleeModifiers.baseArmor = 4
  g_eliteMeleeModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 3.0 * ELITE_DAMAGE_SCALAR
  g_eliteMeleeModifiers.attack1Cooldown = 2.0
  g_eliteMeleeModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_eliteMeleeModifiers.sightRange = ELITE_SIGHT_RANGE
  g_eliteMeleeModifiers.preferOrganicTargets = false
  
  g_eliteRangedModifiers = new StandardUnitModifiers()
  g_eliteRangedModifiers.baseHealth = 480
  g_eliteRangedModifiers.baseArmor = 3
  g_eliteRangedModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 2.0 * ELITE_DAMAGE_SCALAR
  g_eliteRangedModifiers.attack1Cooldown = 2.0
  g_eliteRangedModifiers.attack1Range = RANGED_UNIT_ATTACK_RANGE.toReal()
  g_eliteRangedModifiers.sightRange = ELITE_SIGHT_RANGE
  g_eliteRangedModifiers.preferOrganicTargets = false
  
  g_eliteAirModifiers = new StandardUnitModifiers()
  g_eliteAirModifiers.baseHealth = 320
  g_eliteAirModifiers.baseArmor = 2
  g_eliteAirModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 1.5 * ELITE_DAMAGE_SCALAR
  g_eliteAirModifiers.attack1Cooldown = 2.0
  g_eliteAirModifiers.attack1Range = RANGED_UNIT_ATTACK_RANGE.toReal()
  g_eliteAirModifiers.sightRange = ELITE_SIGHT_RANGE
  g_eliteAirModifiers.preferOrganicTargets = false

  // Necromancer - Skeleton Warriors
  g_necromancerSkeletonWarriorModifiers = new StandardUnitModifiers()
  g_necromancerSkeletonWarriorModifiers.baseHealth = 200
  g_necromancerSkeletonWarriorModifiers.baseArmor = 0
  g_necromancerSkeletonWarriorModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 1.5 * ELITE_DAMAGE_SCALAR
  g_necromancerSkeletonWarriorModifiers.attack1Cooldown = 2.0
  g_necromancerSkeletonWarriorModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_necromancerSkeletonWarriorModifiers.sightRange = ELITE_SIGHT_RANGE
  g_necromancerSkeletonWarriorModifiers.preferOrganicTargets = false

  // Necromancer - Skeleton Mage
  g_necromancerSkeletonMageModifiers = new StandardUnitModifiers()
  g_necromancerSkeletonMageModifiers.baseHealth = 300
  g_necromancerSkeletonMageModifiers.baseArmor = 0
  g_necromancerSkeletonMageModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 1.5 * ELITE_DAMAGE_SCALAR
  g_necromancerSkeletonMageModifiers.attack1Cooldown = 2.0
  g_necromancerSkeletonMageModifiers.attack1Range = RANGED_UNIT_ATTACK_RANGE.toReal()
  g_necromancerSkeletonMageModifiers.sightRange = ELITE_SIGHT_RANGE
  g_necromancerSkeletonMageModifiers.preferOrganicTargets = false

  // Necromancer - Skeleton Champions
  g_necromancerSkeletonChampionModifiers = new StandardUnitModifiers()
  g_necromancerSkeletonChampionModifiers.baseHealth = 400
  g_necromancerSkeletonChampionModifiers.baseArmor = 2
  g_necromancerSkeletonChampionModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 2.0 * ELITE_DAMAGE_SCALAR
  g_necromancerSkeletonChampionModifiers.attack1Cooldown = 2.0
  g_necromancerSkeletonChampionModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_necromancerSkeletonChampionModifiers.sightRange = ELITE_SIGHT_RANGE
  g_necromancerSkeletonChampionModifiers.preferOrganicTargets = false

  // Tombstones - Lesser Dark Minions
  g_tombstoneLesserDarkMinionModifiers = new StandardUnitModifiers()
  g_tombstoneLesserDarkMinionModifiers.baseHealth = 200
  g_tombstoneLesserDarkMinionModifiers.baseArmor = 0
  g_tombstoneLesserDarkMinionModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 1.0 * ELITE_DAMAGE_SCALAR
  g_tombstoneLesserDarkMinionModifiers.attack1Cooldown = 2.0
  g_tombstoneLesserDarkMinionModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_tombstoneLesserDarkMinionModifiers.sightRange = ELITE_SIGHT_RANGE
  g_tombstoneLesserDarkMinionModifiers.preferOrganicTargets = false

  // Tombstones - Dark Minions
  g_tombstoneDarkMinionModifiers = new StandardUnitModifiers()
  g_tombstoneDarkMinionModifiers.baseHealth = 400
  g_tombstoneDarkMinionModifiers.baseArmor = 2
  g_tombstoneDarkMinionModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 1.5 * ELITE_DAMAGE_SCALAR
  g_tombstoneDarkMinionModifiers.attack1Cooldown = 2.0
  g_tombstoneDarkMinionModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_tombstoneDarkMinionModifiers.sightRange = ELITE_SIGHT_RANGE
  g_tombstoneDarkMinionModifiers.preferOrganicTargets = false

  // Tombstones - Greater Dark Minions
  g_tombstoneGreaterDarkMinionModifiers = new StandardUnitModifiers()
  g_tombstoneGreaterDarkMinionModifiers.baseHealth = 600
  g_tombstoneGreaterDarkMinionModifiers.baseArmor = 4
  g_tombstoneGreaterDarkMinionModifiers.baseDamageRange = g_zombieMeleeModifiers.baseDamageRange * 2.0 * ELITE_DAMAGE_SCALAR
  g_tombstoneGreaterDarkMinionModifiers.attack1Cooldown = 2.0
  g_tombstoneGreaterDarkMinionModifiers.attack1Range = MELEE_UNIT_ATTACK_RANGE.toReal()
  g_tombstoneGreaterDarkMinionModifiers.sightRange = ELITE_SIGHT_RANGE
  g_tombstoneGreaterDarkMinionModifiers.preferOrganicTargets = false

// ============================================================================
init
  initialize()

// ============================================================================
@test function testCalculatWaveGoldReward()

  for d = 0 to 5
    let diff = d == 0 ? 0.5 : d.toReal()
    let sb = new StringBuilder()
    sb.append(d.toString().padLeft(3, " ") + ": ")
    var total = 0
    for i = 1 to 16
      let value = calculateWaveGoldReward(i, diff)
      sb.append(value.toString().padLeft(3, " ") + " ")
      total += value
    sb.append(" = " + total.toString())
    Log.info(sb.toStringAndDestroy())

// ============================================================================
@test function testCalculatGoldDropAmount()

  for d = 0 to 5
    let diff = d == 0 ? 0.5 : d.toReal()
    let sb = new StringBuilder()
    sb.append(d.toString().padLeft(3, " ") + ": ")
    var total = 0
    for i = 1 to 16
      let value = calculateGoldDropAmount(i, diff)
      sb.append(value.toString().padLeft(3, " ") + " ")
      total += value
    sb.append(" = " + total.toString())
    Log.info(sb.toStringAndDestroy())

// ============================================================================
@test function testZombieStats()

  initialize()

  let context = new SpawnWaveContext()

  for d = 0 to 5
    let diff = d == 0 ? 0.5 : d.toReal()
    for t = 0 to 2
      context.setTier(t)
      let sb = new StringBuilder()
      sb.append(d.toString().padLeft(4, " ") + ":  T" + t.toString() + " ")
      for i = 1 to 16
        context.waveNumber = i
        context.setDifficultyCoeff(diff)
        let value = g_zombieMeleeModifiers.getHealth(context, 1.0)
        sb.append(value.toString().padLeft(4, " ") + " ")
      Log.info(sb.toStringAndDestroy())
    Log.info("")