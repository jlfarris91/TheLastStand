package StandardUnitModifiers
import UnitModifiers
import Math
import Range
import UnitExtensions
import GameConstants
import ItemLibrary
import Func
import TlsItemIds
import WaveSpawning

Func1<real, real> g_coinSmallWeightTFunc
Func1<real, real> g_coinMediumWeightTFunc
Func1<real, real> g_coinLargeWeightTFunc
Func1<real, real> g_coinEpicWeightTFunc

ItemSet array[TOTAL_NIGHTS] g_coinItemSets
rangeInt array[TOTAL_NIGHTS] g_goldRange

// ============================================================================
public class StandardUnitModifiers
  rangeInt healthRange
  rangeReal armorRange
  rangeInt attack1MinDamageRange
  rangeInt attack1MaxDamageRange
  rangeReal attack1Cooldown
  real attack1Range
  real sightRange
  bool preferOrganicTargets

  // --------------------------------------------------------------------------
  construct ()
    skip

  // --------------------------------------------------------------------------
  construct (StandardUnitModifiers other)
    healthRange = other.healthRange
    armorRange = other.armorRange
    attack1MinDamageRange = other.attack1MinDamageRange
    attack1MaxDamageRange = other.attack1MaxDamageRange
    attack1Cooldown = other.attack1Cooldown
    attack1Range = other.attack1Range
    sightRange = other.sightRange
    preferOrganicTargets = other.preferOrganicTargets

  // --------------------------------------------------------------------------
  function apply(SpawnWaveContext context, unit _unit)
    apply(context, _unit, 1.0)

  // --------------------------------------------------------------------------
  function apply(SpawnWaveContext context, unit _unit, real scale)
    applyHealth(context, _unit, scale)
    applyArmor(context, _unit, scale)
    applyAttack1DamageRange(context, _unit, scale)
    applyAttack1Cooldown(context, _unit, scale)
    applyMisc(_unit)

  // --------------------------------------------------------------------------
  function getHealth(SpawnWaveContext context, real scale) returns int
    let gameT = context.getUnitModifierGameProgress01()
    let finalDifficultyScale = context.getUnitModifierDifficultyScalar01() * scale
    return R2I(healthRange.lerp(gameT) * finalDifficultyScale)

  // --------------------------------------------------------------------------
  function applyHealth(SpawnWaveContext context, unit _unit, real scale)
    _unit.setMaxHPandHP(getHealth(context, scale))

  // --------------------------------------------------------------------------
  function getArmor(SpawnWaveContext context, real scale) returns real
    let gameT = context.getUnitModifierGameProgress01()
    let finalDifficultyScale = context.getUnitModifierDifficultyScalar01() * scale
    return armorRange.lerp(gameT) * finalDifficultyScale

  // --------------------------------------------------------------------------
  function applyArmor(SpawnWaveContext context, unit _unit, real scale)
    _unit.setArmor(getArmor(context, scale))

  // --------------------------------------------------------------------------
  function getAttack1DamageRange(SpawnWaveContext context, real scale) returns rangeInt
    let gameT = context.getUnitModifierGameProgress01()
    let finalDifficultyScale = context.getUnitModifierDifficultyScalar01() * scale
    var range = lerp(attack1MinDamageRange, attack1MaxDamageRange, gameT)
    range.min = R2I(I2R(range.min) * finalDifficultyScale)
    range.max = R2I(I2R(range.max) * finalDifficultyScale)
    return range

  // --------------------------------------------------------------------------
  function applyAttack1DamageRange(SpawnWaveContext context, unit _unit, real scale)
    _unit.setDamageRange(0, getAttack1DamageRange(context, scale))

  // --------------------------------------------------------------------------
  function getAttack1Cooldown(SpawnWaveContext context, real scale) returns real
    let gameT = context.getUnitModifierGameProgress01()
    let finalDifficultyScale = context.getUnitModifierDifficultyScalar01() * scale
    var cooldown = attack1Cooldown.lerp(gameT)
    cooldown /= 1.0 + (finalDifficultyScale - 1.0) * ELITE_DIFFICULTY_ATTACK_COOLDOWN_SCALAR
    return cooldown

  // --------------------------------------------------------------------------
  function applyAttack1Cooldown(SpawnWaveContext context, unit _unit, real scale)
    _unit.setAttackCooldown(getAttack1Cooldown(context, scale), 0)
  
  // --------------------------------------------------------------------------
  function applyMisc(unit _unit)
    _unit.setAttackRange(0, attack1Range)
    _unit.setAcquisitionRange(sightRange)
    _unit.setSightRadius(sightRange)

    if (preferOrganicTargets)
      _unit.preferOrganicTargets()

// ============================================================================
public function unit.guaranteeGrantCoinsOnDeath(int coinItemTypeId, int waveNumber)
  let coinItemSet = getCoinItemSetForWave(waveNumber)
  this.awardItemOnDeath(coinItemSet, coinItemTypeId)

// ============================================================================
function getCoinItemSetForWave(int waveIndex) returns ItemSet
  return g_coinItemSets[waveIndex]

// ============================================================================
init
  g_coinSmallWeightTFunc = (real t) -> clamp01(Pow(1 - t, 8))
  g_coinSmallWeightTFunc.acquire()

  g_coinMediumWeightTFunc = (real t) -> clamp01((Sin(clamp(t, 0.0, 0.666) * 3 * PI - PIHALF)) / 2.0 + 0.5)
  g_coinMediumWeightTFunc.acquire()

  g_coinLargeWeightTFunc = (real t) -> clamp((Sin(clamp(t, 0.333, 1.0) * 3 * PI + PIHALF)) / 2.0 + 0.5, 0.001, 1.0)
  g_coinLargeWeightTFunc.acquire()

  g_coinEpicWeightTFunc = (real t) -> clamp(Pow(t, 8), 0.001, 1.0)
  g_coinEpicWeightTFunc.acquire()
  
  // Generate coin item sets for each wave
  for i = 1 to TOTAL_NIGHTS
    let gameT = clamp01(i.toReal() / TOTAL_NIGHTS)
    let coinItemSet = new ItemSet("Coins", COLOR_GOLD.withoutAlpha())
    let weightSmall = g_coinSmallWeightTFunc.call(gameT)
    let weightMedium = g_coinMediumWeightTFunc.call(gameT)
    let weightLarge = g_coinLargeWeightTFunc.call(gameT)
    let weightEpic = g_coinEpicWeightTFunc.call(gameT)
    coinItemSet.add(TlsItemIds.coinSmall, weightSmall)
    coinItemSet.add(TlsItemIds.coinMedium, weightMedium)
    coinItemSet.add(TlsItemIds.coinLarge, weightLarge)
    coinItemSet.add(TlsItemIds.coinEpic, weightEpic)
    g_coinItemSets[i] = coinItemSet