package WaveSpawning
import Events
import Vector
import Runnable
import Func
import GameConstants
import Action
import Spawning
import HashMap
import Range
import SoundUtils
import Math
import PlayerSpawnPointProviders

// ============================================================================
public interface ISpawnWaveActivator extends IRunnable
  function getActivatedEvent() returns Event
  function getTimesActivated() returns int
  function getActivateOnStart() returns bool
  function setActivateOnStart(bool value)

// ============================================================================
public class SpawnWaveDefinition implements ISpawnDefinition
  private string m_name
  private Func1<SpawnWaveContext, Runnable> m_progressFactory
  private ISpawnWaveActivator m_activator
  private SpawnRange m_spawnRange
  private ITieredUnitTypeProvider m_unitTypeProvider
  private Func1<SpawnWaveContext, int> m_maxSpawnCount
  private Func1<SpawnWaveContext, int> m_maxAliveCount
  private Func1<SpawnWaveContext, int> m_groupSize
  private Func1<SpawnWaveContext, int> m_goldReward
  private Action2<unit, SpawnContext> m_commonUnitModifier
  private IterableMap<int, Action2<unit, SpawnContext>> m_unitModifiers
  private Vector<string> m_tags
  private bool m_waitForFullSpawnGroup = false
  private bool m_useUnitRecycler = false
  private rangeReal m_facingAngleRange = REAL_RANGE_ZERO
  private SpawnPointProviderType m_spawnPointProviderType = SpawnPointProviderType.CACHED_HOSTILE
  private sound m_playSoundOnStart = null
  private sound m_playSoundOnComplete = null
  private SoundDefinition m_playSoundOnGroupSpawn = null
  private string m_minimapIconPath = null
  private color m_minimapIconColor = color(255, 255, 255)
  private bool m_pingOnGroupSpawn = false
  private color m_pingOnGroupSpawnColor = color(255, 255, 255)
  private Func1<SpawnWaveContext, int> m_spawnsPerGoldDrop
  private Func1<SpawnWaveContext, int> m_goldDropAmount
  private int m_techIdToAdvance

  // --------------------------------------------------------------------------
  construct(string name)
    m_name = name
    m_tags = new Vector<string>()

  // --------------------------------------------------------------------------
  ondestroy
    if (m_progressFactory != null)
      m_progressFactory.release()
      m_progressFactory = null

    if (m_activator != null)
      destroy m_activator
      m_activator = null

    if (m_unitTypeProvider != null)
      destroy m_unitTypeProvider
      m_unitTypeProvider = null

    if (m_maxAliveCount != null)
      m_maxAliveCount.release()
      m_maxAliveCount = null

    if (m_maxSpawnCount != null)
      m_maxSpawnCount.release()
      m_maxSpawnCount = null

    if (m_groupSize != null)
      m_groupSize.release()
      m_groupSize = null

    if (m_spawnsPerGoldDrop != null)
      m_spawnsPerGoldDrop.release()
      m_spawnsPerGoldDrop = null

    if (m_goldDropAmount != null)
      m_goldDropAmount.release()
      m_goldDropAmount = null

    if (m_commonUnitModifier != null)
      m_commonUnitModifier.release()
      m_commonUnitModifier = null

    if (m_unitModifiers != null)
      for unitTypeId in m_unitModifiers
        m_unitModifiers.get(unitTypeId).release()
      destroy m_unitModifiers
      m_unitModifiers = null

    if (m_goldReward != null)
      m_goldReward.release()
      m_goldReward = null

    destroy m_tags
    m_tags = null

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function setProgressFactory(Func1<SpawnWaveContext, Runnable> progressFactory)
    if (progressFactory != null)
      progressFactory.acquire()
    if (m_progressFactory != null)
      m_progressFactory.release()
    m_progressFactory = progressFactory

  // --------------------------------------------------------------------------
  function getProgress(SpawnWaveContext context) returns Runnable
    return m_progressFactory == null ? null : m_progressFactory.call(context)

  // --------------------------------------------------------------------------
  function setSpawnRange(SpawnRange spawnRange)
    m_spawnRange = spawnRange

  // --------------------------------------------------------------------------
  function getSpawnRange() returns SpawnRange
    return m_spawnRange

  // --------------------------------------------------------------------------
  function setUnitTypeProvider(ITieredUnitTypeProvider unitTypeProvider)
    m_unitTypeProvider = unitTypeProvider

  // --------------------------------------------------------------------------
  function getUnitTypeProvider() returns ITieredUnitTypeProvider
    return m_unitTypeProvider

  // --------------------------------------------------------------------------
  function setMaxAliveCount(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_maxAliveCount != null)
      m_maxAliveCount.release()
    m_maxAliveCount = value

  // --------------------------------------------------------------------------
  function getMaxAliveCount(SpawnWaveContext context) returns int
    if (m_maxAliveCount == null)
      return UNLIMITED
    return clamp(m_maxAliveCount.call(context), 0, UNLIMITED)

  // --------------------------------------------------------------------------
  function setMaxSpawnCount(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_maxSpawnCount != null)
      m_maxSpawnCount.release()
    m_maxSpawnCount = value

  // --------------------------------------------------------------------------
  function getMaxSpawnCount(SpawnWaveContext context) returns int
    if (m_maxSpawnCount == null)
      return UNLIMITED
    return clamp(m_maxSpawnCount.call(context), 0, UNLIMITED)

  // --------------------------------------------------------------------------
  function getGroupSize(SpawnWaveContext context) returns int
    if (m_groupSize == null)
      return 1
    return min(m_groupSize.call(context), getMaxAliveCount(context))

  // --------------------------------------------------------------------------
  function setGroupSize(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_groupSize != null)
      m_groupSize.release()
    m_groupSize = value

  // --------------------------------------------------------------------------
  function setSpawnsPerGoldDrop(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_spawnsPerGoldDrop != null)
      m_spawnsPerGoldDrop.release()
    m_spawnsPerGoldDrop = value

  // --------------------------------------------------------------------------
  function getSpawnsPerGoldDrop(SpawnWaveContext context) returns int
    if (m_spawnsPerGoldDrop == null)
      return 0
    return max(m_spawnsPerGoldDrop.call(context), 0)

  // --------------------------------------------------------------------------
  function setGoldDropAmount(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_goldDropAmount != null)
      m_goldDropAmount.release()
    m_goldDropAmount = value

  // --------------------------------------------------------------------------
  function getGoldDropAmount(SpawnWaveContext context) returns int
    if (m_goldDropAmount == null)
      return 0
    return max(m_goldDropAmount.call(context), 0)

  // --------------------------------------------------------------------------
  override function setCommonUnitModifier(Action2<unit, SpawnContext> action)
    action.acquire()
    if (m_commonUnitModifier != null)
      m_commonUnitModifier.release()
    m_commonUnitModifier = action

  // --------------------------------------------------------------------------
  override function getCommonUnitModifier() returns Action2<unit, SpawnContext>
    return m_commonUnitModifier

  // --------------------------------------------------------------------------
  override function setUnitModifier(int unitTypeId, Action2<unit, SpawnContext> action)
    action.acquire()
    if (m_unitModifiers == null)
      m_unitModifiers = new IterableMap<int, Action2<unit, SpawnContext>>()
    let existing = m_unitModifiers.get(unitTypeId)
    if (existing != null)
      existing.release()
    m_unitModifiers.put(unitTypeId, action)

  // --------------------------------------------------------------------------
  override function getUnitModifier(int unitTypeId) returns Action2<unit, SpawnContext>
    if (m_unitModifiers == null)
      return null
    return m_unitModifiers.get(unitTypeId)

  // --------------------------------------------------------------------------
  function setTags(vararg string tags)
    m_tags.clear()
    for tag in tags
      m_tags.add(tag)

  // --------------------------------------------------------------------------
  function getTags() returns Vector<string>
    return m_tags

  // --------------------------------------------------------------------------
  function getWaitForFullSpawnGroup() returns bool
    return m_waitForFullSpawnGroup

  // --------------------------------------------------------------------------
  function setWaitForFullSpawnGroup(bool value)
    m_waitForFullSpawnGroup = value

  // --------------------------------------------------------------------------
  function getUseUnitRecycler() returns bool
    return m_useUnitRecycler

  // --------------------------------------------------------------------------
  function setUseUnitRecycler(bool value)
    m_useUnitRecycler = value

  // --------------------------------------------------------------------------
  function getGoldReward(SpawnWaveContext context) returns int
    return m_goldReward != null ? m_goldReward.call(context) : 0

  // --------------------------------------------------------------------------
  function setGoldReward(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_goldReward != null)
      m_goldReward.release()
    m_goldReward = value

  // --------------------------------------------------------------------------
  function getFacingAngleRange() returns rangeReal
    return m_facingAngleRange

  // --------------------------------------------------------------------------
  function setFacingAngleRange(rangeReal range)
    m_facingAngleRange = range
  
  // --------------------------------------------------------------------------
  function getSpawnPointProviderType() returns SpawnPointProviderType
    return m_spawnPointProviderType
  
  // --------------------------------------------------------------------------
  function setSpawnPointProviderType(SpawnPointProviderType value)
    m_spawnPointProviderType = value

  // --------------------------------------------------------------------------
  function playSoundOnStart(sound value)
    m_playSoundOnStart = value

  // --------------------------------------------------------------------------
  function getPlaySoundOnStart() returns sound
    return m_playSoundOnStart

  // --------------------------------------------------------------------------
  function playSoundOnComplete(sound value)
    m_playSoundOnComplete = value

  // --------------------------------------------------------------------------
  function getPlaySoundOnComplete() returns sound
    return m_playSoundOnComplete

  // --------------------------------------------------------------------------
  function playSoundOnGroupSpawn(SoundDefinition definition)
    m_playSoundOnGroupSpawn = definition

  // --------------------------------------------------------------------------
  function getPlaySoundOnGroupSpawn() returns SoundDefinition
    return m_playSoundOnGroupSpawn

  // --------------------------------------------------------------------------
  function showMinimapIcon(string iconPath, color color)
    m_minimapIconPath = iconPath
    m_minimapIconColor = color

  // --------------------------------------------------------------------------
  function getMinimapIconPath() returns string
    return m_minimapIconPath

  // --------------------------------------------------------------------------
  function getMinimapIconColor() returns color
    return m_minimapIconColor
  
  // --------------------------------------------------------------------------
  function pingOnGroupSpawn(color color)
    m_pingOnGroupSpawn = true
    m_pingOnGroupSpawnColor = color
  
  // --------------------------------------------------------------------------
  function getPingOnGroupSpawn() returns bool
    return m_pingOnGroupSpawn
  
  // --------------------------------------------------------------------------
  function getPingOnGroupSpawnColor() returns color
    return m_pingOnGroupSpawnColor
  
  // --------------------------------------------------------------------------
  function getTechIdToAdvance() returns int
    return m_techIdToAdvance
  
  // --------------------------------------------------------------------------
  function setTechIdToAdvance(int value)
    m_techIdToAdvance = value

// ============================================================================
public class SpawnWaveContext extends SpawnContext
  SpawnWaveDefinition definition = null
  int waveNumber = 0
  real waveProgress = 0.0
  int goldDrops = 0
  int goldAvailable = 0

  private real array[MAX_ELITE_TIER] m_tierChances = [ 1.0, 0.0, 0.0]

  private Event m_onUnitKilled
  private int m_killCount = 0

  // --------------------------------------------------------------------------
  construct()
  
  // --------------------------------------------------------------------------
  construct(SpawnWaveContext other)
    definition = other.definition
    waveNumber = other.waveNumber
    waveProgress = other.waveProgress
    goldDrops = other.goldDrops
    goldAvailable = other.goldAvailable
    m_killCount = other.m_killCount
    m_tierChances[0] = other.m_tierChances[0]
    m_tierChances[1] = other.m_tierChances[1]
    m_tierChances[2] = other.m_tierChances[2]

  // --------------------------------------------------------------------------
  ondestroy
    if (m_onUnitKilled != null)
      destroy m_onUnitKilled
      m_onUnitKilled = null

  // --------------------------------------------------------------------------
  override function clone() returns SpawnContext
    return new SpawnWaveContext(this)

  // --------------------------------------------------------------------------
  function onUnitKilled() returns IEvent
    if (m_onUnitKilled == null)
      m_onUnitKilled = new Event()
    return m_onUnitKilled

  // --------------------------------------------------------------------------
  function getKillCount() returns int
    return m_killCount

  // --------------------------------------------------------------------------
  function incKillCount()
    m_killCount++
    if (m_onUnitKilled != null)
      m_onUnitKilled.call()

  // --------------------------------------------------------------------------
  function getTierChance(int index) returns real
    return m_tierChances[index]

  // --------------------------------------------------------------------------
  function setTierChance(int index, real value)
    m_tierChances[index] = value

  // --------------------------------------------------------------------------
  function getRandomTier() returns int
    var roll01 = GetRandomReal(0, 1)
    var tier = 0
    for i = 0 to MAX_ELITE_TIER - 1
      let tierChance = m_tierChances[i]
      if (roll01 < tierChance)
        tier = i
        break
      roll01 -= tierChance
    return tier

// ============================================================================
public class SpawnWaveTieredUnitTypeProvider extends TieredUnitTypeProvider

  // --------------------------------------------------------------------------
  override function getUnitTypes(SpawnContext context, int count, UnitTypeCollection output)    
    let spawnWaveContext = context castTo SpawnWaveContext    
    for i = 0 to count - 1
      let tier = spawnWaveContext.getRandomTier()
      output.add(getUnitType(tier))