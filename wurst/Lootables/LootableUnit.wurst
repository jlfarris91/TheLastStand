package LootableUnit
import TimerUtils
import WeightedSet
import GameConstants
import TextProgressBar
import TextProgressBarTag
import UnitMetadata
import ClosureTimers
import LootableReward
import ErrorHandling
import Composition
import Type
import TimeOfDayEvents
import AnonymousEvent

constant int ABILITY_ID_LOOTABLE = 'A02C'
constant colorA LOOTABLE_COLOR = colorA(255, 255, 255, 255)
constant colorA LOOTED_COLOR = colorA(150, 150, 150, 150)

constant int PROGRESS_BAR_LENGTH = 20
constant colorA PROGRESS_BAR_FOREGROUND = colorA(0, 170, 0, 255)
constant colorA PROGRESS_BAR_BACKGROUND = colorA(0, 64, 0, 255)
constant real PROGRESS_BAR_UPDATE_PERIOD = 0.1

TextProgressBar g_LootOperationProgressBar

// ============================================================================
public class LootableUnit extends BaseUnitMetadata
  private WeightedSet<ILootableReward> _rewards
  private real _searchDuration
  private bool _isBeingLooted
  private int _cooldown
  private AnonymousEventHandler _dayCB

  // --------------------------------------------------------------------------
  construct(unit lootableUnit)
    super(lootableUnit)

    // All lootables belong to the Villagers player
    lootableUnit.setOwner(PLAYER_VILLAGERS, true)

    this._searchDuration = 3.0
    this._isBeingLooted = false
    this._cooldown = 0
    this._rewards = new WeightedSet<ILootableReward>()

    this.onLootable()

  // --------------------------------------------------------------------------
  ondestroy
    for reward in _rewards
      destroy reward
    destroy _rewards
    _rewards = null

    if (_dayCB != null)
      _dayCB = g_DayEvent.removeListener(_dayCB)
    
  // --------------------------------------------------------------------------
  @inline
  override function getUnit() returns unit
    return super.getUnit()
    
  // --------------------------------------------------------------------------
  @inline
  override function addComponent(IComponent component) returns IComponent
    return super.addComponent(component)

  // --------------------------------------------------------------------------
  @inline
  override function getComponent(Type componentTypeId) returns IComponent
    return super.getComponent(componentTypeId)

  // --------------------------------------------------------------------------
  function getRewardsSet() returns WeightedSet<ILootableReward>
    return _rewards

  // --------------------------------------------------------------------------
  function getPos() returns vec2
    return this._unit.getPos()

  // --------------------------------------------------------------------------
  function getSearchDuration() returns real
    return _searchDuration

  // --------------------------------------------------------------------------
  function setSearchDuration(real duration)
    _searchDuration = duration

  // --------------------------------------------------------------------------
  function isBeingLooted() returns bool
    return this._isBeingLooted

  // --------------------------------------------------------------------------
  function canLoot(IUnitMetadata _lootingUnit) returns bool
    return this._cooldown == 0 and not this._isBeingLooted

  // --------------------------------------------------------------------------
  function resetCooldown()
    if (this._cooldown == 0)
      return
    this._cooldown = 0
    this.onLootable()

  // --------------------------------------------------------------------------
  function decrementCooldown()
    if (this._cooldown == 0)
      return
    this._cooldown--
    if (this._cooldown == 0)
      onLootable()

  // --------------------------------------------------------------------------
  function startLooting(IUnitMetadata lootingUnit)
    if (not canLoot(lootingUnit))
      return
    this._cooldown = GetRandomInt(LOOTABLES_COOLDOWN_MIN, LOOTABLES_COOLDOWN_MAX)
    this._isBeingLooted = true
    lootingUnit.pause()
    startLootOperation(lootingUnit, this, _searchDuration)

  // --------------------------------------------------------------------------
  protected function onLootingFinished(IUnitMetadata lootingUnit)
    this._isBeingLooted = false
    lootingUnit.unpause()
    this.giveLoot(lootingUnit)
    this.onLooted()

  // --------------------------------------------------------------------------
  protected function giveLoot(IUnitMetadata lootingUnit)
    let reward = _rewards.getRandom()
    if (reward == null)
      error("No reward registered for lootable")
    reward.giveReward(this, lootingUnit)

  // --------------------------------------------------------------------------
  private function onLooted()
    this._unit.removeAbility(ABILITY_ID_LOOTABLE)
    this._unit.setVertexColor(LOOTED_COLOR)
    UnitRemoveType(this._unit, UNIT_TYPE_ANCIENT)
    startListeningToDayEvent()

  // --------------------------------------------------------------------------
  private function onLootable()
    this._unit.addAbility(ABILITY_ID_LOOTABLE)
    this._unit.setVertexColor(LOOTABLE_COLOR)
    // Makes the unit targettable by the search ability
    UnitAddType(this._unit, UNIT_TYPE_ANCIENT)
    stopListeningToDayEvent()

  // --------------------------------------------------------------------------
  private function startListeningToDayEvent()
    stopListeningToDayEvent()
    _dayCB = g_DayEvent.addListener() () ->
      decrementCooldown()

  // --------------------------------------------------------------------------
  private function stopListeningToDayEvent()
    if (_dayCB != null)
      _dayCB = g_DayEvent.removeListener(_dayCB)

// ============================================================================
public class EnterableLootable extends LootableUnit

  // --------------------------------------------------------------------------
  construct(unit lootableUnit)
    super(lootableUnit)

  // --------------------------------------------------------------------------
  override function startLooting(IUnitMetadata lootingUnit)
    lootingUnit.hide()
    this._unit.shareVision(lootingUnit.getOwner(), true)
    super.startLooting(lootingUnit)

  // --------------------------------------------------------------------------
  override function onLootingFinished(IUnitMetadata lootingUnit)
    this._unit.shareVision(lootingUnit.getOwner(), false)
    lootingUnit.show()
    lootingUnit.getOwner().selectSingle(lootingUnit.getUnit())
    super.onLootingFinished(lootingUnit)

// ============================================================================
class LootOperation
  private IUnitMetadata _lootingUnit
  private LootableUnit _lootable
  private timer _timer
  private timerdialog _dialog
  private ProgressBarTag _progressBar
  private real _duration
  private CallbackPeriodic _updateCB

  // --------------------------------------------------------------------------
  construct(IUnitMetadata lootingUnit, LootableUnit lootable, real duration)
    this._lootingUnit = lootingUnit
    this._lootable = lootable
    this._duration = duration

    this._timer = getTimer()
    this._timer.doAfter(duration) () ->
      lootable.onLootingFinished(lootingUnit)
      destroy this
    
    this._dialog = this._timer.createTimerDialog()
    this._dialog.setRealTimeRemaining(duration)
    this._dialog.setTitle("Looting...")
    if (localPlayer == lootingUnit.getOwner())
      this._dialog.display(true)

    this._progressBar = new ProgressBarTag(g_LootOperationProgressBar, lootable.getPos().withZ(0.0), 10.0)
    this._progressBar.showForPlayer(lootingUnit.getOwner())

    _updateCB = doPeriodically(PROGRESS_BAR_UPDATE_PERIOD) (CallbackPeriodic cb) ->
      this._progressBar.update(_timer.getElapsed() / this._duration)

  // --------------------------------------------------------------------------
  ondestroy
    destroy this._progressBar
    destroy _updateCB
    this._dialog.destr()

// ============================================================================
function startLootOperation(IUnitMetadata lootingUnit, LootableUnit lootable, real duration)
  new LootOperation(lootingUnit, lootable, duration)

// ============================================================================
init
  g_LootOperationProgressBar = new TextProgressBar(PROGRESS_BAR_LENGTH, PROGRESS_BAR_FOREGROUND, PROGRESS_BAR_BACKGROUND)