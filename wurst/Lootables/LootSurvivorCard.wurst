package LootSurvivorCard
import Lootables
import SurvivorJobs
import Action
import GameConstants
import UnitExtensions
import Orders
import FX
import Notifications
import ColorUtility
import HashMap
import WeightedSet
import SoundUtils
import TlsUnitIds
import UnitMetadata
import CreateUnitJob
import Jobs
import World

HashMap<int, WeightedSet<SoundDefinition>> g_lootFinishedSoundMap

WeightedSet<SurvivorJobType> array[3] g_tieredJobTypes = [
  new WeightedSet<SurvivorJobType>(),
  new WeightedSet<SurvivorJobType>(),
  new WeightedSet<SurvivorJobType>()
]

// ============================================================================
public class LootSurvivorCard extends LootCard
  private Action1<unit> array[3] m_tierModifiers

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)
    
    for i = 0 to 2
      m_tierModifiers[i] = null

  // ----------------------------------------------------------------------------
  ondestroy

    for i = 0 to 2
      if (m_tierModifiers[i] != null)
        m_tierModifiers[i].release()
        m_tierModifiers[i] = null

  // ----------------------------------------------------------------------------
  override function getDiscardOnActivate() returns bool
    return true

  // ----------------------------------------------------------------------------
  override function getTierCount() returns int
    return 3

  // ----------------------------------------------------------------------------
  override function getTierValueMultiplier(int tier) returns real
    return tier + 1.0

  // --------------------------------------------------------------------------
  override function activateCard(int tier) returns bool
    
    let lootable = getLootable()
    let looter = getLooter()
    let owner = looter.getOwner()
    let lootableComp = lootable.getMetadata().getLootableComponent()
    let spawnPos = lootableComp.getSpawnPosition()

    let jobTypeSet = g_tieredJobTypes[tier]
    let jobType = jobTypeSet.getRandom()

    let jobDef = SurvivorJobs.getJobDefinition(jobType)

    let createUnitJob = World.createUnit(
      PLAYER_VILLAGERS,
      jobDef.getInitialUnitType(),
      spawnPos,
      GetRandomDirectionDeg().asAngleDegrees())

    createUnitJob.onCompleted().register() (Job job) ->
    //{
      let survivor = (job castTo CreateUnitJob).getLastCreatedUnit()

      survivor.fadeIn(color(150, 150, 150))
      survivor.issuePointOrderById(OrderIds.move, looter.getPos())

      FX.createFoundSurvivorTag(spawnPos, owner)

      if (m_tierModifiers[tier] != null)
        m_tierModifiers[tier].call(survivor)
      
      let survivorJob = SurvivorJobs.getJobDefinitionForUnitType(survivor.getTypeId())

      let notification = new LootRewardNotification(
        NotificationManager.nextNotificationId(),
        owner,
        looter.getPos(),
        getSoundDefinition(survivor.getTypeId()))
      ..setMessage("Found " + "{0} {1}".format(survivorJob.getTitle(survivor.getTypeId()), survivor.getProperName()).gold())
      ..setIconPath(survivor.getIconPath())

      lootableComp.showLootRewardNotification(owner, notification)
    //}

    return true

// ============================================================================
function registerSoundDefinition(int unitTypeId, string soundPath, int volume, real weight)
  var sounds = g_lootFinishedSoundMap.get(unitTypeId)
  if (sounds == null)
    sounds = new WeightedSet<SoundDefinition>()
    g_lootFinishedSoundMap.put(unitTypeId, sounds)
  let definition = new SoundDefinition(soundPath, false, false)
  definition.volume = volume
  sounds.add(definition, weight)

// ============================================================================
function getSoundDefinition(int unitTypeId) returns SoundDefinition
  var sounds = g_lootFinishedSoundMap.get(unitTypeId)
  if (sounds == null)
    sounds = g_lootFinishedSoundMap.get(TlsUnitIds.Survivors.survivorMale)
  return sounds.getRandom()

// ============================================================================
init

  g_tieredJobTypes[0].add(SurvivorJobType.None, 5)
  g_tieredJobTypes[0].add(SurvivorJobType.Builder, 1)
  g_tieredJobTypes[1].add(SurvivorJobType.Militia, 2)
  g_tieredJobTypes[1].add(SurvivorJobType.Spearman, 1)
  g_tieredJobTypes[1].add(SurvivorJobType.Priest, 1)
  g_tieredJobTypes[2].add(SurvivorJobType.Marksman, 1)

  g_lootFinishedSoundMap = new HashMap<int, WeightedSet<SoundDefinition>>()

  registerSoundDefinition(TlsUnitIds.Survivors.survivorMale, "units\\critters\\villagerman\\villagerm1.flac", 64, 2)
  registerSoundDefinition(TlsUnitIds.Survivors.survivorMale, "units\\critters\\villagerman\\villagerm3.flac", 64, 1)

  registerSoundDefinition(TlsUnitIds.Survivors.builder, "units\\human\\peasant\\peasantready1.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.militia1, "units\\human\\peasant\\peasantready1.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.militia2, "units\\human\\footman\\footmanwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.militia2, "units\\human\\footman\\footmanwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.militia2, "units\\human\\footman\\footmanwhat3.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.militia2, "units\\human\\footman\\footmanwhat4.flac", 64, 1)

  registerSoundDefinition(TlsUnitIds.Survivors.militia3, "units\\human\\thecaptain\\captainwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.militia3, "units\\human\\thecaptain\\captainwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.militia3, "units\\human\\thecaptain\\captainwhat3.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.spearman1, "units\\creeps\\bandit\\banditwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.spearman1, "units\\creeps\\bandit\\banditwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.spearman1, "units\\creeps\\bandit\\banditwhat3.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.spearman2, "units\\creeps\\bandit\\banditwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.spearman2, "units\\creeps\\bandit\\banditwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.spearman2, "units\\creeps\\bandit\\banditwhat3.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.priest1, "units\\human\\priest\\priestwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.priest1, "units\\human\\priest\\priestwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.priest1, "units\\human\\priest\\priestwhat3.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.priest1, "units\\human\\priest\\priestwhat4.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.marksman1, "units\\human\\rifleman\\riflemanwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.marksman1, "units\\human\\rifleman\\riflemanwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.marksman1, "units\\human\\rifleman\\riflemanwhat3.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.marksman2, "units\\human\\rifleman\\riflemanwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.marksman2, "units\\human\\rifleman\\riflemanwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.marksman2, "units\\human\\rifleman\\riflemanwhat3.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.marksman3, "units\\human\\rifleman\\riflemanwhat1.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.marksman3, "units\\human\\rifleman\\riflemanwhat2.flac", 64, 1)
  registerSoundDefinition(TlsUnitIds.Survivors.marksman3, "units\\human\\rifleman\\riflemanwhat3.flac", 64, 1)
  
  registerSoundDefinition(TlsUnitIds.Survivors.engineer, "units\\human\\peasant\\peasantready1.flac", 64, 1)