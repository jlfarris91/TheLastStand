package Lootables
import HashList
import Notifications
import SoundUtils
import Command
import ClosureTimers
import FullscreenFrame
import ClosureFrames
import StandardTooltip
import Deck
import Directors
import TlsAbilityIds
import UnitMetadata
import UnitPropertiesComponent

// Buildings
public constant int UNIT_ID_LOOTABLE_BARN = 'h01H'
public constant int UNIT_ID_LOOTABLE_BREWERY = 'h013'
public constant int UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_BLUE = 'h017'
public constant int UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_GREEN = 'h01X'
public constant int UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_RED = 'h01J'
public constant int UNIT_ID_LOOTABLE_BUILDING_LARGE_HORIZONTAL_GREEN = 'h01M'
public constant int UNIT_ID_LOOTABLE_BUILDING_LARGE_VERTICAL_PURPLE = 'h01N'
public constant int UNIT_ID_LOOTABLE_BUILDING_CHAPEL = 'h00A'
public constant int UNIT_ID_LOOTABLE_BUILDING_GRANARY = 'h000'
public constant int UNIT_ID_LOOTABLE_HOUSE_LARGE_BLUE = 'h01S'
public constant int UNIT_ID_LOOTABLE_HOUSE_LARGE_RED = 'h005'
public constant int UNIT_ID_LOOTABLE_HOUSE_SMALL_GREEN = 'h001'
public constant int UNIT_ID_LOOTABLE_INN = 'h01L'
public constant int UNIT_ID_LOOTABLE_CATHEDRAL = 'h00G'
public constant int UNIT_ID_LOOTABLE_MARKET = 'h009'
public constant int UNIT_ID_LOOTABLE_MINE = 'h00D'
public constant int UNIT_ID_LOOTABLE_SHIPYARD = 'h008'
public constant int UNIT_ID_LOOTABLE_TAVERN = 'h00B'
public constant int UNIT_ID_LOOTABLE_TENT = 'h01V'
public constant int UNIT_ID_LOOTABLE_TOWER = 'h00C'
public constant int UNIT_ID_LOOTABLE_WINDMILL = 'h00F'

// Objects
public constant int UNIT_ID_LOOTABLE_BARREL = 'h01A'
public constant int UNIT_ID_LOOTABLE_CART = 'h01K'
public constant int UNIT_ID_LOOTABLE_CRATES = 'h007'
public constant int UNIT_ID_LOOTABLE_HAY = 'h002'
public constant int UNIT_ID_LOOTABLE_JUNK_1 = 'h01U'
public constant int UNIT_ID_LOOTABLE_JUNK_2 = 'h01T'
public constant int UNIT_ID_LOOTABLE_MARKET_BAUBLES = 'h006'
public constant int UNIT_ID_LOOTABLE_MARKET_MINECART = 'h00E'
public constant int UNIT_ID_LOOTABLE_MARKET_STALL = 'h004'
public constant int UNIT_ID_LOOTABLE_MARKET_TABLE = 'h003'
public constant int UNIT_ID_LOOTABLE_CAGE = 'h016'

public constant int UNIT_ID_LOOTABLE_SPAWN_OVERRIDE = 'h00M'

public HashList<int> g_LootableUnitTypes

SoundDefinition g_lootItemRewardSound

public constant real LOOT_REWARD_NOTIFICATION_DURATION = 15.0

public constant int ABILITY_ID_SEARCH = TlsAbilityIds.search
public constant int ABILITY_ID_LOOTABLE = 'A02C'

constant string LUCKY_HORSHOE_TOOLTIP = "Lucky Horseshoe"
constant string LUCKY_HORSHOE_TOOLTIP_EXTENDED = "This bonus loot was acquired thanks to the Lucky Horseshoe item"

constant string PENDANT_TOOLTIP = "Treasure Hunter's Pendant"
constant string PENDANT_TOOLTIP_EXTENDED = "This loot is a higher rarity thanks to the Treasure Hunter's Pendant item"

// ============================================================================
public abstract class LootCard extends TieredCard

  static unit s_looter
  static unit s_lootable

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // ----------------------------------------------------------------------------
  static function getLooter() returns unit
    return s_looter

  // ----------------------------------------------------------------------------
  static function getLootable() returns unit
    return s_lootable

  // --------------------------------------------------------------------------
  abstract function activateCard(int tier) returns bool

  // ----------------------------------------------------------------------------
  function getStopsRetrigger() returns bool
    return false

// ============================================================================
public class LootableDirector extends Director
  private unit m_lootable

  // --------------------------------------------------------------------------
  construct(unit lootable)
    super("Lootable")
    m_lootable = lootable

  // ----------------------------------------------------------------------------
  override function drawCard() returns drawnCard
    let selectedCard = getDeck().drawCard() castTo TieredCard
    return selectedCard.getHighestAffordableTier(getCredits())

  // ----------------------------------------------------------------------------
  override function activateCard(drawnCard card) returns bool
    return true

// ============================================================================
public class LootRewardNotification extends Notification
  private player m_player
  private vec2 m_cameraPos
  private SoundDefinition m_soundDef
  private bool m_dueToLuckyHorseshoe
  private bool m_affectedByLuckyPendant

  // --------------------------------------------------------------------------
  construct (int id, player p, vec2 cameraPos, SoundDefinition soundDef)
    super(id, LOOT_REWARD_NOTIFICATION_DURATION)

    m_player = p
    m_cameraPos = cameraPos
    m_soundDef = soundDef
    m_dueToLuckyHorseshoe = false
    m_affectedByLuckyPendant = false

    setClickCommand(new RoutedCommand(() -> onClick()))

  // --------------------------------------------------------------------------
  function getDueToLuckyHorseshoe() returns bool
    return m_dueToLuckyHorseshoe

  // --------------------------------------------------------------------------
  function setDueToLuckyHorseshoe(bool value)
    m_dueToLuckyHorseshoe = value

  // --------------------------------------------------------------------------
  function getAffectedByLuckyPendant() returns bool
    return m_affectedByLuckyPendant

  // --------------------------------------------------------------------------
  function setAffectedByLuckyPendant(bool value)
    m_affectedByLuckyPendant = value

  // --------------------------------------------------------------------------
  override function onShow()
    super.onShow()

    if (m_soundDef != null)
      doAfter(0.15, () -> m_soundDef.playForPlayer(m_player))      

  // --------------------------------------------------------------------------
  private function onClick()
    if (localPlayer == m_player)
      PanCameraToTimedForPlayer(m_player, m_cameraPos.x, m_cameraPos.y, 0)

// ============================================================================
public class LootRewardNotificationFrame extends TextSimpleNotificationFrame
  private framehandle m_luckyHorseshoeFrame
  private framehandle m_pendantFrame

  // --------------------------------------------------------------------------
  construct ()
    super (createFrame("LootRewardNotification", CONSOLE_UI_BACKDROP, 0, 0))

    m_luckyHorseshoeFrame = getFrame("HorseshoeFrame")
    ..onMouseEnter(() -> StandardTooltip.show(LUCKY_HORSHOE_TOOLTIP, LUCKY_HORSHOE_TOOLTIP_EXTENDED, GetTriggerPlayer()))
    ..onMouseLeave(() -> StandardTooltip.hide(GetTriggerPlayer()))
    ..hide()

    m_pendantFrame = getFrame("PendantFrame")
    ..onMouseEnter(() -> StandardTooltip.show(PENDANT_TOOLTIP, PENDANT_TOOLTIP_EXTENDED, GetTriggerPlayer()))
    ..onMouseLeave(() -> StandardTooltip.hide(GetTriggerPlayer()))
    ..hide()

  // --------------------------------------------------------------------------
  override protected function updateFrame()
    super.updateFrame()

    let lootRewardNotification = m_notification castTo LootRewardNotification
    var offset = vec2(-0.0025, -0.0025)

    let luckyHorseshoeVisible = lootRewardNotification != null and lootRewardNotification.getDueToLuckyHorseshoe()
    m_luckyHorseshoeFrame.setVisible(luckyHorseshoeVisible)
    if (luckyHorseshoeVisible)
      m_luckyHorseshoeFrame.setPoint(FRAMEPOINT_TOPRIGHT, m_frame, FRAMEPOINT_TOPRIGHT, offset.x, offset.y)
      offset.x -= m_luckyHorseshoeFrame.getWidth() + 0.0025

    let pendantFrameVisible = lootRewardNotification != null and lootRewardNotification.getAffectedByLuckyPendant()
    m_pendantFrame.setVisible(pendantFrameVisible)
    if (pendantFrameVisible)
      m_pendantFrame.setPoint(FRAMEPOINT_TOPRIGHT, m_frame, FRAMEPOINT_TOPRIGHT, offset.x, offset.y)

// ============================================================================
public function unit.isLootable() returns bool
  return g_LootableUnitTypes.has(this.getTypeId())

// ============================================================================
public function getUnitSearchDuration(unit looter, real unscaledSearchDuration) returns real
  var searchDuration = unscaledSearchDuration
  // Shapeshifting Key decreases duration by 50%
  let metadata = looter.getMetadata()
  if (metadata != null)
    let comp = metadata.getUnitPropertiesComponent()
    if (comp != null)
      searchDuration *= comp.getPropertyValue(UnitProperty.LOOT_DURATION_SCALE)
  return searchDuration

// ============================================================================
public function getUnitSearchManaCostPerSecond(unit looter) returns real  
  var manaCostPerSecond = looter.getAbility(ABILITY_ID_SEARCH).getField(ABILITY_ILF_MANA_COST, 0).toReal()
  let metadata = looter.getMetadata()
  if (metadata != null)
    let comp = metadata.getUnitPropertiesComponent()
    if (comp != null)
      manaCostPerSecond *= comp.getPropertyValue(UnitProperty.LOOT_MANA_COST_SCALE)
  return manaCostPerSecond

// ============================================================================
public function canUnitSearchForDuration(unit looter, real duration) returns bool
  return calculateManaRemainingAfterLootOperation(looter, duration) > 0

// ============================================================================
public function calculateManaRemainingAfterLootOperation(unit looter, real duration) returns int
  let manaCostPerSecond = getUnitSearchManaCostPerSecond(looter)
  let startingMana = looter.getMana()
  let manaRegenPerSecond = looter.getField(UNIT_RF_MANA_REGENERATION)
  let totalManaRegened = manaRegenPerSecond * duration
  let totalManaDrained = manaCostPerSecond * duration
  let manaAfterRegen = startingMana + totalManaRegened
  return (manaAfterRegen - totalManaDrained).floor()

// ============================================================================
init
  NotificationManager.notificationFrameFactory.registerFactory(LootRewardNotification.typeId, () -> new LootRewardNotificationFrame())

  g_lootItemRewardSound = new SoundDefinition("sound\\interface\\pickupitem.flac", false, false)
  g_lootItemRewardSound.volume = 126

  g_LootableUnitTypes = new HashList<int>()

  // Buildings
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BARN)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BREWERY)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_BLUE)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_GREEN)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_RED)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_LARGE_HORIZONTAL_GREEN)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_LARGE_VERTICAL_PURPLE)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_CHAPEL)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BUILDING_GRANARY)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_HOUSE_LARGE_BLUE)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_HOUSE_LARGE_RED)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_HOUSE_SMALL_GREEN)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_INN)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_CATHEDRAL)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_MARKET)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_MINE)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_SHIPYARD)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_TAVERN)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_TENT)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_TOWER)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_WINDMILL)

  // Objects
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_BARREL)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_CART)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_CRATES)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_MARKET_BAUBLES)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_MARKET_STALL)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_MARKET_TABLE)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_MARKET_MINECART)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_HAY)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_JUNK_1)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_JUNK_2)
  g_LootableUnitTypes.add(UNIT_ID_LOOTABLE_CAGE)