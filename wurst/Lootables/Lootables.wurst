package Lootables
import LootableUnit
import HashMap
import GroupUtils
import LootableFactory
import LootableTypes
import ErrorHandling
import HashList
import GameConstants

HashList<LootableUnit> g_AllLootables
HashMap<unit, LootableUnit> g_UnitToLootables
LootableFactory g_LootableFactory

public function unit.isLootable() returns bool
  return g_UnitToLootables.has(this)

public function unit.getLootable() returns LootableUnit
  if (not this.isLootable())
    return null
  return g_UnitToLootables.get(this)

public function decrementLootableCooldowns()
  for lootable in g_AllLootables
    if (not lootable._isBeingLooted)
      lootable.decrementCooldown()
  
public function createLootable(unit u)
  if (not u.isLootableUnitType())
    error(u.getName() + " is not a valid lootable unit")
  let lootable = g_LootableFactory.createLootable(u)
  g_UnitToLootables.put(u, lootable)
  g_AllLootables.add(lootable)

function initializeLootables()
  var ug = getGroup()
  ug.enumUnitsAll(null)
  for u from ug
    if (u.isLootableUnitType())
      u.setOwner(PLAYER_VILLAGERS, true)
      createLootable(u)
  ug.release()

init
  g_AllLootables = new HashList<LootableUnit>()
  g_UnitToLootables = new HashMap<unit, LootableUnit>()
  g_LootableFactory = new LootableFactory()
  initializeLootables()