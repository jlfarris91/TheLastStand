package LootableItemReward
import LootableReward
import MainItemLibrary
import FX
import DisplayTextToPlayer
import LootableComponent
import ColorUtility
import UnitMetadata
import LooterComponent
import GameInstance
import SoundUtils
import ItemType
import Notifications
import TlsItemLibrary

SoundDefinition g_lootRewardSound

// ============================================================================
public class LootableItemReward implements ILootableReward
  private ItemChances m_itemChancesStart
  private ItemChances m_itemChancesEnd

  // --------------------------------------------------------------------------
  construct(ItemChances chancesStart, ItemChances chancesEnd)
    m_itemChancesStart = chancesStart
    m_itemChancesEnd = chancesEnd

  // --------------------------------------------------------------------------
  override function getStopsRetrigger() returns bool
    return false

  // --------------------------------------------------------------------------
  override function giveReward(LootableComponent lootable, unit looter) returns bool

    var itemChances = lerp(m_itemChancesStart, m_itemChancesEnd, g_GameInstance.getGameProgress01())

    var pendantApplied = false

    // Treasure Hunter's Pendant increases rare item chances
    let metadata = looter.getMetadata()
    if (metadata != null)
      let comp = metadata.getLooterComponent()
      if (comp != null and comp.getEnabled() and comp.getOverrideItemChances())
        itemChances = comp.getItemChances()
        pendantApplied = true
        displayMessageToPlayer(looter.getOwner(), "Treasure Hunter's Pendant!".colorize(Colors.lightBlue))

    let itm = g_MainItemLibrary.giveRandomItemToUnit(looter, itemChances)

    if (itm == null)
      Log.debug("LootableItemReward", "giveReward", "", "No item could be found in main item library")
      return false

    let itemSet = g_MainItemLibrary.getOwningSet(itm.getTypeId())
    if (itemSet == null)
      Log.debug("LootableItemReward", "giveReward", "", "Could not find matching item set for item {0}".format(itm.getTypeId().toString()))
      return false

    let owner = looter.getOwner()
    let itemType = ItemType.getItemType(itm.getTypeId())
    let itemRarity = itemType.getRarity()

    FX.createFoundItemTag(looter.getPos(), looter.getOwner())

    let notification = new LootRewardNotification(
      NotificationManager.nextNotificationId(),
      owner,
      looter.getPos(),
      g_lootRewardSound)
    ..setMessage("Found item " + itm.getName().colorize(itemRarity.getColor()))
    ..setIconPath(itm.getIconPath())
    ..setAffectedByLuckyPendant(pendantApplied)

    lootable.showLootRewardNotification(owner, notification)

    return true

// ============================================================================
init

  g_lootRewardSound = new SoundDefinition("sound\\interface\\pickupitem.flac", false, false)
  g_lootRewardSound.volume = 126