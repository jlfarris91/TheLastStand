package LootableFactory
import UnitMetadata
import LootableGoldReward
import Range
import LootableComponent
import HashList
import Math
import ObjEditingCommons
import UnitExtensions
import UnitModifiers
import LootableTypes
import LootableLumberReward
import LootableItemReward
import LootableSurvivorReward
import LootableZombieReward
import GroupExtensions
import TlsItemLibrary

constant itemChances g_smallLootableItemChances_Start = itemChances(80.0, 15.0, 4.0, 1.0)
constant itemChances g_smallLootableItemChances_End = itemChances(60.0, 30.0, 8.0, 2.0)

constant itemChances g_mediumLootableItemChances_Start = itemChances(60.0, 30.0, 8.0, 2.0)
constant itemChances g_mediumLootableItemChances_End = itemChances(40.0, 40.0, 16.0, 4.0)

constant itemChances g_largeLootableItemChances_Start = itemChances(30.0, 50.0, 16.0, 3.0)
constant itemChances g_largeLootableItemChances_End = itemChances(20.0, 42.0, 32.0, 6.0)

HashList<int> g_smallLootables = new HashList<int>()
HashList<int> g_mediumLootables = new HashList<int>()
HashList<int> g_largeLootables = new HashList<int>()

group g_spawnOverrides

// ============================================================================
public class LootableUnitComponentGenerator implements IUnitComponentGenerator

  // --------------------------------------------------------------------------
  override function generateComponents(IUnitMetadata metadata) returns bool
    let u = metadata.getUnit()
    let id = u.getTypeId()

    if (g_smallLootables.has(id))
      createSmallLootable(metadata)
      return true

    if (g_mediumLootables.has(id))
      createMediumLootable(metadata)
      return true

    if (g_largeLootables.has(id))
      createLargeLootable(metadata)
      return true

    return false  

  // --------------------------------------------------------------------------
  private function createSmallLootable(IUnitMetadata metadata)
    let lootable = metadata.getOrAddLootableComponent()
    ..setSearchDuration(5.0)
    ..setChanceToRetrigger(0.01)

    let lumberRewardStart = rangeInt(50, 100)
    let lumberRewardEnd = rangeInt(100, 200)
    let lumberReward = new LootableLumberReward(lumberRewardStart, lumberRewardEnd)
    
    let itemReward = new LootableItemReward(g_smallLootableItemChances_Start, g_smallLootableItemChances_End)
    
    lootable.getRewardsSet()
    ..add(lumberReward, 90)
    ..add(itemReward, 10)

    assignClosestSpawnOverride(lootable)

  // --------------------------------------------------------------------------
  private function createMediumLootable(IUnitMetadata metadata)
  
    let lootable = metadata.getOrAddLootableComponent()
    ..setSearchDuration(10.0)
    ..setChanceToRetrigger(0.05)

    let goldRewardStart = rangeInt(1, 1)
    let goldRewardEnd = rangeInt(1, 2)
    let goldReward = new LootableGoldReward(goldRewardStart, goldRewardEnd)

    let lumberRewardStart = rangeInt(75, 150)
    let lumberRewardEnd = rangeInt(150, 300)
    let lumberReward = new LootableLumberReward(lumberRewardStart, lumberRewardEnd)

    let itemReward = new LootableItemReward(g_mediumLootableItemChances_Start, g_mediumLootableItemChances_End)

    let survivorReward = new LootableSurvivorReward()

    let zombieReward = new LootableZombieReward()
    ..setMinZombies(4)
    ..setMaxZombies(8)
    ..setItemChances(g_smallLootableItemChances_Start, g_mediumLootableItemChances_End)
    ..setUnitModifier() (unit u, real t) ->
      u.setMaxHPandHP(lerpInt(60, 1000, t))
      u.setArmor(lerp(0.0, 2.0, t))
      u.setDamageRange(0, lerp(rangeInt(8, 12), rangeInt(60, 120), t))
      u.setMoveSpeed(lerp(100.0, 200.0, t))
      u.setDefenseType(ArmorType.Unarmored)
      u.awardLumberOnDeath(lerp(lumberRewardStart, lumberRewardEnd, t) / 8.0, 1.0)
    
    lootable.getRewardsSet()
    ..add(goldReward, 2)
    ..add(lumberReward, 78)
    ..add(itemReward, 12)
    ..add(survivorReward, 3)
    ..add(zombieReward, 5)

    assignClosestSpawnOverride(lootable)

  // --------------------------------------------------------------------------
  private function createLargeLootable(IUnitMetadata metadata)
    
    let lootable = metadata.getOrAddLootableComponent()
    ..setSearchDuration(20.0)
    ..setChanceToRetrigger(0.1)

    let goldRewardStart = rangeInt(1, 1)
    let goldRewardEnd = rangeInt(1, 3)
    let goldReward = new LootableGoldReward(goldRewardStart, goldRewardEnd)

    let lumberRewardStart = rangeInt(125, 250)
    let lumberRewardEnd = rangeInt(250, 500)
    let lumberReward = new LootableLumberReward(lumberRewardStart, lumberRewardEnd)

    let itemReward = new LootableItemReward(g_largeLootableItemChances_Start, g_largeLootableItemChances_End)

    let survivorReward = new LootableSurvivorReward()

    let zombieReward = new LootableZombieReward()
    ..setMinZombies(10)
    ..setMaxZombies(15)
    ..setItemChances(g_mediumLootableItemChances_Start, g_largeLootableItemChances_End)
    ..setUnitModifier() (unit u, real t) ->
      u.setMaxHPandHP(lerpInt(60, 1000, t))
      u.setArmor(lerp(0.0, 2.0, t))
      u.setDamageRange(0, lerp(rangeInt(8, 12), rangeInt(60, 120), t))
      u.setMoveSpeed(lerp(100.0, 200.0, t))
      u.setDefenseType(ArmorType.Unarmored)
      u.awardLumberOnDeath(lerp(lumberRewardStart, lumberRewardEnd, t) / 15.0, 1.0)
    
    lootable.getRewardsSet()
    ..add(goldReward, 3)
    ..add(lumberReward, 67)
    ..add(itemReward, 14)
    ..add(survivorReward, 6)
    ..add(zombieReward, 10)

    assignClosestSpawnOverride(lootable)

// ============================================================================
function assignClosestSpawnOverride(LootableComponent comp)
  let pos = comp.getOwnerUnit().getPos()

  let closestSpawnOverride = g_spawnOverrides.getClosestUnit(pos, 512.0)
  if (closestSpawnOverride != null)
    comp.setSpawnPosition(closestSpawnOverride.getPos())
    g_spawnOverrides.removeUnit(closestSpawnOverride)
    closestSpawnOverride.remove()

// ============================================================================
init
  g_smallLootables.add(
    UNIT_ID_LOOTABLE_BARREL,
    UNIT_ID_LOOTABLE_CART,
    UNIT_ID_LOOTABLE_CRATES,
    UNIT_ID_LOOTABLE_HAY,
    UNIT_ID_LOOTABLE_JUNK_1,
    UNIT_ID_LOOTABLE_JUNK_2,
    UNIT_ID_LOOTABLE_MARKET_BAUBLES,
    UNIT_ID_LOOTABLE_MARKET_MINECART,
    UNIT_ID_LOOTABLE_MARKET_STALL,
    UNIT_ID_LOOTABLE_MARKET_TABLE,
    UNIT_ID_LOOTABLE_TENT
  )

  g_mediumLootables.add(
    UNIT_ID_LOOTABLE_BARN,
    UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_BLUE,
    UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_GREEN,
    UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_RED,
    UNIT_ID_LOOTABLE_BUILDING_GRANARY,
    UNIT_ID_LOOTABLE_HOUSE_LARGE_BLUE,
    UNIT_ID_LOOTABLE_HOUSE_LARGE_RED,
    UNIT_ID_LOOTABLE_HOUSE_SMALL_GREEN,
    UNIT_ID_LOOTABLE_MARKET,
    UNIT_ID_LOOTABLE_TOWER,
    UNIT_ID_LOOTABLE_WINDMILL
  )

  g_largeLootables.add(
    UNIT_ID_LOOTABLE_BREWERY,
    UNIT_ID_LOOTABLE_BUILDING_CHAPEL,
    UNIT_ID_LOOTABLE_BUILDING_LARGE_HORIZONTAL_GREEN,
    UNIT_ID_LOOTABLE_BUILDING_LARGE_VERTICAL_PURPLE,
    UNIT_ID_LOOTABLE_CATHEDRAL,
    UNIT_ID_LOOTABLE_INN,
    UNIT_ID_LOOTABLE_MINE,
    UNIT_ID_LOOTABLE_SHIPYARD,
    UNIT_ID_LOOTABLE_TAVERN
  )

  g_spawnOverrides = CreateGroup()
  g_spawnOverrides.enumUnitsOfType(UNIT_ID_LOOTABLE_SPAWN_OVERRIDE, null)