package LootableFactory
import UnitMetadata
import Lootables
import LootableComponent
import HashList
import GroupExtensions
import TlsItemLibrary
import Deck

import LootLumberCard
import LootGoldCard
import LootItemCard
import LootSurvivorCard
import LootUndeadCard
import SpawnUndeadUnitDirector
import Func
import SpawnCards
import Spawning

constant itemChances g_smallLootableItemChances_Start = itemChances(80.0, 15.0, 4.0, 1.0)
constant itemChances g_smallLootableItemChances_End = itemChances(60.0, 30.0, 8.0, 2.0)

constant itemChances g_mediumLootableItemChances_Start = itemChances(60.0, 30.0, 8.0, 2.0)
constant itemChances g_mediumLootableItemChances_End = itemChances(40.0, 40.0, 16.0, 4.0)

constant itemChances g_largeLootableItemChances_Start = itemChances(30.0, 50.0, 16.0, 3.0)
constant itemChances g_largeLootableItemChances_End = itemChances(20.0, 42.0, 32.0, 6.0)

HashList<int> g_smallLootables = new HashList<int>()
HashList<int> g_mediumLootables = new HashList<int>()
HashList<int> g_largeLootables = new HashList<int>()

Deck g_smallLootableDeck
Deck g_mediumLootableDeck
Deck g_largeLootableDeck
Deck g_cageLootableDeck

group g_spawnOverrides

// ============================================================================
public class LootableUnitComponentGenerator implements IUnitComponentGenerator

  // --------------------------------------------------------------------------
  override function generateComponents(IUnitMetadata metadata) returns bool
    let u = metadata.getUnit()
    let id = u.getTypeId()

    if (id == UNIT_ID_LOOTABLE_CAGE)
      createCageLootable(metadata)
      return true

    if (g_smallLootables.has(id))
      createSmallLootable(metadata)
      return true

    if (g_mediumLootables.has(id))
      createMediumLootable(metadata)
      return true

    if (g_largeLootables.has(id))
      createLargeLootable(metadata)
      return true

    return false  

  // --------------------------------------------------------------------------
  private function createSmallLootable(IUnitMetadata metadata)
    
    let lootableComponent = new LootableComponent(metadata)
    ..setSearchDuration(5.0)
    ..setLootCount(1)

    lootableComponent.getDirector()
    ..setDeck(g_smallLootableDeck)
    ..setCreditMultiplier(0.0)
    ..setCreditsOnActivation(50)

    metadata.addComponent(lootableComponent)

    assignClosestSpawnOverride(lootableComponent)

  // --------------------------------------------------------------------------
  private function createMediumLootable(IUnitMetadata metadata)
  
    let lootableComponent = new LootableComponent(metadata)
    ..setSearchDuration(10.0)
    ..setLootCount(2)

    lootableComponent.getDirector()
    ..setDeck(g_mediumLootableDeck)
    ..setCreditMultiplier(0.0)
    ..setCreditsOnActivation(100)

    metadata.addComponent(lootableComponent)

    assignClosestSpawnOverride(lootableComponent)

    // let goldRewardStart = rangeInt(1, 1)
    // let goldRewardEnd = rangeInt(1, 2)
    // let goldReward = new LootableGoldReward(goldRewardStart, goldRewardEnd)

    // let lumberRewardStart = rangeInt(75, 150)
    // let lumberRewardEnd = rangeInt(150, 300)
    // let lumberReward = new LootableLumberReward(lumberRewardStart, lumberRewardEnd)

    // let itemReward = new LootableItemReward(g_mediumLootableItemChances_Start, g_mediumLootableItemChances_End)

    // let survivorReward = new LootableSurvivorReward()

    // let zombieReward = new LootableZombieReward()
    // ..setMinZombies(4)
    // ..setMaxZombies(8)
    // ..setItemChances(g_smallLootableItemChances_Start, g_mediumLootableItemChances_End)
    // ..setUnitModifier() (unit u, real t) ->
    //   u.setMaxHPandHP(lerpInt(60, 1000, t))
    //   u.setArmor(lerp(0.0, 2.0, t))
    //   u.setDamageRange(0, lerp(rangeInt(8, 12), rangeInt(60, 120), t))
    //   u.setMoveSpeed(lerp(100.0, 200.0, t))
    //   u.setDefenseType(ArmorType.Unarmored)
    //   u.awardLumberOnDeath(lerp(lumberRewardStart, lumberRewardEnd, t) / 8.0, 1.0)
    
    // lootable.getRewardsSet()
    // ..add(goldReward, 2)
    // ..add(lumberReward, 78)
    // ..add(itemReward, 12)
    // ..add(survivorReward, 3)
    // ..add(zombieReward, 5)

  // --------------------------------------------------------------------------
  private function createLargeLootable(IUnitMetadata metadata)
    
    let lootableComponent = new LootableComponent(metadata)
    ..setSearchDuration(20.0)
    ..setLootCount(3)

    lootableComponent.getDirector()
    ..setDeck(g_largeLootableDeck)
    ..setCreditMultiplier(0.0)
    ..setCreditsOnActivation(150)

    metadata.addComponent(lootableComponent)

    assignClosestSpawnOverride(lootableComponent)

    // let goldRewardStart = rangeInt(1, 1)
    // let goldRewardEnd = rangeInt(1, 3)
    // let goldReward = new LootableGoldReward(goldRewardStart, goldRewardEnd)

    // let lumberRewardStart = rangeInt(125, 250)
    // let lumberRewardEnd = rangeInt(250, 500)
    // let lumberReward = new LootableLumberReward(lumberRewardStart, lumberRewardEnd)

    // let itemReward = new LootableItemReward(g_largeLootableItemChances_Start, g_largeLootableItemChances_End)

    // let survivorReward = new LootableSurvivorReward()

    // let zombieReward = new LootableZombieReward()
    // ..setMinZombies(10)
    // ..setMaxZombies(15)
    // ..setItemChances(g_mediumLootableItemChances_Start, g_largeLootableItemChances_End)
    // ..setUnitModifier() (unit u, real t) ->
    //   u.setMaxHPandHP(lerpInt(60, 1000, t))
    //   u.setArmor(lerp(0.0, 2.0, t))
    //   u.setDamageRange(0, lerp(rangeInt(8, 12), rangeInt(60, 120), t))
    //   u.setMoveSpeed(lerp(100.0, 200.0, t))
    //   u.setDefenseType(ArmorType.Unarmored)
    //   u.awardLumberOnDeath(lerp(lumberRewardStart, lumberRewardEnd, t) / 15.0, 1.0)
    
    // lootable.getRewardsSet()
    // ..add(goldReward, 3)
    // ..add(lumberReward, 67)
    // ..add(itemReward, 14)
    // ..add(survivorReward, 6)
    // ..add(zombieReward, 10)

  // --------------------------------------------------------------------------
  private function createCageLootable(IUnitMetadata metadata)

    let lootableComponent = new LootableComponent(metadata)
    ..setSearchDuration(10.0)
    ..setLootCount(1)
    ..setDestroyOnLoot(true)
    
    lootableComponent.getDirector()
    ..setDeck(g_cageLootableDeck)
    ..setCreditMultiplier(0.0)
    ..setCreditsOnActivation(999)

    metadata.addComponent(lootableComponent)

    assignClosestSpawnOverride(lootableComponent)

// ============================================================================
function assignClosestSpawnOverride(LootableComponent comp)
  let pos = comp.getOwnerUnit().getPos()

  let closestSpawnOverride = g_spawnOverrides.getClosestUnit(pos, 512.0)
  if (closestSpawnOverride != null)
    comp.setSpawnPosition(closestSpawnOverride.getPos())
    g_spawnOverrides.removeUnit(closestSpawnOverride)
    closestSpawnOverride.remove()

// ============================================================================
init
  g_smallLootables.add(
    UNIT_ID_LOOTABLE_BARREL,
    UNIT_ID_LOOTABLE_CART,
    UNIT_ID_LOOTABLE_CRATES,
    UNIT_ID_LOOTABLE_HAY,
    UNIT_ID_LOOTABLE_JUNK_1,
    UNIT_ID_LOOTABLE_JUNK_2,
    UNIT_ID_LOOTABLE_MARKET_BAUBLES,
    UNIT_ID_LOOTABLE_MARKET_MINECART,
    UNIT_ID_LOOTABLE_MARKET_STALL,
    UNIT_ID_LOOTABLE_MARKET_TABLE,
    UNIT_ID_LOOTABLE_TENT
  )

  g_mediumLootables.add(
    UNIT_ID_LOOTABLE_BARN,
    UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_BLUE,
    UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_GREEN,
    UNIT_ID_LOOTABLE_BUILDING_HORIZONTAL_RED,
    UNIT_ID_LOOTABLE_BUILDING_GRANARY,
    UNIT_ID_LOOTABLE_HOUSE_LARGE_BLUE,
    UNIT_ID_LOOTABLE_HOUSE_LARGE_RED,
    UNIT_ID_LOOTABLE_HOUSE_SMALL_GREEN,
    UNIT_ID_LOOTABLE_MARKET,
    UNIT_ID_LOOTABLE_TOWER,
    UNIT_ID_LOOTABLE_WINDMILL
  )

  g_largeLootables.add(
    UNIT_ID_LOOTABLE_BREWERY,
    UNIT_ID_LOOTABLE_BUILDING_CHAPEL,
    UNIT_ID_LOOTABLE_BUILDING_LARGE_HORIZONTAL_GREEN,
    UNIT_ID_LOOTABLE_BUILDING_LARGE_VERTICAL_PURPLE,
    UNIT_ID_LOOTABLE_CATHEDRAL,
    UNIT_ID_LOOTABLE_INN,
    UNIT_ID_LOOTABLE_MINE,
    UNIT_ID_LOOTABLE_SHIPYARD,
    UNIT_ID_LOOTABLE_TAVERN
  )

  g_spawnOverrides = CreateGroup()
  g_spawnOverrides.enumUnitsOfType(UNIT_ID_LOOTABLE_SPAWN_OVERRIDE, null)

  let tier0SpawnDirectorDeck = new Deck()..acquire()
  tier0SpawnDirectorDeck.addDefaultCategory()
  ..addCard(SpawnCards.zombies, 1.0)

  let tier1SpawnDirectorDeck = new Deck()..acquire()
  tier1SpawnDirectorDeck.addDefaultCategory()
  ..addCard(SpawnCards.zombies, 3.0)
  ..addCard(SpawnCards.skeletonArchers, 1.0)

  let tier2SpawnDirectorDeck = new Deck()..acquire()
  tier2SpawnDirectorDeck.addDefaultCategory()
  ..addCard(SpawnCards.zombies, 3.0)
  ..addCard(SpawnCards.skeletonArchers, 2.0)
  ..addCard(SpawnCards.abominations, 1.0)

  Func2<unit, unit, SpawnUndeadUnitDirector> tier0SpawnDirectorFactory = (lootable, looter) ->
  //{
    let targetProvider = new SingleTargetProvider(looter)

    let spawnDirector = new SpawnUndeadUnitDirector("lootable0", looter.getOwner())
    ..setDeck(tier0SpawnDirectorDeck)
    ..setCreditMultiplier(0.0)
    ..setDestroyWhenOutOfCredits(true)
    ..setCreditsOnActivation(50)
    ..setAlwaysDrawNewCard(true)
    ..setTargetUnitProvider(context -> targetProvider)
    
    spawnDirector.onDestroy().register() (director) ->
      destroy targetProvider

    return spawnDirector
  //}

  Func2<unit, unit, SpawnUndeadUnitDirector> tier1SpawnDirectorFactory = (lootable, looter) ->
  //{
    let targetProvider = new SingleTargetProvider(looter)

    let spawnDirector = new SpawnUndeadUnitDirector("lootable1", looter.getOwner())
    ..setDeck(tier1SpawnDirectorDeck)
    ..setCreditMultiplier(0.0)
    ..setDestroyWhenOutOfCredits(true)
    ..setCreditsOnActivation(100)
    ..setAlwaysDrawNewCard(true)
    ..setTargetUnitProvider(context -> targetProvider)
    
    spawnDirector.onDestroy().register() (director) ->
      destroy targetProvider

    return spawnDirector
  //}

  Func2<unit, unit, SpawnUndeadUnitDirector> tier2SpawnDirectorFactory = (lootable, looter) ->
  //{
    let targetProvider = new SingleTargetProvider(looter)

    let spawnDirector = new SpawnUndeadUnitDirector("lootable2", looter.getOwner())
    ..setDeck(tier2SpawnDirectorDeck)
    ..setCreditMultiplier(0.0)
    ..setDestroyWhenOutOfCredits(true)
    ..setCreditsOnActivation(200)
    ..setAlwaysDrawNewCard(true)
    ..setTargetUnitProvider(context -> targetProvider)
    
    spawnDirector.onDestroy().register() (director) ->
      destroy targetProvider

    return spawnDirector
  //}

  g_smallLootableDeck = new Deck()..acquire()
  g_smallLootableDeck.addDefaultCategory()
  ..addCard(new LootLumberCard("lumber", 50)..setCost(50), 89)
  ..addCard(new LootItemCard("item")..setCost(50), 10)
  ..addCard(new LootGoldCard("gold")..setCost(50), 1)

  g_mediumLootableDeck = new Deck()..acquire()
  g_mediumLootableDeck.addDefaultCategory()
  ..addCard(new LootLumberCard("lumber", 100)..setCost(50), 78)
  ..addCard(new LootItemCard("item")..setCost(50), 12)
  ..addCard(new LootGoldCard("gold")..setCost(50), 2)
  ..addCard(new LootSurvivorCard("survivor")..setCost(50), 3)
  ..addCard(new LootUndeadCard("undead")
    ..setSpawnDirectorFactory(0, tier0SpawnDirectorFactory)
    ..setSpawnDirectorFactory(1, tier1SpawnDirectorFactory)
    ..setSpawnDirectorFactory(2, tier2SpawnDirectorFactory)
    ..setCost(50), 5)

  g_largeLootableDeck = new Deck()..acquire()
  g_largeLootableDeck.addDefaultCategory()
  ..addCard(new LootLumberCard("lumber", 150)..setCost(50), 67)
  ..addCard(new LootItemCard("item")..setCost(50), 14)
  ..addCard(new LootGoldCard("gold")..setCost(50), 3)
  ..addCard(new LootSurvivorCard("survivor")..setCost(50), 6)
  ..addCard(new LootUndeadCard("undead")
    ..setSpawnDirectorFactory(0, tier0SpawnDirectorFactory)
    ..setSpawnDirectorFactory(1, tier1SpawnDirectorFactory)
    ..setSpawnDirectorFactory(2, tier2SpawnDirectorFactory)
    ..setCost(50), 10)

  g_cageLootableDeck = new Deck()..acquire()
  g_cageLootableDeck.addDefaultCategory()
  ..addCard(new LootSurvivorCard("survivor")..setCost(50), 1)