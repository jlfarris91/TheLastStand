package LootableReward
import initlater LootableComponent
import Notifications
import SoundUtils
import Command
import ClosureTimers
import FullscreenFrame
import ClosureFrames
import StandardTooltip
import Deck
import Directors
import FX
import TlsSounds
import Icons
import ColorUtility
import GameInstance

public constant real LOOT_REWARD_NOTIFICATION_DURATION = 15.0

constant string LUCKY_HORSHOE_TOOLTIP = "Lucky Horseshoe"
constant string LUCKY_HORSHOE_TOOLTIP_EXTENDED = "This bonus loot was acquired thanks to the Lucky Horseshoe item"

constant string PENDANT_TOOLTIP = "Treasure Hunter's Pendant"
constant string PENDANT_TOOLTIP_EXTENDED = "This loot is a higher rarity thanks to the Treasure Hunter's Pendant item"

// ============================================================================
public interface ILootableReward
  function giveReward(LootableComponent lootable, unit looter) returns bool
  function getStopsRetrigger() returns bool

// ============================================================================
public abstract class LootCard extends Card

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  abstract function giveReward(LootableComponent lootable, unit looter) returns bool

// ============================================================================
public class LumberLootCard extends LootCard
  private int m_baseAmount

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  function getBaseAmount() returns int
    return m_baseAmount
  
  // --------------------------------------------------------------------------
  function setBaseAmount(int value)
    m_baseAmount = value

  // --------------------------------------------------------------------------
  override function giveReward(LootableComponent lootable, unit looter) returns bool
    let owner = looter.getOwner()

    let diff = g_GameInstance.getPlayerDifficulty(owner)
    let gameProgressCoeff = g_GameInstance.getGameProgressCoeff()
    let lumber = (m_baseAmount + diff * Pow(gameProgressCoeff, 1.85)).round()

    owner.addLumber(lumber)
    
    FX.createGainedLumberTag(looter.getPos(), lumber, owner)
    FX.createGainedLumberEffect(looter.getPos(), owner)

    let notification = new LootRewardNotification(
      NotificationManager.nextNotificationId(),
      owner,
      looter.getPos(),
      TlsSounds.getRandomFoundLumber())
    ..setMessage("Found " + ("+" + lumber.toString() + " lumber").colorize(Colors.lumber))
    ..setIconPath(Icons.bTNBundleOfLumber)

    lootable.showLootRewardNotification(owner, notification)

    return true

// ============================================================================
public class GoldLootCard extends LootCard
  private int m_baseAmount

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  function getBaseAmount() returns int
    return m_baseAmount
  
  // --------------------------------------------------------------------------
  function setBaseAmount(int value)
    m_baseAmount = value

  // --------------------------------------------------------------------------
  override function giveReward(LootableComponent lootable, unit looter) returns bool
    let owner = looter.getOwner()

    let diff = g_GameInstance.getPlayerDifficulty(owner)
    let diffCoeff = g_GameInstance.getPlayerDifficultyCoeff(diff)
    let gold = (Pow(diffCoeff, 0.65) + max(diff - 2, 0)).floor()

    owner.addGold(gold)
    
    FX.createGainedGoldTag(looter.getPos(), gold, owner)
    FX.createGainedGoldEffect(looter.getPos(), owner)

    let notification = new LootRewardNotification(
      NotificationManager.nextNotificationId(),
      owner,
      looter.getPos(),
      TlsSounds.getRandomFoundGold())
    ..setMessage("Found " + ("+" + gold.toString() + " gold").colorize(Colors.gold))
    ..setIconPath(Icons.bTNChestOfGold)

    lootable.showLootRewardNotification(owner, notification)

    return true

// ============================================================================
public class SurvivorLootCard extends LootCard

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  override function giveReward(LootableComponent lootable, unit looter) returns bool
    return true

// ============================================================================
public class ItemLootCard extends LootCard

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  override function giveReward(LootableComponent lootable, unit looter) returns bool
    return true

// ============================================================================
public class ZombiesLootCard extends LootCard

  // --------------------------------------------------------------------------
  construct(string id)
    super(id)

  // --------------------------------------------------------------------------
  override function giveReward(LootableComponent lootable, unit looter) returns bool
    return true

// ============================================================================
public class LootableDirector extends Director

  // --------------------------------------------------------------------------
  construct(string name)
    super(name)
  

// ============================================================================
public class LootRewardNotification extends Notification
  private player m_player
  private vec2 m_cameraPos
  private SoundDefinition m_soundDef
  private bool m_dueToLuckyHorseshoe
  private bool m_affectedByLuckyPendant

  // --------------------------------------------------------------------------
  construct (int id, player p, vec2 cameraPos, SoundDefinition soundDef)
    super(id, LOOT_REWARD_NOTIFICATION_DURATION)

    m_player = p
    m_cameraPos = cameraPos
    m_soundDef = soundDef
    m_dueToLuckyHorseshoe = false
    m_affectedByLuckyPendant = false

    setClickCommand(new RoutedCommand(() -> onClick()))

  // --------------------------------------------------------------------------
  function getDueToLuckyHorseshoe() returns bool
    return m_dueToLuckyHorseshoe

  // --------------------------------------------------------------------------
  function setDueToLuckyHorseshoe(bool value)
    m_dueToLuckyHorseshoe = value

  // --------------------------------------------------------------------------
  function getAffectedByLuckyPendant() returns bool
    return m_affectedByLuckyPendant

  // --------------------------------------------------------------------------
  function setAffectedByLuckyPendant(bool value)
    m_affectedByLuckyPendant = value

  // --------------------------------------------------------------------------
  override function onShow()
    super.onShow()

    if (m_soundDef != null)
      doAfter(0.15, () -> m_soundDef.playForPlayer(m_player))      

  // --------------------------------------------------------------------------
  private function onClick()
    if (localPlayer == m_player)
      PanCameraToTimedForPlayer(m_player, m_cameraPos.x, m_cameraPos.y, 0)

// ============================================================================
public class LootRewardNotificationFrame extends TextSimpleNotificationFrame
  private framehandle m_luckyHorseshoeFrame
  private framehandle m_pendantFrame

  // --------------------------------------------------------------------------
  construct ()
    super (createFrame("LootRewardNotification", CONSOLE_UI_BACKDROP, 0, 0))

    m_luckyHorseshoeFrame = getFrame("HorseshoeFrame")
    ..onMouseEnter(() -> StandardTooltip.show(LUCKY_HORSHOE_TOOLTIP, LUCKY_HORSHOE_TOOLTIP_EXTENDED, GetTriggerPlayer()))
    ..onMouseLeave(() -> StandardTooltip.hide(GetTriggerPlayer()))
    ..hide()

    m_pendantFrame = getFrame("PendantFrame")
    ..onMouseEnter(() -> StandardTooltip.show(PENDANT_TOOLTIP, PENDANT_TOOLTIP_EXTENDED, GetTriggerPlayer()))
    ..onMouseLeave(() -> StandardTooltip.hide(GetTriggerPlayer()))
    ..hide()

  // --------------------------------------------------------------------------
  override protected function updateFrame()
    super.updateFrame()

    let lootRewardNotification = m_notification castTo LootRewardNotification
    var offset = vec2(-0.0025, -0.0025)

    let luckyHorseshoeVisible = lootRewardNotification != null and lootRewardNotification.getDueToLuckyHorseshoe()
    m_luckyHorseshoeFrame.setVisible(luckyHorseshoeVisible)
    if (luckyHorseshoeVisible)
      m_luckyHorseshoeFrame.setPoint(FRAMEPOINT_TOPRIGHT, m_frame, FRAMEPOINT_TOPRIGHT, offset.x, offset.y)
      offset.x -= m_luckyHorseshoeFrame.getWidth() + 0.0025

    let pendantFrameVisible = lootRewardNotification != null and lootRewardNotification.getAffectedByLuckyPendant()
    m_pendantFrame.setVisible(pendantFrameVisible)
    if (pendantFrameVisible)
      m_pendantFrame.setPoint(FRAMEPOINT_TOPRIGHT, m_frame, FRAMEPOINT_TOPRIGHT, offset.x, offset.y)

// ============================================================================
init
  NotificationManager.notificationFrameFactory.registerFactory(LootRewardNotification.typeId, () -> new LootRewardNotificationFrame())