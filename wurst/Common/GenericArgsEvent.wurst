package GenericArgsEvent
import LinkedList

// ============================================================================
public abstract class GenericArgsEventHandler<TSender, TArgs>
  bool _isMarkedForRemoval = false
  abstract function call(TSender sender, TArgs args)

// ============================================================================
public class GenericArgsEvent<TSender, TArgs>
  private LinkedList<GenericArgsEventHandler<TSender, TArgs>> _handlers

  // --------------------------------------------------------------------------
  ondestroy
    if (_handlers != null)
      for handler in _handlers
        destroy handler
      destroy _handlers
      _handlers = null

  // --------------------------------------------------------------------------
  function addListener(GenericArgsEventHandler<TSender, TArgs> handler) returns GenericArgsEventHandler<TSender, TArgs>
    if (handler == (0 castTo GenericArgsEventHandler<TSender, TArgs>))
      return handler
    if (_handlers == null)
      _handlers = new LinkedList<GenericArgsEventHandler<TSender, TArgs>>()
    _handlers.add(handler)
    return handler

  // --------------------------------------------------------------------------
  function removeListener(GenericArgsEventHandler<TSender, TArgs> handler) returns GenericArgsEventHandler<TSender, TArgs>
    if (handler != (0 castTo GenericArgsEventHandler<TSender, TArgs>) and _handlers != null)
      handler._isMarkedForRemoval = true
    return 0 castTo GenericArgsEventHandler<TSender, TArgs>

  // --------------------------------------------------------------------------
  function invoke(TSender sender, TArgs args)
    if (_handlers != null)
      for handler in _handlers
        if (handler._isMarkedForRemoval)
          _handlers.remove(handler)
          destroy handler
        else
          handler.call(sender, args)
    