package AnonymousEvent
import LinkedList

// ============================================================================
public abstract class AnonymousEventHandler
  bool _isMarkedForRemoval
  abstract function call()

// ============================================================================
public class AnonymousEvent
  private LinkedList<AnonymousEventHandler> _handlers

  // --------------------------------------------------------------------------
  ondestroy
    if (_handlers != null)
      for handler in _handlers
        destroy handler
      destroy _handlers

  // --------------------------------------------------------------------------
  function addListener(AnonymousEventHandler handler) returns AnonymousEventHandler
    if (handler == (0 castTo AnonymousEventHandler))
      return handler
    if (_handlers == null)
      _handlers = new LinkedList<AnonymousEventHandler>()
    _handlers.add(handler)
    return handler

  // --------------------------------------------------------------------------
  function removeListener(AnonymousEventHandler handler) returns AnonymousEventHandler
    if (handler != (0 castTo AnonymousEventHandler) and _handlers != null)
      handler._isMarkedForRemoval = true
    return 0 castTo AnonymousEventHandler

  // --------------------------------------------------------------------------
  function invoke()
    if (_handlers != null)
      for handler in _handlers
        if (handler._isMarkedForRemoval)
          _handlers.remove(handler)
          destroy handler
        else
          handler.call()
    