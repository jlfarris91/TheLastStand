package Events
import LinkedList

// ============================================================================
public interface GenericArgsEventHandler<TSender, TArgs>
  function callback(TSender sender, TArgs args)

// ============================================================================
public class GenericArgsEvent<TSender, TArgs>
  private LinkedList<GenericArgsEventHandler<TSender, TArgs>> _handlers

  // --------------------------------------------------------------------------
  ondestroy
    if (_handlers != null)
      for handler in _handlers
        destroy handler
      destroy _handlers
      _handlers = null

  // --------------------------------------------------------------------------
  function addListener(GenericArgsEventHandler<TSender, TArgs> handler) returns GenericArgsEventHandler<TSender, TArgs>
    if (handler == (0 castTo GenericArgsEventHandler<TSender, TArgs>))
      return handler
    if (_handlers == null)
      _handlers = new LinkedList<GenericArgsEventHandler<TSender, TArgs>>()
    _handlers.add(handler)
    return handler

  // --------------------------------------------------------------------------
  function removeListener(GenericArgsEventHandler<TSender, TArgs> handler) returns GenericArgsEventHandler<TSender, TArgs>
    if (handler != (0 castTo GenericArgsEventHandler<TSender, TArgs>) and _handlers != null)
      _handlers.remove(handler)
    return 0 castTo GenericArgsEventHandler<TSender, TArgs>

  // --------------------------------------------------------------------------
  function invoke(TSender sender, TArgs args)
    if (_handlers != null)
      for handler in _handlers
        handler.callback(sender, args)

// ============================================================================
public interface GenericEventHandler<TSender>
  function callback(TSender sender)

// ============================================================================
public class GenericEvent<TSender>
  private LinkedList<GenericEventHandler<TSender>> _handlers

  // --------------------------------------------------------------------------
  ondestroy
    if (_handlers != null)
      for handler in _handlers
        destroy handler
      destroy _handlers
      _handlers = null

  // --------------------------------------------------------------------------
  function addListener(GenericEventHandler<TSender> handler) returns GenericEventHandler<TSender>
    if (handler == (0 castTo GenericEventHandler<TSender>))
      return handler
    if (_handlers == null)
      _handlers = new LinkedList<GenericEventHandler<TSender>>()
    _handlers.add(handler)
    return handler

  // --------------------------------------------------------------------------
  function removeListener(GenericEventHandler<TSender> handler) returns GenericEventHandler<TSender>
    if (handler != (0 castTo GenericEventHandler<TSender>) and _handlers != null)
      _handlers.remove(handler)
    return 0 castTo GenericEventHandler<TSender>

  // --------------------------------------------------------------------------
  function invoke(TSender sender)
    if (_handlers != null)
      for handler in _handlers
        handler.callback(sender)

// ============================================================================
public interface AnonymousEventHandler
  function callback()

// ============================================================================
public class AnonymousEvent
  private LinkedList<AnonymousEventHandler> _handlers

  // --------------------------------------------------------------------------
  ondestroy
    if (_handlers != null)
      for handler in _handlers
        destroy handler
      destroy _handlers
      _handlers = null

  // --------------------------------------------------------------------------
  function addListener(AnonymousEventHandler handler) returns AnonymousEventHandler
    if (handler == (0 castTo AnonymousEventHandler))
      return handler
    if (_handlers == null)
      _handlers = new LinkedList<AnonymousEventHandler>()
    _handlers.add(handler)
    return handler

  // --------------------------------------------------------------------------
  function removeListener(AnonymousEventHandler handler) returns AnonymousEventHandler
    if (handler != (0 castTo AnonymousEventHandler) and _handlers != null)
      _handlers.remove(handler)
    return 0 castTo AnonymousEventHandler

  // --------------------------------------------------------------------------
  function invoke()
    if (_handlers != null)
      for handler in _handlers
        handler.callback()