package UnitMetadataExtensions
import initlater UnitMetadata

native UnitAlive(unit id) returns boolean

public function IUnitMetadata.addAbility(int abil) returns boolean
	return UnitAddAbility(this.getUnit(), abil)

public function IUnitMetadata.addHP(real val)
	this.getUnit().addState(UNIT_STATE_LIFE, val)

public function IUnitMetadata.addItemHandle(item whichItem) returns boolean
	return UnitAddItem(this.getUnit(), whichItem)

public function IUnitMetadata.addItemById(int itemId) returns item
	return UnitAddItemById(this.getUnit(), itemId)

@deprecated("Use addItemById method instead.")
public function IUnitMetadata.addItem(int itemId) returns item
	return UnitAddItemById(this.getUnit(), itemId)

public function IUnitMetadata.addItemToSlot(int id, int slot) returns bool
	return UnitAddItemToSlotById(this.getUnit(), id, slot)

public function IUnitMetadata.addMana(real val)
	this.getUnit().addState(UNIT_STATE_MANA, val)

public function IUnitMetadata.addState(unitstate state, real value)
	SetUnitState(this.getUnit(), state, this.getUnit().getState(state) + value)

public function IUnitMetadata.addXp(int toAdd, boolean showEyeCandy)
	AddHeroXP(this.getUnit(), toAdd, showEyeCandy)

public function IUnitMetadata.getXp() returns int
	return GetHeroXP(this.getUnit())

/** Share vision of that unit with a player **/
public function IUnitMetadata.shareVision(player whichPlayer)
	UnitShareVision(this.getUnit(), whichPlayer, true)

/** Set sharing of vision with a player **/
public function IUnitMetadata.shareVision(player whichPlayer, bool share)
	UnitShareVision(this.getUnit(), whichPlayer, share)

public function IUnitMetadata.setXp(int newXpVal, bool showEyeCandy)
	SetHeroXP(this.getUnit(), newXpVal, showEyeCandy)

public function IUnitMetadata.suspendXp(boolean suspend)
	SuspendHeroXP(this.getUnit(), suspend)

public function IUnitMetadata.isSuspendedXp() returns boolean
	return IsSuspendedXP(this.getUnit())

public function IUnitMetadata.getLevel() returns int
	return this.getUnit().isType(UNIT_TYPE_HERO) ? GetHeroLevel(this.getUnit()) : GetUnitLevel(this.getUnit())

public function IUnitMetadata.setLevel(int level, boolean showEyeCandy)
	SetHeroLevel(this.getUnit(), level, showEyeCandy)

public function IUnitMetadata.addLevels(int toAdd, boolean showEyeCandy)
	SetHeroLevel(this.getUnit(), this.getUnit().getLevel() + toAdd, showEyeCandy)

public function IUnitMetadata.removeLevels(int toRemove) returns bool
	return UnitStripHeroLevel(this.getUnit(), toRemove)

public function IUnitMetadata.getStr(bool includeBonuses) returns int
	return GetHeroStr(this.getUnit(), includeBonuses)

public function IUnitMetadata.getAgi(bool includeBonuses) returns int
	return GetHeroAgi(this.getUnit(), includeBonuses)

public function IUnitMetadata.getInt(bool includeBonuses) returns int
	return GetHeroInt(this.getUnit(), includeBonuses)

public function IUnitMetadata.setStr(int value)
	SetHeroStr(this.getUnit(), value, true)

public function IUnitMetadata.setAgi(int value)
	SetHeroAgi(this.getUnit(), value, true)

public function IUnitMetadata.setInt(int value)
	SetHeroInt(this.getUnit(), value, true)

public function IUnitMetadata.addStr(int value)
	SetHeroStr(this.getUnit(), this.getUnit().getStr(false) + value, true)

public function IUnitMetadata.addAgi(int value)
	SetHeroAgi(this.getUnit(), this.getUnit().getAgi(false) + value, true)

public function IUnitMetadata.addInt(int value)
	SetHeroInt(this.getUnit(), this.getUnit().getInt(false) + value, true)

public function IUnitMetadata.addSkillPoints(int value) returns bool
	return UnitModifySkillPoints(this.getUnit(), value)

public function IUnitMetadata.setSkillPoints(int value) returns bool
	return UnitModifySkillPoints(this.getUnit(), value - this.getUnit().getSkillPoints())

public function IUnitMetadata.getSkillPoints() returns int
	return GetHeroSkillPoints(this.getUnit())

public function IUnitMetadata.selectSkill(int abilcode)
	SelectHeroSkill(this.getUnit(), abilcode)

public function IUnitMetadata.damageTarget(widget target, real amount, bool attack, bool ranged, attacktype attackType, damagetype damageType, weapontype weaponType)
	UnitDamageTarget(this.getUnit(), target, amount, attack, ranged, attackType, damageType, weaponType)

public function IUnitMetadata.damageTarget(widget target, real amount, bool attack, bool ranged, attacktype attackType)
	UnitDamageTarget(this.getUnit(), target, amount, attack, ranged, attackType, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

public function IUnitMetadata.damageTarget(widget target, real amount)
	UnitDamageTarget(this.getUnit(), target, amount, false, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

public function IUnitMetadata.damageTarget(widget target, real amount, attacktype attacktyp)
	UnitDamageTarget(this.getUnit(), target, amount, false, false, attacktyp, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

/** Kills a unit by blowing it up */
public function IUnitMetadata.explode()
	this.getUnit().setExploded(true)
	this.getUnit().kill()

public function IUnitMetadata.getAbilityLevel(int id) returns int
	return GetUnitAbilityLevel(this.getUnit(), id)

public function IUnitMetadata.getUnitAcquireRange() returns real
	return GetUnitAcquireRange(this.getUnit())

/** Returns the current order of the unit */
public function IUnitMetadata.getCurrentOrder() returns int
	return GetUnitCurrentOrder(this.getUnit())

@deprecated("Use .getFacingAngle() instead.") public function IUnitMetadata.getFacing() returns real
	return GetUnitFacing(this.getUnit())

/** Returns the facing of the unit as an angle.
	Use this.getUnit() to avoid confusion between radians and degrees */
public function IUnitMetadata.getFacingAngle() returns angle
	return GetUnitFacing(this.getUnit()).asAngleDegrees()

public function IUnitMetadata.getFlyHeight() returns real
	return GetUnitFlyHeight(this.getUnit())

public function IUnitMetadata.getFoodUsed() returns int
	return GetFoodUsed(this.getUnit().getTypeId())

public function IUnitMetadata.getHP() returns real
	return this.getUnit().getState(UNIT_STATE_LIFE)

public function IUnitMetadata.getMana() returns real
	return this.getUnit().getState(UNIT_STATE_MANA)

public function IUnitMetadata.getMaxHP() returns real
	return this.getUnit().getState(UNIT_STATE_MAX_LIFE)

public function IUnitMetadata.getMaxMana() returns real
	return this.getUnit().getState(UNIT_STATE_MAX_MANA)

/** Get units current missing health. */
public function IUnitMetadata.getMissingHP() returns real
	return this.getUnit().getMaxHP() - this.getUnit().getHP()

/** Get units current missing mana. */
public function IUnitMetadata.getMissingMana() returns real
	return this.getUnit().getMaxMana() - this.getUnit().getMana()


public function IUnitMetadata.getMoveSpeed() returns real
	return GetUnitMoveSpeed(this.getUnit())

public function IUnitMetadata.getName() returns string
	return GetUnitName(this.getUnit())

public function IUnitMetadata.getProperName() returns string
	return GetHeroProperName(this.getUnit())

public function IUnitMetadata.getOwner() returns player
	return GetOwningPlayer(this.getUnit())

public function IUnitMetadata.getPos() returns vec2
	return vec2(this.getUnit().getX(), this.getUnit().getY())

public function IUnitMetadata.getPos3Real() returns vec3
	return this.getUnit().getPos().withRealZ(this.getUnit())

public function IUnitMetadata.getPos3Fly() returns vec3
	return vec3(this.getUnit().getX(), this.getUnit().getY(), this.getUnit().getFlyHeight())

public function IUnitMetadata.getPos3Zero() returns vec3
	return vec3(this.getUnit().getX(), this.getUnit().getY(), 0.)

public function IUnitMetadata.getPos3with(real z) returns vec3
	return vec3(this.getUnit().getX(), this.getUnit().getY(), z)

/** Returns the prop window of the unit as angle. */
public function IUnitMetadata.getPropWindow() returns angle
	return angle(GetUnitPropWindow(this.getUnit()))

public function IUnitMetadata.getState(unitstate state) returns real
	return GetUnitState(this.getUnit(), state)

public function IUnitMetadata.getTurnSpeed() returns real
	return GetUnitTurnSpeed(this.getUnit())

public function IUnitMetadata.getTypeId() returns int
	return GetUnitTypeId(this.getUnit())

public function IUnitMetadata.getUserData() returns int
	return GetUnitUserData(this.getUnit())

public function IUnitMetadata.getPointValue() returns int
	return GetUnitPointValue(this.getUnit())

public function IUnitMetadata.getX() returns real
	return GetUnitX(this.getUnit())

public function IUnitMetadata.getY() returns real
	return GetUnitY(this.getUnit())

public function IUnitMetadata.hasAbility(int id) returns boolean
	return (GetUnitAbilityLevel(this.getUnit(), id) > 0)

public function IUnitMetadata.hasItem(item whichItem) returns boolean
	return UnitHasItem(this.getUnit(), whichItem)

public function IUnitMetadata.hasItemById(int itemId) returns boolean
	return this.getUnit().getItemById(itemId) != null

/** Returns the first item of the specific type from the unit's inventory,
	or null if none is present */
public function IUnitMetadata.getItemById(int itemId) returns item
	item itm = null
	for slot = 0 to this.getUnit().inventorySize() - 1
		if this.getUnit().itemInSlot(slot).getTypeId() == itemId
			itm = this.getUnit().itemInSlot(slot)
			break
	return itm

public function IUnitMetadata.hide()
	ShowUnit(this.getUnit(), false)

public function IUnitMetadata.isHidden() returns bool
	return IsUnitHidden(this.getUnit())

public function IUnitMetadata.inventorySize() returns int
	return UnitInventorySize(this.getUnit())

/** Returns the number of items equipped. */
public function IUnitMetadata.itemCount() returns int
	int result = 0
	for slot = 0 to this.getUnit().inventorySize() - 1
		if this.getUnit().itemInSlot(slot) != null
			result++
	return result

/** Checks if unit inventory is full. */
public function IUnitMetadata.isInventoryFull() returns boolean
	return this.getUnit().itemCount() == this.getUnit().inventorySize()

/** Checks if the unit is alive using the UnitAlive native */
public function IUnitMetadata.isAlive() returns boolean
	return UnitAlive(this.getUnit())

/** Checks whether a unit is within range of a point.
	Takes into account the units collision size **/
public function IUnitMetadata.isInRange(vec2 pos, real distance) returns bool
	return IsUnitInRangeXY(this.getUnit(), pos.x, pos.y, distance)

/** Checks whether a unit is an enemy of the given player **/
public function IUnitMetadata.isEnemyOf(player whichPlayer) returns bool
	return IsUnitEnemy(this.getUnit(), whichPlayer)

/** Checks whether two units are enemies */
public function IUnitMetadata.isEnemyOf(unit u) returns bool
	return this.getUnit() != null and u != null and this.getUnit().isEnemyOf(u.getOwner())

/** Checks whether a unit is an ally of the given player */
public function IUnitMetadata.isAllyOf(player whichPlayer) returns bool
	return this.getUnit() != null and IsUnitAlly(this.getUnit(), whichPlayer)

/** Checks whether two units are allies */
public function IUnitMetadata.isAllyOf(unit u) returns bool
	return this.getUnit() != null and u != null and this.getUnit().isAllyOf(u.getOwner())

public function IUnitMetadata.issueImmediateOrder(string order) returns boolean
	return IssueImmediateOrder(this.getUnit(), order)

public function IUnitMetadata.issueImmediateOrderById(int id) returns boolean
	return IssueImmediateOrderById(this.getUnit(), id)

public function IUnitMetadata.issuePointOrder(string order, vec2 target) returns boolean
	return IssuePointOrder(this.getUnit(), order, target.x, target.y)

public function IUnitMetadata.issuePointOrderById(int id, vec2 target) returns boolean
	return IssuePointOrderById(this.getUnit(), id, target.x, target.y)

public function IUnitMetadata.issueRallyPoint(vec2 pos)
	this.getUnit().issuePointOrder("rally", pos)

public function IUnitMetadata.issueTargetOrder(string order, widget targetWidget) returns boolean
	return IssueTargetOrder(this.getUnit(),order,targetWidget)

public function IUnitMetadata.issueTargetOrderById(int id, widget target) returns boolean
	return IssueTargetOrderById(this.getUnit(), id, target)

public function IUnitMetadata.itemInSlot(int inventoryIndex) returns item
	return UnitItemInSlot(this.getUnit(), inventoryIndex)

/** Retrieves slot number for speficied item or -1 if not found. */
public function IUnitMetadata.getItemSlot(item whichItem) returns int
	int result = -1
	if this.getUnit().hasItem(whichItem)
		for slot = 0 to this.getUnit().inventorySize() - 1
			if this.getUnit().itemInSlot(slot) == whichItem
				result = slot
				break
	return result

public function IUnitMetadata.kill()
	KillUnit(this.getUnit())

public function IUnitMetadata.makeAbilityPermanent(int abil, boolean flag) returns boolean
	return UnitMakeAbilityPermanent(this.getUnit(), flag, abil)

public function IUnitMetadata.isPaused() returns boolean
	return IsUnitPaused(this.getUnit())

public function IUnitMetadata.pause()
	PauseUnit(this.getUnit(), true)

public function IUnitMetadata.pauseEx()
	BlzPauseUnitEx(this.getUnit(), true)

public function IUnitMetadata.unpause()
	PauseUnit(this.getUnit(), false)

public function IUnitMetadata.unpauseEx()
	BlzPauseUnitEx(this.getUnit(), false)

public function IUnitMetadata.queueAnimation(string animation)
	QueueUnitAnimation(this.getUnit(), animation)

public function IUnitMetadata.remove()
	RemoveUnit(this.getUnit())

public function IUnitMetadata.removeAbility(int abil) returns boolean
	return UnitRemoveAbility(this.getUnit(), abil)

public function IUnitMetadata.removeItem(item itm)
	UnitRemoveItem(this.getUnit(), itm)

/** Removes the first item of type itemId carried by the unit
	returns true if an item was found and removed */
public function IUnitMetadata.removeItemById(int itemId) returns boolean
	boolean item_found = false
	for slot = 0 to this.getUnit().inventorySize()-1
		if this.getUnit().itemInSlot(slot).getTypeId() == itemId
			this.getUnit().removeItem(this.getUnit().itemInSlot(slot))
			item_found = true
			break
	return item_found

/** Returns the number of slots containing the given item type */
public function IUnitMetadata.itemCount(int itemTypeId) returns int
	var count = 0
	for i = 0 to 5
		if this.getUnit().itemInSlot(i).getTypeId() == itemTypeId
			count++
	return count

public function IUnitMetadata.removeItemFromSlot(int slot) returns item
	return UnitRemoveItemFromSlot(this.getUnit(), slot)

public function IUnitMetadata.dropItemPoint(item itm, vec2 pos) returns boolean
	return UnitDropItemPoint(this.getUnit(), itm, pos.x, pos.y)

public function IUnitMetadata.dropItemSlot(item itm, int slot) returns boolean
	return UnitDropItemSlot(this.getUnit(), itm, slot)

public function IUnitMetadata.dropItemTarget(item itm, widget target) returns boolean
	return UnitDropItemTarget(this.getUnit(), itm, target)

public function IUnitMetadata.useItem(item itm) returns boolean
	return UnitUseItem(this.getUnit(), itm)

public function IUnitMetadata.useItemPoint(item itm, vec2 pos) returns boolean
	return UnitUseItemPoint(this.getUnit(), itm, pos.x, pos.y)

public function IUnitMetadata.useItemTarget(item itm, widget target) returns boolean
	return UnitUseItemTarget(this.getUnit(), itm, target)

public function IUnitMetadata.revive(vec2 pos, boolean doEyecandy)
	ReviveHero(this.getUnit(), pos.x, pos.y, doEyecandy)

public function IUnitMetadata.getAbility(int abilId) returns ability
	return BlzGetUnitAbility(this.getUnit(), abilId)

public function IUnitMetadata.getAbilityByIndex(int index) returns ability
	return BlzGetUnitAbility(this.getUnit(), index)

public function IUnitMetadata.setAbilityLevel(int abilId, int lvl)
	SetUnitAbilityLevel(this.getUnit(), abilId, lvl)

public function IUnitMetadata.setAnimation(string name)
	SetUnitAnimation(this.getUnit(), name)

public function IUnitMetadata.setAnimation(int index)
	SetUnitAnimationByIndex(this.getUnit(), index)

public function IUnitMetadata.lookAt(string bone, unit target, vec3 offset)
	SetUnitLookAt(this.getUnit(), bone, target, offset.x, offset.y, offset.z)

public function IUnitMetadata.lookAt(string bone, unit target)
	this.getUnit().lookAt(bone, target, ZERO3)

public function IUnitMetadata.resetLookAt()
	ResetUnitLookAt(this.getUnit())

public function IUnitMetadata.setColor(playercolor c)
	SetUnitColor(this.getUnit(), c)

/** Sets whether a unit explodes on death */
public function IUnitMetadata.setExploded(boolean exploded)
	SetUnitExploded(this.getUnit(), exploded)

public function IUnitMetadata.setFacing(angle a)
	SetUnitFacing(this.getUnit(), a.degrees())

public function IUnitMetadata.setFlyHeight(real height, real rate)
	SetUnitFlyHeight(this.getUnit(), height, rate)

public function IUnitMetadata.setHP(real hp)
	this.getUnit().setState(UNIT_STATE_LIFE, hp)

public function IUnitMetadata.setInvulnerable(boolean flag)
	SetUnitInvulnerable(this.getUnit(), flag)

public function IUnitMetadata.setMana(real val)
	this.getUnit().setState(UNIT_STATE_MANA, val)

public function IUnitMetadata.setMoveSpeed(real speed)
	SetUnitMoveSpeed(this.getUnit(), speed)

public function IUnitMetadata.setOwner(player p, boolean changeColor)
	SetUnitOwner(this.getUnit(), p, changeColor)

public function IUnitMetadata.setPathing(boolean value)
	SetUnitPathing(this.getUnit(),value)

/** Sets the unit's position using the SetUnitPosition native.
	this.getUnit() native comes with some side effects like additional
	position verification and stopping the target IUnitMetadata. */
public function IUnitMetadata.setPos(vec2 pos)
	SetUnitPosition(this.getUnit(), pos.x, pos.y)

public function IUnitMetadata.setPosFly(vec3 pos)
	this.getUnit().setPos(pos.x, pos.y)
	this.getUnit().setFlyHeight(pos.z, 0)

public function IUnitMetadata.setPosReal(vec3 pos)
	this.getUnit().setPos(pos.x, pos.y)
	this.getUnit().setFlyHeight(pos.z - pos.getTerrainZ(), 0)

public function IUnitMetadata.setPos(real x, real y)
	SetUnitPosition(this.getUnit(), x, y)

@deprecated("Use .setPropWindow(angle value) instead.") public function IUnitMetadata.setPropWindow(real radians)
	SetUnitPropWindow(this.getUnit(), radians)

/**	A prop window of 0 prevents the unit from moving, but
	it can still turn around.*/
public function IUnitMetadata.setPropWindow(angle value)
	SetUnitPropWindow(this.getUnit(), value.radians())

public function IUnitMetadata.setScale(real scale)
	SetUnitScale(this.getUnit(), scale, scale, scale)

public function IUnitMetadata.setState(unitstate state, real value)
	SetUnitState(this.getUnit(), state, value)

public function IUnitMetadata.setTimeScale(real scale)
	SetUnitTimeScale(this.getUnit(), scale)

public function IUnitMetadata.setTimedLife(real time)
	UnitApplyTimedLife(this.getUnit(), 'BTLF', time)

public function IUnitMetadata.setTurnSpeed(real speed)
	SetUnitTurnSpeed(this.getUnit(), speed)

public function IUnitMetadata.setUseFood(boolean flag)
	SetUnitUseFood(this.getUnit(), flag)

public function IUnitMetadata.setUserData(int data)
	SetUnitUserData(this.getUnit(), data)

public function IUnitMetadata.setVertexColor(int r, int g, int b, int a)
	SetUnitVertexColor(this.getUnit(), r, g, b, a)

public function IUnitMetadata.setX(real x)
	SetUnitX(this.getUnit(), x)

/** Sets the coordinmates of the unit to the given position.
	Uses the SetUnitX/Y natives */
public function IUnitMetadata.setXY(vec2 pos)
	this.getUnit()..setX(pos.x)..setY(pos.y)

/** Sets the coordinmates of the unit to the given position.
	Uses the SetUnitX/Y natives */
public function IUnitMetadata.setXY(vec3 pos)
	this.getUnit()..setX(pos.x)..setY(pos.y)

/** Sets the coordinmates of the unit to the given position.
	Z is being set as flyheight. Uses the SetUnitX/Y natives */
public function IUnitMetadata.setXYZ(vec3 pos)
	this.getUnit()..setX(pos.x)..setY(pos.y)
	..setFlyHeight(pos.z, 0)

public function IUnitMetadata.setXYZReal(vec3 pos)
	SetUnitX(this.getUnit(), pos.x)
	SetUnitY(this.getUnit(), pos.y)
	SetUnitFlyHeight(this.getUnit(), pos.z - pos.getTerrainZ(), 0)

public function IUnitMetadata.setY(real y)
	SetUnitY(this.getUnit(), y)

public function IUnitMetadata.show()
	ShowUnit(this.getUnit(), true)

public function IUnitMetadata.subHP(real val)
	this.getUnit().subState(UNIT_STATE_LIFE, val)

public function IUnitMetadata.subMana(real val)
	this.getUnit().subState(UNIT_STATE_MANA, val)

public function IUnitMetadata.subState(unitstate state, real value)
	SetUnitState(this.getUnit(), state, this.getUnit().getState(state) - value)

/** Cancels the current order */
public function IUnitMetadata.abortOrder() returns boolean
	if IsUnitPaused(this.getUnit())
		return false
	else
		PauseUnit(this.getUnit(), true)
		IssueImmediateOrder(this.getUnit(), "stop")
		PauseUnit(this.getUnit(), false)
	return true

public function IUnitMetadata.resetAbilityCooldown(int abilId)
	let lvl = this.getUnit().getAbilityLevel(abilId)
	this.getUnit()..removeAbility(abilId)..addAbility(abilId)..setAbilityLevel(abilId, lvl)

/** Reset all cooldowns of the unit **/
public function IUnitMetadata.resetCooldown()
	UnitResetCooldown(this.getUnit())

public function IUnitMetadata.getDefaultMovespeed() returns real
	return GetUnitDefaultMoveSpeed(this.getUnit())

/** Returns the default prop window of the unit as angle.*/
public function IUnitMetadata.getDefaultPropWindow() returns angle
	return GetUnitDefaultPropWindow(this.getUnit()).fromDeg()

public function IUnitMetadata.getDefaultTurnSpeed() returns real
	return GetUnitDefaultTurnSpeed(this.getUnit())

public function IUnitMetadata.getDefaultAcquireRange() returns real
	return GetUnitDefaultAcquireRange(this.getUnit())

public function IUnitMetadata.getDefaultFlyHeight() returns real
	return GetUnitDefaultFlyHeight(this.getUnit())

public function IUnitMetadata.getIntMaxHP() returns int
	return BlzGetUnitMaxHP(this.getUnit())

public function IUnitMetadata.setMaxHP(int hp)
	BlzSetUnitMaxHP(this.getUnit(), hp)

/** Changes a unit's maximum hp, adjusting the
	current hp to keep the same ratio.*/
public function IUnitMetadata.setMaxHP(int hp, boolean keepRatio)
	if keepRatio
		let ratio = this.getUnit().getHP()/this.getUnit().getMaxHP()
		BlzSetUnitMaxHP(this.getUnit(), hp)
		this.getUnit().setHP(ratio * hp)
	else
		BlzSetUnitMaxHP(this.getUnit(), hp)

public function IUnitMetadata.getIntMaxMana() returns int
	return BlzGetUnitMaxMana(this.getUnit())

public function IUnitMetadata.setMaxMana(int mana)
	BlzSetUnitMaxMana(this.getUnit(), mana)

/** Changes a unit's maximum mana, adjusting the
	current mana to keep the same ratio.
	If the current unit's maximum mana is zero,
	the ratio will be considered zero.*/
public function IUnitMetadata.setMaxMana(int mana, boolean keepRatio)
	if keepRatio
		let maxMana = this.getUnit().getMaxMana()
		let ratio = maxMana == 0 ? 0 : this.getUnit().getMana() / maxMana
		BlzSetUnitMaxMana(this.getUnit(), mana)
		this.getUnit().setMana(ratio * mana)
	else
		BlzSetUnitMaxMana(this.getUnit(), mana)

public function IUnitMetadata.setName(string name)
	BlzSetUnitName(this.getUnit(), name)

public function IUnitMetadata.setProperName(string name)
	BlzSetHeroProperName(this.getUnit(), name)

public function IUnitMetadata.getBaseDamage(int weaponIndex) returns int
	return BlzGetUnitBaseDamage(this.getUnit(), weaponIndex)

public function IUnitMetadata.setBaseDamage(int baseDamage, int weaponIndex)
	BlzSetUnitBaseDamage(this.getUnit(), baseDamage, weaponIndex)

public function IUnitMetadata.getDiceNumber(int weaponIndex) returns int
	return BlzGetUnitDiceNumber(this.getUnit(), weaponIndex)

public function IUnitMetadata.setDiceNumber(int diceNumber, int weaponIndex)
	BlzSetUnitDiceNumber(this.getUnit(), diceNumber, weaponIndex)

public function IUnitMetadata.getDiceSides(int weaponIndex) returns int
	return BlzGetUnitDiceSides(this.getUnit(), weaponIndex)

public function IUnitMetadata.setDiceSides(int diceSides, int weaponIndex)
	BlzSetUnitDiceSides(this.getUnit(), diceSides, weaponIndex)

public function IUnitMetadata.getAttackCooldown(int weaponIndex) returns real
	return BlzGetUnitAttackCooldown(this.getUnit(), weaponIndex)

public function IUnitMetadata.setAttackCooldown(real cooldown, int weaponIndex)
	BlzSetUnitAttackCooldown(this.getUnit(), cooldown, weaponIndex)

public function IUnitMetadata.getArmor() returns real
	return BlzGetUnitArmor(this.getUnit())

public function IUnitMetadata.setArmor(real armorAmount)
	BlzSetUnitArmor(this.getUnit(), armorAmount)

public function IUnitMetadata.hideAbility(int abilId, boolean flag)
	BlzUnitHideAbility(this.getUnit(), abilId, flag)

public function IUnitMetadata.disableAbility(int abilId, boolean flag, boolean hideUI)
	BlzUnitDisableAbility(this.getUnit(), abilId, flag, hideUI)

public function IUnitMetadata.cancelTimedLife()
	BlzUnitCancelTimedLife(this.getUnit())

public function IUnitMetadata.isSelectable() returns boolean
	return BlzIsUnitSelectable(this.getUnit())

public function IUnitMetadata.isInvulnerable() returns boolean
	return BlzIsUnitInvulnerable(this.getUnit())

public function IUnitMetadata.interruptAttack()
	BlzUnitInterruptAttack(this.getUnit())

public function IUnitMetadata.getCollisionSize() returns real
	return BlzGetUnitCollisionSize(this.getUnit())

public function IUnitMetadata.setAbilityCooldown(int abilId, int level, real cooldown)
	BlzSetUnitAbilityCooldown(this.getUnit(), abilId, level, cooldown)

public function IUnitMetadata.getAbilityCooldown(int abilId, int level) returns real
	return BlzGetUnitAbilityCooldown(this.getUnit(), abilId, level)

public function IUnitMetadata.getAbilityCooldownRemaining(int abilId) returns real
	return BlzGetUnitAbilityCooldownRemaining(this.getUnit(), abilId)

public function IUnitMetadata.endAbilityCooldown(int abilCode)
	BlzEndUnitAbilityCooldown(this.getUnit(), abilCode)

public function IUnitMetadata.getAbilityManaCost(int abilId, int level) returns int
	return BlzGetUnitAbilityManaCost(this.getUnit(), abilId, level)

public function IUnitMetadata.setAbilityManaCost(int abilId, int level, int manaCost)
	BlzSetUnitAbilityManaCost(this.getUnit(), abilId, level, manaCost)
	
@deprecated("Use getPos instead.")
public function IUnitMetadata.getLoc() returns location
	return GetUnitLoc(this.getUnit())

public function IUnitMetadata.getLocalZ() returns real
	return BlzGetLocalUnitZ(this.getUnit())

public function IUnitMetadata.isIllusion() returns bool
	return IsUnitIllusion(this.getUnit())

public function IUnitMetadata.incAbilityLevel(int abilityId)
	IncUnitAbilityLevel(this.getUnit(), abilityId)

public function IUnitMetadata.decAbilityLevel(int abilityId)
	DecUnitAbilityLevel(this.getUnit(), abilityId)

/** Change unit attack cooldown by given percentage. Negative values are possible as well. 
	Returns the new attack cooldown time of the IUnitMetadata. */
@configurable public function IUnitMetadata.setAttackCooldownPercChange(real attackCooldownPercChange, int weaponIndex) returns real
	let newSpeed = this.getUnit().getAttackCooldown(weaponIndex)/(1+attackCooldownPercChange)
	this.getUnit().setAttackCooldown(newSpeed, weaponIndex)
	return newSpeed
   
/** Change unit movement speed by given percentage. Negative values are possible as well. 
	Returns the new speed of the IUnitMetadata.
	ex.: using 0.25 on unit with speed 400 will make the new speed 500. */
@configurable public function IUnitMetadata.setMoveSpeedPercChange(real movespeedPercChange) returns real
	let oldSpeed = this.getUnit().getMoveSpeed()
	let newSpeed = oldSpeed + (oldSpeed*movespeedPercChange)
	this.getUnit().setMoveSpeed(newSpeed)
	return newSpeed

// Unit fields
public function IUnitMetadata.getField(unitbooleanfield field) returns bool
	return BlzGetUnitBooleanField(this.getUnit(), field)

public function IUnitMetadata.getField(unitintegerfield field) returns int
	return BlzGetUnitIntegerField(this.getUnit(), field)

public function IUnitMetadata.getField(unitrealfield field) returns real
	return BlzGetUnitRealField(this.getUnit(), field)

public function IUnitMetadata.getField(unitstringfield field) returns string
	return BlzGetUnitStringField(this.getUnit(), field)

public function IUnitMetadata.setField(unitbooleanfield field, bool value) returns bool
	return BlzSetUnitBooleanField(this.getUnit(), field, value)

public function IUnitMetadata.setField(unitintegerfield field, int value) returns bool
	return BlzSetUnitIntegerField(this.getUnit(), field, value)

public function IUnitMetadata.setField(unitrealfield field, real value) returns bool
	return BlzSetUnitRealField(this.getUnit(), field, value)

public function IUnitMetadata.setField(unitstringfield field, string value) returns bool
	return BlzSetUnitStringField(this.getUnit(), field, value)
	
// Unit Weapon fields
public function IUnitMetadata.getFieldWeapon(unitweaponbooleanfield field, int weaponIndex) returns bool
	return BlzGetUnitWeaponBooleanField(this.getUnit(), field, weaponIndex)

public function IUnitMetadata.getFieldWeapon(unitweaponintegerfield field, int weaponIndex) returns int
	return BlzGetUnitWeaponIntegerField(this.getUnit(), field, weaponIndex)

public function IUnitMetadata.getFieldWeapon(unitweaponrealfield field, int weaponIndex) returns real
	return BlzGetUnitWeaponRealField(this.getUnit(), field, weaponIndex)

public function IUnitMetadata.getFieldWeapon(unitweaponstringfield field, int weaponIndex) returns string
	return BlzGetUnitWeaponStringField(this.getUnit(), field, weaponIndex)

public function IUnitMetadata.setFieldWeapon(unitweaponbooleanfield field, int weaponIndex, bool value) returns bool
	return BlzSetUnitWeaponBooleanField(this.getUnit(), field, weaponIndex, value)

public function IUnitMetadata.setFieldWeapon(unitweaponintegerfield field, int weaponIndex, int value) returns bool
	return BlzSetUnitWeaponIntegerField(this.getUnit(), field, weaponIndex, value)

public function IUnitMetadata.setFieldWeapon(unitweaponrealfield field, int weaponIndex, real value) returns bool
	return BlzSetUnitWeaponRealField(this.getUnit(), field, weaponIndex, value)

public function IUnitMetadata.setFieldWeapon(unitweaponstringfield field, int weaponIndex, string value) returns bool
	return BlzSetUnitWeaponStringField(this.getUnit(), field, weaponIndex, value)