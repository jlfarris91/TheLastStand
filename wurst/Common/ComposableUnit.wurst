package ComposableUnit
import initlater LinkedList
import initlater UnitMetadata
import Composition
import Type

// ============================================================================
public class ComposableUnit extends BaseUnitMetadata implements IComposite
  protected LinkedList<IComponent> _components

  // --------------------------------------------------------------------------
  construct(unit u)
    super(u)

  // --------------------------------------------------------------------------
  ondestroy
    if (_components != null)
      for component in _components
        destroy component
      destroy _components
      _components = null

  // --------------------------------------------------------------------------
  @inline
  override function addComponent(IComponent component) returns IComponent
    if (_components == null)
      _components = new LinkedList<IComponent>()
    _components.add(component)
    (component castTo Component).initialize()
    component.setEnabled(true)
    return component

  // --------------------------------------------------------------------------
  @inline
  override function getComponent(Type componentType) returns IComponent
    if (_components != null)
      for component in _components
        if (component.typeId == componentType.id)
          return component
    return null