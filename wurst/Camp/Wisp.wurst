package Wisp
import RegisterEvents
import TlsUnitDefinition
import ChannelAbilityPreset
import GroupUtils
import Heroes
import HumanPlayerComponent
import Icons
import HumanPlayers
import UnitIndexer


// ============================================================================
@compiletime function createDefinitions()

  new TlsUnitDefinition(TlsUnitIds.wisp, UnitIds.wisp)
    ..setName("Wisp")
    ..setNormalAbilities(commaList(TlsAbilityIds.buildObelisk, AbilityIds.invulnerable))
    ..setCollisionSize(0)
    ..setStructuresBuilt("")
    ..setUpgradesUsed("")
    ..setUnitClassification("")
    ..setSpeedBase(350)
    ..setFoodCost(0)

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_rifleman, 1, true)
    ..setIconNormal(Icons.bTNRifleman)
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(0)
    ..setTooltipNormal(1, "Choose Ranger")
    ..setTooltipNormalExtended(1, "The Ranger has a powerful rifle that is effective at long range")

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_soldier, 1, true)
    ..setIconNormal(Icons.bTNArthas)
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(0)
    ..setTooltipNormal(1, "Choose Swordsman")
    ..setTooltipNormalExtended(1, "Swordsman is a melee-only tank effective at crowd control")

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_tinkerer, 1, true)
    ..setIconNormal(Icons.bTNHeroTinker)
    ..setButtonPositionNormalX(2)
    ..setButtonPositionNormalY(0)
    ..setTooltipNormal(1, "Choose Engineer")
    ..setTooltipNormalExtended(1, "Engineer builds turrets and empowers defensive structures")

  new AbilityDefinitionSpellBook(TlsAbilityIds.selectHero)
    ..setSpellList(1, commaList(
      TlsAbilityIds.selectHero_rifleman,
      TlsAbilityIds.selectHero_soldier,
      TlsAbilityIds.selectHero_tinkerer
    ))
    ..setMinimumSpells(1, 12)
    ..setTooltipNormal(1, "Choose Your Hero")
    ..setTooltipNormalExtended(1, "Pick from several different heroes with a variety of playstyles")
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(2)

bool g_hasWisp = false

// ============================================================================
function onConstructCanceled()
  let structure = GetTriggerUnit()
  if (not structure.isObelisk())
    return

  let owningPlayer = structure.getOwner()
  let temp = getGroup()
  temp.enumUnitsOfType(TlsUnitIds.wisp, null)
  for u in temp
    if (u.getOwner() == owningPlayer)
      u.addAbility(TlsAbilityIds.buildObelisk)
      u.removeAbility(TlsAbilityIds.selectHero)
  temp.release()

// ============================================================================
function onUnitIndexed()
  let structure = getIndexingUnit()
  if (not structure.isObelisk())
    return

  let owningPlayer = structure.getOwner()
  let temp = getGroup()
  temp.enumUnitsOfType(TlsUnitIds.wisp, null)
  for u in temp
    if (u.getOwner() == owningPlayer)
      u.removeAbility(TlsAbilityIds.buildObelisk)
      u.addAbility(TlsAbilityIds.selectHero)
  temp.release()

// ============================================================================
function onSpellCast()
  let castingUnit = GetSpellAbilityUnit()
  if (castingUnit.getTypeId() != TlsUnitIds.wisp)
    return

  let castingPlayer = castingUnit.getOwner()

  let abilityId = GetSpellAbilityId()
  
  int heroTypeId

  switch (abilityId)
    case TlsAbilityIds.selectHero_rifleman
      heroTypeId = TlsUnitIds.heroRanger

    case TlsAbilityIds.selectHero_soldier
      heroTypeId = TlsUnitIds.heroSwordsman

    case TlsAbilityIds.selectHero_tinkerer
      heroTypeId = TlsUnitIds.heroTinker

    default
      return

  let playerComp = castingPlayer.getHumanPlayerComponent()
  playerComp.setHeroTypeId(heroTypeId)

  spawnHeroForPlayer(castingUnit.getOwner(), castingUnit.getPos(), true)

  castingUnit.remove()

// ============================================================================
init

  onUnitIndex(function onUnitIndexed)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL, function onConstructCanceled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST, function onSpellCast)

  for p in g_PlayingHumanPlayers
    if (p == localPlayer)
      CreateCommandButtonEffectBJ(TlsAbilityIds.buildObelisk, "")