package Wisp
import RegisterEvents
import TlsUnitDefinition
import ChannelAbilityPreset
import GroupUtils
import HumanPlayerComponent
import HumanPlayers
import UnitIndexer
import TlsUpgradeIds
import Hero_Mountaineer
import Hero_Tinkerer
import Hero_Swordsman
import Hero_Ranger
import GameInstance

// ============================================================================
@compiletime function createObjectDefinitions()

  new TlsUnitDefinition(TlsUnitIds.wisp, UnitIds.wisp)
    ..setName("Wisp")
    ..setNormalAbilities(commaList(TlsAbilityIds.buildHeadquarters1, AbilityIds.invulnerable))
    ..setCollisionSize(0)
    ..setStructuresBuilt("")
    ..setUpgradesUsed("")
    ..setUnitClassification("")
    ..setSpeedBase(350)
    ..setFoodCost(0)

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_ranger, 1, true)
    ..setIconNormal(g_heroRangerDefinition.getIconGameInterface())
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(0)
    ..setTooltipNormal(1, "Choose Ranger")
    ..setTooltipNormalExtended(1, "The Ranger brandishes a sharpshooter's rifle that is effective at long range and can throw smoke grenades to disorient enemies. He is a skilled looter and can even identify what loot a structure will contain without having to loot it.|n|n|cffffcc00Has an agile and deadly Hawk companion.|r")

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_soldier, 1, true)
    ..setIconNormal(g_heroSwordsmanDefinition.getIconGameInterface())
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(0)
    ..setTooltipNormal(1, "Choose Swordsman")
    ..setTooltipNormalExtended(1, "Swordsman is a melee-only tank effective at crowd control")

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_tinkerer, 1, true)
    ..setIconNormal(g_heroTinkererDefinition.getIconGameInterface())
    ..setButtonPositionNormalX(2)
    ..setButtonPositionNormalY(0)
    ..setTooltipNormal(1, "Choose Tinkerer")
    ..setTooltipNormalExtended(1, "Tinkerer builds turrets and empowers defensive structures")

  new ChannelAbilityPreset(TlsAbilityIds.selectHero_mountaineer, 1, true)
    ..setIconNormal(g_heroMountaineerDefinition.getIconGameInterface())
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(1)
    ..setTooltipNormal(1, "Choose Mountaineer")
    ..setTooltipNormalExtended(1, "The Mountaineer wields a powerful blunderbuss that is most effective at short range and can lay traps to stun enemies. He excels at tracking animals and foraging for ingredients to cook powerful recipes in the camp's fire pit.|n|n|cffffcc00Has a powerful Bear companion.|r")
    ..setRequirements(commaList(TlsUpgradeIds.progressionMountaineer))

  new AbilityDefinitionSpellBook(TlsAbilityIds.selectHero)
    ..setSpellList(1, commaList(
      TlsAbilityIds.selectHero_ranger,
      TlsAbilityIds.selectHero_soldier,
      TlsAbilityIds.selectHero_tinkerer,
      TlsAbilityIds.selectHero_mountaineer
    ))
    ..setMinimumSpells(1, 12)
    ..setTooltipNormal(1, "Choose Your Hero")
    ..setTooltipNormalExtended(1, "Pick from several different heroes with a variety of playstyles")
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(2)

bool g_hasWisp = false

// ============================================================================
function onConstructCanceled()
  let structure = GetTriggerUnit()
  if (not structure.isHeadquarters())
    return

  let owningPlayer = structure.getOwner()
  let temp = getGroup()
  temp.enumUnitsOfType(TlsUnitIds.wisp, null)
  for u in temp
    if (u.getOwner() == owningPlayer)
      u.addAbility(TlsAbilityIds.buildHeadquarters1)
      u.removeAbility(TlsAbilityIds.selectHero)
  temp.release()

// ============================================================================
function onUnitIndexed()
  let structure = getIndexingUnit()
  if (not structure.isHeadquarters())
    return

  let owningPlayer = structure.getOwner()
  let temp = getGroup()
  temp.enumUnitsOfType(TlsUnitIds.wisp, null)
  for u in temp
    if (u.getOwner() == owningPlayer)
      u.removeAbility(TlsAbilityIds.buildHeadquarters1)
      u.addAbility(TlsAbilityIds.selectHero)
  temp.release()

// ============================================================================
function onSpellCast()
  let castingUnit = GetSpellAbilityUnit()
  if (castingUnit.getTypeId() != TlsUnitIds.wisp)
    return

  let castingPlayer = castingUnit.getOwner()

  let abilityId = GetSpellAbilityId()
  
  int heroTypeId

  switch (abilityId)
    case TlsAbilityIds.selectHero_ranger
      heroTypeId = TlsUnitIds.heroRanger

    case TlsAbilityIds.selectHero_soldier
      heroTypeId = TlsUnitIds.heroSwordsman

    case TlsAbilityIds.selectHero_tinkerer
      heroTypeId = TlsUnitIds.heroTinker

    default
      return

  let playerComp = castingPlayer.getHumanPlayerComponent()
  playerComp.setHeroTypeId(heroTypeId)

  spawnHeroForPlayer(castingUnit.getOwner(), castingUnit.getPos(), true)

  castingUnit.remove()

// ============================================================================
init

  onUnitIndex(function onUnitIndexed)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_CANCEL, function onConstructCanceled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST, function onSpellCast)

  for p in g_PlayingHumanPlayers
    if (p == localPlayer)
      CreateCommandButtonEffectBJ(TlsAbilityIds.buildHeadquarters1, "")