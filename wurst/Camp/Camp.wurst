package Camp
import HashMap
import HashList
import GameConstants
import ErrorHandling
import PlayerMetadata
import LinkedList
import initlater ICamp
import initlater ICampUnitFactory
import initlater ICampUnit

public class Camp implements ICamp
  protected player owner
  protected HashList<ICampUnit> units
  protected HashMap<unit, ICampUnit> _unitToCampUnitMap
  protected unit flag
  protected int worth
  protected bool isSecure
  protected ICampUnitFactory _unitFactory

  construct(player owner, ICampUnitFactory unitFactory)
    this.owner = owner
    this.units = new HashList<ICampUnit>()
    this._unitToCampUnitMap = new HashMap<unit, ICampUnit>()
    this._unitFactory = unitFactory
    this.reset()

  ondestroy
    this.reset()
    destroy this.units
    destroy this._unitToCampUnitMap

  override function reset()
    this.units.clear()
    this._unitToCampUnitMap.flush()
    setCampUnit(null)

  override function getOwner() returns player
    return this.owner

  override function getCampUnit() returns unit
    return this.flag

  override function setCampUnit(unit flag)
    if (flag != null and flag.getTypeId() != UNIT_ID_CAMP)
      error("Tried to assign a camp unit that was the incorrect type")
      return
    if (this.flag != null)
      this.flag.remove()
    this.flag = flag

  override function getCenter() returns vec2
    if (flag != null)
      return flag.getPos()
    else if (owner.getHeroUnit() != null)
      return owner.getHeroUnit().getPos()
    return ZERO2

  override function getIsSecure() returns bool
    return this.isSecure

  override function setIsSecure(bool isSecure)
    this.isSecure = isSecure

  override function getUnit(unit u) returns ICampUnit
    return this._unitToCampUnitMap.get(u)

  override function addUnit(unit u) returns ICampUnit
    let campUnit = this._unitFactory.createCampUnit(this, u)
    this.units.add(campUnit)
    this._unitToCampUnitMap.put(u, campUnit)
    return campUnit

  override function removeUnit(unit u) returns bool
    if (not this._unitToCampUnitMap.has(u))
      return false
    let campUnit = this._unitToCampUnitMap.get(u)
    this.units.remove(campUnit)
    this._unitToCampUnitMap.remove(u)
    return true

  override function getUnits() returns LinkedList<ICampUnit>
    let campUnits = new LinkedList<ICampUnit>()
    for campUnit in this.units
      campUnits.add(campUnit)
    return campUnits