package Camp
import HashMap
import HashList
import HumanPlayers
import RegisterEvents
import GameConstants
import ErrorHandling
import PlayerMetadata
import EventHelper
import PlayerExtensions
import UnitExtensions

HashMap<player, Camp> g_PlayerCamps
trigger g_UnitEnteredMapTrigger

public class CampUnit
  protected unit _unit
  protected Camp _camp

  construct(Camp camp, unit u)
    this._camp = camp
    this._unit = u

  ondestroy
    this._camp = null
    if (this._unit != null)
      this._unit.remove()
    this._unit = null

  function getUnit() returns unit
    return this._unit

  function getCamp() returns Camp
    return this._camp

public class CampSurvivor extends CampUnit
  construct(Camp camp, unit u)
    super(camp, u)

public class CampStructure extends CampUnit
  construct(Camp camp, unit u)
    super(camp, u)

public class Camp
  player owner
  HashList<CampSurvivor> survivors
  HashList<CampStructure> structures
  unit flag
  int worth
  bool isSecure

  construct(player owner)
    this.owner = owner
    this.survivors = new HashList<CampSurvivor>()
    this.structures = new HashList<CampStructure>()
    this.reset()

  function reset()
    this.survivors.clear()
    this.structures.clear()
    setCampUnit(null)

  function getOwner() returns player
    return this.owner

  function getCampUnit() returns unit
    return this.flag

  function setCampUnit(unit flag)
    if (flag != null and flag.getTypeId() != UNIT_ID_CAMP)
      error("Tried to assign a camp unit that was the incorrect type")
      return
    if (this.flag != null)
      this.flag.remove()
    this.flag = flag

  function getCenter() returns vec2
    if (flag != null)
      return flag.getPos()
    else if (owner.getHeroUnit() != null)
      return owner.getHeroUnit().getPos()
    return ZERO2

  function getIsSecure() returns bool
    return this.isSecure

  function setIsSecure(bool isSecure)
    this.isSecure = isSecure

  function addSurvivor(unit survivor) returns CampSurvivor
    if (survivor == null)
      error("Trying to add a null survivor to camp")
      return null
    var campSurvivor = getSurvivor(survivor)
    if (campSurvivor != null)
      error("Trying to register a survivor that is already registered")
      return campSurvivor
    campSurvivor = new CampSurvivor(this, survivor)
    this.survivors.add(campSurvivor)
    print("Added survivor {0} to camp {1}".format(survivor.getName(), this.owner.getName()))
    return campSurvivor

  function removeSurvivor(unit survivor)
    var campSurvivor = getSurvivor(survivor)
    if (campSurvivor == null)
      error("Trying to remove a survivor that does not belong to camp")
    this.survivors.remove(campSurvivor)
    print("Removed survivor {0} to camp {1}".format(survivor.getName(), this.owner.getName()))

  function getSurvivor(unit survivor) returns CampSurvivor
    for u in this.survivors
      if (u._unit == survivor)
        return u
    return null

  function addStructure(unit structure) returns CampStructure
    if (structure == null)
      error("Trying to add a null structure to camp")
      return null
    var campStructure = getStructure(structure)
    if (campStructure != null)
      error("Trying to register a structure that is already registered")
      return campStructure
    campStructure = new CampStructure(this, structure)
    this.structures.add(campStructure)
    print("Added structure {0} to camp {1}".format(structure.getName(), this.owner.getName()))
    return campStructure

  function removeStructure(unit structure)
    var campStructure = getStructure(structure)
    if (campStructure == null)
      error("Trying to remove a structure that does not belong to camp")
    this.structures.remove(campStructure)
    print("Removed structure {0} to camp {1}".format(structure.getName(), this.owner.getName()))

  function getStructure(unit structure) returns CampStructure
    for u in this.structures
      if (u._unit == structure)
        return u
    return null

public function player.getCamp() returns Camp
  return getPlayerCamp(this)

function getPlayerCamp(player p) returns Camp
  if (not g_PlayerCamps.has(p))
    return null
  return g_PlayerCamps.get(p)

function createCamp(player p)
  let camp = new Camp(p)
  g_PlayerCamps.put(p, camp)

function isCampStructure(unit u) returns bool
  let unitTypeId = u.getTypeId()
  if (not u.isStructure())
    return false
  if (unitTypeId == UNIT_ID_CAMP_FLAG)
    return false
  return true

function isCampSurvivor(unit u) returns bool
  let unitTypeId = u.getTypeId()
  if (u.isStructure())
    return false
  if (unitTypeId == UNIT_ID_CAMP or
      unitTypeId == UNIT_ID_SURVIVOR_HERO or
      unitTypeId == UNIT_ID_ADMIN or
      unitTypeId == UNIT_ID_SKILLS)
    return false
  return true

function onPlayerUnitDeath()
  let dyingUnit = GetDyingUnit()
  let owner = dyingUnit.getOwner()
  let camp = owner.getCamp()
  if (camp == null)
    return
  if (isCampStructure(dyingUnit))
    camp.removeStructure(dyingUnit)
  else if (isCampSurvivor(dyingUnit))
    camp.removeSurvivor(dyingUnit)

function onPlayerUnitConstructFinished()
  let structure = GetConstructedStructure()
  if (not isCampStructure(structure))
    return
  let owner = structure.getOwner()
  let camp = owner.getCamp()
  if (camp != null and structure.getTypeId() != UNIT_ID_CAMP_FLAG)
    camp.addStructure(structure)

function onUnitEnteredMap()
  let u = GetEnteringUnit()
  if (not isCampSurvivor(u))
    return
  let owner = u.getOwner()
  if (not owner.isHumanPlayer())
    return
  let camp = owner.getCamp()
  if (camp != null)
    camp.addSurvivor(u)

function initializePlayerCamp(player p)
  createCamp(p)
  registerPlayerUnitEventForPlayer(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onPlayerUnitConstructFinished, p)
  registerPlayerUnitEventForPlayer(EVENT_PLAYER_UNIT_DEATH, function onPlayerUnitDeath, p)

function initializePlayerCamps()
  for p in g_PlayingHumanPlayers
    initializePlayerCamp(p)

init
  g_PlayerCamps = new HashMap<player, Camp>()
  initializePlayerCamps()

  g_UnitEnteredMapTrigger = CreateTrigger()
  g_UnitEnteredMapTrigger.registerRectEnterEventSource(GetEntireMapRect())
  g_UnitEnteredMapTrigger.addAction(function onUnitEnteredMap)