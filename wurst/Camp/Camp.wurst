package Camp
import HashMap
import HashList
import ErrorHandling
import LinkedList
import TlsUnitIds
import UnitMetadata

import public initlater CampUnit
import public initlater CampUnitFactory
import HumanPlayerMetadata

HashMap<player, ICamp> g_PlayerCamps
group g_tempGroup

// ============================================================================
public interface ICamp
  function getOwner() returns IPlayerMetadata  
  function getCampTent() returns unit
  function setCampTent(unit u)  
  function getCenter() returns vec2
  function getUnit(unit u) returns ICampUnitMetadata
  function addUnit(ICampUnitMetadata u) returns ICampUnitMetadata
  function removeUnit(ICampUnitMetadata u) returns bool
  function getUnits() returns LinkedList<ICampUnitMetadata>
  function reset()

// ============================================================================
public interface ICampUnitMetadata extends IUnitMetadata
  function getCamp() returns ICamp

// ============================================================================
public class Camp implements ICamp
  protected HumanPlayerMetadata m_owner
  protected HashList<ICampUnitMetadata> m_units
  protected HashMap<unit, ICampUnitMetadata> m_unitToCampUnitMap
  protected unit m_campFlag
  protected int m_worth
  protected bool m_isSecure

  // --------------------------------------------------------------------------
  construct(HumanPlayerMetadata owner)
    this.m_owner = owner
    this.m_units = new HashList<ICampUnitMetadata>()
    this.m_unitToCampUnitMap = new HashMap<unit, ICampUnitMetadata>()
    this.reset()

  // --------------------------------------------------------------------------
  ondestroy
    this.reset()
    destroy this.m_units
    destroy this.m_unitToCampUnitMap

  // --------------------------------------------------------------------------
  override function reset()
    this.m_units.clear()
    this.m_unitToCampUnitMap.flush()
    this.m_isSecure = false
    setCampTent(null)

  // --------------------------------------------------------------------------
  override function getOwner() returns IPlayerMetadata
    return this.m_owner

  // --------------------------------------------------------------------------
  override function getCampTent() returns unit
    return this.m_campFlag

  // --------------------------------------------------------------------------
  override function setCampTent(unit flag)
    if (flag != null and flag.getTypeId() != TlsUnitIds.headquarters1)
      error("Tried to assign a camp unit that was the incorrect type")
      return
    if (this.m_campFlag != null)
      this.m_campFlag.remove()
    this.m_campFlag = flag

  // --------------------------------------------------------------------------
  override function getCenter() returns vec2
    if (m_campFlag != null)
      return m_campFlag.getPos()
    let hero = m_owner.getHero()
    if (hero != null)
      let heroUnit = hero.getUnit()
      if (heroUnit != null)
      return heroUnit.getPos()
    return ZERO2

  // --------------------------------------------------------------------------
  override function getUnit(unit u) returns ICampUnitMetadata
    return this.m_unitToCampUnitMap.get(u)

  // --------------------------------------------------------------------------
  override function addUnit(ICampUnitMetadata campUnit) returns ICampUnitMetadata
    this.m_units.add(campUnit)
    this.m_unitToCampUnitMap.put(campUnit.getUnit(), campUnit)
    //Log.debug("Added unit {0} to {1} camp".format(campUnit.getUnit().getName(), _owner.getName()))
    return campUnit

  // --------------------------------------------------------------------------
  override function removeUnit(ICampUnitMetadata campUnit) returns bool
    this.m_units.remove(campUnit)
    this.m_unitToCampUnitMap.remove(campUnit.getUnit())
    //Log.debug("Removed unit {0} from {1} camp".format(campUnit.getUnit().getName(), _owner.getName()))
    return true

  // --------------------------------------------------------------------------
  override function getUnits() returns LinkedList<ICampUnitMetadata>
    let campUnits = new LinkedList<ICampUnitMetadata>()
    for campUnit in this.m_units
      campUnits.add(campUnit)
    return campUnits