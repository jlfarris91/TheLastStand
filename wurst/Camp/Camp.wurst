package Camp
import HashMap
import HashList
import ErrorHandling
import PlayerMetadata
import LinkedList
import initlater ICamp
import initlater ICampUnitFactory
import initlater ICampUnit
import TlsUnitIds

public class Camp implements ICamp
  protected player _owner
  protected HashList<ICampUnit> _units
  protected HashMap<unit, ICampUnit> _unitToCampUnitMap
  protected unit _campFlag
  protected int _worth
  protected bool _isSecure
  protected ICampUnitFactory _unitFactory

  construct(player owner, ICampUnitFactory unitFactory)
    this._owner = owner
    this._units = new HashList<ICampUnit>()
    this._unitToCampUnitMap = new HashMap<unit, ICampUnit>()
    this._unitFactory = unitFactory
    this.reset()

  ondestroy
    this.reset()
    destroy this._units
    destroy this._unitToCampUnitMap

  override function reset()
    this._units.clear()
    this._unitToCampUnitMap.flush()
    setCampUnit(null)

  override function getOwner() returns player
    return this._owner

  override function getCampUnit() returns unit
    return this._campFlag

  override function setCampUnit(unit flag)
    if (flag != null and flag.getTypeId() != TlsUnitIds.camp)
      error("Tried to assign a camp unit that was the incorrect type")
      return
    if (this._campFlag != null)
      this._campFlag.remove()
    this._campFlag = flag

  override function getCenter() returns vec2
    if (_campFlag != null)
      return _campFlag.getPos()
    else if (_owner.getHeroUnit() != null)
      return _owner.getHeroUnit().getPos()
    return ZERO2

  override function getIsSecure() returns bool
    return this._isSecure

  override function setIsSecure(bool isSecure)
    this._isSecure = isSecure

  override function getUnit(unit u) returns ICampUnit
    return this._unitToCampUnitMap.get(u)

  override function addUnit(unit u) returns ICampUnit
    let campUnit = this._unitFactory.createCampUnit(this, u)
    if (campUnit == null)
      return null
    return this.addUnit(campUnit)

  override function addUnit(ICampUnit campUnit) returns ICampUnit
    this._units.add(campUnit)
    this._unitToCampUnitMap.put(campUnit.getUnit(), campUnit)
    print("Added unit {0} to {1} camp".format(campUnit.getUnit().getName(), _owner.getName()))
    return campUnit

  override function removeUnit(unit u) returns bool
    if (not this._unitToCampUnitMap.has(u))
      return false
    let campUnit = this._unitToCampUnitMap.get(u)
    return this.removeUnit(campUnit)

  override function removeUnit(ICampUnit campUnit) returns bool
    this._units.remove(campUnit)
    this._unitToCampUnitMap.remove(campUnit.getUnit())
    print("Removed unit {0} from {1} camp".format(campUnit.getUnit().getName(), _owner.getName()))
    return true

  override function getUnits() returns LinkedList<ICampUnit>
    let campUnits = new LinkedList<ICampUnit>()
    for campUnit in this._units
      campUnits.add(campUnit)
    return campUnits