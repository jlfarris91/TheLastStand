package HumanUnitFactory
import TlsUnitIds
import UnitMetadata
import Unit_GateCommon
import Unit_WoodFence
import GateComponent
import ChestComponent
import SpikesComponent
import RangedTargetComponent
import CampCenterComponent
import ExperienceComponent
import CampFireComponent
import PersistActiveAbilityComponent
import AltarComponent
import SurvivorComponent
import ManualGeneratorComponent
import SolarGeneratorComponent
import BatteryComponent
import EnableAttackWhenPoweredComponent
import RangedTargetXpReceieverComponent
import LooterComponent
import BuildingUndeadTarget
import BuildingUndeadTargetComponent
import WorkstationComponent
import HeroComponent
import ScoutTowerComponent
import Unit_GuardTower
import Unit_CannonTower
import TunnelEntranceComponent
import ShelterComponent
import UnitPropertiesComponent
import Crafting
import ItemRecipes
import HumanPlayerComponent

import Sprint
import Blundershot
import SmokeGrenade
import LootSpecialist
import RegisterEvents
import Unit_LumberMill

// ============================================================================
public class HumanUnitMetadataFactory implements IUnitMetadataFactory
  
  // --------------------------------------------------------------------------
  override function createMetadata(unit u) returns UnitMetadata

    if (u.isTlsHero())
      let ownerComp = u.getOwner().getHumanPlayerComponentRequired()
      let heroMetadata = ownerComp.getHeroMetadata()
      heroMetadata.attach(u)
      return heroMetadata

    return null

// ============================================================================
public class HumanUnitComponentGenerator implements IUnitComponentGenerator

  // --------------------------------------------------------------------------
  override function generateComponents(IUnitMetadata metadata) returns bool
    let u = metadata.getUnit()
    let unitTypeId = u.getTypeId()

    if (u.isBuildingUndeadTarget())
      metadata.addComponent(new BuildingUndeadTargetComponent(metadata))

    if (u.isObelisk())
      metadata.addComponent(new CampCenterComponent(metadata))
      metadata.getBuildingUndeadTargetComponent().setAffectUTCTargetOrganic(true)
      return true

    switch (unitTypeId)
    //{
      case TlsUnitIds.chest
        metadata.addComponent(new ChestComponent(metadata))
        return true

      case TlsUnitIds.rangedTarget
        metadata.addComponent(new RangedTargetComponent(metadata))
        return true

      case TlsUnitIds.altar
        metadata.addComponent(new AltarComponent(metadata))
        return true

      case TlsUnitIds.manualGenerator
        metadata.addComponent(new WorkstationComponent(metadata))
        metadata.addComponent(new ManualGeneratorComponent(metadata))
        return true

      case TlsUnitIds.solarGenerator
        metadata.addComponent(new SolarGeneratorComponent(metadata))
        return true

      case TlsUnitIds.battery
        metadata.addComponent(new BatteryComponent(metadata))
        return true

      case TlsUnitIds.turretPhysical | TlsUnitIds.turretElemental
        metadata.addComponent(new EnableAttackWhenPoweredComponent(metadata))
        return true

      case TlsUnitIds.scoutTower
        metadata.addComponent(new ScoutTowerComponent(metadata))
        return true

      case TlsUnitIds.guardTowers[0] | TlsUnitIds.guardTowers[1] | TlsUnitIds.guardTowers[2]
        metadata.addComponent(new GuardTowerComponent(metadata))
        return true

      case TlsUnitIds.cannonTowers[0] | TlsUnitIds.cannonTowers[1] | TlsUnitIds.cannonTowers[2]
        metadata.addComponent(new CannonTowerComponent(metadata))
        return true

      case TlsUnitIds.lumberMill
        metadata.addComponent(new LumberMillComponent(metadata))
        return true

      case TlsUnitIds.tunnelEntrance
        metadata.addComponent(new TunnelEntranceComponent(metadata))
        return true

      case TlsUnitIds.forge
        metadata.addComponent(new CraftingComponent(metadata)..setRecipeBook(g_forgeRecipeBook))
        return true
    //}

    if (u.isSpikes())
      metadata.addComponent(new SpikesComponent(metadata))
      metadata.addComponent(new ExperienceComponent(metadata)..setGiveXpAreaPercent01(1.0))
      return true

    if (u.isSurvivor())
      metadata.addComponent(new SurvivorComponent(metadata))
      metadata.addComponent(new UnitPropertiesComponent(metadata))
      return true

    if (u.isWoodFence() or u.isGate())
      metadata.addComponent(new GateComponent(metadata))
      return true

    if (u.isCampFire())
      metadata.addComponent(new CraftingComponent(metadata)..setRecipeBook(g_campFireRecipeBook))
      metadata.addComponent(new CampFireComponent(metadata), false)
      metadata.addComponent(new PersistActiveAbilityComponent(metadata))
      return true

    if (u.isShelter())
      metadata.addComponent(new ShelterComponent(metadata))
      return true

    if (u.isTlsHero())
    //{
      metadata.addComponent(new HeroComponent(metadata))
      metadata.addComponent(new ExperienceComponent(metadata))
      metadata.addComponent(new RangedTargetXpRecieverComponent(metadata)..setXpPerHit(1))
      metadata.addComponent(new LooterComponent(metadata))
      metadata.addComponent(new SprintComponent(metadata))
      metadata.addComponent(new BlundershotComponent(metadata))
      metadata.addComponent(new SmokeGrenadeComponent(metadata))
      metadata.addComponent(new LootSpecialistComponent(metadata))
      return true
    //}

    return false

// ============================================================================
function onUnitUpgradeFinish()
  let upgradingUnit = GetTriggerUnit()

  let metadata = upgradingUnit.getMetadata()
  if (metadata == null)
    return

  switch (upgradingUnit.getTypeId())
  //{
    case TlsUnitIds.scoutTower
      metadata.getOrAddScoutTowerComponent()

    case TlsUnitIds.guardTowers[0] | TlsUnitIds.guardTowers[1] | TlsUnitIds.guardTowers[2]
      metadata.getOrAddGuardTowerComponent()

    case TlsUnitIds.cannonTowers[0] | TlsUnitIds.cannonTowers[1] | TlsUnitIds.cannonTowers[2]
      metadata.getOrAddCannonTowerComponent()
  //}

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUnitUpgradeFinish)