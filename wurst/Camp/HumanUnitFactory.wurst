package HumanUnitFactory
import TlsUnitIds
import UnitMetadata

import Unit_GateCommon
import Unit_WoodFence

import GateComponent
import ChestComponent
import SpikesComponent
import RangedTargetComponent
import CampCenterComponent
import XpReceiverComponent
import CampFireComponent
import PersistActiveAbilityComponent
import AltarComponent
import SurvivorComponent
import ManualGeneratorComponent
import SolarGeneratorComponent
import BatteryComponent
import EnableAttackWhenPoweredComponent
import RangedTargetXpReceieverComponent
import LooterComponent
import BuildingUndeadTarget
import BuildingUndeadTargetComponent
import WorkstationComponent
import EnableAttackWhenOperatedComponent
import HeroComponent

// ============================================================================
public class HumanUnitFactory implements IUnitMetadataFactory

  // --------------------------------------------------------------------------
  override function createUnit(IUnitMetadata metadata) returns bool
    let u = metadata.getUnit()
    let unitTypeId = u.getTypeId()

    if (u.isBuildingUndeadTarget())
      metadata.addComponent(new BuildingUndeadTargetComponent(metadata))

    if (u.isCampHeadquarters())
      metadata.addComponent(new CampCenterComponent(metadata))
      metadata.getBuildingUndeadTargetComponent().setAffectUTCTargetOrganic(true)
      return true

    switch (unitTypeId)
    //{
      case TlsUnitIds.chest
        metadata.addComponent(new ChestComponent(metadata))
        return true

      case TlsUnitIds.rangedTarget
        metadata.addComponent(new RangedTargetComponent(metadata))
        return true

      case TlsUnitIds.altar
        metadata.addComponent(new AltarComponent(metadata))
        return true

      case TlsUnitIds.manualGenerator
        metadata.addComponent(new WorkstationComponent(metadata)..setWorkerUnitType(TlsUnitIds.Survivors.engineer1)..setMaxWorkers(1))
        metadata.addComponent(new ManualGeneratorComponent(metadata))
        return true

      case TlsUnitIds.solarGenerator
        metadata.addComponent(new SolarGeneratorComponent(metadata))
        return true

      case TlsUnitIds.battery
        metadata.addComponent(new BatteryComponent(metadata))
        return true

      case TlsUnitIds.turretPhysical | TlsUnitIds.turretElemental
        metadata.addComponent(new EnableAttackWhenPoweredComponent(metadata))
        return true

      case TlsUnitIds.scoutTower
        metadata.addComponent(new WorkstationComponent(metadata)..setWorkerUnitType(TlsUnitIds.Survivors.survivorMale)..setMaxWorkers(1))
        metadata.addComponent(new EnableAttackWhenOperatedComponent(metadata))
        metadata.addComponent(new EnableAttackWhenOperatedComponent(metadata))
        return true
    //}

    if (u.isSpikes())
      metadata.addComponent(new SpikesComponent(metadata))
      metadata.addComponent(new XpReceiverComponent(metadata)..setGiveXpAreaPercent01(1.0))
      return true

    if (u.isSurvivor())
      metadata.addComponent(new SurvivorComponent(metadata))
      return true

    if (u.isWoodFence() or u.isGate())
      metadata.addComponent(new GateComponent(metadata))
      return true

    if (u.isCampFire())
      metadata.addComponent(new CampFireComponent(metadata), false)
      metadata.addComponent(new PersistActiveAbilityComponent(metadata))
      return true

    if (u.isTlsHero())
    //{
      metadata.addComponent(new HeroComponent(metadata))
      metadata.addComponent(new XpReceiverComponent(metadata))
      metadata.addComponent(new RangedTargetXpRecieverComponent(metadata)..setXpPerHit(1))
      metadata.addComponent(new LooterComponent(metadata))
      return true
    //}

    return false