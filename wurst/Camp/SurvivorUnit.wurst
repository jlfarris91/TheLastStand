package SurvivorUnit
import Camp
import SurvivorJobComponent
import SkillsComponent
import SurvivorMarksmanSkill
import Skills
import ObjectIds
import ErrorHandling
import TlsUnitIds
import SurvivorMedicSkill
import SurvivorSpearmanSkill
import SurvivorMilitiaSkill
import SurvivorJobSkill
import SurvivorBuilderSkill
import TlsItemIds
import GameConstants
import SurvivorStats
import Statistic
import Icons
import StatisticsCollection
import StatsComponent

import DistanceTraveledStatistic
import KillsStatistic
import DaysSurvivedStatisticComponent
import NightsSurvivedStatisticComponent

// ============================================================================
public class Survivor extends CampUnit
  private SkillsComponent m_skillsComponent

  private SurvivorMarksmanSkill m_marksmanSkill
  private SurvivorSpearmanSkill m_spearmanSkill
  private SurvivorMilitiaSkill m_militiaSkill
  private SurvivorMedicSkill m_medicSkill
  private SurvivorBuilderSkill m_builderSkill
  
  private SurvivorJobSkill m_activeJobSkill

  // --------------------------------------------------------------------------
  construct(ICamp camp)
    super(camp)

    addComponent(new SurvivorJobComponent(this))

    initializeStats()
    
    m_skillsComponent = new SkillsComponent(this)

    m_marksmanSkill = m_skillsComponent.getOrAddSurvivorMarksmanSkill()..setIsEnabled(false)
    m_spearmanSkill = m_skillsComponent.getOrAddSurvivorSpearmanSkill()..setIsEnabled(false)
    m_militiaSkill = m_skillsComponent.getOrAddSurvivorMilitiaSkill()..setIsEnabled(false)
    m_medicSkill = m_skillsComponent.getOrAddSurvivorMedicSkill()..setIsEnabled(false)
    m_builderSkill = m_skillsComponent.getOrAddSurvivorBuilderSkill()..setIsEnabled(false)

    addComponent(m_skillsComponent)

  // --------------------------------------------------------------------------
  protected override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)

    disableAllSkills()

    if (newUnit == null)
      return

    let newUnitId = newUnit.getTypeId()

    switch (newUnitId)
      case TlsUnitIds.survivorMale
        m_activeJobSkill = m_builderSkill
        onLostJob()
      case TlsUnitIds.survivorMarksman | TlsUnitIds.survivorMarksmanTower
        m_activeJobSkill = m_marksmanSkill
        onChangeToMarksman()
      case TlsUnitIds.survivorMedic
        m_activeJobSkill = m_medicSkill
        onChangeToMedic()
      case TlsUnitIds.survivorBuilder
        m_activeJobSkill = m_builderSkill
        onChangeToBuilder()
      case TlsUnitIds.survivorSpearman
        m_activeJobSkill = m_spearmanSkill
        onChangeToSpearman()
      case TlsUnitIds.survivorMilitia
        m_activeJobSkill = m_militiaSkill
        onChangeToMilitia()
      default
        error("Invalid unit type: " + newUnitId.toRawCode() + "(" + newUnit.getName() + ")")
        return

    if (m_activeJobSkill != null)
      m_activeJobSkill.setIsEnabled(true)

  // --------------------------------------------------------------------------
  private function disableAllSkills()
    m_marksmanSkill.setIsEnabled(false)
    m_medicSkill.setIsEnabled(false)
    m_spearmanSkill.setIsEnabled(false)
    m_militiaSkill.setIsEnabled(false)
    m_builderSkill.setIsEnabled(false)

  // --------------------------------------------------------------------------
  private function onLostJob()
    Log.debug("Survivor lost job")

  // --------------------------------------------------------------------------
  private function onChangeToMarksman()
    Log.debug("Changed to Marksman job")

  // --------------------------------------------------------------------------
  private function onChangeToMedic()
    Log.debug("Changed to Medic job")
    skip

  // --------------------------------------------------------------------------
  private function onChangeToBuilder()
    Log.debug("Changed to Builder job")
    skip

  // --------------------------------------------------------------------------
  private function onChangeToSpearman()
    Log.debug("Changed to Spearman job")
    skip

  // --------------------------------------------------------------------------
  private function onChangeToMilitia()
    Log.debug("Changed to Militia job")
    skip

  // --------------------------------------------------------------------------
  private function initializeStats()

    let statsComponent = this.getOrAddStatsComponent()
    statsComponent.setStats(new StatisticsCollection())

    // Kills
    let killsStat = new IntStatistic("Kills")
    ..setIcon(Icons.bTNBattleStations)
    ..setUnits("kills")
    ..setTooltip("The number of enemies killed by getting the last hit")

    statsComponent.addStatistic(SurvivorStats.kills, killsStat)
    addComponent(new KillsStatisticComponent(this))

    // Distance traveled
    let distanceTraveledStat = new RealStatistic("Distance Traveled")
    ..setIcon(Icons.bTNBootsOfSpeed)
    ..setUnits("meters")
    ..setTooltip("The meters traveled")

    statsComponent.addStatistic(SurvivorStats.distanceTraveled, distanceTraveledStat)
    addComponent(new DistanceTraveledStatisticComponent(this))

    // Days survived
    let daysSurvivedStat = new IntStatistic("Days Survived")
    ..setIcon(Icons.bTNFarSight)
    ..setUnits("days")
    ..setTooltip("The number of days survived")

    statsComponent.addStatistic(SurvivorStats.daysSurvived, daysSurvivedStat)
    addComponent(new DaysSurvivedStatisticComponent(this))

    // Nights survived
    let nightsSurvivedStat = new IntStatistic("Nights Survived")
    ..setIcon(Icons.bTNAnimateDead)
    ..setUnits("nights")
    ..setTooltip("The number of nights survived")

    statsComponent.addStatistic(SurvivorStats.nightsSurvived, nightsSurvivedStat)
    addComponent(new NightsSurvivedStatisticComponent(this))


// ============================================================================
public function unit.isSurvivor() returns bool
  let targetTypeId = this.getTypeId()
  return  targetTypeId == TlsUnitIds.survivorMale or
          targetTypeId == TlsUnitIds.survivorBuilder or
          targetTypeId == TlsUnitIds.survivorMarksman or
          targetTypeId == TlsUnitIds.survivorMedic or
          targetTypeId == TlsUnitIds.survivorMilitia or
          targetTypeId == TlsUnitIds.survivorSpearman

// ============================================================================
public function unit.isRescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() != PLAYER_VILLAGERS

// ============================================================================
public function unit.isUnrescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() == PLAYER_VILLAGERS

// ============================================================================
public function unit.isRescuableSurvivor() returns bool
  return this.isUnrescuedSurvivor()

// ============================================================================
public function getUnitTypeForJobItemType(int itemType) returns int
  switch (itemType)
    case TlsItemIds.rustySword
      return TlsUnitIds.survivorMilitia
    case TlsItemIds.basicTools
      return TlsUnitIds.survivorBuilder
    case TlsItemIds.spears
      return TlsUnitIds.survivorSpearman
    case TlsItemIds.medicalKit
      return TlsUnitIds.survivorMedic
    case TlsItemIds.huntingRifle
      return TlsUnitIds.survivorMarksman
    default
      return -1

// ============================================================================
public function getJobItemTypeForUnitType(int unitType) returns int
  switch (unitType)
    case TlsUnitIds.survivorMilitia
      return TlsItemIds.rustySword
    case TlsUnitIds.survivorBuilder
      return TlsItemIds.basicTools
    case TlsUnitIds.survivorSpearman
      return TlsItemIds.spears
    case TlsUnitIds.survivorMedic
      return TlsItemIds.medicalKit
    case TlsUnitIds.survivorMarksman
      return TlsItemIds.huntingRifle
    default
      return -1