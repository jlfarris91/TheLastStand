package SkillsBoard
import SkillsComponent
import Skills
import TextProgressBar
import Math
import StringExtensions
import ClosureTimers
import TimerUtils
import UnitMetadata

TextProgressBar g_progressBar
TextProgressBar g_progressBarDisabled

string array[10] g_levelText
string array[10] g_levelTextDisabled

string array[101] g_percentageText
string array[101] g_percentageTextDisabled

string g_MaxLevelText
string g_MaxLevelTextDisabled

constant colorA DISABLED_COLOR = colorA(100, 100, 100, 255)
constant colorA LEVEL_TEXT_COLOR = COLOR_GOLD
constant colorA MAX_LEVEL_TEXT_COLOR = COLOR_GOLD

constant string MAX_LEVEL_TEXT = "Max"
constant int PROGRESS_BAR_LENGTH = 40

constant colorA PROGRESS_BAR_FOREGROUND = colorA(0, 170, 0, 255)
constant colorA PROGRESS_BAR_BACKGROUND = colorA(0, 64, 0, 255)

constant colorA PROGRESS_BAR_DISABLED_FOREGROUND = DISABLED_COLOR
constant colorA PROGRESS_BAR_DISABLED_BACKGROUND = colorA(50, 50, 50, 255)

// ============================================================================
public class SkillsBoard
  private constant int NUMBER_OF_COLUMNS = 5
  private constant int COLUMN_TITLE = 0
  private constant int COLUMN_LEVEL = 1
  private constant int COLUMN_EXPERIENCE_BAR = 2
  private constant int COLUMN_EXPERIENCE_PERCENTAGE = 3
  private constant int COLUMN_EXPERIENCE_UNITS = 4

  private IUnitMetadata _unit
  private multiboard _multiboard
  private SkillsComponent _skillsComponent
  private timer _timer

  // --------------------------------------------------------------------------
  construct(SkillsComponent skillsComponent, string title)
    _skillsComponent = skillsComponent
    _unit = _skillsComponent.getOwner() castTo IUnitMetadata
    _multiboard = CreateMultiboardBJ(NUMBER_OF_COLUMNS, 0, title)
    hide()

  // --------------------------------------------------------------------------
  ondestroy
    hide()
    DestroyMultiboard(_multiboard)
    _skillsComponent = null
    _unit = null

  // --------------------------------------------------------------------------
  function show()
    _multiboard.show(_unit.getUnit().getOwner())

    if (_timer == null)
      _timer = getTimer()
      _timer.doPeriodically(1.0) (CallbackPeriodic cb) ->
        update()

  // --------------------------------------------------------------------------
  function hide()
    _multiboard.hide()

    if (_timer != null)
      _timer.release()
      _timer = null

  // --------------------------------------------------------------------------
  function update()
    if (_skillsComponent == null)
      return
      
    let skillInstances = _skillsComponent.getSkillInstances()
    var row = 0
    for skillInstance in skillInstances
      updateRow(row, skillInstance)
      row++

  // --------------------------------------------------------------------------
  function updateMultiboardRows()

    let skillInstances = _skillsComponent.getSkillInstances()

    _multiboard.setRowCount(skillInstances.size())

    _multiboard.setColumnWidth(COLUMN_TITLE, 0.15)
    _multiboard.setColumnWidth(COLUMN_LEVEL, 0.04)
    _multiboard.setColumnWidth(COLUMN_EXPERIENCE_BAR, 0.14)
    _multiboard.setColumnWidth(COLUMN_EXPERIENCE_PERCENTAGE, 0.03)
    _multiboard.setColumnWidth(COLUMN_EXPERIENCE_UNITS, 0.08)

    MultiboardSetItemStyleBJ(_multiboard, COLUMN_TITLE + 1, 0, true, true)
    MultiboardSetItemStyleBJ(_multiboard, COLUMN_LEVEL + 1, 0, true, false)
    MultiboardSetItemStyleBJ(_multiboard, COLUMN_EXPERIENCE_BAR + 1, 0, true, false)
    MultiboardSetItemStyleBJ(_multiboard, COLUMN_EXPERIENCE_PERCENTAGE + 1, 0, true, false)
    MultiboardSetItemStyleBJ(_multiboard, COLUMN_EXPERIENCE_UNITS + 1, 0, true, false)

    var row = 0
    for skillInstance in skillInstances
      let skill = skillInstance.getSkill()
      let isEnabled = skillInstance.getIsEnabled()

      _multiboard.setItemIcon(row, COLUMN_TITLE, skill.getIconPath())

      let skillName = isEnabled ? skill.getName() : skill.getName().colorize(DISABLED_COLOR)
      _multiboard.setItemValue(row, COLUMN_TITLE, skillName)

      row++
      
  // --------------------------------------------------------------------------
  private function updateRow(int row, ISkill skillInstance)
    let skill = skillInstance.getSkill()

    let isEnabled = skillInstance.getIsEnabled()

    let level = skillInstance.getLevel()
    let nextLevel = level + 1
    let exp = skillInstance.getExperience()

    let levelText = isEnabled ? g_levelText[level] : g_levelTextDisabled[level]
    _multiboard.setItemValue(row, COLUMN_LEVEL, levelText)

    if (level < skill.getMaxLevel())

      let minExp = skill.getLevelRequirement(level)
      let maxExp = skill.getLevelRequirement(nextLevel)
      let t = clamp((exp - minExp) / (maxExp - minExp), 0.0, 1.0)

      let percentageBarText = isEnabled ? g_progressBar.sample(t) : g_progressBarDisabled.sample(t)
      _multiboard.setItemValue(row, COLUMN_EXPERIENCE_BAR, percentageBarText)

      let percentageTextIndex = R2I(t * 100.0)
      let percentageText = isEnabled ? g_percentageText[percentageTextIndex] : g_percentageTextDisabled[percentageTextIndex]
      _multiboard.setItemValue(row, COLUMN_EXPERIENCE_PERCENTAGE, percentageText)

    else

      let percentageBarText = isEnabled ? g_progressBar.sample(1.0) : g_progressBarDisabled.sample(1.0)
      _multiboard.setItemValue(row, COLUMN_EXPERIENCE_BAR, percentageBarText)

      let maxLevelText = isEnabled ? g_MaxLevelText : g_MaxLevelTextDisabled
      _multiboard.setItemValue(row, COLUMN_EXPERIENCE_PERCENTAGE, maxLevelText)

    var unitsText = I2S(R2I(exp)) + skill.getUnits()
    if (not isEnabled)
      unitsText = unitsText.colorize(DISABLED_COLOR)
    _multiboard.setItemValue(row, COLUMN_EXPERIENCE_UNITS, unitsText)

// ============================================================================
init
  g_progressBar = new TextProgressBar(
    PROGRESS_BAR_LENGTH,
    PROGRESS_BAR_FOREGROUND,
    PROGRESS_BAR_BACKGROUND)
  
  g_progressBarDisabled = new TextProgressBar(
    PROGRESS_BAR_LENGTH,
    PROGRESS_BAR_DISABLED_FOREGROUND,
    PROGRESS_BAR_DISABLED_BACKGROUND)

  for i = 0 to 10
    let levelStr = "Level " + I2S(i)
    g_levelText[i] = levelStr.colorize(LEVEL_TEXT_COLOR)
    g_levelTextDisabled[i] = levelStr.colorize(DISABLED_COLOR)

  for i = 0 to 100
    let percentageStr = I2S(i) + "%"
    g_percentageText[i] = percentageStr
    g_percentageTextDisabled[i] = percentageStr.colorize(DISABLED_COLOR)

  g_MaxLevelText = MAX_LEVEL_TEXT.colorize(MAX_LEVEL_TEXT_COLOR)
  g_MaxLevelTextDisabled = MAX_LEVEL_TEXT.colorize(DISABLED_COLOR)