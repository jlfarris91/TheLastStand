package WaveMultiboard
import BaseMultiboard
import initlater GameInstance
import SpawnWave
import Wave
import TimerUtils
import ClosureTimers
import Math
import Time
import RealExtensions

constant real INTERVAL_PERIOD = 0.1

constant int COLUMN_NAME = 0
constant int COLUMN_VALUE = 1
constant int COLUMN_COUNT = 2

constant int SPAWN_WAVE_ROW_TITLE = 0
constant int SPAWN_WAVE_ROW_PROGRESS = 1
constant int SPAWN_WAVE_ROW_SPAWNS = 2
constant int SPAWN_WAVE_ROW_ALIVE = 3
constant int SPAWN_WAVE_ROW_SPAWNS_PER_ACTIVATION = 4
constant int SPAWN_WAVE_ROW_SPAWN_GROUP_FACTOR = 5
constant int SPAWN_WAVE_ROW_GROUP_COUNT = 6
constant int SPAWN_WAVE_ROW_GROUP_SIZE = 7
constant int SPAWN_WAVE_ROW_GOLD = 8
constant int SPAWN_WAVE_ROW_DIFFICULTY = 9
constant int SPAWN_WAVE_ROW_GAME_PROGRESS = 10
constant int SPAWN_WAVE_ROW_GAME_TIER_CHANCES = 11
constant int SPAWN_WAVE_ROW_GAME_UNIT_MODS = 12
constant int SPAWN_WAVE_ROW_STATE = 13
constant int SPAWN_WAVE_ROW_COUNT = 14

// ============================================================================
public class WaveMultiboard extends BaseMultiboard
  private timer m_timer
  private player m_player
  private Wave m_latestWave

  // --------------------------------------------------------------------------
  override function show()

    update()

    super.show()
    
    if (m_timer == null)
      m_timer = getTimer()
      m_timer.doPeriodically(INTERVAL_PERIOD) (CallbackPeriodic cb) ->
        update()
    
  // --------------------------------------------------------------------------
  override function hide()
    super.hide()    

    if (m_timer != null)
      m_timer.release()
      m_timer = null

  // --------------------------------------------------------------------------
  function getPlayer() returns player
    return m_player

  // --------------------------------------------------------------------------
  function setPlayer(player p)
    m_player = p

  // --------------------------------------------------------------------------
  function updateLayout()

    hide()

    destroyMultiboard()

    let spawnWaveCount = m_latestWave != null ? m_latestWave.getSpawnWaves().getCount() : 0
    let rowCount = max(spawnWaveCount * SPAWN_WAVE_ROW_COUNT, 1)
    
    m_multiboard = CreateMultiboardBJ(COLUMN_COUNT, rowCount, "UNTITLED")

    MultiboardSetItemsWidth(m_multiboard, 0.15)
    MultiboardSetItemStyleBJ(m_multiboard, COLUMN_NAME + 1, 0, true, false)
    MultiboardSetItemStyleBJ(m_multiboard, COLUMN_VALUE + 1, 0, true, false)

    show()

  // --------------------------------------------------------------------------
  function update()

    let currentWave = getCurrentWave()
    if (currentWave != m_latestWave)
      m_latestWave = currentWave
      updateLayout()

    let targetPlayer = getPlayer()
    if (m_latestWave == null or targetPlayer == null)
      return

    let multiboardTitle = "[{0}] {1} Wave {2} {3}%".format(
        getPlayer().getName(),
        isDay() ? "Day" : "Night",
        (isDay() ? g_GameInstance.getDay() : g_GameInstance.getNight()).toString(),
        R2I(m_latestWave.getProgress() * 100.0).toString())

    m_multiboard.setTitle(multiboardTitle)

    updateRows(m_latestWave)

  // --------------------------------------------------------------------------
  private function updateRows(Wave wave)

    let spawnWaves = wave.getSpawnWaves()

    if (spawnWaves.isEmpty())
      setItemValues(0, "No spawn waves", "")
      return

    var row = 0
    for spawnWave in spawnWaves
      updateSpawnWaveRows(spawnWave, row)
      row += SPAWN_WAVE_ROW_COUNT

  // --------------------------------------------------------------------------
  private function updateSpawnWaveRows(SpawnWave spawnWave, int row)
    let spawnWaveContext = spawnWave.getContext()
    let numSpawned = spawnWave.getSpawnedCount()

    let spawnWaveDefinition = spawnWave.getDefinition()
    let spawnCountMax = spawnWaveDefinition.getMaxSpawnCount(spawnWaveContext)
    let aliveCountMax = spawnWaveDefinition.getMaxAliveCount(spawnWaveContext)
    let numAlive = spawnWave.getAliveCount()
    let spawnsPerActivation = spawnWaveDefinition.getSpawnsPerActivation(spawnWaveContext)
    let spawnGroupingFactor = spawnWaveDefinition.getSpawnGroupingFactor(spawnWaveContext)
    let numSpawnGroups = max(R2I(I2R(spawnsPerActivation) * (1.0 - spawnGroupingFactor)), 1)
    let spawnGroupSize = max(R2I(I2R(spawnsPerActivation) * spawnGroupingFactor), 1)
    let goldReward = spawnWaveDefinition.getGoldReward(spawnWaveContext)
    let goldAwarded = spawnWave.getGoldAwarded()
    
    setItemValues(row + SPAWN_WAVE_ROW_TITLE, "=== {0} {1} ===".format(spawnWaveDefinition.getName(), spawnWave.getStatusString()), "")
    setItemValues(row + SPAWN_WAVE_ROW_PROGRESS, "Spawn Wave Progress", spawnWaveContext.getWaveProgress01().toPercentageString01())
    setItemValues(row + SPAWN_WAVE_ROW_SPAWNS, "Spawns", I2S(numSpawned) + "/" + (spawnCountMax == UNLIMITED ? "Unlimited" : I2S(spawnCountMax)))
    setItemValues(row + SPAWN_WAVE_ROW_ALIVE, "Alive", I2S(numAlive) + "/" + (aliveCountMax == UNLIMITED ? "Unlimited" : I2S(aliveCountMax)))
    setItemValues(row + SPAWN_WAVE_ROW_SPAWNS_PER_ACTIVATION, "Spawns Per Activation", I2S(spawnsPerActivation))
    setItemValues(row + SPAWN_WAVE_ROW_SPAWN_GROUP_FACTOR, "Spawn Group Factor", R2S(spawnGroupingFactor))
    setItemValues(row + SPAWN_WAVE_ROW_GROUP_COUNT, "Groups", I2S(numSpawnGroups))
    setItemValues(row + SPAWN_WAVE_ROW_GROUP_SIZE, "Group Size", I2S(spawnGroupSize))
    setItemValues(row + SPAWN_WAVE_ROW_GOLD, "Gold", goldAwarded.toString() + "/" + goldReward.toString())
    setItemValues(row + SPAWN_WAVE_ROW_DIFFICULTY, "Difficulty", spawnWaveContext.getPlayerDifficulty01().toString() + " - " + spawnWaveContext.getGameDifficulty01().toString())
    setItemValues(row + SPAWN_WAVE_ROW_GAME_PROGRESS, "Game Progress", spawnWaveContext.getGameProgress01().toPercentageString01())
    setItemValues(row + SPAWN_WAVE_ROW_GAME_TIER_CHANCES, "Tier Chances", "{0} {1} {2}".format(spawnWaveContext.getTierChance01(0).toPercentageString01(), spawnWaveContext.getTierChance01(1).toPercentageString01(), spawnWaveContext.getTierChance01(2).toPercentageString01()))
    setItemValues(row + SPAWN_WAVE_ROW_GAME_UNIT_MODS, "Unit Modifiers", spawnWaveContext.getUnitModifierGameProgress01().toPercentageString01() + " - " + spawnWaveContext.getUnitModifierDifficultyScalar01().toPercentageString01())
    setItemValues(row + SPAWN_WAVE_ROW_STATE, "State", spawnWave.getDebugState())

  // --------------------------------------------------------------------------
  private function setItemValues(int row, string name, string value)
    m_multiboard.setItemValue(row, COLUMN_NAME, name)
    m_multiboard.setItemValue(row, COLUMN_VALUE, value)

  // --------------------------------------------------------------------------
  private function getCurrentWave() returns Wave

    let wavesOwner = getPlayer()
    if (wavesOwner == null)
      return null
    
    let waves = g_GameInstance.getWaves()
    if (waves == null)
      return null

    let playerWaves = waves.getOrCreatePlayerWaves(wavesOwner)

    if (isDay())
      let dayWaves = playerWaves.getDayWaves()
      return dayWaves.getLatestWave(g_GameInstance.getDay())
    
    if (isNight())
      let nightWaves = playerWaves.getNightWaves()
      return nightWaves.getLatestWave(g_GameInstance.getNight())

    return null