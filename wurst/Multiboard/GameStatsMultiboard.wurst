package GameStatsMultiboard
import Time
import GameInstance
import HumanPlayers
import HumanPlayerComponent
import ClosureTimers
import ColorUtility
import ProjectConstants
import GameConstants

constant real INTERVAL_PERIOD = 1.0
constant int COLUMN_DIFFICULTY = 0
constant int COLUMN_PLAYER_NAME = 1
constant int COLUMN_KILLS = 2
constant int COLUMN_SCORE = 3
constant int COLUMN_COUNT = 4
constant int ROW_HEADER = 0

multiboard g_gameStatsMultiboard

// ============================================================================
function createGameStatsMultiboard()
    
  // Header + 1 row per player
  let rowCount = 1 + g_InitialPlayingHumanPlayers.count()

  g_gameStatsMultiboard = CreateMultiboardBJ(COLUMN_COUNT, rowCount, "UNTITLED")

  MultiboardSetItemsWidth(g_gameStatsMultiboard, 0.05)
  g_gameStatsMultiboard.setColumnWidth(COLUMN_DIFFICULTY, 0.0125)
  g_gameStatsMultiboard.setColumnWidth(COLUMN_PLAYER_NAME, 0.14)
  g_gameStatsMultiboard.setColumnWidth(COLUMN_KILLS, 0.04)
  g_gameStatsMultiboard.setColumnWidth(COLUMN_SCORE, 0.04)
  MultiboardSetItemStyleBJ(g_gameStatsMultiboard, COLUMN_DIFFICULTY + 1, 0, false, true)
  MultiboardSetItemStyleBJ(g_gameStatsMultiboard, COLUMN_DIFFICULTY + 1, 1, false, false)
  MultiboardSetItemStyleBJ(g_gameStatsMultiboard, COLUMN_PLAYER_NAME + 1, 0, true, false)
  MultiboardSetItemStyleBJ(g_gameStatsMultiboard, COLUMN_KILLS + 1, 0, true, false)
  MultiboardSetItemStyleBJ(g_gameStatsMultiboard, COLUMN_SCORE + 1, 0, true, false)

  g_gameStatsMultiboard.setItemValue(ROW_HEADER, COLUMN_PLAYER_NAME, "Player")
  g_gameStatsMultiboard.setItemValue(ROW_HEADER, COLUMN_KILLS, "Kills")
  g_gameStatsMultiboard.setItemValue(ROW_HEADER, COLUMN_SCORE, "Score")

  updateGameStatsMultiboardTitle()
  updateGameStatsMultiboardContent()

  g_gameStatsMultiboard.hide()

// ============================================================================
public function showGameStatsMultiboard(player p)
  g_gameStatsMultiboard.show(p)

// ============================================================================
function updateGameStatsMultiboardTitle()

  let multiboardTitle = "{0} - {1} {2}".format(
    MAP_VERSION.colorize(Colors.white),
    isDay() ? "Day" : "Night",
    (isDay() ? g_GameInstance.getDay() : g_GameInstance.getNight()).toString())

  g_gameStatsMultiboard.setTitle(multiboardTitle)

// ============================================================================
function updateGameStatsMultiboardContent()

  var row = 1
  for p in g_InitialPlayingHumanPlayers
    let playerComp = p.getHumanPlayerComponent()
    if (playerComp != null)
      let difficultyIndex = playerComp.getDifficulty().floor()
      let displayName = p.getDisplayNameColored()
      let kills = playerComp.getKills()
      let score = playerComp.getScore()
      g_gameStatsMultiboard.setItemIcon(row, COLUMN_DIFFICULTY, DIFFICULTY_ICONS[difficultyIndex])
      g_gameStatsMultiboard.setItemValue(row, COLUMN_PLAYER_NAME, displayName)
      g_gameStatsMultiboard.setItemValue(row, COLUMN_KILLS, kills.toString())
      g_gameStatsMultiboard.setItemValue(row, COLUMN_SCORE, score.toString())
    row++

// ============================================================================
function onDayNight()

  // Show the player's multiboards on day 1
  if (g_GameInstance.getDay() == 1)
    showMultiboardsForPlayers()

  // yuck - wait one frame since the title depends on values that may not be set yet 
  nullTimer() () -> 
    updateGameStatsMultiboardTitle()

// ============================================================================
function showMultiboardsForPlayers()
  for _player in g_HumanPlayersInGame
    showGameStatsMultiboard(_player)

  if (PLAYER_SPECTATOR.isPlayingHumanPlayer())
    showGameStatsMultiboard(PLAYER_SPECTATOR)

// ============================================================================
init
  nullTimer(() -> createGameStatsMultiboard())
  doPeriodically(INTERVAL_PERIOD, cb -> updateGameStatsMultiboardContent())
  registerDayEvent(function onDayNight)
  registerNightEvent(function onDayNight)
