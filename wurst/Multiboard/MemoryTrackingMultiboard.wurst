package MemoryTrackingMultiboard
import ClosureTimers
import TimerUtils
import Reflection
import LinkedList
import StringExtensions

MemoryTrackingMultiboard g_memoryTrackingMultiboard
LinkedList<int> g_sortedTypeIds = new LinkedList<int>()

enum SortDirection 
  Ascending
  Descending

// ============================================================================
public class MemoryTrackingMultiboard
  private constant int NUMBER_OF_COLUMNS = 3
  private constant int PAGE_SIZE = 20
  constant int COLUMN_TYPENAME = 0
  constant int COLUMN_INSTANCE_COUNT = 1
  constant int COLUMN_INSTANCE_MAX = 2
  private constant string TITLE = "Memory Tracker"

  private multiboard m_multiboard
  private timer m_timer
  private int m_pageIndex
  private int m_pageCount
  private SortDirection m_sortDirection = SortDirection.Ascending
  private int m_sortColumn = COLUMN_INSTANCE_COUNT

  // --------------------------------------------------------------------------
  construct()
    g_memoryTrackingMultiboard = this
    m_multiboard = CreateMultiboardBJ(NUMBER_OF_COLUMNS, 0, TITLE)
    hide()

  // --------------------------------------------------------------------------
  ondestroy
    hide()

    DestroyMultiboard(m_multiboard)
    m_multiboard = null

  // --------------------------------------------------------------------------
  function setTitle(string title)
    m_multiboard.setTitle(title)

  // --------------------------------------------------------------------------
  function isShowing() returns bool
    return m_multiboard.isDisplayed()

  // --------------------------------------------------------------------------
  function getPageIndex() returns int
    return m_pageIndex

  // --------------------------------------------------------------------------
  function setPageIndex(int index)
    m_pageIndex = min(index, getPageCount() - 1)

  // --------------------------------------------------------------------------
  function getPageCount() returns int
    return m_pageCount

  // --------------------------------------------------------------------------
  function getPageSize() returns int
    return min(getItemCount() - getPageOffset(), PAGE_SIZE)

  // --------------------------------------------------------------------------
  function getPageMaxSize() returns int
    return PAGE_SIZE

  // --------------------------------------------------------------------------
  function getPageOffset() returns int
    return m_pageIndex * PAGE_SIZE

  // --------------------------------------------------------------------------
  function getItemCount() returns int
    return g_sortedTypeIds.size()

  // --------------------------------------------------------------------------
  function getSortColumn() returns int
    return m_sortColumn

  // --------------------------------------------------------------------------
  function setSortColumn(int columnIndex)
    m_sortColumn = columnIndex

  // --------------------------------------------------------------------------
  function getSortDirection() returns SortDirection
    return m_sortDirection

  // --------------------------------------------------------------------------
  function setSortDirection(SortDirection direction)
    m_sortDirection = direction

  // --------------------------------------------------------------------------
  function show()
    
    updateMultiboardRows()
    
    nullTimer(() -> m_multiboard.show())

    if (m_timer == null)
      m_timer = getTimer()
      m_timer.doPeriodically(1.0) (CallbackPeriodic cb) ->
        update()

  // --------------------------------------------------------------------------
  function hide()
    m_multiboard.hide()

    if (m_timer != null)
      m_timer.release()
      m_timer = null

  // --------------------------------------------------------------------------
  private function compareTypeId(int typeId1, int typeId2) returns int
    var sortValue = 0
    switch (m_sortColumn)
      case COLUMN_TYPENAME
        sortValue = typeIdToTypeName(typeId1).compare(typeIdToTypeName(typeId2))
      case COLUMN_INSTANCE_COUNT
        sortValue = instanceCount(typeId1) - instanceCount(typeId2)
      case COLUMN_INSTANCE_MAX
        sortValue = maxInstanceCount(typeId1) - maxInstanceCount(typeId2)
    return m_sortDirection == SortDirection.Ascending ? sortValue : (sortValue * -1)

  // --------------------------------------------------------------------------
  function update()

    g_sortedTypeIds.clear()
    for typeId = 1 to maxTypeId()
      if (instanceCount(typeId) > 0 or maxInstanceCount(typeId) > 0)
        g_sortedTypeIds.add(typeId)

    updatePageSize()

    Comparator<int> comparator = (integer typeId1, integer typeId2) -> compareTypeId(typeId1, typeId2)
    g_sortedTypeIds.sortWith(comparator)
    destroy comparator

    var row = 0
    for i = 0 to getPageSize() - 1
      let index = getPageOffset() + i
      let typeid = g_sortedTypeIds.get(index)
      updateRow(row, typeid)
      row++
    
    m_multiboard.setTitle(TITLE + " " + (getPageIndex() + 1).toString() + "/" + getPageCount().toString())

  // --------------------------------------------------------------------------
  function updatePageSize()
    if (g_sortedTypeIds.isEmpty())
      m_pageCount = 0
    else
      m_pageCount = (g_sortedTypeIds.size().toReal() / PAGE_SIZE.toReal()).ceil()

  // --------------------------------------------------------------------------
  function updateMultiboardRows()

    updatePageSize()

    // clamp to fit page size
    setPageIndex(getPageIndex())

    m_multiboard.setTitle(TITLE + " " + (getPageIndex() + 1).toString() + "/" + getPageCount().toString())

    m_multiboard.setRowCount(getPageSize())
    m_multiboard.setColumnWidth(COLUMN_TYPENAME, 0.3)
    m_multiboard.setColumnWidth(COLUMN_INSTANCE_COUNT, 0.1)
    m_multiboard.setColumnWidth(COLUMN_INSTANCE_MAX, 0.1)

    MultiboardSetItemStyleBJ(m_multiboard, COLUMN_TYPENAME + 1, 0, true, false)
    MultiboardSetItemStyleBJ(m_multiboard, COLUMN_INSTANCE_COUNT + 1, 0, true, false)
    MultiboardSetItemStyleBJ(m_multiboard, COLUMN_INSTANCE_MAX + 1, 0, true, false)

  // --------------------------------------------------------------------------
  private function updateRow(int row, int typeid)
    m_multiboard.setItemValue(row, COLUMN_TYPENAME, typeIdToTypeName(typeid))
    m_multiboard.setItemValue(row, COLUMN_INSTANCE_COUNT, instanceCount(typeid).toString())
    m_multiboard.setItemValue(row, COLUMN_INSTANCE_MAX, maxInstanceCount(typeid).toString())

// ============================================================================
init