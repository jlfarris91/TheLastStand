package SurvivorMedicSkill
import Skills
import UnitMetadata
import Events
import SkillsComponent
import Type
import SurvivorJobSkill

// ============================================================================
public class SurvivorMedicSkillDefinition extends SkillDefinition

  // --------------------------------------------------------------------------
  override function createInstance(IUnitMetadata u) returns ISkill
    return new SurvivorMedicSkill(this, u)

// ============================================================================
public class SurvivorMedicSkill extends SurvivorJobSkill
  private Action1<UnitHealedEventArgs> m_unitHealedEventHandler

  // --------------------------------------------------------------------------
  construct(SurvivorMedicSkillDefinition skill, IUnitMetadata u)
    super(skill, u)

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToHealEvent()

  // --------------------------------------------------------------------------
  override function onLevelUp()
    super.onLevelUp()

  // --------------------------------------------------------------------------
  override function onReset()
    super.onReset()

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    listenToHealEvent()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unlistenToHealEvent()

  // --------------------------------------------------------------------------
  private function onHealedUnit(real amountHealed)
    incrementExperience(amountHealed)

  // --------------------------------------------------------------------------
  private function listenToHealEvent()
    unlistenToHealEvent()
    if (m_unitHealedEventHandler == null)
      m_unitHealedEventHandler = PlayerUnitEvents.unitHealed.add() (UnitHealedEventArgs args) ->
        let ownerUnit = getUnit()
        if (ownerUnit != null and args.getHealingSource() == ownerUnit.getUnit())
          onHealedUnit(args.getAmountHealed())

  // --------------------------------------------------------------------------
  private function unlistenToHealEvent()
    if (m_unitHealedEventHandler != null)
      PlayerUnitEvents.unitHealed.remove(m_unitHealedEventHandler)
      destroy m_unitHealedEventHandler
      m_unitHealedEventHandler = null

// ============================================================================
public function SkillsComponent.getOrAddSurvivorMedicSkill() returns SurvivorMedicSkill
  var skill = this.getSkill(Type(SurvivorMedicSkill.typeId)) castTo SurvivorMedicSkill
  if (skill == null)
    skill = this.addSkill(Skills.medic.createInstance(this.getOwner() castTo IUnitMetadata)) castTo SurvivorMedicSkill
  return skill
  
// ============================================================================
init
  let skillDefinition = new SurvivorMedicSkillDefinition()
  ..setName("Medic")
  ..setIconPath("ReplaceableTextures\\CommandButtons\\BTNStatUp.blp")
  ..setUnits("exp")
  ..setMaxLevel(4)
  ..setLevelRequirement(1, 0)
  ..setLevelRequirement(2, 1000.0)
  ..setLevelRequirement(3, 2000.0)
  ..setLevelRequirement(4, 3000.0)

  Skills.medic = skillDefinition