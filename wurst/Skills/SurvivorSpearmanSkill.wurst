package SurvivorSpearmanSkill
import Skills
import UnitMetadata
import KillTrackerComponent
import Events
import SkillsComponent
import Type
import SurvivorJobSkill

// ============================================================================
public class SurvivorSpearmanSkillDefinition extends SkillDefinition

  // --------------------------------------------------------------------------
  override function createInstance(IUnitMetadata u) returns ISkill
    return new SurvivorSpearmanSkill(this, u)

// ============================================================================
public class SurvivorSpearmanSkill extends SurvivorJobSkill
  private KillTrackerComponent m_killTrackerComponent
  private Action2<KillTrackerComponent, unit> m_onKillEventHandler

  // --------------------------------------------------------------------------
  construct(SurvivorSpearmanSkillDefinition skill, IUnitMetadata u)
    super(skill, u)

  // --------------------------------------------------------------------------
  ondestroy
    m_killTrackerComponent = null

  // --------------------------------------------------------------------------
  override function onLevelUp()
    super.onLevelUp()

  // --------------------------------------------------------------------------
  override function onReset()
    super.onReset()

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    if (m_killTrackerComponent == null)
      m_killTrackerComponent = getUnit().getOrAddKillTrackerComponent()

    listenToKillEvent()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unlistenToKillEvent()

  // --------------------------------------------------------------------------
  private function onKill()
    incrementExperience(1.0)

  // --------------------------------------------------------------------------
  private function listenToKillEvent()
    unlistenToKillEvent()
    if (m_onKillEventHandler == null)
      m_onKillEventHandler = m_killTrackerComponent.killedUnitEvent.add() (KillTrackerComponent sender, unit args) ->
        onKill()

  // --------------------------------------------------------------------------
  private function unlistenToKillEvent()
    if (m_onKillEventHandler != null)
      if (m_killTrackerComponent != null and m_killTrackerComponent.killedUnitEvent != null)
        m_killTrackerComponent.killedUnitEvent.remove(m_onKillEventHandler)
      destroy m_onKillEventHandler
      m_onKillEventHandler = null

// ============================================================================
public function SkillsComponent.getOrAddSurvivorSpearmanSkill() returns SurvivorSpearmanSkill
  var skill = this.getSkill(Type(SurvivorSpearmanSkill.typeId)) castTo SurvivorSpearmanSkill
  if (skill == null)
    skill = this.addSkill(Skills.spearman.createInstance(this.getOwner() castTo IUnitMetadata)) castTo SurvivorSpearmanSkill
  return skill
  
// ============================================================================
init
  let skillDefinition = new SurvivorSpearmanSkillDefinition()
  ..setName("Spearman")
  ..setIconPath("ReplaceableTextures\\CommandButtons\\BTNImpalingBolt.blp")
  ..setUnits(" kills")
  ..setMaxLevel(4)
  ..setLevelRequirement(1, 0)
  ..setLevelRequirement(2, 10.0)
  ..setLevelRequirement(3, 100.0)
  ..setLevelRequirement(4, 1000.0)

  Skills.spearman = skillDefinition