package SprintSkill
import Skills
import UnitMetadata
import TlsAbilityIds
import Icons
import Composition
import SkillsComponent
import SprintComponent
import MovementComponent
import Events

// ============================================================================
public class SprintSkill extends Skill
  private real array[5] _staminaCosts
  private real array[5] _speeds

  function getStaminaCost(int level) returns real
    return _staminaCosts[level]

  function setStaminaCost(int level, real staminaCost)
    _staminaCosts[level] = staminaCost

  function getSpeed(int level) returns real
    return _speeds[level]

  function setSpeed(int level, real speed)
    _speeds[level] = speed

  override function createInstance(IUnitMetadata u) returns ISkillInstance
    return new SprintSkillInstance(this, u)

// ============================================================================
public class SprintSkillInstance extends SkillInstanceBase

  private SprintComponent _sprintComponent
  private MovementComponent _movementComponent
  private GenericEventHandler<SprintComponent> _startedSprintingEventHandle
  private GenericEventHandler<SprintComponent> _stoppedSprintingEventHandle
  private GenericArgsEventHandler<MovementComponent, real> _onUnitMovedEventHandle

  construct(SprintSkill skill, IUnitMetadata u)
    super(skill, u)

    _sprintComponent = u.getOrAddSprintComponent()
    _movementComponent = u.getOrAddMovementComponent()

    _startedSprintingEventHandle = _sprintComponent.startedSprintingEvent.addListener() (SprintComponent sender) ->
      onStartedSprinting()

    _stoppedSprintingEventHandle = _sprintComponent.stoppedSprintingEvent.addListener() (SprintComponent sender) ->
      onStoppedSprinting()

  ondestroy
    _stoppedSprintingEventHandle = _sprintComponent.stoppedSprintingEvent.removeListener(_stoppedSprintingEventHandle)
    _startedSprintingEventHandle = _sprintComponent.startedSprintingEvent.removeListener(_startedSprintingEventHandle)
    _onUnitMovedEventHandle = _movementComponent.unitMovedEvent.removeListener(_onUnitMovedEventHandle)

  override function onLevelUp()
    let u = _unit.getUnit()
    u.setAbilityLevel(TlsAbilityIds.sprintSkill, _level)
    u.setAbilityLevel(TlsAbilityIds.sprint, _level)

  override function onReset()
    let u = _unit.getUnit()
    u.setAbilityLevel(TlsAbilityIds.sprintSkill, 1)
    u.setAbilityLevel(TlsAbilityIds.sprint, 1)

  private function onStartedSprinting()
    _onUnitMovedEventHandle = _movementComponent.unitMovedEvent.addListener() (MovementComponent sender, real distanceInMeters) ->
      onUnitMoved(distanceInMeters)

  private function onStoppedSprinting()
    _onUnitMovedEventHandle = _movementComponent.unitMovedEvent.removeListener(_onUnitMovedEventHandle)

  private function onUnitMoved(real distanceInMeters)
    Log.info("Moved " + R2S(distanceInMeters) + " meters")

public function SkillsComponent.getOrAddSprintSkill() returns SprintSkillInstance
  var sprintSkill = this.getSkill(SprintSkillInstance.typeId) castTo SprintSkillInstance
  if (sprintSkill == null)
    sprintSkill = this.addSkill(Skills.sprint.createInstance(this.getOwner() castTo IUnitMetadata)) castTo SprintSkillInstance
  return sprintSkill

init

  let sprint = new SprintSkill()
  ..setName("Sprint")
  ..setIconPath(Icons.bTNBootsOfSpeed)
  ..setUnits("meters")
  ..setMaxLevel(4)
  ..setLevelRequirement(1, 0)
  ..setLevelRequirement(2, 500.0)
  ..setLevelRequirement(3, 1500.0)
  ..setLevelRequirement(4, 3000.0)
  ..setStaminaCost(1, 24.0)
  ..setStaminaCost(2, 16.0)
  ..setStaminaCost(3, 8.0)
  ..setStaminaCost(4, 4.0)
  ..setSpeed(1, 100.0)
  ..setSpeed(2, 100.0)
  ..setSpeed(3, 100.0)
  ..setSpeed(4, 100.0)

  Skills.sprint = sprint