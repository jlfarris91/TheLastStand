package Sprint
import Skills
import IUnit
import ClosureTimers
import TlsAbilityIds
import Icons
import GameConstants

// ============================================================================
public class SprintSkill extends Skill
  private real array[5] _staminaCosts
  private real array[5] _speeds

  function getStaminaCost(int level) returns real
    return _staminaCosts[level]

  function setStaminaCost(int level, real staminaCost)
    _staminaCosts[level] = staminaCost

  function getSpeed(int level) returns real
    return _speeds[level]

  function setSpeed(int level, real speed)
    _speeds[level] = speed

  override function createInstance(IUnit u) returns ISkillInstance
    return new SprintSkillInstance(this, u)

// ============================================================================
public class SprintSkillInstance extends SkillInstanceBase
  private timer _timer
  private vec2 _lastPos

  construct(SprintSkill skill, IUnit u)
    super(skill, u)
    _timer = CreateTimer()
    _timer.doPeriodically(ANIMATION_PERIOD) (t) ->
      tick()
    _timer.pause()

  ondestroy
    DestroyTimer(_timer)
    _timer = null

  override function onLevelUp()
    let u = _unit.getUnit()
    u.setAbilityLevel(TlsAbilityIds.sprintSkill, _level)
    u.setAbilityLevel(TlsAbilityIds.sprint, _level)

  override function onReset()
    let u = _unit.getUnit()
    _lastPos = u.getPos()
    u.setAbilityLevel(TlsAbilityIds.sprintSkill, 1)
    u.setAbilityLevel(TlsAbilityIds.sprint, 1)

  private function tick()
    let u = _unit.getUnit()
    let sprintSkill = _skill castTo SprintSkill
    let pos = u.getPos()
    let costPerMeter = sprintSkill.getStaminaCost(_level)
    let distanceInMeters = _lastPos.distanceTo(pos) * WORLD_TO_METERS
    let totalStaminaCost = distanceInMeters * costPerMeter * ANIMATION_PERIOD
    let currentStamina = u.getMana()
    let remainingStamina = RMaxBJ(currentStamina - totalStaminaCost, 0)

    if (remainingStamina < totalStaminaCost)
      stopSprinting()
      exhaustUnit()

    incrementExperience(distanceInMeters)

    u.setMana(remainingStamina)
    u.setMoveSpeed(u.getDefaultMovespeed() + sprintSkill.getSpeed(_level))

    _lastPos = pos
      
  function startSprinting()
    let u = getUnit().getUnit()
    let sprintSkill = _skill castTo SprintSkill
    let baseSpeed = u.getDefaultMovespeed()
    u.removeAbility(TlsAbilityIds.sprint)
    u.addAbility(TlsAbilityIds.stopSprinting)
    u.setAbilityLevel(TlsAbilityIds.stopSprinting, _level)
    u.setMoveSpeed(baseSpeed + sprintSkill.getSpeed(_level))
    _lastPos = u.getPos()
    _timer.resume()

  function stopSprinting()
    let u = getUnit().getUnit()
    let baseSpeed = u.getDefaultMovespeed()
    u.removeAbility(TlsAbilityIds.stopSprinting)
    u.addAbility(TlsAbilityIds.sprint)
    u.setAbilityLevel(TlsAbilityIds.sprint, _level)
    u.setMoveSpeed(baseSpeed)
    _timer.pause()

  function exhaustUnit()

init

  let sprint = new SprintSkill()
  ..setName("Sprint")
  ..setIconPath(Icons.bTNBootsOfSpeed)
  ..setUnits("meters")
  ..setMaxLevel(4)
  ..setLevelRequirement(1, 0)
  ..setLevelRequirement(2, 500.0)
  ..setLevelRequirement(3, 1500.0)
  ..setLevelRequirement(4, 3000.0)
  ..setStaminaCost(1, 24.0)
  ..setStaminaCost(2, 16.0)
  ..setStaminaCost(3, 8.0)
  ..setStaminaCost(4, 4.0)
  ..setSpeed(1, 100.0)
  ..setSpeed(2, 100.0)
  ..setSpeed(3, 100.0)
  ..setSpeed(4, 100.0)

  Skills.sprint = sprint