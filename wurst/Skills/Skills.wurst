package Skills
import UnitMetadata

public class Skills
  static ISkill sprint

// ============================================================================
public interface ISkill
  function getName() returns string
  function setName(string name)
  function getIconPath() returns string
  function setIconPath(string iconPath)
  function getUnits() returns string
  function setUnits(string units)
  function getMaxLevel() returns int
  function setMaxLevel(int maxLevel)
  function getStartingLevel() returns int
  function setStartingLevel(int startingLevel)
  function getLevelRequirement(int level) returns real
  function setLevelRequirement(int level, real experience)
  function createInstance(IUnitMetadata u) returns ISkillInstance

// ============================================================================
public interface ISkillInstance
  function getSkill() returns ISkill
  function getUnit() returns IUnitMetadata
  function getLevel() returns int
  function incrementLevel()
  function getExperience() returns real
  function incrementExperience(real experience)
  function reset()

// ============================================================================
public abstract class Skill implements ISkill
  protected string _name
  protected string _iconPath
  protected string _expUnits
  protected int _maxLevel = 1
  protected int _startingLevel = 1
  protected real array[5] _expRequirements
  
  override function getName() returns string
    return _name

  override function setName(string name)
    _name = name

  override function getIconPath() returns string
    return _iconPath

  override function setIconPath(string iconPath)
    _iconPath = iconPath

  override function getUnits() returns string
    return _expUnits

  override function setUnits(string units)
    _expUnits = units

  override function getMaxLevel() returns int
    return _maxLevel

  override function setMaxLevel(int maxLevel)
    _maxLevel = maxLevel

  override function getStartingLevel() returns int
    return _startingLevel

  override function setStartingLevel(int startingLevel)
    _startingLevel = startingLevel

  override function getLevelRequirement(int level) returns real
    return _expRequirements[level]

  override function setLevelRequirement(int level, real experience)
    _expRequirements[level] = experience

  override abstract function createInstance(IUnitMetadata u) returns ISkillInstance

// ============================================================================
public abstract class SkillInstanceBase implements ISkillInstance
  protected ISkill _skill
  protected int _level
  protected real _experience
  protected IUnitMetadata _unit

  construct(ISkill skill, IUnitMetadata u)
    _skill = skill
    _unit = u
    reset()

  override function getSkill() returns ISkill
    return _skill

  override function getUnit() returns IUnitMetadata
    return _unit

  override function getLevel() returns int
    return _level

  override function incrementLevel()
    _level = _level + 1
    onLevelUp()

  override function getExperience() returns real
    return _experience

  override function incrementExperience(real experience)
    let maxLevel = _skill.getMaxLevel()    
    _experience += experience
    for i = _level + 1 to maxLevel
      if (_experience > _skill.getLevelRequirement(i))
        incrementLevel()

  override function reset()
    _level = _skill.getStartingLevel()
    _experience = 0.0
    onReset()

  protected abstract function onLevelUp()
  protected abstract function onReset()