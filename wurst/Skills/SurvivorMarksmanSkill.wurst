package SurvivorMarksmanSkill
import Skills
import UnitMetadata
import Events
import SkillsComponent
import Type
import SurvivorJobSkill
import SurvivorStats
import StatsComponent
import Statistic
import PropertyEvents

constant real EXP_PER_KILL = 10.0

// ============================================================================
public class SurvivorMarksmanSkillDefinition extends SkillDefinition

  // --------------------------------------------------------------------------
  override function createInstance(IUnitMetadata u) returns ISkill
    return new SurvivorMarksmanSkill(this, u)

// ============================================================================
public class SurvivorMarksmanSkill extends SurvivorJobSkill
  private StatsComponent m_statsComponent
  private Action3<string, int, int> m_onStatChangingHandler

  // --------------------------------------------------------------------------
  construct(SurvivorMarksmanSkillDefinition skill, IUnitMetadata u)
    super(skill, u)

  // --------------------------------------------------------------------------
  override function onLevelUp()
    super.onLevelUp()

  // --------------------------------------------------------------------------
  override function onReset()
    super.onReset()

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()
    m_statsComponent = getUnit().getStatsComponent()
    listenToKillsStatChanged()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unlistenToUnitKilledEvent()
    m_statsComponent = null

  // --------------------------------------------------------------------------
  private function listenToKillsStatChanged()
    unlistenToUnitKilledEvent()

    let stat = getKillsStatistic()
    if (stat != null)
      m_onStatChangingHandler = stat.getValueChangingEvent().add() (string propertyName, integer oldValue, integer newValue) ->
        if (propertyName == "Value")
          let numberOfKills = newValue - oldValue
          incrementExperience(numberOfKills * EXP_PER_KILL)

  // --------------------------------------------------------------------------
  private function unlistenToUnitKilledEvent()
    if (m_onStatChangingHandler != null)
      let stat = getKillsStatistic()
      if (stat != null)
        stat.getValueChangingEvent().remove(m_onStatChangingHandler)
      destroy m_onStatChangingHandler
      m_onStatChangingHandler = null

  // --------------------------------------------------------------------------
  private function getKillsStatistic() returns IntStatistic
    return m_statsComponent.getStatistic(SurvivorStats.kills) castTo IntStatistic

// ============================================================================
public function SkillsComponent.getOrAddSurvivorMarksmanSkill() returns SurvivorMarksmanSkill
  var skill = this.getSkill(Type(SurvivorMarksmanSkill.typeId)) castTo SurvivorMarksmanSkill
  if (skill == null)
    skill = this.addSkill(Skills.marksman.createInstance(this.getOwner() castTo IUnitMetadata)) castTo SurvivorMarksmanSkill
  return skill
  
// ============================================================================
init
  let skillDefinition = new SurvivorMarksmanSkillDefinition()
  ..setName("Marksman")
  ..setIconPath("ReplaceableTextures\\CommandButtons\\BTNDwarvenLongRifle.blp")
  ..setUnits("exp")
  ..setMaxLevel(4)
  ..setLevelRequirement(1, 0)
  ..setLevelRequirement(2, 10.0)
  ..setLevelRequirement(3, 100.0)
  ..setLevelRequirement(4, 1000.0)

  Skills.marksman = skillDefinition