package SurvivorBuilderSkill
import Skills
import UnitMetadata
import Events
import SkillsComponent
import Type
import SurvivorJobSkill
import UnitExtensions
import GroupUtils
import Orders

// ============================================================================
public class SurvivorBuilderSkillDefinition extends SkillDefinition

  // --------------------------------------------------------------------------
  override function createInstance(IUnitMetadata u) returns ISkill
    return new SurvivorBuilderSkill(this, u)

// ============================================================================
public class SurvivorBuilderSkill extends SurvivorJobSkill
  private Action1<UnitHealedEventArgs> m_unitHealedEventHandler

  // --------------------------------------------------------------------------
  construct(SurvivorBuilderSkillDefinition skill, IUnitMetadata u)
    super(skill, u)

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToRepairEvent()

  // --------------------------------------------------------------------------
  override function onLevelUp()
    super.onLevelUp()

  // --------------------------------------------------------------------------
  override function onReset()
    super.onReset()

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    listenToRepairEvent()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unlistenToRepairEvent()

  // --------------------------------------------------------------------------
  private function onHealedUnit(UnitHealedEventArgs args)
    let owner = getUnit()
    if (owner == null)
      return

    let ownerUnit = owner.getUnit()
    if (ownerUnit == null)
      return

    let source = args.getHealingSource()
    let target = args.getHealedUnit()
    let amount = args.getAmountHealed()

    // Someone else did the healing
    if (source != null and source != ownerUnit)
      return

    // Repairing is just healing for buildings
    if (not args.getHealedUnit().isStructure())
      return

    // This builder is not currently building or repairing
    let currentOrderId = ownerUnit.getCurrentOrder()
    if (currentOrderId != OrderIds.repair and
        currentOrderId != OrderIds.repairon and
        currentOrderId != OrderIds.build)
      return

    var isRepairer = false
    let g = getGroup()
    g.enumUnitsInRange(target.getPos(), 256.0)
    for u from g
      if (u == ownerUnit)
        isRepairer = true
        break
    g.release()

    if (isRepairer)
      incrementExperience(amount)
      Log.debug(ownerUnit.getName() + " repaired " + target.getName() + " for " + R2S(amount) + " hp")
    else
      Log.debug("Source is not within range of target")

  // --------------------------------------------------------------------------
  private function listenToRepairEvent()
    unlistenToRepairEvent()
    if (m_unitHealedEventHandler == null)
      m_unitHealedEventHandler = PlayerUnitEvents.unitHealed.add((UnitHealedEventArgs args) -> onHealedUnit(args))

  // --------------------------------------------------------------------------
  private function unlistenToRepairEvent()
    if (m_unitHealedEventHandler != null)
      PlayerUnitEvents.unitHealed.remove(m_unitHealedEventHandler)
      destroy m_unitHealedEventHandler
      m_unitHealedEventHandler = null

// ============================================================================
public function SkillsComponent.getOrAddSurvivorBuilderSkill() returns SurvivorBuilderSkill
  var skill = this.getSkill(Type(SurvivorBuilderSkill.typeId)) castTo SurvivorBuilderSkill
  if (skill == null)
    skill = this.addSkill(Skills.builder.createInstance(this.getOwner() castTo IUnitMetadata)) castTo SurvivorBuilderSkill
  return skill
  
// ============================================================================
init
  let skillDefinition = new SurvivorBuilderSkillDefinition()
  ..setName("Builder")
  ..setIconPath("ReplaceableTextures\\CommandButtons\\BTNGatherGold.blp")
  ..setUnits(" hp repaired")
  ..setMaxLevel(4)
  ..setLevelRequirement(1, 0)
  ..setLevelRequirement(2, 1000.0)
  ..setLevelRequirement(3, 2000.0)
  ..setLevelRequirement(4, 3000.0)

  Skills.builder = skillDefinition