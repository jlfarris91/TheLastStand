package BooleanBehaviors
import Behaviors
import Keys
import ErrorHandling

// ==========================================================================
public class BooleanComparison extends BehaviorBase
  private key _variableA = INVALID_KEY
  private key _variableB = INVALID_KEY
  private bool _value

  // --------------------------------------------------------------------------
  construct(key variableA, bool value)
    if (variableA ==  INVALID_KEY)
      error("Argument variableA cannot be INVALID_KEY")
    _variableA = variableA
    _value = value

  // --------------------------------------------------------------------------
  construct(key variableA, key variableB)
    if (variableA == INVALID_KEY)
      error("Argument variableA cannot be INVALID_KEY")
    if (variableB == INVALID_KEY)
      error("Argument variableB cannot be INVALID_KEY")
    _variableA = variableA
    _variableB = variableB

  // --------------------------------------------------------------------------
  construct(BooleanComparison other)
    super(other)
    _variableA = other._variableA
    _variableB = other._variableB
    _value = other._value

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "BooleanComparison"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new BooleanComparison(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()

    if (not t.hasBoolean(_variableA.value))
      return BehaviorState.FAILURE

    var boolA = t.loadBoolean(_variableA.value)
    var boolB = _value
    
    if (_variableB != INVALID_KEY)
      if t.hasBoolean(_variableB.value)
        boolB = t.loadBoolean(_variableB.value)
      else
        return BehaviorState.FAILURE

    return boolA == boolB ? BehaviorState.SUCCESS : BehaviorState.FAILURE

// ==========================================================================
public class SetBoolean extends BehaviorBase
  private key _storage = INVALID_KEY
  private key _variableValue = INVALID_KEY
  private bool _value

  // --------------------------------------------------------------------------
  construct(key storage, bool value)
    if (storage ==  INVALID_KEY)
      error("Argument storage cannot be INVALID_KEY")
    _storage = storage
    _value = value

  // --------------------------------------------------------------------------
  construct(key storage, key value)
    if (storage == INVALID_KEY)
      error("Argument storage cannot be INVALID_KEY")
    if (value == INVALID_KEY)
      error("Argument value cannot be INVALID_KEY")
    _storage = storage
    _variableValue = value

  // --------------------------------------------------------------------------
  construct(SetBoolean other)
    super(other)
    _storage = other._storage
    _variableValue = other._variableValue
    _value = other._value

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "SetBoolean"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new SetBoolean(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()

    var value = _value
    
    if (_variableValue != INVALID_KEY)
      if t.hasBoolean(_variableValue.value)
        value = t.loadBoolean(_variableValue.value)
      else
        return BehaviorState.FAILURE

    t.saveBoolean(_storage.value, value)

    return BehaviorState.SUCCESS