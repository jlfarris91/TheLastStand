package IntegerBehaviors
import Behaviors
import Keys
import ComparisonOperator
import ErrorHandling

// ==========================================================================
public class IntegerComparison extends BehaviorBase
  private key _variableA = INVALID_KEY
  private key _variableB = INVALID_KEY
  private int _value
  private ComparisonOperator _op

  // --------------------------------------------------------------------------
  construct(key variableA, int value, ComparisonOperator op)
    if (variableA == INVALID_KEY)
      error("Argument variableA cannot be INVALID_KEY")
    _variableA = variableA
    _value = value
    _op = op

  // --------------------------------------------------------------------------
  construct(key variableA, key variableB, ComparisonOperator op)
    if (variableA == INVALID_KEY)
      error("Argument variableA cannot be INVALID_KEY")
    if (variableB == INVALID_KEY)
      error("Argument variableB cannot be INVALID_KEY")
    _variableA = variableA
    _variableB = variableB
    _op = op

  // --------------------------------------------------------------------------
  construct(IntegerComparison other)
    super(other)
    _variableA = other._variableA
    _variableB = other._variableB
    _value = other._value
    _op = other._op

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "IntegerComparison"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IntegerComparison(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()

    if (not t.hasInt(_variableA.value))
      return BehaviorState.FAILURE

    var a = t.loadInt(_variableA.value)
    var b = _value
    
    if (_variableB != INVALID_KEY)
      if t.hasInt(_variableB.value)
        b = t.loadInt(_variableB.value)
      else
        return BehaviorState.FAILURE

    return compare(a, b) ? BehaviorState.SUCCESS : BehaviorState.FAILURE

  // --------------------------------------------------------------------------
  private function compare(int a, int b) returns bool
    switch (_op)
      case EQUAL
        return a == b
      case NOT_EQUAL
        return a != b
      case GREATER_THAN
        return a > b
      case GREATER_THAN_OR_EQUAL
        return a >= b
      case LESS_THAN
        return a < b
      case LESS_THAN_OR_EQUAL
        return a <= b

// ==========================================================================
public class IncrementInteger extends BehaviorBase
  private key _variable = INVALID_KEY
  private key _variableValue = INVALID_KEY
  private int _value

  // --------------------------------------------------------------------------
  construct(key variable, int value)
    if (variable == INVALID_KEY)
      error("Argument variable cannot be INVALID_KEY")
    _variable = variable
    _value = value

  // --------------------------------------------------------------------------
  construct(key variable, key variableValue)
    if (variable == INVALID_KEY)
      error("Argument variable cannot be INVALID_KEY")
    if (variableValue == INVALID_KEY)
      error("Argument variableValue cannot be INVALID_KEY")
    _variable = variable
    _variableValue = variableValue

  // --------------------------------------------------------------------------
  construct(IncrementInteger other)
    super(other)
    _variable = other._variable
    _variableValue = other._variableValue
    _value = other._value

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "IncrementInteger"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IncrementInteger(this)

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()

    var a = 0

    if (t.hasInt(_variable.value))
      a = t.loadInt(_variableValue.value)

    var b = _value
    
    if (_variableValue != INVALID_KEY)
      if t.hasInt(_variableValue.value)
        b = t.loadInt(_variableValue.value)
      else
        return BehaviorState.FAILURE

    t.saveInt(_variable.value, a + b)

    return BehaviorState.SUCCESS