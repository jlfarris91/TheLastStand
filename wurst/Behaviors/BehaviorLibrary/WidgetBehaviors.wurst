package WidgetBehaviors
import Behaviors
import Keys
import ErrorHandling

// ==========================================================================
public class WidgetComparison extends BehaviorBase
  private key _variableA = INVALID_KEY
  private key _variableB = INVALID_KEY
  private widget _value

  // --------------------------------------------------------------------------
  construct(key variableA, widget value)
    if (variableA ==  INVALID_KEY)
      error("Argument variableA cannot be INVALID_KEY")
    _variableA = variableA
    _value = value

  // --------------------------------------------------------------------------
  construct(key variableA, key variableB)
    if (variableA == INVALID_KEY)
      error("Argument variableA cannot be INVALID_KEY")
    if (variableB == INVALID_KEY)
      error("Argument variableB cannot be INVALID_KEY")
    _variableA = variableA
    _variableB = variableB

  // --------------------------------------------------------------------------
  construct(WidgetComparison other)
    super(other)
    _variableA = other._variableA
    _variableB = other._variableB
    _value = other._value

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "WidgetComparison"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new WidgetComparison(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()

    if (not t.hasHandle(_variableA.value))
      return BehaviorState.FAILURE

    var boolA = t.loadWidget(_variableA.value)
    var boolB = _value
    
    if (_variableB != INVALID_KEY)
      if t.hasHandle(_variableB.value)
        boolB = t.loadWidget(_variableB.value)
      else
        return BehaviorState.FAILURE

    return boolA == boolB ? BehaviorState.SUCCESS : BehaviorState.FAILURE

// ==========================================================================
public class IsWidgetNull extends BehaviorBase
  private key _widgetVarKey

  // --------------------------------------------------------------------------
  construct(key widgetVarKey)
    _widgetVarKey = widgetVarKey

  // --------------------------------------------------------------------------
  construct(IsWidgetNull other)
    super(other)
    _widgetVarKey = other._widgetVarKey

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "IsWidgetNull"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IsWidgetNull(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    if (not t.hasInt(_widgetVarKey.value))
      return BehaviorState.SUCCESS
    return t.loadWidget(_widgetVarKey.value) == null ? BehaviorState.SUCCESS : BehaviorState.FAILURE