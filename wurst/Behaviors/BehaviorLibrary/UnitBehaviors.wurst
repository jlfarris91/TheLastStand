package UnitBehaviors
import Behaviors
import Keys
import ErrorHandling

// ==========================================================================
public class ShowUnit extends BehaviorBase
  private key _variableUnit

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(key variableUnit)
    if (variableUnit == INVALID_KEY)
      error("Argument variableUnit cannot be INVALID_KEY")
    _variableUnit = variableUnit

  // --------------------------------------------------------------------------
  construct(ShowUnit other)
    super(other)  
    _variableUnit = other._variableUnit

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "HideUnit"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new ShowUnit(this)

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    var u = context.getUnit().getUnit()

    if (_variableUnit != INVALID_KEY)
      if (t.hasHandle(_variableUnit.value))
        u = t.loadUnit(_variableUnit.value)
      else
        return BehaviorState.FAILURE

    u.show()

    return BehaviorState.SUCCESS

// ==========================================================================
public class HideUnit extends BehaviorBase
  private key _variableUnit

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(key variableUnit)
    if (variableUnit == INVALID_KEY)
      error("Argument variableUnit cannot be INVALID_KEY")
    _variableUnit = variableUnit

  // --------------------------------------------------------------------------
  construct(HideUnit other)
    super(other)  
    _variableUnit = other._variableUnit

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "HideUnit"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new HideUnit(this)

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    var u = context.getUnit().getUnit()

    if (_variableUnit != INVALID_KEY)
      if (t.hasHandle(_variableUnit.value))
        u = t.loadUnit(_variableUnit.value)
      else
        return BehaviorState.FAILURE

    u.hide()

    return BehaviorState.SUCCESS