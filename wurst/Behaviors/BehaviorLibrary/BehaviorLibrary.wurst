package BehaviorLibrary
import Behaviors
import Table
import Orders
import LinkedList
import Keys
import UnitMetadataExtensions
import TableExtensions
import public BooleanBehaviors
import public IntegerBehaviors
import public RealBehaviors
import public WidgetBehaviors
import public UnitBehaviors
import GroupUtils
import ClosureEvents
import ClosureTimers
import ErrorHandling

// ============================================================================
public abstract class Decorator extends BehaviorBase
  protected IBehavior _child

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Decorator other)
    super(other)
    setChild(other._child.clone())

  // --------------------------------------------------------------------------
  ondestroy
    destroy _child
    _child = null

  // --------------------------------------------------------------------------
  function setChild(IBehavior child)
    if (_child != null)
      error("Decorator.setChild can only be called once!")
    _child = child

  // --------------------------------------------------------------------------
  function getChild() returns IBehavior
    return _child

  // --------------------------------------------------------------------------
  override abstract function clone() returns IBehavior

// ============================================================================
public abstract class Composite extends BehaviorBase
  protected BehaviorCollection _children

  // --------------------------------------------------------------------------
  construct()
    _children = new BehaviorCollection()

  // --------------------------------------------------------------------------
  construct(Composite other)
    super(other)
    _children = new BehaviorCollection()
    for child in other._children
      addChild(child.clone())

  // --------------------------------------------------------------------------
  ondestroy
    for child in _children
      destroy child
    destroy _children
    _children = null

  // --------------------------------------------------------------------------
  override abstract function clone() returns IBehavior

  // --------------------------------------------------------------------------
  function addChild(IBehavior behavior)
    _children.add(behavior)

  // --------------------------------------------------------------------------
  function addChildAt(IBehavior behavior, int index)
    _children.addAt(behavior, index)

  // --------------------------------------------------------------------------
  function removeChild(IBehavior behavior)
    _children.remove(behavior)

  // --------------------------------------------------------------------------
  function removeChildAt(int index)
    _children.removeAt(index)
  
// ============================================================================
public class Sequence extends Composite
  private LLIterator<IBehavior> _iterator
  private IBehavior _current

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Sequence other)
    super(other)

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "Sequence"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new Sequence(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    _iterator = _children.iterator()
    _current = _iterator.next()

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState

    let childState = _current.update(context)

    if (childState != BehaviorState.RUNNING)
      if (childState == BehaviorState.FAILURE)
        return BehaviorState.FAILURE
      if (not _iterator.hasNext())
        return BehaviorState.SUCCESS
      _current = _iterator.next()
      // Execute onUpdate again so we don't have to wait for another tick
      // Only wait or another tick when the child's value is RUNNING
      onUpdate(context)
      
    return BehaviorState.RUNNING

  // --------------------------------------------------------------------------
  override function onExit(IBehaviorTreeContext context)
    _iterator.close()
    _iterator = null
    _current = null

// ============================================================================
public class Selector extends Composite
  private LLIterator<IBehavior> _iterator
  private IBehavior _current

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Selector other)
    super(other)

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "Selector"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new Selector(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext _context)
    _iterator = _children.iterator()
    _current = _iterator.next()

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState

    let childState = _current.update(context)

    if (childState != BehaviorState.RUNNING)
      if (childState == BehaviorState.SUCCESS)
        return BehaviorState.SUCCESS
      if (not _iterator.hasNext())
        return BehaviorState.FAILURE
      _current = _iterator.next()
      // Execute onUpdate again so we don't have to wait for another tick
      // Only wait or another tick when the child's value is RUNNING
      onUpdate(context)

    return BehaviorState.RUNNING

  // --------------------------------------------------------------------------
  override function onExit(IBehaviorTreeContext context)
    _iterator.close()
    _iterator = null
    _current = null

// ============================================================================
public class Inverter extends Decorator

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Inverter other)
    super(other)

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "Inverter"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new Inverter(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let childState = _child.update(context)
    switch (childState)
      case BehaviorState.RUNNING
        return BehaviorState.RUNNING
      case BehaviorState.SUCCESS
        return BehaviorState.FAILURE
      case BehaviorState.FAILURE
        return BehaviorState.SUCCESS

// ============================================================================
public class Succeeder extends Decorator

  // --------------------------------------------------------------------------
  construct()
    skip
    
  // --------------------------------------------------------------------------
  construct(Succeeder other)
    super(other)
    
  // --------------------------------------------------------------------------
  override function getName() returns string
    return "Succeeder"
    
  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new Succeeder(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let childState = _child.update(context)
    return (childState == BehaviorState.RUNNING) ? BehaviorState.RUNNING : BehaviorState.SUCCESS

// ============================================================================
public class Repeater extends Decorator

  // --------------------------------------------------------------------------
  construct()
    skip
    
  // --------------------------------------------------------------------------
  construct(Repeater other)
    super(other)
    
  // --------------------------------------------------------------------------
  override function getName() returns string
    return "Repeater"
    
  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new Repeater(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let childState = _child.update(context)
    if (childState != BehaviorState.RUNNING)
      onUpdate(context)
    return BehaviorState.RUNNING

// ============================================================================
public class RepeatUntilFail extends Decorator

  // --------------------------------------------------------------------------
  construct()
    skip
    
  // --------------------------------------------------------------------------
  construct(RepeatUntilFail other)
    super(other)
    
  // --------------------------------------------------------------------------
  override function getName() returns string
    return "RepeatUntilFail"
    
  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new RepeatUntilFail(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let childState = _child.update(context)
    if (childState == BehaviorState.FAILURE)
      return BehaviorState.SUCCESS
    return BehaviorState.RUNNING

// ============================================================================
public class SetRandomReal extends BehaviorBase
  private key _valueKey
  private key _minKey = INVALID_KEY
  private key _maxKey = INVALID_KEY
  private real _min
  private real _max

  // --------------------------------------------------------------------------
  construct(key valueKey, real min, real max)
    _valueKey = valueKey
    _min = min
    _max = max

  // --------------------------------------------------------------------------
  construct(key valueKey, key minKey, key maxKey)
    _valueKey = valueKey
    _minKey = minKey
    _maxKey = maxKey

  // --------------------------------------------------------------------------
  construct(SetRandomReal other)
    super(other)
    _valueKey = other._valueKey
    _minKey = other._minKey
    _maxKey = other._maxKey
    _min = other._min
    _max = other._max

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "SetRandomReal"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new SetRandomReal(this)

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState

    let t = context.getTable()

    real min = _min
    real max = _max

    if (_minKey != INVALID_KEY)
      min = t.loadReal(_minKey.value)

    if (_maxKey != INVALID_KEY)
      max = t.loadReal(_maxKey.value)

    t.saveReal(_valueKey.value, GetRandomReal(min, max))
    
    return BehaviorState.SUCCESS

// ==========================================================================
public class PushToStack extends BehaviorBase
  private int _stackVarKey
  private int _itemVarKey

  // --------------------------------------------------------------------------
  construct(int stackVarKey, int itemVarKey)
    _stackVarKey = stackVarKey
    _itemVarKey = itemVarKey

  // --------------------------------------------------------------------------
  construct(PushToStack other)
    super(other)
    _stackVarKey = other._stackVarKey
    _itemVarKey = other._itemVarKey

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "PushToStack"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new PushToStack(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    let t = context.getTable()
    if (not t.hasInt(_stackVarKey))
      let stack = new LinkedList<int>()
      t.saveInt(_stackVarKey, stack castTo int)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    let stack = t.loadInt(_stackVarKey) castTo LinkedList<int>
    let stackItem = t.loadInt(_itemVarKey)
    stack.push(stackItem)
    return BehaviorState.SUCCESS

// ==========================================================================
public class PopFromStack extends BehaviorBase
  private key _stackVarKey
  private key _itemVarKey

  // --------------------------------------------------------------------------
  construct(key stackVarKey, key itemVarKey)
    _stackVarKey = stackVarKey
    _itemVarKey = itemVarKey

  // --------------------------------------------------------------------------
  construct(PopFromStack other)
    super(other)
    _stackVarKey = other._stackVarKey
    _itemVarKey = other._itemVarKey

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "PopFromStack"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new PopFromStack(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()

    if (not t.hasInt(_stackVarKey.value))
      return BehaviorState.FAILURE

    let stack = t.loadInt(_stackVarKey.value) castTo LinkedList<int>

    if (stack.isEmpty())
      return BehaviorState.FAILURE

    t.saveInt(_itemVarKey.value, stack.pop())
    
    return BehaviorState.SUCCESS

// ==========================================================================
public class IsStackEmpty extends BehaviorBase
  private int _stackVarKey

  // --------------------------------------------------------------------------
  construct(int stackVarKey)
    _stackVarKey = stackVarKey

  // --------------------------------------------------------------------------
  construct(IsStackEmpty other)
    super(other)
    _stackVarKey = other._stackVarKey

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "IsStackEmpty"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IsStackEmpty(this)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    if (not t.hasInt(_stackVarKey))
      return BehaviorState.SUCCESS
    let stack = t.loadInt(_stackVarKey) castTo LinkedList<int>
    return stack.isEmpty() ? BehaviorState.SUCCESS : BehaviorState.FAILURE

// ==========================================================================
public class MoveToPoint extends BehaviorBase
  private constant real s_arrivalDistanceSq = 32.0 * 32.0
  private key _targetXKey
  private key _targetYKey

  // --------------------------------------------------------------------------
  construct(key targetXKey, key targetYKey)
    _targetXKey = targetXKey
    _targetYKey = targetYKey

  // --------------------------------------------------------------------------
  construct(MoveToPoint other)
    super(other)
    _targetXKey = other._targetXKey
    _targetYKey = other._targetYKey

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "MoveToPoint"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new MoveToPoint(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    let u = context.getUnit()
    let t = context.getTable()
    let targetPoint = getTargetPoint(t)
    u.getUnit().issuePointOrderById(OrderIds.move, targetPoint)
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let u = context.getUnit()
    let t = context.getTable()
    let targetPoint = getTargetPoint(t)
    let dist = u.getUnit().getPos().distanceToSq(targetPoint)

    if (u.getUnit().getCurrentOrder() != OrderIds.move)
      return BehaviorState.FAILURE

    if (dist < s_arrivalDistanceSq)
      return BehaviorState.SUCCESS
    
    return BehaviorState.RUNNING

  // --------------------------------------------------------------------------
  override function onExit(IBehaviorTreeContext context)
    let u = context.getUnit()
    u.getUnit().issueImmediateOrderById(OrderIds.stop)
    
  // --------------------------------------------------------------------------
  private function getTargetPoint(Table table) returns vec2
    let targetX = table.loadReal(_targetXKey.value)
    let targetY = table.loadReal(_targetYKey.value)
    return vec2(targetX, targetY)

// ==========================================================================
public class CastTargetAbility extends BehaviorBase
  private key _variableOrderId = INVALID_KEY
  private key _variableTarget = INVALID_KEY
  private int _orderId
  private int _abilityId
  private BehaviorState _state
  private EventListener _listener1
  private EventListener _listener2

  // --------------------------------------------------------------------------
  construct(int orderId, int abilityId, key target)
    _orderId = orderId
    _abilityId = abilityId
    _variableTarget = target

  // --------------------------------------------------------------------------
  construct(CastTargetAbility other)
    super(other)
    _variableOrderId = other._variableOrderId
    _variableTarget = other._variableTarget

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "CastTargetAbility"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new CastTargetAbility(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    let composableUnit = context.getUnit()
    let caster = composableUnit.getUnit()
    let t = context.getTable()

    int order = _orderId
    if (_variableOrderId != INVALID_KEY)
      if (t.hasInt(_variableOrderId.value))
        order = t.loadInt(_variableOrderId.value)
      else
        _state = BehaviorState.FAILURE

    let target = t.loadUnit(_variableTarget.value)
    caster.issueTargetOrderById(order, target)

    _listener1 = EventListener.add(target, EVENT_PLAYER_UNIT_SPELL_EFFECT) -> 
      if (GetSpellAbilityId() == _abilityId and GetSpellAbilityUnit() == caster)
        _state = BehaviorState.SUCCESS

    _listener2 = EventListener.add(caster, EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
      if (GetIssuedOrderIdBJ() != order)
        _state = BehaviorState.FAILURE

    _state = BehaviorState.RUNNING

  // --------------------------------------------------------------------------
  override function onExit(IBehaviorTreeContext context)
    destroy _listener1
    destroy _listener2
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState    
    return _state

// ==========================================================================
public class IssueAttackTargetOrder extends BehaviorBase
  private key _variableTarget = INVALID_KEY
  private BehaviorState _state
  private EventListener _listener1
  private EventListener _listener2

  // --------------------------------------------------------------------------
  construct(key target)
    _variableTarget = target

  // --------------------------------------------------------------------------
  construct(IssueAttackTargetOrder other)
    super(other)
    _variableTarget = other._variableTarget

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "IssueAttackTargetOrder"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IssueAttackTargetOrder(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    let composableUnit = context.getUnit()
    let attacker = composableUnit.getUnit()
    let t = context.getTable()

    let target = t.loadUnit(_variableTarget.value)
    attacker.issueTargetOrderById(OrderIds.attack, target)

    _listener1 = EventListener.add(target, EVENT_PLAYER_UNIT_ATTACKED) -> 
      if (GetAttacker() == attacker)
        _state = BehaviorState.SUCCESS

    _listener2 = EventListener.add(attacker, EVENT_PLAYER_UNIT_ISSUED_ORDER) ->
      if (GetIssuedOrderIdBJ() != OrderIds.attack or GetOrderTargetUnit() != target)
        _state = BehaviorState.FAILURE

    _state = BehaviorState.RUNNING

  // --------------------------------------------------------------------------
  override function onExit(IBehaviorTreeContext context)
    destroy _listener1
    destroy _listener2
    
  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState    
    return _state

// ============================================================================
public class IsUnitFullHealth implements IBehavior
  private key _unitKey

  construct(key unitKey)
    _unitKey = unitKey

  // --------------------------------------------------------------------------
  construct(IsUnitFullHealth other)
    _unitKey = other._unitKey

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IsUnitFullHealth(this)

  // --------------------------------------------------------------------------
  override function update(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    let w = t.loadUnit(_unitKey.value)
    return w == null or w.getMissingHP() > 0 ? BehaviorState.FAILURE : BehaviorState.SUCCESS

// ============================================================================
public class IsIdleBehavior extends BehaviorBase
  private constant real IDLE_DISTANCE = 32.0
  private constant real IDLE_DISTANCE_SQ = IDLE_DISTANCE * IDLE_DISTANCE
  private key _timeKey
  private key _lastPosKeyX
  private key _lastPosKeyY
  private real _duration

  // --------------------------------------------------------------------------
  construct(real duration)
    _duration = duration
    _timeKey = key(StringHashBJ("IdleBehavior.Time"))
    _lastPosKeyX = key(StringHashBJ("IdleBehavior.LastPosX"))
    _lastPosKeyY = key(StringHashBJ("IdleBehavior.LastPosY"))

  // --------------------------------------------------------------------------
  construct(IsIdleBehavior other)
    super(other)
    _timeKey = other._timeKey
    _lastPosKeyX = other._lastPosKeyX
    _lastPosKeyY = other._lastPosKeyY

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "IsIdleBehavior"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new IsIdleBehavior(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    let table = context.getTable()
    let u = context.getUnit()
    table.saveVec2(_lastPosKeyX.value, _lastPosKeyY.value, u.getPos())
    table.saveReal(_timeKey.value, 0.0)

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let table = context.getTable()
    let u = context.getUnit()

    let currentPos = u.getPos()
    let lastPos = table.loadVec2(_lastPosKeyX.value, _lastPosKeyY.value)
    var timeElapsed = table.loadReal(_timeKey.value)

    let distanceSq = currentPos.distanceToSq(lastPos)

    if (distanceSq < IDLE_DISTANCE_SQ)
      let dt = table.loadReal(BehaviorTree.KEY_DELTA_TIME.value)
      timeElapsed += dt
      if (timeElapsed > _duration)
        return BehaviorState.SUCCESS
      table.saveReal(_timeKey.value, timeElapsed)
      return BehaviorState.RUNNING

    return BehaviorState.FAILURE

// ============================================================================
public class GetSingleUnitOfTypeInRange extends BehaviorBase
  private key2 _variablePos
  private key _variableRange
  private key _variableUnitId
  private key _variableStorage
  private int _unitId
  private real _range

  // --------------------------------------------------------------------------
  construct(key variableStorage, real range, int unitId)
    _variableStorage = variableStorage
    _range = range
    _unitId = unitId

  // --------------------------------------------------------------------------
  construct(key variableStorage, key2 variablePos, real range, int unitId)
    _variableStorage = variableStorage
    _variablePos = variablePos
    _range = range
    _unitId = unitId

  // --------------------------------------------------------------------------
  construct(key variableStorage, key2 variablePos, key variableRange, key variableUnitId)
    _variableStorage = variableStorage
    _variablePos = variablePos
    _variableRange = variableRange
    _variableUnitId = variableUnitId

  // --------------------------------------------------------------------------
  construct(GetSingleUnitOfTypeInRange other)
    super(other)
    _variableStorage = other._variableStorage
    _variablePos = other._variablePos
    _variableRange = other._variableRange
    _variableUnitId = other._variableUnitId

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "GetSingleUnitOfTypeInRange"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new GetSingleUnitOfTypeInRange(this)

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    let t = context.getTable()
    let u = context.getUnit()

    var pos = u.getPos()
    var unitId = _unitId
    var range = _range

    if (_variablePos != INVALID_KEY2)
      if (t.hasVec2(_variablePos.valueX, _variablePos.valueY))
        pos = t.loadVec2(_variablePos.valueX, _variablePos.valueY)
      else
        return BehaviorState.FAILURE

    if (_variableUnitId != INVALID_KEY)
      if (t.hasInt(_variableUnitId.value))
        unitId = t.loadInt(_variableUnitId.value)
      else
        return BehaviorState.FAILURE

    if (_variableRange != INVALID_KEY)
      if (t.hasReal(_variableRange.value))
        range = t.loadReal(_variableRange.value)

    let matchingUnits = getGroup()
    let unitsInRange = getGroup()
    unitsInRange.enumUnitsInRange(pos, range)

    if (unitsInRange.isEmpty())
      return BehaviorState.FAILURE

    for uu in unitsInRange
      if (uu.isAlive() and uu.getTypeId() == unitId)
        matchingUnits.addUnit(uu)

    if (matchingUnits.isEmpty())
      return BehaviorState.FAILURE

    let selectedUnit = matchingUnits.getRandomUnit()

    unitsInRange.release()
    matchingUnits.release()

    t.saveUnit(_variableStorage.value, selectedUnit)
    return BehaviorState.SUCCESS

// ============================================================================
public class SetUnitAnimation extends BehaviorBase
  private int _index
  private real _duration
  private BehaviorState _state

  // --------------------------------------------------------------------------
  construct(int animationIndex, real duration)
    _index = animationIndex
    _duration = duration

  // --------------------------------------------------------------------------
  construct(SetUnitAnimation other)
    super(other)
    _index = other._index
    _duration = other._duration

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "SetUnitAnimation"

  // --------------------------------------------------------------------------
  override function clone() returns IBehavior
    return new SetUnitAnimation(this)

  // --------------------------------------------------------------------------
  override function onEnter(IBehaviorTreeContext context)
    _state = BehaviorState.RUNNING
    context.getUnit().setAnimation(_index)
    doAfter(_duration) ->
      _state = BehaviorState.SUCCESS

  // --------------------------------------------------------------------------
  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState
    return _state