package Blackboard
import initlater LinkedList
import initlater SmartUnit

// ============================================================================
public interface IBlackboard
  function postWork(IBlackboardWorkItem workItem, int priority)
  function removeWork(IBlackboardWorkItem workItem)
  function queryWork(SmartUnit u) returns bool
  function iterator() returns LLIterator<BlackboardWorkItemEntry>

// ============================================================================
public interface IBlackboardWorkItem
  function canWork(SmartUnit u) returns bool
  function giveWork(SmartUnit u)
  function toString() returns string

// ============================================================================
public abstract class BlackboardWorkItemBase implements IBlackboardWorkItem
  
  // --------------------------------------------------------------------------
  abstract override function canWork(SmartUnit u) returns bool

  // --------------------------------------------------------------------------
  abstract override function giveWork(SmartUnit u)

// ============================================================================
public class Blackboard implements IBlackboard

  private LinkedList<BlackboardWorkItemEntry> _workItems
  private BlackboardWorkItemComparator _comparator

  // --------------------------------------------------------------------------
  construct()
    _workItems = new LinkedList<BlackboardWorkItemEntry>()
    _comparator = new BlackboardWorkItemComparator()

  // --------------------------------------------------------------------------
  ondestroy
    destroy _workItems
    _workItems = null
    destroy _comparator
    _comparator = null
  
  // --------------------------------------------------------------------------
  override function iterator() returns LLIterator<BlackboardWorkItemEntry>
    return _workItems.iterator()

  // --------------------------------------------------------------------------
  override function postWork(IBlackboardWorkItem workItem, int priority)
    _workItems.add(new BlackboardWorkItemEntry(workItem, priority))
    _workItems.sortWith(_comparator)
    Log.info("Posted work to blackboard: " + workItem.toString())
    Log.info("Blackboard: " + I2S(_workItems.size()) + " work items")
  
  // --------------------------------------------------------------------------
  override function removeWork(IBlackboardWorkItem workItem)
    _workItems.removeIf() (BlackboardWorkItemEntry t) ->
      return t._workItem == workItem

  // --------------------------------------------------------------------------
  override function queryWork(SmartUnit u) returns bool

    for workItem in _workItems
      if (workItem._workItem.canWork(u))
        giveWork(u, workItem)
        return true

    return false

  // --------------------------------------------------------------------------
  private function giveWork(SmartUnit u, BlackboardWorkItemEntry entry)
    entry._workItem.giveWork(u)
    _workItems.remove(entry)
    Log.info("Issued work (" + entry._workItem.toString() +") to " + u.getUnit().getName())
    Log.info("Blackboard: " + I2S(_workItems.size()) + " work items")
    destroy entry

// ============================================================================
public class BlackboardWorkItemEntry
  IBlackboardWorkItem _workItem
  int _priority

  construct(IBlackboardWorkItem workItem, int priority)
    _workItem = workItem
    _priority = priority
  
// ============================================================================
public class BlackboardWorkItemComparator implements Comparator<BlackboardWorkItemEntry>

  // --------------------------------------------------------------------------
  override function compare(BlackboardWorkItemEntry o1, BlackboardWorkItemEntry o2) returns int
    return o1._priority - o2._priority