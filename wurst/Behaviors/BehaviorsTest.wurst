// package BehaviorsTest
// import TlsUnitIds
// import Behaviors
// import BehaviorLibrary
// import SmartUnit
// import ICampUnit
// import IUnit
// import UnitExtensions
// import LinkedList
// import TableExtensions
// import Keys
// import BlackboardBehaviors
// import Orders
// import BlackboardManager

// // ============================================================================
// function delayedStart()
//   let u1 = CreateUnit(Player(0), TlsUnitIds.survivor, 0, 0, 0)
//   //let u2 = CreateUnit(Player(0), TlsUnitIds.marksman, 0, 0, 0)
//   //let u3 = CreateUnit(Player(0), TlsUnitIds.medic, 0, 0, 0)

//   let su1 = new SmartUnit(u1)
//   //let su2 = new SmartUnit(u2)
//   //let su3 = new SmartUnit(u3)

//   // let context1 = new BehaviorTreeContext(new SmartUnit(u1))
//   // let context2 = new BehaviorTreeContext(new SmartUnit(u2))
//   // let context3 = new BehaviorTreeContext(new SmartUnit(u3))
  
//   // let tree = new TestBehaviorTree()
//   // let tree1 = tree.clone()
//   // let tree2 = tree.clone()
//   // let tree3 = tree.clone()

//   // tree1.start(context1, BehaviorTreeExecutionPriority.LOW)
//   // tree2.start(context2, BehaviorTreeExecutionPriority.HIGH)
//   // tree3.start(context3, BehaviorTreeExecutionPriority.REALTIME)

//   var work = new BlackboardBehavior(
//     "Test work item",
//     new TestBehaviorTree(),
//     BehaviorTreeExecutionPriority.HIGH)

//   g_Blackboard.postWork(work, 1)

// // ============================================================================
// public class TestBehaviorTree extends BehaviorTree

//   constant key TARGET_X_KEY = key(StringHashBJ("MoveToPoint::TargetX"))
//   constant key TARGET_Y_KEY = key(StringHashBJ("MoveToPoint::TargetY"))

//   construct()
//     let move = new MoveToPoint(TARGET_X_KEY, TARGET_Y_KEY)

//     let setTargetX = new SetRandomReal(TARGET_X_KEY, -1024.0, 1024.0)
//     let setTargetY = new SetRandomReal(TARGET_Y_KEY, -1024.0, 1024.0)
    
//     let succeeder = new Succeeder()
//     succeeder.setChild(move)

//     let sequence = new Sequence()
//     sequence.addChild(setTargetX)
//     sequence.addChild(setTargetY)
//     sequence.addChild(succeeder)

//     let repeater = new Repeater()
//     repeater.setChild(sequence)

//     setRoot(repeater)

// // ============================================================================
// public class RepairStructuresTree extends BehaviorTree

//   constant key STRUCTURES_KEY = key(StringHashBJ("RepairStructureTree::Structures"))
//   constant key TARGET_STRUCTURE_KEY = key(StringHashBJ("RepairStructureTree::Target"))

//   construct()
//     let inverter = new Inverter()
//     inverter.setChild(new IsUnitFullHealth(TARGET_STRUCTURE_KEY))

//     let untilFail2 = new RepeatUntilFail()
//     untilFail2.setChild(inverter)

//     let s2 = new Sequence()
//     s2.addChild(new IssueTargetOrderIdBehavior(OrderIds.repair, TARGET_STRUCTURE_KEY))
//     s2.addChild(untilFail2)

//     let s1 = new Sequence()
//     s1.addChild(new PopFromStack(STRUCTURES_KEY, TARGET_STRUCTURE_KEY))
//     s2.addChild(s2)

//     let untilFail = new RepeatUntilFail()
//     untilFail.setChild(s1)

//     let sequence = new Sequence()
//     sequence.addChild(new GetStructuresNeedingRepairBehavior(STRUCTURES_KEY))
//     sequence.addChild(untilFail)
//     sequence.addChild(new PopBehaviorTreeBehavior())

//     setRoot(sequence)

// // ============================================================================
// public class GetStructuresNeedingRepairBehavior implements IBehavior
//   private key _stackVarKey

//   // --------------------------------------------------------------------------
//   construct(key stackVarKey)
//     _stackVarKey = stackVarKey

//   // --------------------------------------------------------------------------
//   construct(GetStructuresNeedingRepairBehavior other)
//     _stackVarKey = other._stackVarKey

//   // --------------------------------------------------------------------------
//   override function clone() returns IBehavior
//     return new GetStructuresNeedingRepairBehavior(this)

//   // --------------------------------------------------------------------------
//   override function update(IBehaviorTreeContext context) returns BehaviorState
//     let t = context.getTable()
//     IUnit smartUnit = context.getUnit()
//     let campUnit  = smartUnit castTo ICampUnit
//     let camp = campUnit.getCamp()
//     let units = camp.getUnits()

//     let stack = t.loadOrCreateList(_stackVarKey.value)

//     for cu in units
//       let u = cu.getUnit()
//       if (u.isStructure() and u.getMissingHP() > 0)
//         stack.push(cu castTo int)

//     destroy units

//     return BehaviorState.SUCCESS

// // ============================================================================
// init

//   var t = CreateTimer()
//   t.start(0.1, function delayedStart)

  