package BehaviorsTest
import TlsUnitIds
import Behaviors
import BehaviorLibrary
import HashMap

class SetRandomTargetPosition extends BehaviorBase
  construct()
    skip

  construct(SetRandomTargetPosition other)
    super(other)

  override function getName() returns string
    return "SetRandomTargetPosition"

  override function clone() returns IBehavior
    return new SetRandomTargetPosition(this)

  override function onUpdate(IBehaviorTreeContext context) returns BehaviorState

    let targetXKey = StringHashBJ("MoveToPoint::TargetX")
    let targetYKey = StringHashBJ("MoveToPoint::TargetY")

    let t = context.getTable()
    t.saveReal(targetXKey, GetRandomReal(-1024.0, 1024.0))
    t.saveReal(targetYKey, GetRandomReal(-1024.0, 1024.0))
    
    Log.info("SetRandomTargetPosition::onUpdate SUCCESS")
    return BehaviorState.SUCCESS

function delayedStart()
  let u1 = CreateUnit(Player(0), TlsUnitIds.survivor, 0, 0, 0)
  let u2 = CreateUnit(Player(0), TlsUnitIds.marksman, 0, 0, 0)
  let u3 = CreateUnit(Player(0), TlsUnitIds.medic, 0, 0, 0)

  let context1 = new BehaviorTreeContext(u1)
  let context2 = new BehaviorTreeContext(u2)
  let context3 = new BehaviorTreeContext(u3)
  
  let tree = buildTree()
  let tree1 = tree.clone()
  let tree2 = tree.clone()
  let tree3 = tree.clone()

  tree1.start(context1, BehaviorTreeExecutionPriority.LOW)
  tree2.start(context2, BehaviorTreeExecutionPriority.HIGH)
  tree3.start(context3, BehaviorTreeExecutionPriority.REALTIME)

function buildTree() returns IBehaviorTree
  let tree = new BehaviorTree()

  let targetXKey = StringHashBJ("MoveToPoint::TargetX")
  let targetYKey = StringHashBJ("MoveToPoint::TargetY")
  let move = new MoveToPoint(targetXKey, targetYKey)

  let setVar = new SetRandomTargetPosition()
  
  let succeeder = new Succeeder()
  succeeder.setChild(move)

  let sequence = new Sequence()
  sequence.addChild(setVar)
  sequence.addChild(succeeder)

  let repeater = new Repeater()
  repeater.setChild(sequence)

  tree.setRoot(repeater)

  return tree

init

  var t = CreateTimer()
  t.start(0.1, function delayedStart)

  