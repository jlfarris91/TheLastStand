package Behaviors
import LinkedList
import TimerUtils
import ClosureTimers
import Table
import initlater SmartUnit

PeriodicBehaviorTreeRunner g_lowPriorityRunner
PeriodicBehaviorTreeRunner g_highPriorityRunner
PeriodicBehaviorTreeRunner g_realtimePriorityRunner

// ============================================================================
public enum BehaviorState
  RUNNING
  FAILURE
  SUCCESS

// ============================================================================
public enum BehaviorTreeExecutionPriority
  LOW
  HIGH
  REALTIME

// ============================================================================
public class BehaviorCollection extends LinkedList<IBehavior>

// ============================================================================
public interface IBehavior
  function update(IBehaviorTreeContext context) returns BehaviorState
  function clone() returns IBehavior

// ============================================================================
public interface IBehaviorTree
  function setRoot(IBehavior behavior)
  function getRoot() returns IBehavior
  function start(IBehaviorTreeContext context, BehaviorTreeExecutionPriority priority)
  function resume()
  function pause()
  function stop()
  function update()
  function clone() returns IBehaviorTree
  function toString() returns string

// ============================================================================
public interface IBehaviorTreeContext
  function getUnit() returns SmartUnit
  function getTable() returns Table

// ============================================================================
public interface IBehaviorTreeRunner
  function register(IBehaviorTree tree)
  function unregister(IBehaviorTree tree)

// ============================================================================
public interface IHasBehaviors
  function getBehavior() returns IBehaviorTree
  function pushBehavior(IBehaviorTree behaviorTree, BehaviorTreeExecutionPriority priority)
  function popBehavior() returns IBehaviorTree
  function cancelAllBehaviors()

// ============================================================================
class PeriodicBehaviorTreeRunner implements IBehaviorTreeRunner
  LinkedList<IBehaviorTree> _trees
  private timer _updateTimer

  // --------------------------------------------------------------------------
  construct(real updateRate)
    _trees = new LinkedList<IBehaviorTree>()

    _updateTimer = getTimer()
    _updateTimer.doPeriodically(updateRate) (CallbackPeriodic cb) ->
      this.updateTrees()

  // --------------------------------------------------------------------------
  ondestroy
    destroy _trees
    _trees = null

  // --------------------------------------------------------------------------
  override function register(IBehaviorTree tree)
    _trees.add(tree)

  // --------------------------------------------------------------------------
  override function unregister(IBehaviorTree tree)
    _trees.remove(tree)

  // --------------------------------------------------------------------------
  private function updateTrees()
    for tree in _trees
      tree.update()

// ============================================================================
public class BehaviorTree implements IBehaviorTree
  private IBehavior _root
  private IBehaviorTreeRunner _runner
  private IBehaviorTreeContext _context
  private bool _isRunning
  private string _name

  // --------------------------------------------------------------------------
  construct()
    _name = "BehaviorTree"

  // --------------------------------------------------------------------------
  construct(string name)
    _name = name

  // --------------------------------------------------------------------------
  construct(BehaviorTree other)
    _root = other._root.clone()
    _name = other._name

  // --------------------------------------------------------------------------
  ondestroy
    if (_context != null)
      destroy _context
      _context = null
    if (_root != null)
      destroy _root
      _root = null
    _runner = null
  
  // --------------------------------------------------------------------------  
  override function toString() returns string
    return _name

  // --------------------------------------------------------------------------
  override function clone() returns IBehaviorTree
    return new BehaviorTree(this)

  // --------------------------------------------------------------------------
  override function setRoot(IBehavior behavior)
    _root = behavior

  // --------------------------------------------------------------------------
  override function getRoot() returns IBehavior
    return _root

  // --------------------------------------------------------------------------
  override function start(IBehaviorTreeContext context, BehaviorTreeExecutionPriority priority)
    if (_root == null)
      Log.error("Trying to call start() on a BehaviorTree with no root")
      return

    if (_isRunning or _runner != null)
      Log.error("BehaviorTree is already running!")
      return

    switch (priority)
      case BehaviorTreeExecutionPriority.LOW
        _runner = g_lowPriorityRunner
      case BehaviorTreeExecutionPriority.HIGH
        _runner = g_highPriorityRunner
      case BehaviorTreeExecutionPriority.REALTIME
        _runner = g_realtimePriorityRunner

    _context = context
    _runner.register(this)
    _isRunning = true

  // --------------------------------------------------------------------------
  override function resume()
    if (not _isRunning)
      _isRunning = true
      _runner.register(this)

  // --------------------------------------------------------------------------
  override function pause()
    if (_isRunning)
      _isRunning = false
      _runner.unregister(this)

  // --------------------------------------------------------------------------
  override function stop()
    if (_isRunning)
      _isRunning = false
      _runner.unregister(this)
      _runner = null
      destroy _context
      _context = null
  
  // --------------------------------------------------------------------------
  override function update()
    if (_root == null)
      Log.error("Trying to call update() on a BehaviorTree with no root")
      return

    if (_isRunning == false)
      Log.error("Must start the BehaviorTree before calling update()")
      return

    let state = _root.update(_context)

    if (not (state == BehaviorState.RUNNING))
      stop()

// ============================================================================
public class BehaviorTreeContext implements IBehaviorTreeContext
  Table _table
  SmartUnit _unit

  // --------------------------------------------------------------------------
  construct(SmartUnit u)
    _unit = u
    _table = new Table()

  // --------------------------------------------------------------------------
  ondestroy
    destroy _table
    _unit = null

  // --------------------------------------------------------------------------
  override function getUnit() returns SmartUnit
    return _unit

  // --------------------------------------------------------------------------
  override function getTable() returns Table
    return _table

// ============================================================================
public abstract class BehaviorBase implements IBehavior
  private bool _isRunning

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(BehaviorBase _other)
    skip

  // --------------------------------------------------------------------------
  abstract function getName() returns string

  // --------------------------------------------------------------------------
  override function update(IBehaviorTreeContext context) returns BehaviorState
    if (not _isRunning)
      _isRunning = true
      Log.info(getName() + "::onEnter")
      onEnter(context)

    let state = onUpdate(context)

    if (state == BehaviorState.SUCCESS)
      Log.info(getName() + "::SUCCESS")
    if (state == BehaviorState.FAILURE)
      Log.info(getName() + "::FAILURE")

    if (not (state == BehaviorState.RUNNING))
      _isRunning = false
      Log.info(getName() + "::onExit")
      onExit(context)

    return state

  // --------------------------------------------------------------------------
  override abstract function clone() returns IBehavior

  // --------------------------------------------------------------------------
  abstract protected function onUpdate(IBehaviorTreeContext context) returns BehaviorState

  // --------------------------------------------------------------------------
  protected function onEnter(IBehaviorTreeContext _context)
    skip

  // --------------------------------------------------------------------------
  protected function onExit(IBehaviorTreeContext _context)
    skip

// ============================================================================
init
  g_lowPriorityRunner = new PeriodicBehaviorTreeRunner(3.0)
  g_highPriorityRunner = new PeriodicBehaviorTreeRunner(1.0)
  g_realtimePriorityRunner = new PeriodicBehaviorTreeRunner(0.4)