package UnitPool
import ErrorHandling
import HashMap

constant int UNIT_POOL_CAPACITY = 512

HashMap<int, UnitPool> g_unitIdToPoolMap
HashMap<unit, UnitPool> g_unitToPoolMap

// ============================================================================
public class UnitPool
  private unit array[UNIT_POOL_CAPACITY] _units
  private bool array[UNIT_POOL_CAPACITY] _active
  private int _unitId
  private int _numberOfUnits
  private int _numberOfActive
  private int _lastDeactivatedIndex

  // --------------------------------------------------------------------------
  construct(int unitId)
    _unitId = unitId
    g_unitIdToPoolMap.put(unitId, this)

  // --------------------------------------------------------------------------
  ondestroy
    for i = 0 to _numberOfUnits
      _units[i].remove()
      _units[i] = null
    g_unitIdToPoolMap.remove(_unitId)

  // --------------------------------------------------------------------------
  function createUnit(player owner, vec2 pos, angle facingAngle) returns unit
    var u = getInactiveUnit()
    
    if (u == null)
      u = createUnitInternal(owner, pos, facingAngle)
    else
      u.setOwner(owner, true)
      u.setPos(pos)
      u.setFacing(facingAngle)

    onActivated(u)
    return u

  // --------------------------------------------------------------------------
  function release(unit u)
    for i = 0 to _numberOfUnits
      if (_units[i] == u)
        _active[i] = false
        _lastDeactivatedIndex = i
        onDeactivated(u)
        return
    error("[UnitPool(" + I2S(_unitId) + ")] Trying to release unit that does not belong to pool")

  // --------------------------------------------------------------------------
  protected function onActivated(unit u)
    _numberOfActive++
    u.unpause()
    u.show()

  // --------------------------------------------------------------------------
  protected function onDeactivated(unit u)
    _numberOfActive--
    u.pause()
    u.hide()

  // --------------------------------------------------------------------------
  private function getInactiveUnit() returns unit
    // Early out since all units are active
    if (_numberOfActive == _numberOfUnits)
      return null
    
    // Maybe the last deactivated unit is still available?
    if (_lastDeactivatedIndex != -1)
      if (not _active[_lastDeactivatedIndex])
        return _units[_lastDeactivatedIndex]
      _lastDeactivatedIndex = -1

    // Do a shitty O-N search for the first inactive unit
    for i = 0 to _numberOfUnits
      if (not _active[i])
        _active[i] = true
        return _units[i]
        
    return null

  // --------------------------------------------------------------------------
  private function createUnitInternal(player owner, vec2 pos, angle facingAngle) returns unit
    if (_numberOfUnits == UNIT_POOL_CAPACITY)
      error("[UnitPool(" + I2S(_unitId) + ")] Pool has exceeded capacity!")
      return null

    let u = CreateUnit(owner, _unitId, pos.x, pos.y, facingAngle.radians)
    u.setUserData(this castTo int)

    _numberOfUnits++
    return u

// ============================================================================
public function createUnitPooled(player owner, int unitId, vec2 pos, angle facing) returns unit
  var pool = getUnitPool(unitId)
  if (pool == null)
    pool = new UnitPool(unitId)
  let u = pool.createUnit(owner, pos, facing)
  g_unitToPoolMap.put(u, pool)
  return u

// ============================================================================
public function unit.isPooled() returns bool
  return this.getOwningPool() != null

// ============================================================================
public function unit.getOwningPool() returns UnitPool
  return g_unitToPoolMap.get(this)

// ============================================================================
public function unit.release()
  let pool = this.getOwningPool()
  if (pool != null)
    pool.release(this)
  else
    error("Trying to release a unit that does not belong to a pool")

// ============================================================================
function getUnitPool(int unitId) returns UnitPool
  return g_unitIdToPoolMap.get(unitId)

// ============================================================================
init
  g_unitIdToPoolMap = new HashMap<int, UnitPool>()
  g_unitToPoolMap = new HashMap<unit, UnitPool>()