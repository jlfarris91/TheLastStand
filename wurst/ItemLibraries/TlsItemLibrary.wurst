package TlsItemLibrary
import Math
import ItemSet
import WeightedItemSetSet
import ItemSetLibrary
import ItemType
import ErrorHandling
import RealExtensions

public tuple itemChances(real common, real rare, real epic, real legendary)

// ============================================================================
public function itemChances.toString() returns string
  return "[c:{0} r:{1} e:{2} l:{3}]".format(
    this.getCommonChance().toPercentageString01(),
    this.getRareChance().toPercentageString01(),
    this.getEpicChance().toPercentageString01(),
    this.getLegendaryChance().toPercentageString01())

// ============================================================================
public function itemChances.getTotal() returns real
  return this.common + this.rare + this.epic + this.legendary

// ============================================================================
public function itemChances.getCommonChance() returns real
  let total = this.getTotal()
  return this.common / (total != 0.0 ? total : 1.0)

// ============================================================================
public function itemChances.getRareChance() returns real
  let total = this.getTotal()
  return this.rare / (total != 0.0 ? total : 1.0)

// ============================================================================
public function itemChances.getEpicChance() returns real
  let total = this.getTotal()
  return this.epic / (total != 0.0 ? total : 1.0)

// ============================================================================
public function itemChances.getLegendaryChance() returns real
  let total = this.getTotal()
  return this.legendary / (total != 0.0 ? total : 1.0)

// ============================================================================
public function lerp(itemChances start, itemChances _end, real t) returns itemChances
  return itemChances(
    lerp(start.common, _end.common, t),
    lerp(start.rare, _end.rare, t),
    lerp(start.epic, _end.epic, t),
    lerp(start.legendary, _end.legendary, t))

// ============================================================================
public class TlsItemSetLibrary extends ItemSetLibrary
  ItemSet commonSet
  ItemSet rareSet
  ItemSet epicSet
  ItemSet legendarySet
  ItemSet questSet

  // --------------------------------------------------------------------------
  construct()
    commonSet = new ItemSet()
    rareSet = new ItemSet()
    epicSet = new ItemSet()
    legendarySet = new ItemSet()
    questSet = new ItemSet()

    add(commonSet, 1)
    add(rareSet, 1)
    add(epicSet, 1)
    add(legendarySet, 1)

  // --------------------------------------------------------------------------
  function getRandomItemSet(itemChances chances) returns ItemSet
    let tempSet = new WeightedItemSetSet()

    if (not commonSet.isEmpty())
      tempSet.add(commonSet, chances.common)
    if (not rareSet.isEmpty())
      tempSet.add(rareSet, chances.rare)
    if (not epicSet.isEmpty())
      tempSet.add(epicSet, chances.epic)
    if (not legendarySet.isEmpty())
      tempSet.add(legendarySet, chances.legendary)

    ItemSet selectedItemSet = null
    if (not tempSet.isEmpty())
      selectedItemSet = tempSet.getRandom()
      if (selectedItemSet == null)
        error("Failed to select a random item set")
    else
      error("tempSet is empty")

    if (selectedItemSet == null)
      error("selectedItemSet is null")

    destroy tempSet
    return selectedItemSet

  // --------------------------------------------------------------------------
  function getRandomItemType(itemChances chances) returns ItemType
    let itemSet = this.getRandomItemSet(chances)
    if (itemSet == null)
      error("Item set is null")
    let itemTypeId = itemSet.getRandom()
    if (itemTypeId == 0)
      error("Item type id is 0")
    let itemType = ItemType.getItemType(itemTypeId)
    if (itemType == null)
      error("ItemType is null for item of type id " + itemTypeId.toString())
    return itemType

  // --------------------------------------------------------------------------
  function createRandomItem(vec2 pos, itemChances chances) returns item
    let itemSet = this.getRandomItemSet(chances)
    if (itemSet == null)
      error("No item set found")
    let itm = itemSet.createRandomItem(pos)
    if (itm == null or itm.getTypeId() == 0)
      error("No item was created")
    return itm

  // --------------------------------------------------------------------------
  function giveRandomItemToUnit(unit u, itemChances chances) returns item
    let itm = this.createRandomItem(u.getPos(), chances)
    if (itm == null or itm.getTypeId() == 0)
      error("No item was created")
    UnitAddItem(u, itm)
    return itm

  // --------------------------------------------------------------------------
  function getOwningSet(int itemTypeId) returns ItemSet
    if (commonSet.has(itemTypeId))
      return commonSet
    if (rareSet.has(itemTypeId))
      return rareSet
    if (epicSet.has(itemTypeId))
      return epicSet
    if (legendarySet.has(itemTypeId))
      return legendarySet
    if (questSet.has(itemTypeId))
      return questSet
    return null