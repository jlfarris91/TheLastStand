package SurvivorJobFrame
import TLSFrame
import ClosureTimers
import ClosureFrames
import LinkedList
import SurvivorJobs
import HashMap
import UnitMetadata
import SurvivorComponent
import SurvivorJobData
import SurvivorUnit
import TlsUnitDefinition
import GroupUtils
import TlsItemDefinition
import StandardTooltip
import ColorUtility
import StackPanelLayout
import WrapPanelLayout

enum EnabledState
  DISABLED
  ENABLED
  ACTIVE

constant string UNKNOWN_JOB_ICON_PATH = "ui\\widgets\\escmenu\\human\\quest-unknown.dds"
SurvivorJobPanel g_survivorJobPanel

// ============================================================================
public class SurvivorJobFrame extends TLSFrame
  private framehandle m_mainButtonIcon
  private framehandle m_itemButton
  private framehandle m_itemButtonIcon
  private framehandle m_levelText
  private framehandle m_activeIcon

  private string m_iconPath
  private int m_level
  private EnabledState m_enabledState
  private bool m_isHovered
  private bool m_isIndeterminate
  private string m_itemIconPath
  private bool m_itemIconVisible
  private string m_jobTitle
  private string m_jobTooltip
  private string m_itemName

  // --------------------------------------------------------------------------
  construct()
    super("SurvivorJobFrame", GAME_UI)

    m_iconPath = UNKNOWN_JOB_ICON_PATH
    m_level = 1
    m_enabledState = EnabledState.DISABLED

  // --------------------------------------------------------------------------
  function getIconPath() returns string
    return m_iconPath
  
  // --------------------------------------------------------------------------
  function setIconPath(string value)
    if (m_iconPath != value)
      m_iconPath = value
      updateIconFrame()

  // --------------------------------------------------------------------------
  function getItemIconPath() returns string
    return m_itemIconPath
  
  // --------------------------------------------------------------------------
  function setItemIconPath(string value)
    if (m_itemIconPath != value)
      m_itemIconPath = value
      updateItemIconFrame()

  // --------------------------------------------------------------------------
  function getItemIconVisible() returns bool
    return m_itemIconVisible
  
  // --------------------------------------------------------------------------
  function setItemIconVisible(bool value)
    if (m_itemIconVisible != value)
      m_itemIconVisible = value
      updateItemIconFrame()

  // --------------------------------------------------------------------------
  function getLevel() returns int
    return m_level

  // --------------------------------------------------------------------------
  function setLevel(int value)
    if (m_level != value)
      m_level = value
      updateLevelTextFrame()

  // --------------------------------------------------------------------------
  function getIsIndeterminate() returns bool
    return m_isIndeterminate

  // --------------------------------------------------------------------------
  function setIsIndeterminate(bool value)
    if (m_isIndeterminate != value)
      m_isIndeterminate = value
      updateLevelTextFrame()

  // --------------------------------------------------------------------------
  function setEnabledState(EnabledState value)
    if (m_enabledState != value)
      m_enabledState = value
      updateActiveFrame()
      updateIconFrame()
  
  // --------------------------------------------------------------------------
  function getEnabledState() returns EnabledState
    return m_enabledState

  // --------------------------------------------------------------------------
  function setJobTitle(string value)
    m_jobTitle = value

  // --------------------------------------------------------------------------
  function getJobTitle() returns string
    return m_jobTitle

  // --------------------------------------------------------------------------
  function setJobTooltip(string value)
    m_jobTooltip = value

  // --------------------------------------------------------------------------
  function getJobTooltip() returns string
    return m_jobTooltip

  // --------------------------------------------------------------------------
  function setItemName(string value)
    m_itemName = value

  // --------------------------------------------------------------------------
  function getItemName() returns string
    return m_itemName

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()
  
    let frame = getFrameHandle()

    let mainButton = getFrame("MainButton", 0)..setLevel(3)
    m_mainButtonIcon = getFrame("MainButtonIcon", 0)
    m_activeIcon = getFrame("ActiveIcon", 0)..setLevel(4)
    m_itemButton = getFrame("ItemButton", 0)..setLevel(5)
    m_itemButtonIcon = getFrame("ItemButtonIcon", 0)
    getFrame("LevelBackdrop", 0)..setLevel(5)
    m_levelText = getFrame("LevelText", 0)..setLevel(6)

    mainButton.onMouseEnter() -> 
      m_isHovered = true
      Log.info("Icon mouse enter")
      showJobTooltip()
      updateActiveFrame()

    mainButton.onMouseLeave() -> 
      m_isHovered = false
      Log.info("Icon mouse leave")
      StandardTooltip.hide(getPlayer())
      updateActiveFrame()

    mainButton.onClick() -> 
      Log.info("Icon mouse click")

    m_itemButton.onMouseEnter() -> 
      Log.info("Item icon mouse enter")
      showItemTooltip()
      updateActiveFrame()

    m_itemButton.onMouseLeave() -> 
      Log.info("Item icon mouse leave")
      StandardTooltip.hide(getPlayer())
      updateActiveFrame()

    m_itemButton.onClick() -> 
      Log.info("Item icon mouse click")

    updateIconFrame()
    updateLevelTextFrame()
    updateActiveFrame()
    updateItemIconFrame()

    frame.hide()

  // --------------------------------------------------------------------------
  private function showJobTooltip()
    var title = m_jobTitle
    switch (m_enabledState)
      case DISABLED
        if (m_itemName != null)
          title = "{0} - {1}".format(m_jobTitle, "Requires {0}".format(m_itemName).colorize(Colors.gold))
      case ENABLED
        title = "{0} - {1}".format(m_jobTitle, "Click to Assign Job".colorize(Colors.gold))
      case ACTIVE
        title = "{0} - {1}".format(m_jobTitle, "Click to Unassign Job".colorize(Colors.gold))
    StandardTooltip.show(title, m_jobTooltip, getPlayer())

  // --------------------------------------------------------------------------
  private function showItemTooltip()
    let title = "{0} - {1}".format(m_itemName, "Click to Unequip Item".colorize(Colors.gold))
    let tooltip = "With the {0} item equipped a Survivor can be assigned the {1} job".format(m_itemName, m_jobTitle)
    StandardTooltip.show(title, tooltip, getPlayer())

  // --------------------------------------------------------------------------
  private function updateIconFrame()
    if (m_mainButtonIcon != null)
      m_mainButtonIcon.setTexture(m_iconPath, 0, true)

  // --------------------------------------------------------------------------
  private function updateItemIconFrame()
    if (m_itemButtonIcon != null)
      m_itemButtonIcon.setTexture(m_itemIconPath, 0, true)
    if (m_itemButton != null)
      m_itemButton.setVisible(m_itemIconVisible)

  // --------------------------------------------------------------------------
  private function updateLevelTextFrame()
    if (m_levelText != null)
      m_levelText.setText(m_isIndeterminate ? "-" : m_level.toString())

  // --------------------------------------------------------------------------
  private function updateActiveFrame()
    if (m_activeIcon != null)
      m_activeIcon.setVisible(
        m_enabledState == EnabledState.ACTIVE or 
        (m_enabledState == EnabledState.ENABLED and m_isHovered))

// ============================================================================
public class SurvivorJobPanel extends TLSFrame
  private IterableMap<SurvivorJobDefinition, SurvivorJobFrame> m_jobDefToFrameMap

  // --------------------------------------------------------------------------
  construct()
    super("SurvivorJobPanel", GAME_UI)
    m_jobDefToFrameMap = new IterableMap<SurvivorJobDefinition, SurvivorJobFrame>()

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    let panel = getFrameHandle()
    panel.setAbsPoint(FRAMEPOINT_BOTTOMLEFT, 0.22, 0.14)
    panel.setAbsPoint(FRAMEPOINT_BOTTOMRIGHT, 0.52, 0.14)

    let layout = new WrapPanelLayout()
    ..setOrientation(LayoutOrientation.UP)
    ..setSpacing(vec2(0.002, 0.002))
    ..layoutBegin()

    for jobDef in g_allJobDefinitions
    //{
      let jobFrame = new SurvivorJobFrame()
        ..setParent(panel)
        ..setPlayer(getPlayer())
        ..show()
        
      let jobItemDef = getItemDefinition(jobDef.getItemType())
      if (jobItemDef != null)
        jobFrame.setItemIconPath(jobItemDef.getInterfaceIcon())
        jobFrame.setItemName(jobItemDef.getName())

      m_jobDefToFrameMap.put(jobDef, jobFrame)
      layout.layoutNextFrame(jobFrame.getFrameHandle(), panel)
    //}

    layout.layoutEnd()
    destroy layout

  // --------------------------------------------------------------------------
  override function setPlayer(player value)
    super.setPlayer(value)

    for key in m_jobDefToFrameMap
      m_jobDefToFrameMap.get(key).setPlayer(value)

  // --------------------------------------------------------------------------
  function update()
    let selectedUnits = getGroup()
    selectedUnits.enumUnitsSelected(getPlayer(), null)
    for jobDef in g_allJobDefinitions
      updateJobFrame(jobDef, selectedUnits)
    selectedUnits.release()

  // --------------------------------------------------------------------------
  private function updateJobFrame(SurvivorJobDefinition jobDef, group units)

    let jobFrame = m_jobDefToFrameMap.get(jobDef)

    var enabledState = EnabledState.DISABLED
    var level = 1
    var iconPath = UNKNOWN_JOB_ICON_PATH
    var highestTier = -1
    var indeterminate = false
    var itemIconVisible = false
    var jobTitle = ""
    var jobTooltip = ""

    if (true or jobDef.getIsJobKnownToPlayer(getPlayer()))
    //{

      // Set the initial icon path
      let initialUnitDef = getUnitDefinition(jobDef.getInitialUnitType())
      iconPath = initialUnitDef.getIconGameInterface()
      jobTitle = initialUnitDef.getName()
      jobTooltip = initialUnitDef.getTooltipExtended()

      for _unit in units
      //{
        let survivor = _unit.getMetadata() castTo Survivor
        if (survivor != null)
        //{
          let survivorComp = survivor.getSurvivorComponent()
          if (survivorComp != null)
          //{
            let survivorData = survivorComp.getSurvivorData()
            let jobData = survivorData.getJobData(jobDef)

            // If this is the active job then use the unit's current level
            var jobLevel = jobData.getLevel()
            if (survivor.getActiveJobDefinition() == jobDef)
              jobLevel = _unit.getLevel()
            
            if (level != jobLevel)
              if (level != 1)
                indeterminate = true
              level = jobLevel

            if (jobData.getIsEnabled())
              itemIconVisible = true

            if (survivor.getActiveJobDefinition() == jobDef)
              enabledState = EnabledState.ACTIVE

            let tier = jobDef.getUpgradeTier(_unit.getTypeId())
            if (tier > highestTier)
              highestTier = tier
              let unitDef = getUnitDefinition(_unit.getTypeId())
              iconPath = unitDef.getIconGameInterface()
              jobTitle = unitDef.getName()
              jobTooltip = unitDef.getTooltipExtended()
          //}
        //}
      //}
    //}

    jobFrame.setLevel(level)
    jobFrame.setIconPath(iconPath)
    jobFrame.setIsIndeterminate(indeterminate)
    jobFrame.setEnabledState(enabledState)
    jobFrame.setItemIconVisible(itemIconVisible)
    jobFrame.setJobTitle(jobTitle)
    jobFrame.setJobTooltip(jobTooltip)

trigger g_selectionChangedEvent

// ============================================================================
function onSelectionChanged()
  // let p = GetTriggerPlayer()
  nullTimer(() -> g_survivorJobPanel.update())

// ============================================================================
init

  doAfter(1.0) () ->
    g_survivorJobPanel = new SurvivorJobPanel()
      ..setPlayer(Player(0))
      ..show()
    
    doPeriodically(0.1) (CallbackPeriodic cb) ->
      g_survivorJobPanel.update()
  
  g_selectionChangedEvent = CreateTrigger()
  g_selectionChangedEvent.addCondition(Condition(function onSelectionChanged))
  TriggerRegisterPlayerUnitEvent(g_selectionChangedEvent, Player(0), EVENT_PLAYER_UNIT_SELECTED, null)
  TriggerRegisterPlayerUnitEvent(g_selectionChangedEvent, Player(0), EVENT_PLAYER_UNIT_DESELECTED, null)
    