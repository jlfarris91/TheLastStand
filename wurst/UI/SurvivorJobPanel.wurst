package SurvivorJobPanel
import Frame
import ClosureTimers
import SurvivorJobs
import HashMap
import SurvivorComponent
import TlsUnitDefinition
import SurvivorJobFrame
import HumanPlayers
import LoadToc
import SurvivorJobComponent
import ClosureKeyPresses
import Survivors
import TlsItemDefinition
import StackPanel
import Layout
import BitSet
import Vector
import RealtimeUpdate
import SyncSimpleExtensions

constant rectr PANEL_AREA = rectr(0.21, 0.14, REAL_MAX, 0.035 + 0.004 /* frame height + panel margin */)

HashMap<player, SurvivorJobPanel> g_playerSurvivorJobPanels = new HashMap<player, SurvivorJobPanel>()
SurvivorJobFrameUpdateData array[g_survivorJobCount] g_survivorJobFrameUpdateData
boolexpr g_selectedUnitsFilter = Condition(function filterEnumSelectedUnits)

tuple unitData(unit _unit, bool allied, SurvivorComponent survivorComp, SurvivorJobDefinition activeJobDef)

// ============================================================================
public function getSurvivorJobPanel(player _player) returns SurvivorJobPanel
  return g_playerSurvivorJobPanels.get(_player)

// ============================================================================
class SurvivorJobFrameUpdateData
  SurvivorJobDefinition m_job
  SurvivorJobFrameEnabledState m_enabledState = DISABLED
  string m_iconPath = UNKNOWN_JOB_ICON_PATH
  string m_iconPathDisabled = UNKNOWN_JOB_ICON_PATH
  int m_highestTier = -1
  string m_jobTitle = ""
  string m_jobTooltip = ""
  int m_numberOfUnits

  // --------------------------------------------------------------------------
  construct (SurvivorJobDefinition job)
    m_job = job

  // --------------------------------------------------------------------------
  function reset(bool isJobKnownToPlayer)
    m_enabledState = DISABLED
    m_iconPath = UNKNOWN_JOB_ICON_PATH
    m_iconPathDisabled = UNKNOWN_JOB_ICON_PATH
    m_highestTier = -1
    m_jobTitle = ""
    m_jobTooltip = ""
    m_numberOfUnits = 0

    if (isJobKnownToPlayer)
      let initialUnitDef = getUnitDefinition(m_job.getInitialUnitType())
      m_iconPath = initialUnitDef.getIconGameInterface()
      m_iconPathDisabled = initialUnitDef.getIconGameInterfaceDisabled()
      m_jobTitle = initialUnitDef.getName()
      m_jobTooltip = initialUnitDef.getTooltipExtended()

  // --------------------------------------------------------------------------
  function addUnit(unitData unitData)

    let jobComponent = unitData.survivorComp.getJobComponent(m_job.getType())
    if (jobComponent == null)
      return

    let unitId = jobComponent.getUnitId()
    let isAssigned = unitData.survivorComp.getChangingJobs() or jobComponent.getIsAssigned()

    m_numberOfUnits++

    if (unitData.activeJobDef == m_job)
      m_enabledState = ACTIVE
    else if (isAssigned and m_enabledState == DISABLED)
      m_enabledState = ENABLED

    let tier = m_job.getUpgradeTier(unitId)
    if (tier > m_highestTier)
      m_highestTier = tier
      let unitDef = getUnitDefinition(unitId)
      m_iconPath = unitDef.getIconGameInterface()
      m_iconPathDisabled = unitDef.getIconGameInterfaceDisabled()
      m_jobTitle = unitDef.getName()
      m_jobTooltip = unitDef.getTooltipExtended()

  // --------------------------------------------------------------------------
  function updateFrame(SurvivorJobFrame frame)
    frame.setIconPath(m_iconPath)
    frame.setIconPathDisabled(m_iconPathDisabled)
    frame.setEnabledState(m_enabledState)
    frame.setJobTitle(m_jobTitle)
    frame.setJobTooltip(m_jobTooltip)

player g_currentPlayer

// ============================================================================
function filterEnumSelectedUnits() returns bool
  let u = GetFilterUnit()
  if (u.isSurvivor() == false)
    return false
  let comp = u.getSurvivorComponent()
  return comp != null and comp.getEnabled()

// ============================================================================
public class SurvivorJobPanel extends StackPanel implements IRealtimeListener
  private SurvivorJobFrame array[g_survivorJobCount] m_frames
  private group m_selectedUnits = CreateGroup()

  // Max number that can be selected at a time is 12
  private unitData array[12] m_selectedUnitData
  private int m_numSelectedUnits = 0
  private Vector<int> array[g_survivorJobCount] m_survivorsGroupedByJob

  // --------------------------------------------------------------------------
  construct(player _player)
    super("SJP")

    setPlayer(_player)

    setOrientation(LayoutOrientation.LEFTTORIGHT)
    setVerticalAlignment(VerticalLayoutMode.CENTER)

    for i = 0 to SurvivorJobs.count - 1
    //{
      let jobDef = SurvivorJobs.allJobDefinitions[i]

      let jobFrame = new SurvivorJobFrame(_player)
        ..setMargin(thickness(0.002))
        ..setJobDef(jobDef.getType())
        ..hide()

      addChild(jobFrame)
        
      let jobItemDef = getItemDefinition(jobDef.getItemType())
      if (jobItemDef != null)
        jobFrame.setItemName(jobItemDef.getName())

      m_frames[i] = jobFrame

      m_survivorsGroupedByJob[i] = new Vector<int>(12)
    //}
    
    this.registerForRealtimeUpdate(RealtimeUpdatePriority.Fast)

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real _)
    update_impl()

  // --------------------------------------------------------------------------
  private function update_impl()

    m_selectedUnits.enumUnitsSelected(getPlayer(), g_selectedUnitsFilter)
    m_numSelectedUnits = m_selectedUnits.size()

    let _player = getPlayer()

    for i = 0 to SurvivorJobs.count - 1
      m_survivorsGroupedByJob[i].clear()

    for i = 0 to m_numSelectedUnits - 1
    //{
      let _unit = m_selectedUnits.getUnitAt(i)
      let owner = _unit.getOwner()
      let allied = owner == _player or owner.isAllyOf(_player)

      m_selectedUnitData[i]._unit = _unit

      let survivorComp = _unit.getSurvivorComponent()

      m_selectedUnitData[i].survivorComp = survivorComp
      m_selectedUnitData[i].activeJobDef = null

      if (survivorComp != null and allied)
      //{
        m_selectedUnitData[i].activeJobDef = SurvivorJobs.getJobDefinition(survivorComp.getChangingJobs() ? survivorComp.getLastActiveJob() : survivorComp.getActiveJob())
        if (m_selectedUnitData[i].activeJobDef != null)
          let assignedJobs = survivorComp.getAssignedJobs()
          for j = 0 to g_survivorJobCount-1
            if (assignedJobs.get(j))
              m_survivorsGroupedByJob[j].add(i)
      //}
    //}

    for i = 0 to SurvivorJobs.count - 1
      updateJobFrame(_player, SurvivorJobs.allJobDefinitions[i])

  // --------------------------------------------------------------------------
  private function updateJobFrame(player _player, SurvivorJobDefinition jobDef) returns bool
    let jobId = jobDef.getType() castTo int
    let jobFrame = m_frames[jobId]
    let isJobKnown = true or jobDef.getIsJobKnownToPlayer(_player)
    let updateData = g_survivorJobFrameUpdateData[jobId]
    let survivors = m_survivorsGroupedByJob[jobId]

    updateData.reset(isJobKnown)

    if (isJobKnown and not survivors.isEmpty())
    //{
      let iter = survivors.staticItr()
      iter.reset()
      while iter.hasNext()
        updateData.addUnit(m_selectedUnitData[iter.next()])
      iter.close()        
    //}

    updateData.updateFrame(jobFrame)

    return updateData.m_enabledState != SurvivorJobFrameEnabledState.DISABLED

// ============================================================================
// When a player that owns a survivor panel frame presses the Z key
// we want to order that player's selected units to switch jobs. However,
// key presses are local-only events and so we need to synchronize the
// event with all other players first. See SyncSimple for more details.
timer array g_toggleJobKeyPressedTimer
function onToggleJobKeyPressed_ASYNC()
  let keyPressingPlayer = GetTriggerPlayer()

  let jobPanel = getSurvivorJobPanel(keyPressingPlayer)
  if (jobPanel == null or not jobPanel.isVisible())
    return

  // Only allowed to read here since this function is executed asynchronously
  if (g_toggleJobKeyPressedTimer[keyPressingPlayer.getId()] != null and
      g_toggleJobKeyPressedTimer[keyPressingPlayer.getId()].getRemaining() > 0)
    return

  keyPressingPlayer.sync() (p) ->
  //{
    var t = g_toggleJobKeyPressedTimer[p.getId()]

    if (t == null)
      t = CreateTimer()
      g_toggleJobKeyPressedTimer[p.getId()] = t

    if (t.getRemaining() == 0)
      SurvivorUtility.orderSelectedUnitsToToggleActivateJob(p)
      t.start(0.1, null)
  //}

// ============================================================================
init
  ensureTocIsLoaded()

  for i = 0 to SurvivorJobs.count - 1
    g_survivorJobFrameUpdateData[i] = new SurvivorJobFrameUpdateData(SurvivorJobs.allJobDefinitions[i])

  nullTimer() () ->
    for _player in g_PlayingHumanPlayers
      let survivorJobPanel = new SurvivorJobPanel(_player)
      ..setAbsArea(FRAMEPOINT_BOTTOMLEFT, PANEL_AREA) // TODO: set max to 0.3 once max size is implemented
      ..showOnly(_player)
      g_playerSurvivorJobPanels.put(_player, survivorJobPanel)

  onKeyPress(OSKEY_Z, OSKEY_META.CTRL, () -> onToggleJobKeyPressed_ASYNC())
