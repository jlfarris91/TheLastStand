package SurvivorJobPanel
import TLSFrame
import ClosureTimers
import LinkedList
import SurvivorJobs
import HashMap
import SurvivorComponent
import TlsUnitDefinition
import GroupUtils
import StackPanelLayout
import WrapPanelLayout
import SurvivorJobFrame
import HumanPlayers
import LoadToc
import RegisterEvents
import UnitExtensions
import HashList
import SurvivorJobComponent
import ClosureKeyPresses
import Survivors
import TlsItemDefinition

HashMap<player, SurvivorJobPanel> g_playerSurvivorJobPanels = new HashMap<player, SurvivorJobPanel>()
HashList<unit> g_wasSelected = new HashList<unit>()
HashList<unit> g_waitingToBeSelected = new HashList<unit>()
HashMap<SurvivorJobDefinition, SurvivorJobFrameUpdateData> g_survivorJobFrameUpdateDataMap = new HashMap<SurvivorJobDefinition, SurvivorJobFrameUpdateData>()

// ============================================================================
public function getSurvivorJobPanel(player _player) returns SurvivorJobPanel
  return g_playerSurvivorJobPanels.get(_player)

// ============================================================================
class SurvivorJobFrameUpdateData
  private SurvivorJobDefinition m_job
  private SurvivorJobFrameEnabledState m_enabledState = DISABLED
  private int m_level = 1
  private bool m_levelTextVisible = true
  private string m_iconPath = UNKNOWN_JOB_ICON_PATH
  private string m_iconPathDisabled = UNKNOWN_JOB_ICON_PATH
  private int m_highestTier = -1
  private bool m_indeterminate = false
  private string m_jobTitle = ""
  private string m_jobTooltip = ""
  private int m_numberOfUnits

  // --------------------------------------------------------------------------
  construct (SurvivorJobDefinition job)
    m_job = job

  // --------------------------------------------------------------------------
  function reset(bool isJobKnownToPlayer)
    m_enabledState = DISABLED
    m_level = 1
    m_levelTextVisible = true
    m_iconPath = UNKNOWN_JOB_ICON_PATH
    m_iconPathDisabled = UNKNOWN_JOB_ICON_PATH
    m_highestTier = -1
    m_indeterminate = false
    m_jobTitle = ""
    m_jobTooltip = ""
    m_numberOfUnits = 0

    if (isJobKnownToPlayer)
      let initialUnitDef = getUnitDefinition(m_job.getInitialUnitType())
      m_iconPath = initialUnitDef.getIconGameInterface()
      m_iconPathDisabled = initialUnitDef.getIconGameInterfaceDisabled()
      m_jobTitle = initialUnitDef.getName()
      m_jobTooltip = initialUnitDef.getTooltipExtended()

  // --------------------------------------------------------------------------
  function addUnit(unit _unit)

    let survivor = _unit.getSurvivorComponent()
    if (survivor == null)
      return

    let jobComponent = survivor.getJobComponent(m_job)
    if (jobComponent == null)
      return

    let activeJob = survivor.getActiveJob()
    let isAssigned = jobComponent.getIsAssigned()

    m_numberOfUnits++

    // If this is the active job then use the unit's current level
    var jobLevel = jobComponent.getLevel()
    if (activeJob == m_job)
      jobLevel = _unit.getLevel()
    
    if (m_level != jobLevel)
      if (m_numberOfUnits > 1)
        m_indeterminate = true
      m_level = jobLevel

    if (activeJob == m_job)
      m_enabledState = ACTIVE
    else if (isAssigned and m_enabledState == DISABLED)
      m_enabledState = ENABLED

    let tier = m_job.getUpgradeTier(_unit.getTypeId())
    if (tier > m_highestTier)
      m_highestTier = tier
      let unitDef = getUnitDefinition(_unit.getTypeId())
      m_iconPath = unitDef.getIconGameInterface()
      m_iconPathDisabled = unitDef.getIconGameInterfaceDisabled()
      m_jobTitle = unitDef.getName()
      m_jobTooltip = unitDef.getTooltipExtended()

  // --------------------------------------------------------------------------
  function updateFrame(SurvivorJobFrame frame)
    frame.setLevel(m_level)
    frame.setLevelTextVisible(m_levelTextVisible)
    frame.setIconPath(m_iconPath)
    frame.setIconPathDisabled(m_iconPathDisabled)
    frame.setIsIndeterminate(m_indeterminate)
    frame.setEnabledState(m_enabledState)
    frame.setJobTitle(m_jobTitle)
    frame.setJobTooltip(m_jobTooltip)

// ============================================================================
public class SurvivorJobPanel extends TLSFrame
  private IterableMap<SurvivorJobDefinition, SurvivorJobFrame> m_jobDefToFrameMap
  private int m_ignoreUpdates
  private int m_awaitingUpdate

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "SurvivorJobPanel", GAME_UI, "", 0))
    m_jobDefToFrameMap = new IterableMap<SurvivorJobDefinition, SurvivorJobFrame>()

  // --------------------------------------------------------------------------
  function batchUpdates(bool value)
    m_ignoreUpdates += value ? 1 : -1
    if (m_ignoreUpdates == 0)
      update()

  // --------------------------------------------------------------------------
  function getIsBatchingUpdates() returns bool
    return m_ignoreUpdates > 0

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    let panel = getFrameHandle()
    panel.setAbsPoint(FRAMEPOINT_BOTTOMLEFT, 0.21, 0.14)
    panel.setSize(0.3, 0.35)

    for jobDef in g_allJobDefinitions
    //{
      let jobFrame = new SurvivorJobFrame()
        ..setParent(panel)
        ..setPlayer(getPlayer())
        ..setJobDef(jobDef)
        ..initialize()
        ..hide()
        
      let jobItemDef = getItemDefinition(jobDef.getItemType())
      if (jobItemDef != null)
        jobFrame.setItemName(jobItemDef.getName())

      m_jobDefToFrameMap.put(jobDef, jobFrame)
    //}

    invalidateLayout()

    let panelPlayer = getPlayer()
    onKeyPress(getPlayer(), OSKEY_Z) () ->
      if (getFrameHandle().isVisible() and getFrameHandle().isEnabled())
        SurvivorUtility.orderSelectedUnitsToToggleActivateJob(panelPlayer)

  // --------------------------------------------------------------------------
  override function setPlayer(player value)
    super.setPlayer(value)
    for key in m_jobDefToFrameMap
      m_jobDefToFrameMap.get(key).setPlayer(value)

  // --------------------------------------------------------------------------
  function getJobFrame(SurvivorJobDefinition jobDef) returns SurvivorJobFrame
    return m_jobDefToFrameMap.get(jobDef)

  // --------------------------------------------------------------------------
  function update()
    if (getIsBatchingUpdates())
      return
    m_awaitingUpdate++
    nullTimer() () ->
      m_awaitingUpdate--
      if (m_awaitingUpdate == 0)
        update_impl()

  // --------------------------------------------------------------------------
  private function update_impl()

    if (getIsBatchingUpdates())
      return

    let owningPlayer = getPlayer()
    var survivorCount = 0
    
    let selectedUnits = getGroup()
    selectedUnits.enumUnitsSelected(owningPlayer, null)
    
    for jobDef in g_allJobDefinitions
      updateJobFrame(jobDef, selectedUnits)
    
    for u in selectedUnits
    //{
      let unitOwner = u.getOwner()
      if ((unitOwner == owningPlayer or unitOwner.isAllyOf(owningPlayer)) and u.isSurvivor())
        survivorCount++
    //}

    selectedUnits.release()

    invalidateLayout()
    
    if (survivorCount == 0)
      hide()
    else
      show()

  // --------------------------------------------------------------------------
  function invalidateLayout()
    
    let panel = getFrameHandle()

    let layout = new WrapPanelLayout()
    ..setOrientation(LayoutOrientation.UP)
    ..setSpacing(vec2(0.002, 0.002))
    ..layoutBegin()

    for jobDef in g_allJobDefinitions
    //{
      let jobFrame = getJobFrame(jobDef)
      if (jobFrame != null and jobFrame.getEnabledState() != SurvivorJobFrameEnabledState.DISABLED)
        layout.layoutNextFrame(jobFrame.getFrameHandle(), panel)
    //}

    panel.setHeight(layout.getHeight())

    layout.layoutEnd()
    destroy layout

  // --------------------------------------------------------------------------
  private function updateJobFrame(SurvivorJobDefinition jobDef, group units)

    let jobFrame = m_jobDefToFrameMap.get(jobDef)
    if (jobFrame == null)
      return

    let panelPlayer = getPlayer()
    let isJobKnown = true or jobDef.getIsJobKnownToPlayer(panelPlayer)
    let updateData = g_survivorJobFrameUpdateDataMap.get(jobDef)

    updateData.reset(isJobKnown)

    if (isJobKnown)
    //{
      for _unit in units
        let unitOwner = _unit.getOwner()
        if (unitOwner == panelPlayer or unitOwner.isAllyOf(panelPlayer))
          updateData.addUnit(_unit)
    //}

    updateData.updateFrame(jobFrame)

// ============================================================================
function onSelectionChanged()
  let p = GetTriggerPlayer()
  let selectedUnit = GetTriggerUnit()

  let panel = g_playerSurvivorJobPanels.get(p)
  if (panel == null)
    return

  if (GetTriggerEventId() == EVENT_PLAYER_UNIT_SELECTED and g_waitingToBeSelected.has(selectedUnit))
    g_waitingToBeSelected.remove(selectedUnit)
    panel.batchUpdates(false)
    return
  
  panel.update()

// ============================================================================
function _onSurvivorJobPreChanged()
  let survivor = getJobChangingSurvivor_PreJobChange()
  let panel = g_playerSurvivorJobPanels.get(survivor.getOwner())
  if (panel == null)
    return
  panel.batchUpdates(true)

  if (survivor.isSelectedByOwner())
    g_wasSelected.add(survivor)

// ============================================================================
function _onSurvivorJobPostChanged()
  let survivorPre = getJobChangingSurvivor_PreJobChange()
  let survivorPost = getJobChangingSurvivor_PostJobChange()

  let panel = g_playerSurvivorJobPanels.get(survivorPre.getOwner())
  if (panel == null)
    return
  
  if (g_wasSelected.has(survivorPre))
    g_wasSelected.remove(survivorPre)
    g_waitingToBeSelected.add(survivorPost)
  else
    panel.batchUpdates(false)

// ============================================================================
function onUnitLeveledUp()
  let hero = GetLevelingUnit()
  let panel = g_playerSurvivorJobPanels.get(hero.getOwner())
  if (panel != null)
    panel.update()

// ============================================================================
init
  ensureTocIsLoaded()

  for job in g_allJobDefinitions
    g_survivorJobFrameUpdateDataMap.put(job, new SurvivorJobFrameUpdateData(job))

  nullTimer() () ->
    for p in g_PlayingHumanPlayers
      let survivorJobPanel = new SurvivorJobPanel()
      ..setPlayer(p)
      ..initialize()
      ..hide()
      g_playerSurvivorJobPanels.put(p, survivorJobPanel)

  for p in g_PlayingHumanPlayers
    let playerSelectionChangedTrigger = CreateTrigger()
    playerSelectionChangedTrigger.addCondition(Condition(function onSelectionChanged))
    TriggerRegisterPlayerUnitEvent(playerSelectionChangedTrigger, p, EVENT_PLAYER_UNIT_SELECTED, null)
    TriggerRegisterPlayerUnitEvent(playerSelectionChangedTrigger, p, EVENT_PLAYER_UNIT_DESELECTED, null)

  onSurvivorJobPreChanged(function _onSurvivorJobPreChanged)
  onSurvivorJobPostChanged(function _onSurvivorJobPostChanged)
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL, function onUnitLeveledUp)