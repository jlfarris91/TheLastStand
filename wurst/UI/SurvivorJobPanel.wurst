package SurvivorJobPanel
import TLSFrame
import ClosureTimers
import LinkedList
import SurvivorJobs
import HashMap
import SurvivorComponent
import TlsUnitDefinition
import StackPanelLayout
import WrapPanelLayout
import SurvivorJobFrame
import HumanPlayers
import LoadToc
import SurvivorJobComponent
import ClosureKeyPresses
import Survivors
import TlsItemDefinition
import BitSet

constant string TOGGLEJOBSYNCDATAPREFIX = "TJK"

HashMap<player, SurvivorJobPanel> g_playerSurvivorJobPanels = new HashMap<player, SurvivorJobPanel>()
HashMap<SurvivorJobDefinition, SurvivorJobFrameUpdateData> g_survivorJobFrameUpdateDataMap = new HashMap<SurvivorJobDefinition, SurvivorJobFrameUpdateData>()
group g_sharedSelectedUnitsGroup = CreateGroup()
boolexpr g_selectedUnitsFilter = Condition(function filterEnumSelectedUnits)

// ============================================================================
public function getSurvivorJobPanel(player _player) returns SurvivorJobPanel
  return g_playerSurvivorJobPanels.get(_player)

// ============================================================================
class SurvivorJobFrameUpdateData
  SurvivorJobDefinition m_job
  SurvivorJobFrameEnabledState m_enabledState = DISABLED
  int m_level = 1
  bool m_levelTextVisible = true
  string m_iconPath = UNKNOWN_JOB_ICON_PATH
  string m_iconPathDisabled = UNKNOWN_JOB_ICON_PATH
  int m_highestTier = -1
  bool m_indeterminate = false
  string m_jobTitle = ""
  string m_jobTooltip = ""
  int m_numberOfUnits

  // --------------------------------------------------------------------------
  construct (SurvivorJobDefinition job)
    m_job = job

  // --------------------------------------------------------------------------
  function reset(bool isJobKnownToPlayer)
    m_enabledState = DISABLED
    m_level = 1
    m_levelTextVisible = true
    m_iconPath = UNKNOWN_JOB_ICON_PATH
    m_iconPathDisabled = UNKNOWN_JOB_ICON_PATH
    m_highestTier = -1
    m_indeterminate = false
    m_jobTitle = ""
    m_jobTooltip = ""
    m_numberOfUnits = 0

    if (isJobKnownToPlayer)
      let initialUnitDef = getUnitDefinition(m_job.getInitialUnitType())
      m_iconPath = initialUnitDef.getIconGameInterface()
      m_iconPathDisabled = initialUnitDef.getIconGameInterfaceDisabled()
      m_jobTitle = initialUnitDef.getName()
      m_jobTooltip = initialUnitDef.getTooltipExtended()

  // --------------------------------------------------------------------------
  function addUnit(unit _unit)

    let survivor = _unit.getSurvivorComponent()
    if (survivor == null)
      return

    let jobComponent = survivor.getJobComponent(m_job)
    if (jobComponent == null)
      return

    let unitId = jobComponent.getUnitId()
    let activeJob = survivor.getChangingJobs() ? survivor.getLastActiveJob() : survivor.getActiveJob()
    let isAssigned = survivor.getChangingJobs() ? true : jobComponent.getIsAssigned()

    m_numberOfUnits++

    // If this is the active job then use the unit's current level
    var jobLevel = jobComponent.getLevel()
    if (activeJob == m_job)
      jobLevel = _unit.getLevel()
    
    if (m_level != jobLevel)
      if (m_numberOfUnits > 1)
        m_indeterminate = true
      m_level = jobLevel

    if (activeJob == m_job)
      m_enabledState = ACTIVE
    else if (isAssigned and m_enabledState == DISABLED)
      m_enabledState = ENABLED

    let tier = m_job.getUpgradeTier(unitId)
    if (tier > m_highestTier)
      m_highestTier = tier
      let unitDef = getUnitDefinition(unitId)
      m_iconPath = unitDef.getIconGameInterface()
      m_iconPathDisabled = unitDef.getIconGameInterfaceDisabled()
      m_jobTitle = unitDef.getName()
      m_jobTooltip = unitDef.getTooltipExtended()

  // --------------------------------------------------------------------------
  function updateFrame(SurvivorJobFrame frame)
    frame.setLevel(m_level)
    frame.setLevelTextVisible(m_levelTextVisible)
    frame.setIconPath(m_iconPath)
    frame.setIconPathDisabled(m_iconPathDisabled)
    frame.setIsIndeterminate(m_indeterminate)
    frame.setEnabledState(m_enabledState)
    frame.setJobTitle(m_jobTitle)
    frame.setJobTooltip(m_jobTooltip)

player g_currentPlayer

// ============================================================================
function filterEnumSelectedUnits() returns bool
  let u = GetFilterUnit()
  if (u.isSurvivor() == false)
    return false
  let comp = u.getSurvivorComponent()
  return comp != null and comp.getEnabled()

// ============================================================================
public class SurvivorJobPanel extends TLSFrame
  private IterableMap<SurvivorJobDefinition, SurvivorJobFrame> m_jobDefToFrameMap
  private bitset m_visibleJobs
  private group m_selectedUnits = CreateGroup()

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("FRAME", "SurvivorJobPanel", GAME_UI, "", 0))
    m_jobDefToFrameMap = new IterableMap<SurvivorJobDefinition, SurvivorJobFrame>()

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()

    let panel = getFrameHandle()
    panel.setAbsPoint(FRAMEPOINT_BOTTOMLEFT, 0.21, 0.14)
    panel.setSize(0.3, 0.35)

    for jobDef in g_allJobDefinitions
    //{
      let jobFrame = new SurvivorJobFrame()
        ..setParent(panel)
        ..setPlayer(getPlayer())
        ..setJobDef(jobDef)
        ..initialize()
        ..hide()
        
      let jobItemDef = getItemDefinition(jobDef.getItemType())
      if (jobItemDef != null)
        jobFrame.setItemName(jobItemDef.getName())

      m_jobDefToFrameMap.put(jobDef, jobFrame)
    //}

    invalidateLayout()

    doPeriodically(0.1) (CallbackPeriodic cb) ->
      update()

  // --------------------------------------------------------------------------
  override function setPlayer(player value)
    super.setPlayer(value)
    for key in m_jobDefToFrameMap
      m_jobDefToFrameMap.get(key).setPlayer(value)

  // --------------------------------------------------------------------------
  function getJobFrame(SurvivorJobDefinition jobDef) returns SurvivorJobFrame
    return m_jobDefToFrameMap.get(jobDef)

  // --------------------------------------------------------------------------
  function update()
    update_impl()

  // --------------------------------------------------------------------------
  private function update_impl()

    let owningPlayer = getPlayer()

    g_sharedSelectedUnitsGroup.enumUnitsSelected(owningPlayer, g_selectedUnitsFilter)

    m_selectedUnits.addGroup(g_sharedSelectedUnitsGroup)

    // Remove units that are not selected or in the middle of changing jobs
    for u in m_selectedUnits
      if (u == null) // units that evaluate to null still have valid handle ids?
        m_selectedUnits.removeUnit(u)
      else
        let comp = u.getSurvivorComponent()
        if (comp == null)
          m_selectedUnits.removeUnit(u)
        else if (comp.getChangingJobs())
          skip
        else if (not comp.getEnabled() or not g_sharedSelectedUnitsGroup.contains(u))
          m_selectedUnits.removeUnit(u)
    
    var visibleJobs = emptyBitset()

    var jobIndex = 0
    for jobDef in g_allJobDefinitions
      if (updateJobFrame(jobDef))
        visibleJobs = visibleJobs.set(jobIndex)
      jobIndex++

    if (m_visibleJobs.val != visibleJobs.val)
      m_visibleJobs = visibleJobs
      invalidateLayout()

  // --------------------------------------------------------------------------
  function invalidateLayout()
    
    let panel = getFrameHandle()

    let layout = new WrapPanelLayout()
    ..setOrientation(LayoutOrientation.UP)
    ..setSpacing(vec2(0.002, 0.002))
    ..layoutBegin()

    for jobDef in g_allJobDefinitions
    //{
      let jobFrame = getJobFrame(jobDef)
      if (jobFrame != null and jobFrame.getEnabledState() != SurvivorJobFrameEnabledState.DISABLED)
        layout.layoutNextFrame(jobFrame.getFrameHandle(), panel)
    //}

    panel.setHeight(layout.getHeight())
    
    // Log.info("panel: " + panel.getWidth().toString() + " layout: " + layout.getWidth().toString())
    // panel.setWidth(layout.getWidth())

    layout.layoutEnd()
    destroy layout

  // --------------------------------------------------------------------------
  private function updateJobFrame(SurvivorJobDefinition jobDef) returns bool

    let jobFrame = m_jobDefToFrameMap.get(jobDef)
    if (jobFrame == null)
      return false

    let panelPlayer = getPlayer()
    let isJobKnown = true or jobDef.getIsJobKnownToPlayer(panelPlayer)
    let updateData = g_survivorJobFrameUpdateDataMap.get(jobDef)

    updateData.reset(isJobKnown)

    if (isJobKnown)
    //{
      for _unit in m_selectedUnits
        let unitOwner = _unit.getOwner()
        if (unitOwner == panelPlayer or unitOwner.isAllyOf(panelPlayer))
          updateData.addUnit(_unit)
    //}

    updateData.updateFrame(jobFrame)

    return updateData.m_enabledState != SurvivorJobFrameEnabledState.DISABLED

// // ============================================================================
// function onSelectionChanged()
//   let p = GetTriggerPlayer()

//   let panel = g_playerSurvivorJobPanels.get(p)
//   if (panel != null)
//     panel.update()

// // ============================================================================
// function _onSurvivorJobPostChanged()

//   let survivorPost = getJobChangingSurvivor_PostJobChange()
//   let panelPostJobChange = g_playerSurvivorJobPanels.get(survivorPost.getOwner())
//   if (panelPostJobChange != null)
//     panelPostJobChange.update()

//   let survivorPre = getJobChangingSurvivor_PreJobChange()
//   let panelPreJobChange = g_playerSurvivorJobPanels.get(survivorPre.getOwner())
//   if (panelPreJobChange != null and panelPostJobChange != panelPreJobChange)
//     panelPostJobChange.update()

// // ============================================================================
// function onUnitLeveledUp()
//   let hero = GetLevelingUnit()
//   let panel = g_playerSurvivorJobPanels.get(hero.getOwner())
//   if (panel != null)
//     panel.update()

// ============================================================================
// When a player that owns a survivor panel frame presses the Z key
// we want to order that player's selected units to switch jobs. However,
// key presses are local-only events and so we need to synchronize the
// event with all other players first. See SyncSimple for more details.
function onToggleJobKeyPressed()
  let keyPressingPlayer = GetTriggerPlayer()

  let jobPanel = getSurvivorJobPanel(keyPressingPlayer)
  if (jobPanel == null)
    return

  let frameHandle = jobPanel.getFrameHandle()
  if (frameHandle == null or not frameHandle.isVisible() or not frameHandle.isEnabled())
    return

  keyPressingPlayer.sendSyncData(TOGGLEJOBSYNCDATAPREFIX, keyPressingPlayer.getId().toString())

// ============================================================================
function onSynchronizedToggleJobKeyPressed()
  let syncData = BlzGetTriggerSyncData()
  let playerId = syncData.toInt()
  let p = Player(playerId)
  if (p == null)
    Log.error("Could not find player with id " + syncData)
    return
  SurvivorUtility.orderSelectedUnitsToToggleActivateJob(p)

// ============================================================================
init
  ensureTocIsLoaded()

  for job in g_allJobDefinitions
    g_survivorJobFrameUpdateDataMap.put(job, new SurvivorJobFrameUpdateData(job))    

  nullTimer() () ->
    for p in g_PlayingHumanPlayers
      let survivorJobPanel = new SurvivorJobPanel()
      ..setPlayer(p)
      ..initialize()
      ..show()
      g_playerSurvivorJobPanels.put(p, survivorJobPanel)

  // for p in g_PlayingHumanPlayers
  //   let playerSelectionChangedTrigger = CreateTrigger()
  //   playerSelectionChangedTrigger.addCondition(Condition(function onSelectionChanged))
  //   TriggerRegisterPlayerUnitEvent(playerSelectionChangedTrigger, p, EVENT_PLAYER_UNIT_SELECTED, null)
  //   TriggerRegisterPlayerUnitEvent(playerSelectionChangedTrigger, p, EVENT_PLAYER_UNIT_DESELECTED, null)

  // onSurvivorJobPostChanged(function _onSurvivorJobPostChanged)
  // registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL, function onUnitLeveledUp)

  onKeyPress(OSKEY_Z, () -> onToggleJobKeyPressed())

  let trig = CreateTrigger()
  for playingPlayer in g_PlayingHumanPlayers
    BlzTriggerRegisterPlayerSyncEvent(trig, playingPlayer, TOGGLEJOBSYNCDATAPREFIX, false)
  trig.addCondition(Filter(() -> BlzGetTriggerSyncPrefix() == TOGGLEJOBSYNCDATAPREFIX))
  trig.addAction(() -> onSynchronizedToggleJobKeyPressed())
