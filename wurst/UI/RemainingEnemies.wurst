package RemainingEnemies

import Vector
import WrapPanel
import RealtimeUpdate
import HashMap
import SpawnDirectors
import ClosureTimers
import HumanPlayers
import StandardTooltip
import Frame
import Elites

RemainingUnitsFrame array g_remainingUnitsFrames

// ============================================================================
class RemainingUnitsFrame extends WrapPanel implements IRealtimeListener
  private Vector<EnemyUnitInfoFrame> m_infoFrames = new Vector<EnemyUnitInfoFrame>()
  private IterableMap<int, int> m_unitInfo = new IterableMap<int, int>()

  // ----------------------------------------------------------------------------
  construct()
    super(createFrame("EnemyUnitInfoFrameContainer"))

  // ----------------------------------------------------------------------------
  ondestroy
    destroy m_unitInfo
    m_unitInfo = null

    destroy m_infoFrames
    m_infoFrames = null

  // ----------------------------------------------------------------------------
  override function onVisibilityChanged()
    super.onVisibilityChanged()

    this.unregisterForRealtimeUpdate()
    if (isVisible())
      this.registerForRealtimeUpdate(RealtimeUpdatePriority.Background)
      realtimeUpdate(0.0)

  // ----------------------------------------------------------------------------
  override function realtimeUpdate(real _dt)

    var infoFrameIndex = 0

    var totalUnitCount = 0
    
    let ownerPlayer = getPlayer()
    if (ownerPlayer != null)
    //{
      let ownerPlayerId = ownerPlayer.getId()

      m_unitInfo.flush()

      let zombieAdmin = g_zombieDirectors[ownerPlayerId].getAdmin()
      if (zombieAdmin != null)
        for u in zombieAdmin.getOwnedUnits()
          if (u.isAlive())
            let unitTypeId = u.getTypeId()
            let count = m_unitInfo.has(unitTypeId) ? m_unitInfo.get(unitTypeId) : 0
            m_unitInfo.put(unitTypeId, count + 1)

      let eliteAdmin = g_eliteDirectors[ownerPlayerId].getAdmin()
      if (eliteAdmin != null)
        for u in eliteAdmin.getOwnedUnits()
          if (u.isAlive())
            let unitTypeId = u.getTypeId()
            let count = m_unitInfo.has(unitTypeId) ? m_unitInfo.get(unitTypeId) : 0
            m_unitInfo.put(unitTypeId, count + 1)

      let bossAdmin = g_bossDirectors[ownerPlayerId].getAdmin()
      if (bossAdmin != null)
        for u in bossAdmin.getOwnedUnits()
          if (u.isAlive())
            let unitTypeId = u.getTypeId()
            let count = m_unitInfo.has(unitTypeId) ? m_unitInfo.get(unitTypeId) : 0
            m_unitInfo.put(unitTypeId, count + 1)

      for unitTypeId in m_unitInfo
      //{
        let count = m_unitInfo.get(unitTypeId)
        getOrAddInfoFrame(infoFrameIndex)
        ..setRemaining(count)
        ..setIconPath(BlzGetAbilityIcon(unitTypeId))
        ..setTooltip(BlzGetAbilityTooltip(unitTypeId, 1), BlzGetAbilityExtendedTooltip(unitTypeId, 1))
        ..setTier(getTier(unitTypeId))
        ..show()
        infoFrameIndex++
        totalUnitCount += count
      //}

    //}

    // Hide the rest of the unused frames
    for i = infoFrameIndex to m_infoFrames.size() - 1
      let infoFrame = m_infoFrames.get(i)
      infoFrame.hide()

    invalidateArrange()

  // ----------------------------------------------------------------------------
  private function getOrAddInfoFrame(int index) returns EnemyUnitInfoFrame
    if (index < m_infoFrames.size())
      return m_infoFrames.get(index)
    let infoFrame = new EnemyUnitInfoFrame()
    addChild(infoFrame)
    m_infoFrames.add(infoFrame)
    return infoFrame

// ============================================================================
class EnemyUnitInfoFrame extends Frame
  private framehandle array[3] m_borders
  private framehandle m_iconFrame
  private framehandle m_textFrame
  private framehandle m_hoverFrame
  private StandardTooltip m_tooltip

  // ----------------------------------------------------------------------------
  construct()
    super(createFrame("EnemyUnitInfoFrame"))
    m_iconFrame = getFrame("IconFrame")
    m_textFrame = getFrame("TextFrame")
    m_hoverFrame = getFrame("HoverFrame")

    m_borders[0] = getFrame("BorderTier0")
    m_borders[1] = getFrame("BorderTier1")
    m_borders[2] = getFrame("BorderTier2")
    
    m_tooltip = StandardTooltip.get()
    m_hoverFrame.setTooltip(m_tooltip.getTooltipFrame())

    // Hide all border frames initially
    setTier(-1)

  // ----------------------------------------------------------------------------
  ondestroy
    m_hoverFrame.setTooltip(null)
    m_tooltip.release()

  // ----------------------------------------------------------------------------
  function setIconPath(string iconPath)
    if (m_iconFrame != null)
      m_iconFrame.setTexture(iconPath, 0, true)

  // ----------------------------------------------------------------------------
  function setRemaining(int remaining)
    if (m_textFrame != null)
      m_textFrame.setText(remaining.toString())

  // ----------------------------------------------------------------------------
  function setTooltip(string tooltip, string tooltipExtended)
    if (m_tooltip != null)
      m_tooltip.setTooltip(tooltip, tooltipExtended)

  // ----------------------------------------------------------------------------
  function setTier(int tier)
    for i = 0 to 2
      if (m_borders[i] != null)
        m_borders[i].setVisible(i == tier)

// ============================================================================
init

  nullTimer() () ->
    for p in g_PlayingHumanPlayers
      g_remainingUnitsFrames[p.getId()] = new RemainingUnitsFrame()
      ..setPlayer(p)
      ..setAbsArea(FRAMEPOINT_TOP, SCREEN_TOPLEFT + vec2(0.2, -0.03), vec2(0.21, 0.105))
      ..showOnly(p)