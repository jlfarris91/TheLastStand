package DebuggerDialog
import Frame
import Layout
import TabPanel
import Window
import Icons
import SyncKeyPresses
import Host
import ProjectConstants
import LinkedList

public DebuggerWindow g_debuggerDialogFrame
LinkedList<FrameFactoryRegistration> g_frameRegistrations = new LinkedList<FrameFactoryRegistration>()

// ============================================================================
class FrameFactoryRegistration
  string id = null
  IFrameTemplate contentFrameTemplate = null
  IFrameTemplate headerFrameTemplate = null
  string headerString = null

// ============================================================================
public class DebuggerDialog

  // --------------------------------------------------------------------------
  static function getDialog() returns DebuggerWindow
    return g_debuggerDialogFrame
  
  // --------------------------------------------------------------------------
  static function initialize()
    if (g_debuggerDialogFrame == null)
      g_debuggerDialogFrame = new DebuggerWindow()
      ..setWindowArea(0, anchoredRectr(FRAMEPOINT_TOPLEFT, vec2(0.46, 0.54), vec2(0.34, 0.15)))
      ..setWindowArea(1, anchoredRectr(FRAMEPOINT_TOPLEFT, vec2(0.46, 0.54), vec2(0.34, 0.4)))
      ..setWindowArea(2, anchoredRectr(FRAMEPOINT_TOP, vec2(0.4, 0.52), vec2(0.36, 0.35)))
      ..setTitle("Debugger")
      ..setIcon(Icons.bTNHumanBuild)

  // --------------------------------------------------------------------------
  static function registerFrame(string id, IFrameTemplate contentFrameTemplate)
    let registration = new FrameFactoryRegistration()
    registration.id = id
    registration.contentFrameTemplate = contentFrameTemplate
    g_frameRegistrations.add(registration)

  // --------------------------------------------------------------------------
  static function registerFrame(string id, string header, IFrameTemplate contentFrameTemplate)
    let registration = new FrameFactoryRegistration()
    registration.id = id
    registration.headerString = header
    registration.contentFrameTemplate = contentFrameTemplate
    g_frameRegistrations.add(registration)

  // --------------------------------------------------------------------------
  static function registerFrame(string id, IFrameTemplate headerFrameTemplate, IFrameTemplate contentFrameTemplate)
    let registration = new FrameFactoryRegistration()
    registration.id = id
    registration.headerFrameTemplate = headerFrameTemplate
    registration.contentFrameTemplate = contentFrameTemplate
    g_frameRegistrations.add(registration)

  // --------------------------------------------------------------------------
  static function setSelectedFrame(string id)
    if (g_debuggerDialogFrame != null)
      g_debuggerDialogFrame.setSelectedFrame(id)

  // --------------------------------------------------------------------------
  static function getSelectedFrame() returns string
    return g_debuggerDialogFrame != null ? g_debuggerDialogFrame.getSelectedFrame() : ""

  // --------------------------------------------------------------------------
  static function getIsVisible() returns bool
    return g_debuggerDialogFrame != null and g_debuggerDialogFrame.isVisible()

  // --------------------------------------------------------------------------
  static function show()
    if (g_debuggerDialogFrame == null)
      initialize()
    g_debuggerDialogFrame.show()

  // --------------------------------------------------------------------------
  static function hide()
    if (g_debuggerDialogFrame != null)
      g_debuggerDialogFrame.hide()

  // --------------------------------------------------------------------------
  static function toggleVisibility()
    if (getIsVisible())
      hide()
    else
      show()

// ============================================================================
class DebuggerWindow extends Window
  private TabPanel m_tabPanel

  // --------------------------------------------------------------------------
  construct()
  
    setTitle("Debugger")
    setIcon(Icons.bTNHumanBuild)

    m_tabPanel = new TabPanel("TP")
    addChild(m_tabPanel)

    for registration in g_frameRegistrations
      let contentFrame = registration.contentFrameTemplate.createFrame()
      if (registration.headerFrameTemplate != null)
        registerFrame(registration.id, registration.headerFrameTemplate.createFrame() castTo TabPanelButton, contentFrame)
      else if (registration.headerString != null)
        registerFrame(registration.id, registration.headerString, contentFrame)
      else
        registerFrame(registration.id, contentFrame)

  // --------------------------------------------------------------------------
  function registerFrame(string id, Frame contentFrame)
    m_tabPanel.addContent(id, id, contentFrame)

  // --------------------------------------------------------------------------
  function registerFrame(string id, string buttonText, Frame contentFrame)
    m_tabPanel.addContent(id, buttonText, contentFrame)

  // --------------------------------------------------------------------------
  function registerFrame(string id, TabPanelButton buttonFrame, Frame contentFrame)
    m_tabPanel.addContent(id, buttonFrame, contentFrame)

  // --------------------------------------------------------------------------
  function setSelectedFrame(string id)
    m_tabPanel.setSelectedContentId(id)

  // --------------------------------------------------------------------------
  function getSelectedFrame() returns string
    return m_tabPanel.getSelectedContentId()

// ============================================================================
init

  if (DEV_ENVIRONMENT)

    onSyncedKeyRelease(OSKEY_APPS) (p) ->
      if (p == g_HostPlayer)
        DebuggerDialog.toggleVisibility()

    onSyncedKeyRelease(OSKEY_ESCAPE) (p) ->
      if (p == g_HostPlayer)
        DebuggerDialog.hide()