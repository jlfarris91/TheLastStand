package TLSMenuBar
import LoadToc
import ClosureTimers
import HumanPlayers
import HashMap

import TLSMenuButton
import AlliancesButton
import DiscordLinkButton
import CameraButton
import HiveLinkButton
import Frame
import TLSMenuToggleButton
import Frame
import StackPanel
import Layout

public constant int MENU_ITEM_HIVE = 0
public constant int MENU_ITEM_DISCORD = 1
public constant int MENU_ITEM_ALLIANCES = 2
public constant int MENU_ITEM_CAMERA = 3
public constant int MENU_ITEM_COUNT = 4

HashMap<player, TLSMenuBar> g_playerToMenuMap = new HashMap<player, TLSMenuBar>()

// ============================================================================
public class TLSMenuBar extends StackPanel
  private StackPanel m_stackPanel
  TLSMenuButton array[MENU_ITEM_COUNT] m_items

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()
    let _player = getPlayer()

    m_items[MENU_ITEM_HIVE] = new HiveToggleButton(this)..setPlayer(_player)
    addChild(m_items[MENU_ITEM_HIVE])

    m_items[MENU_ITEM_DISCORD] = new DiscordToggleButton(this)..setPlayer(_player)
    addChild(m_items[MENU_ITEM_DISCORD])

    m_items[MENU_ITEM_ALLIANCES] = new AlliancesToggleButton(this)..setPlayer(_player)
    addChild(m_items[MENU_ITEM_ALLIANCES])

    m_items[MENU_ITEM_CAMERA] = new CameraToggleButton(this)..setPlayer(_player)
    addChild(m_items[MENU_ITEM_CAMERA])

  // --------------------------------------------------------------------------
  override function measureOverride(vec2 availableSize) returns vec2
    return m_stackPanel.measureOverride(availableSize)

  // --------------------------------------------------------------------------
  function uncheckOthers(TLSMenuButton menuButton)
    for i = 0 to MENU_ITEM_COUNT - 1
      let otherMenuToggleButton = m_items[i] castTo TLSMenuToggleButton
      if (otherMenuToggleButton != null and otherMenuToggleButton != menuButton)
        otherMenuToggleButton.setIsChecked(false)

// ============================================================================
function createMenusForPlayers()

    let itemSize = vec2(0.03, 0.03)
    let spacing = vec2(0.001, 0)
    let pos = vec2(0.0, 0.575)
    let size = vec2(MENU_ITEM_COUNT * itemSize.x + (MENU_ITEM_COUNT-1) * spacing.x, itemSize.y)

    let panel = getFrameHandle()
    ..setAbsPoint(FRAMEPOINT_TOPLEFT, pos.x, pos.y)
    ..setAbsPoint(FRAMEPOINT_BOTTOMRIGHT, pos.x + size.x, pos.y - size.y)

    let layout = new StackPanelLayout()
    layout.setSpacing(spacing)
    layout.setOrientation(LayoutOrientation.RIGHT)
    layout.layoutBegin()

    for i = 0 to MENU_ITEM_COUNT - 1
      if (m_items[i] != null)
        layout.layoutNextFrame(m_items[i].getFrameHandle(), panel)

  for _player in g_PlayingHumanPlayers
    let menu = new TLSMenuBar()
      ..setPlayer(_player)
      ..setLayoutOrientation(LayoutOrientation.LEFTTORIGHT)
      ..setLocalPos(pos)
      ..setSize(size)
    g_playerToMenuMap.put(_player, menu)

// ============================================================================
public function getTLSMenu(player p) returns TLSMenuBar
  return g_playerToMenuMap.get(p)

// ============================================================================
init
  ensureTocIsLoaded()
  nullTimer(() -> createMenusForPlayers())