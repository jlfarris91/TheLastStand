package SurvivorComponent
import UnitMetadata
import Statistic
import SurvivorJobs
import SurvivorJobComponent
import DisplayTextToPlayer
import PersistActiveAbilityComponent
import SurvivorNames
import TlsUnitDefinition
import FX
import TlsJobItemIds
import StatisticsCollection
import ClosureEvents
import Handle
import ItemType
import ColorUtility
import PlayerExtensions
import ClosureTimers

group g_temp = CreateGroup()

// ============================================================================
public class SurvivorComponent extends UnitComponent
  private SurvivorJobType m_activeJob
  private SurvivorJobComponent m_activeJobComponent
  private SurvivorJobType m_assignedJob
  private SurvivorJobComponent m_assignedJobComponent
  private bool m_changingJobs
  private string m_name
  private StatisticsCollection m_stats
  private _handle m_onComponentAddedHandler
  private SurvivorJobComponent array[g_survivorJobCount] m_cachedJobComponents

  // True if a job has ever been assigned. This is required since SurvivorJobType
  // does not have an unset state and code relies on checking m_activeJob.
  private bool m_assignedAnyJob = false

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_stats = new StatisticsCollection()
    m_changingJobs = false
    m_name = null
    m_activeJob = SurvivorJobType.None
    m_activeJobComponent = null
    m_assignedJob = SurvivorJobType.None
    m_assignedJobComponent = null

    for i = 0 to g_survivorJobCount-1
      m_cachedJobComponents[i] = null

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_stats
    m_stats = null

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function setName(string value)
    m_name = value
    updateUnitProperName()

  // --------------------------------------------------------------------------
  function getActiveJob() returns SurvivorJobType
    return m_activeJob

  // --------------------------------------------------------------------------
  function getActiveJobComponent() returns SurvivorJobComponent
    return m_activeJobComponent

  // --------------------------------------------------------------------------
  function getAssignedJob() returns SurvivorJobType
    return m_assignedJob

  // --------------------------------------------------------------------------
  function getAssignedJobComponent() returns SurvivorJobComponent
    return m_assignedJobComponent

  // --------------------------------------------------------------------------
  function getJobComponent(SurvivorJobType job) returns SurvivorJobComponent
    return m_cachedJobComponents[job castTo int]

  // --------------------------------------------------------------------------
  function getStats() returns StatisticsCollection
    return m_stats

  // --------------------------------------------------------------------------
  function setStats(StatisticsCollection stats)
    m_stats = stats

  // --------------------------------------------------------------------------
  function getStatistic(string key) returns IStatistic
    return m_stats.getStatistic(key)

  // --------------------------------------------------------------------------
  function addStatistic(string key, IStatistic statistic)
    m_stats.addStatistic(key, statistic)

  // --------------------------------------------------------------------------
  function getChangingJobs() returns bool
    return m_changingJobs

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let owner = getOwner()

    m_onComponentAddedHandler = owner.onComponentAdded().register() (o,c) ->
      for i = 0 to SurvivorJobs.count - 1
        m_cachedJobComponents[i] = owner.getSurvivorJobComponent(i castTo SurvivorJobType)

    owner.getOrAddPersistActiveAbilityComponent()
    
    let ownerUnit = getOwnerUnit()
    if (ownerUnit != null and not m_changingJobs)
    //{
      let owningPlayer = ownerUnit.getOwner()
      
      if (getName() == null)
        setName(getRandomSurvivorNameForPlayer(owningPlayer))

      let job = SurvivorJobs.getJobTypeForUnitType(ownerUnit.getTypeId())

      assignJobDirectly(job, ownerUnit.getTypeId())
      activateJobDirectly(job)
      
      // Pick a random survivor name
      updateUnitProperName()
      updateToggleJobAbility()
    //}

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    getOwner().onComponentAdded().unregister(m_onComponentAddedHandler)
    m_onComponentAddedHandler = INVALID_HANDLE

  // --------------------------------------------------------------------------
  function canActivateJob(SurvivorJobType job) returns bool
    if (m_changingJobs or m_activeJob == job)
      return false
    if (job == SurvivorJobType.None)
      return true
    let jobComponent = getJobComponent(job)
    return jobComponent != null and jobComponent.getIsAssigned()

  // --------------------------------------------------------------------------
  function assignJob(SurvivorJobType job) returns bool
    let jobComponent = getOwner().getOrAddSurvivorJobComponent(job)
    let jobDefinition = SurvivorJobs.getJobDefinition(job)
    return assignJob(jobDefinition, jobComponent.getUnitTypeId())

  // --------------------------------------------------------------------------
  private function assignJob(SurvivorJobDefinition jobDefinition, int unitTypeId) returns bool

    let ownerUnit = getOwnerUnit()
    let job = jobDefinition.getType()
    let jobComponent = getOwner().getOrAddSurvivorJobComponent(job)
    let currentUnitTypeId = jobComponent.getUnitTypeId()

    if (m_assignedJob == job and currentUnitTypeId == unitTypeId)
      displayMessageToPlayer(ownerUnit.getOwner(), "This survivor has already been assigned this job".red())
      return false

    // Drop the job item for the currently assigned job
    if (m_assignedJob != SurvivorJobType.None)
      let assignedJobDef = m_assignedJobComponent.getJobDefinition()
      let jobItemTypeId = assignedJobDef.getItemType(m_assignedJobComponent.getUnitTypeId())
      if (jobItemTypeId == 0)
        Log.error("Could not find job item type id for job " + assignedJobDef.getTitle(ownerUnit.getTypeId()) + " with unit type " + ownerUnit.getTypeId().toRawCode())
      ItemType.createItemForUnit(jobItemTypeId, ownerUnit)

    assignJobDirectly(job, unitTypeId)

    return true

  // --------------------------------------------------------------------------
  function activateJob(SurvivorJobType job) returns bool
    let jobComponent = getOwner().getOrAddSurvivorJobComponent(job)
    let jobDefinition = SurvivorJobs.getJobDefinition(job)
    return activateJob(jobDefinition, jobComponent.getUnitTypeId())

  // --------------------------------------------------------------------------
  private function activateJob(SurvivorJobDefinition jobDefinition, int unitTypeId) returns bool

    // Log.info("[activateJob] " + jobDefinition.getTitle(unitTypeId))

    let ownerUnit = getOwnerUnit()
    let job = jobDefinition.getType()

    if (m_activeJob == job and ownerUnit.getTypeId() == unitTypeId)
      return false

    if (m_activeJob != job)
      activateJobDirectly(job)

    preReplaceUnit()

    let title = jobDefinition.getTitle(unitTypeId)
    return replaceUnit(unitTypeId, title) != null

  // --------------------------------------------------------------------------
  protected function activateJobDirectly(SurvivorJobType job)
    
    // let jobDefinition = SurvivorJobs.getJobDefinition(job)
    // Log.info("[activateJobDirectly] " + jobDefinition.getId())

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(false)

    m_activeJob = job
    m_activeJobComponent = getOwner().getOrAddSurvivorJobComponent(job)
    
    // Log.info("activated job " + jobDefinition.getId())

  // --------------------------------------------------------------------------
  protected function assignJobDirectly(SurvivorJobType job, int unitTypeId)

    let jobDefinition = SurvivorJobs.getJobDefinition(job)
    // Log.info("[assignJobDirectly] " + jobDefinition.getTitle(unitTypeId))

    if (m_assignedJobComponent != null)
      m_assignedJobComponent.setIsAssigned(false)
      m_assignedJobComponent.setEnabled(false)

    m_assignedJob = job
    m_assignedJobComponent = getOwner().getOrAddSurvivorJobComponent(job)..setUnitTypeId(unitTypeId)
    m_assignedAnyJob = m_assignedAnyJob or job != SurvivorJobType.None

    if (job != SurvivorJobType.None)
      m_assignedJobComponent.setIsAssigned(true)

    // The player has learned about this job now that they have assigned the job
    jobDefinition.setIsJobKnownToPlayer(getOwnerUnit().getOwner(), true)

    // Log.info("set assigned job to " + jobDefinition.getTitle(unitTypeId))

  // --------------------------------------------------------------------------
  function equipJobItem(item jobItem) returns bool
    if (not jobItem.isJobItem())
      Log.error("SurvivorComponent", "tryEquipJobItem", getOwnerUnit().getName(), jobItem.getName() + " is not a job item")
      return false

    let jobDefinition = SurvivorJobs.getJobDefinitionForItemType(jobItem.getTypeId())
    if (jobDefinition == null)
      Log.error("SurvivorComponent", "tryEquipJobItem", getOwnerUnit().getName(), "No job definition found for item type " + jobItem.getName())
      return false

    if (jobDefinition == SurvivorJobs.none)
      Log.error("SurvivorComponent", "tryEquipJobItem", getOwnerUnit().getName(), "Somehow the job definition is SurvivorJobs.none for item type " + jobItem.getName())
      return false

    let unitTypeId = jobDefinition.getUnitType(jobItem.getTypeId())

    if (not assignJob(jobDefinition, unitTypeId))
      return false

    // Remove the item from the game once it's consumed
    jobItem.remove()

    return activateJob(jobDefinition.getType())

  // --------------------------------------------------------------------------
  private function preReplaceUnit()

    m_changingJobs = true

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(false)

    m_activeJobComponent = null
    m_activeJob = null

  // --------------------------------------------------------------------------
  private function replaceUnit(int replacementUnitId, string jobName) returns unit
    let ownerUnit = getOwnerUnit()

    let replacedUnit = replaceUnitTLS(ownerUnit, replacementUnitId, bj_UNIT_STATE_METHOD_RELATIVE, true)

    FX.createJobChangeEffect(replacedUnit.getPos())
    FX.createJobChangeTag(jobName, replacedUnit.getPos(), replacedUnit.getOwner())

    return replacedUnit

  // --------------------------------------------------------------------------
  private function postReplaceUnit(unit newUnit)

    if (newUnit == null)
      return

    let newUnitId = newUnit.getTypeId()
    let job = SurvivorJobs.getJobTypeForUnitType(newUnitId)
    
    m_activeJob = job
    m_activeJobComponent = getJobComponent(job)

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(true)

    updateUnitProperName()
    updateToggleJobAbility()
    
    nullTimer() () ->
      m_changingJobs = false

  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)

    if (newUnit != null)
      postReplaceUnit(newUnit)

  // --------------------------------------------------------------------------
  private function updateUnitProperName()
    getOwnerUnit().setProperName(getName())

  // --------------------------------------------------------------------------
  function toggleJob()

    if (m_assignedJob == SurvivorJobType.None)
      return

    if (m_activeJob == m_assignedJob)
      activateJob(SurvivorJobType.None)
    else
      activateJob(m_assignedJob)

  // --------------------------------------------------------------------------
  private function updateToggleJobAbility()
    let ownerUnit = getOwnerUnit()
    ownerUnit.addAbility(TlsAbilityIds.survivorToggleJob)

// ============================================================================
public function IUnitMetadata.getSurvivorComponent() returns SurvivorComponent
  return this.getComponent(SurvivorComponent.typeId) castTo SurvivorComponent

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorComponent() returns SurvivorComponent
  var component = this.getSurvivorComponent()
  if (component == null)
    component = this.addComponent(new SurvivorComponent(this)) castTo SurvivorComponent
  return component

// ============================================================================
public function unit.getSurvivorComponent() returns SurvivorComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getSurvivorComponent() : null

// ============================================================================
public function unit.getOrAddSurvivorComponent() returns SurvivorComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddSurvivorComponent() : null

// ============================================================================
public function unit.getSurvivorJobComponent(SurvivorJobType jobDef) returns SurvivorJobComponent
  let survivor = this.getSurvivorComponent()
  return survivor != null ? survivor.getJobComponent(jobDef) : null

// ============================================================================
function onUnitUsedItem()
  let manipulatingUnit = GetManipulatingUnit()
  let manipulatedItem = GetManipulatedItem()

  if (not manipulatedItem.isJobItem())
    return

  let comp = manipulatingUnit.getSurvivorComponent()
  if (comp == null or not comp.getEnabled())
    displayMessageToPlayer(manipulatingUnit.getOwner(), "This item can only be used by a survivor")
    return

  comp.equipJobItem(manipulatedItem)

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()

  if (not dyingUnit.isSurvivor())
    return

  let metadata = dyingUnit.getMetadata()
  if (metadata == null)
    return

  let survivor = metadata.getSurvivorComponent()
  if (survivor == null)
    return

  // Create an item for each enabled job
  for i = 0 to SurvivorJobs.count - 1
  //{
    let jobDef = SurvivorJobs.getJobDefinition(i castTo SurvivorJobType)
    let jobComponent = survivor.getJobComponent(i castTo SurvivorJobType)
    if (jobComponent != null and jobComponent.getIsAssigned())
      let jobItemType = jobDef.getItemType(dyingUnit.getTypeId())
      if (jobItemType != -1 and jobItemType != 0)
        ItemType.createItem(jobItemType, dyingUnit.getPos())
      jobComponent.setIsAssigned(false)
  //}

bool g_anyJobActive = false

// ============================================================================
function onSpellCast()
  let abilityId = GetSpellAbilityId()

  if (abilityId != TlsAbilityIds.survivorToggleJob)
    return

  let castingUnit = GetSpellAbilityUnit()
  let castingPlayer = castingUnit.getOwner()

  g_anyJobActive = false

  castingPlayer.forEachSelectedUnit() selectedUnit ->
    let survivor = selectedUnit.getSurvivorComponent()
    if (survivor != null)
      if (survivor.getActiveJob() != SurvivorJobType.None)
        g_anyJobActive = true

  castingPlayer.forEachSelectedUnit() selectedUnit ->
    let survivor = selectedUnit.getSurvivorComponent()
    if (survivor != null)
      let assignedJob = survivor.getAssignedJob()
      if (g_anyJobActive)
        survivor.activateJob(SurvivorJobType.None)
      else if (assignedJob != SurvivorJobType.None)
        survivor.activateJob(assignedJob)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM, function onUnitUsedItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST, function onSpellCast)