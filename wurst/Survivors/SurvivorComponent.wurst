package SurvivorComponent
import UnitComponent
import Statistic
import SurvivorJobs
import SurvivorJobComponent
import DisplayTextToPlayer
import RangedTargetXpReceieverComponent
import PersistActiveAbilityComponent
import SurvivorNames
import TlsUnitDefinition
import FX
import ColorUtility
import TlsJobItemIds
import StatisticsCollection
import ClosureEvents
import Handle
import BitSet
import ItemType

group g_temp = CreateGroup()
trigger g_onSurvivorJobPreChange = CreateTrigger()
trigger g_onSurvivorJobPostChange = CreateTrigger()
unit g_jobChangingSurvivorPre
unit g_jobChangingSurvivorPost

// ============================================================================
public function onSurvivorJobPreChanged(code func)
  g_onSurvivorJobPreChange.addCondition(Condition(func))

// ============================================================================
public function onSurvivorJobPostChanged(code func)
  g_onSurvivorJobPostChange.addCondition(Condition(func))

// ============================================================================
public function getJobChangingSurvivor_PreJobChange() returns unit
  return g_jobChangingSurvivorPre

// ============================================================================
public function getJobChangingSurvivor_PostJobChange() returns unit
  return g_jobChangingSurvivorPost

// ============================================================================
function raiseSurvivorJobPreChangeEvent(unit _unit)
  g_jobChangingSurvivorPre = _unit
  g_onSurvivorJobPreChange.evaluate()
  g_jobChangingSurvivorPre = null

// ============================================================================
function raiseSurvivorJobPostChangeEvent(unit preUnit, unit postUnit)
  g_jobChangingSurvivorPre = preUnit
  g_jobChangingSurvivorPost = postUnit
  g_onSurvivorJobPostChange.evaluate()
  g_jobChangingSurvivorPre = null
  g_jobChangingSurvivorPost = null

// ============================================================================
public class SurvivorComponent extends UnitComponent
  private SurvivorJobType m_activeJob
  private SurvivorJobType m_lastActiveJob
  private SurvivorJobComponent m_activeJobComponent
  private bool m_changingJobs
  private string m_name
  private StatisticsCollection m_stats
  private _handle m_onComponentAddedHandler
  private bitset m_assignedJobs
  private SurvivorJobComponent array[g_survivorJobCount] m_cachedJobComponents

  // True if a job has ever been assigned. This is required since SurvivorJobType
  // does not have an unset state and code relies on checking m_activeJob.
  private bool m_assignedAnyJob = false

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_stats = new StatisticsCollection()
    m_changingJobs = false
    m_name = null
    m_activeJobComponent = null
    m_activeJob = SurvivorJobType.None
    m_lastActiveJob = SurvivorJobType.None
    m_assignedJobs = bitset(0)

    for i = 0 to g_survivorJobCount-1
      m_cachedJobComponents[i] = null

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_stats
    m_stats = null

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function setName(string value)
    m_name = value
    updateUnitProperName()

  // --------------------------------------------------------------------------
  function getActiveJobComponent() returns SurvivorJobComponent
    return m_activeJobComponent

  // --------------------------------------------------------------------------
  function getActiveJob() returns SurvivorJobType
    return m_activeJob

  // --------------------------------------------------------------------------
  function getLastActiveJob() returns SurvivorJobType
    return m_lastActiveJob

  // --------------------------------------------------------------------------
  function getJobComponent(SurvivorJobType job) returns SurvivorJobComponent
    return m_cachedJobComponents[job castTo int]

  // --------------------------------------------------------------------------
  function getStats() returns StatisticsCollection
    return m_stats

  // --------------------------------------------------------------------------
  function setStats(StatisticsCollection stats)
    m_stats = stats

  // --------------------------------------------------------------------------
  function getStatistic(string key) returns IStatistic
    return m_stats.getStatistic(key)

  // --------------------------------------------------------------------------
  function addStatistic(string key, IStatistic statistic)
    m_stats.addStatistic(key, statistic)

  // --------------------------------------------------------------------------
  function getChangingJobs() returns bool
    return m_changingJobs

  // --------------------------------------------------------------------------
  function getAssignedJobs() returns bitset
    return m_assignedJobs

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let owner = getOwner()

    m_onComponentAddedHandler = owner.onComponentAdded().register() (o,c) ->
      for i = 0 to SurvivorJobs.count - 1
        m_cachedJobComponents[i] = owner.getSurvivorJobComponent(i castTo SurvivorJobType)

    owner.getOrAddPersistActiveAbilityComponent()
    owner.getOrAddRangedTargetXpRecieverComponent()

    // Survivors will always be able to become jobless
    assignJob(SurvivorJobType.None)
    
    let ownerUnit = getOwnerUnit()
    if (ownerUnit != null)
    //{
      let owningPlayer = ownerUnit.getOwner()
      
      if (getName() == null)
        setName(getRandomSurvivorNameForPlayer(owningPlayer))

      let job = SurvivorJobs.getJobTypeForUnitType(ownerUnit.getTypeId())

      activateJobDirectly(job)
      
      // Pick a random survivor name
      updateUnitProperName()
    //}

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    getOwner().onComponentAdded().unregister(m_onComponentAddedHandler)
    m_onComponentAddedHandler = INVALID_HANDLE

  // --------------------------------------------------------------------------
  private function activateJobDirectly(SurvivorJobType job)

    if (m_activeJob == job and m_assignedAnyJob)
      return

    assignJob(job)

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(false)

    if (m_activeJob != null)
      m_lastActiveJob = m_activeJob

    m_activeJob = job
    m_activeJobComponent = getOwner().getOrAddSurvivorJobComponent(job)
    m_assignedAnyJob = true

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(true)

  // --------------------------------------------------------------------------
  function assignJob(SurvivorJobType job)
    getOwner().getOrAddSurvivorJobComponent(job)..setIsAssigned(true)
    m_assignedJobs = m_assignedJobs.set(job castTo int)

  // --------------------------------------------------------------------------
  function canActivateJob(SurvivorJobType job) returns bool
    if (m_changingJobs or m_activeJob == job)
      return false
    if (job == SurvivorJobType.None)
      return true
    let jobComponent = getJobComponent(job)
    return jobComponent != null and jobComponent.getIsAssigned()

  // --------------------------------------------------------------------------
  function activateJob(SurvivorJobType job) returns bool
    let ownerUnit = getOwnerUnit()
    let unitType = ownerUnit.getTypeId()

    let jobDef = SurvivorJobs.getJobDefinition(job)

    if (jobDef.hasUnitType(unitType))
      displayMessageToPlayer(ownerUnit.getOwner(), "{0} is already a {1}!".format(ownerUnit.getProperName().colorize(COLOR_GOLD), jobDef.getTitle(unitType).colorize(COLOR_GOLD)))
      return false

    let jobComponent = getOwner().getOrAddSurvivorJobComponent(job)
    if (jobComponent == null)
      Log.error("SurvivorComponent", "activateJob", ownerUnit.getName(), "No SurvivorJobComponent exists for job " + jobDef.getId())
      return false

    assignJob(job)

    preJobChange(ownerUnit)

    // The player has learned about this job now that they have assigned the job
    jobDef.setIsJobKnownToPlayer(ownerUnit.getOwner(), true)

    let replacementUnitId = jobComponent.getUnitId()
    replaceUnit(replacementUnitId, jobComponent.getJob().getTitle(replacementUnitId))

    return true

  // --------------------------------------------------------------------------
  function upgradeActiveJob() returns bool
    let ownerUnit = getOwnerUnit()
    let currentUnitId = ownerUnit.getTypeId()
    let job = SurvivorJobs.getJobDefinitionForUnitType(currentUnitId)
    
    let nextUnitId = job.getNextUpgrade(currentUnitId)
    if (nextUnitId == -1)
      return false

    let jobComponent = getJobComponent(job.getType())
    if (jobComponent == null)
      Log.error("SurvivorComponent", "upgradeActiveJob", ownerUnit.getName(), "No SurvivorJobComponent exists for job " + job.getId())
      return false

    preJobChange(ownerUnit)

    // There is a bug with upgrading non-building units where the player is not charged for the upgrade - so do that now.
    let nextUnitDef = getUnitDefinition(nextUnitId)
    if (nextUnitDef != null)
      let p = getOwnerUnit().getOwner()
      p.subGold(nextUnitDef.getGoldCost())
      p.subLumber(nextUnitDef.getLumberCost())
    else
      Log.error("SurvivorComponent", "upgradeActiveJob", ownerUnit.getName(), "No definition registered for unit type {0}".format(nextUnitId.toString()))
      return false

    replaceUnit(nextUnitId, jobComponent.getJob().getTitle(nextUnitId))

    return true

  // --------------------------------------------------------------------------
  function tryEquipJobItem(item jobItem) returns bool
    if (not jobItem.isJobItem())
      return false

    let job = SurvivorJobs.getJobDefinitionForItemType(jobItem.getTypeId())
    if (job == null)
      Log.error("SurvivorComponent", "tryEquipJobItem", getOwnerUnit().getName(), "No job definition found for item type " + jobItem.getName())
      return false

    if (job == SurvivorJobs.none)
      Log.error("SurvivorComponent", "tryEquipJobItem", getOwnerUnit().getName(), "Somehow the job definition is SurvivorJobs.none for item type " + jobItem.getName())
      return false

    let jobComponent = getOwner().getOrAddSurvivorJobComponent(job.getType())
    if (jobComponent.getIsAssigned())
      displayMessageToPlayer(getOwnerUnit().getOwner(), "This survivor has already been assigned this job")
      return false
    
    // Remove the item from the game once it's consumed
    jobItem.remove()

    return activateJob(job.getType())

  // --------------------------------------------------------------------------
  function unassignJob(SurvivorJobType job) returns bool
    let ownerUnit = getOwnerUnit()
    let jobComponent = getOwner().getSurvivorJobComponent(job)
    if (jobComponent == null or not jobComponent.getIsAssigned())
      return false

    let jobDef = SurvivorJobs.getJobDefinition(job)

    jobComponent.setIsAssigned(false)
    ItemType.createItemForUnit(jobDef.getItemType(), ownerUnit)
    m_assignedJobs = m_assignedJobs.reset(job castTo int)
    
    if (canActivateJob(SurvivorJobType.None))
      if (not activateJob(SurvivorJobType.None))
        Log.error("SurvivorComponent", "tryUnequipJob", ownerUnit.getName(), "Could not activate the none job")

    return true

  // --------------------------------------------------------------------------
  private function preJobChange(unit oldUnit)

    m_changingJobs = true

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(false)

    if (m_activeJob != null)
      m_lastActiveJob = m_activeJob

    m_activeJobComponent = null
    m_activeJob = null

    raiseSurvivorJobPreChangeEvent(oldUnit)

  // --------------------------------------------------------------------------
  private function postJobChange(unit oldUnit, unit newUnit)

    // We need to raise this no matter what, even if there is an error above, otherwise the job panel will get stuck
    // waiting for the job change to end
    raiseSurvivorJobPostChangeEvent(oldUnit, newUnit)

    if (newUnit == null)
      return
    
    // Log.info("SurvivorComponent", "onPostUnitChanged", newUnit.getName(), "newUnit 1 xp " + newUnit.getXp().toString())

    let newUnitId = newUnit.getTypeId()
    let job = SurvivorJobs.getJobTypeForUnitType(newUnitId)
    
    m_activeJob = job
    m_activeJobComponent = getJobComponent(job)
    
    // Log.info("SurvivorComponent", "onPostUnitChanged", newUnit.getName(), "newUnit 2 xp " + newUnit.getXp().toString())

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(true)
    
    // Log.info("SurvivorComponent", "onPostUnitChanged", newUnit.getName(), "newUnit 3 xp " + newUnit.getXp().toString())

    updateUnitProperName()
    
    m_changingJobs = false

  // --------------------------------------------------------------------------
  private function replaceUnit(int replacementUnitId, string jobName) returns unit
    let ownerUnit = getOwnerUnit()

    let replacedUnit = replaceUnitTLS(ownerUnit, replacementUnitId, bj_UNIT_STATE_METHOD_RELATIVE, true)

    FX.createJobChangeEffect(replacedUnit.getPos())
    FX.createJobChangeTag(jobName, replacedUnit.getPos(), replacedUnit.getOwner())

    return replacedUnit

  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)

    if (oldUnit != null and newUnit != null)
      postJobChange(oldUnit, newUnit)

  // --------------------------------------------------------------------------
  private function updateUnitProperName()
    getOwnerUnit().setProperName(getName())

// ============================================================================
public function IUnitMetadata.getSurvivorComponent() returns SurvivorComponent
  return this.getComponent(SurvivorComponent.typeId) castTo SurvivorComponent

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorComponent() returns SurvivorComponent
  var component = this.getSurvivorComponent()
  if (component == null)
    component = this.addComponent(new SurvivorComponent(this)) castTo SurvivorComponent
  return component

// ============================================================================
public function unit.getSurvivorComponent() returns SurvivorComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getSurvivorComponent() : null

// ============================================================================
public function unit.getOrAddSurvivorComponent() returns SurvivorComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddSurvivorComponent() : null

// ============================================================================
public function unit.getSurvivorJobComponent(SurvivorJobType jobDef) returns SurvivorJobComponent
  let survivor = this.getSurvivorComponent()
  return survivor != null ? survivor.getJobComponent(jobDef) : null

// ============================================================================
function onUnitUsedItem()
  let manipulatingUnit = GetManipulatingUnit()
  let manipulatedItem = GetManipulatedItem()

  if (not manipulatedItem.isJobItem())
    return

  let comp = manipulatingUnit.getSurvivorComponent()
  if (comp == null or not comp.getEnabled())
    displayMessageToPlayer(manipulatingUnit.getOwner(), "This item can only be used by a survivor")
    return

  comp.tryEquipJobItem(manipulatedItem)

// ============================================================================
function onOrderIssued()

  let issuedOrderId = GetIssuedOrderId()
  let orderedUnit = GetOrderedUnit()

  let metadata = orderedUnit.getMetadata()
  if (metadata == null)
    return
  
  let comp = metadata.getSurvivorComponent()
  if (comp == null)
    return

  let currentUnitId = orderedUnit.getTypeId()
  let job = SurvivorJobs.getJobDefinitionForUnitType(currentUnitId)
  if (job == null)
    return

  let nextUnitId = job.getNextUpgrade(currentUnitId)
  if (nextUnitId == issuedOrderId)
    comp.upgradeActiveJob()

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()

  if (not dyingUnit.isSurvivor())
    return

  let metadata = dyingUnit.getMetadata()
  if (metadata == null)
    return

  let survivor = metadata.getSurvivorComponent()
  if (survivor == null)
    return

  // Create an item for each enabled job
  for i = 0 to SurvivorJobs.count - 1
  //{
    let jobDef = SurvivorJobs.getJobDefinition(i castTo SurvivorJobType)
    let jobComponent = survivor.getJobComponent(i castTo SurvivorJobType)
    if (jobComponent != null and jobComponent.getIsAssigned())
      let jobItemType = jobDef.getItemType()
      if (jobItemType != -1)
        ItemType.createItem(jobItemType, dyingUnit.getPos())
      jobComponent.setIsAssigned(false)
  //}

// ============================================================================
function onHeroLeveledUp()
  let leveledUnit = GetLevelingUnit()
  let survivor = leveledUnit.getSurvivorComponent()
  if (survivor == null)
    return
  let activeJobComp = survivor.getActiveJobComponent()
  if (activeJobComp != null)
    activeJobComp.onLevelChanged()

// ============================================================================
function onHeroSkillPointSpent()
  let leveledUnit = GetLevelingUnit()
  let survivor = leveledUnit.getSurvivorComponent()
  if (survivor == null)
    return
  let activeJobComp = survivor.getActiveJobComponent()
  if (activeJobComp != null)
    activeJobComp.onSkillPointSpent()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM, function onUnitUsedItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, function onOrderIssued)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL, function onHeroLeveledUp)
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_SKILL, function onHeroSkillPointSpent)