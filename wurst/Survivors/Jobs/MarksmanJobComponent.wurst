package MarksmanJobComponent
import UnitMetadata
import SurvivorJobComponent
import UnitPropertiesComponent
import SurvivorJobs
import Handle

constant real BONUS_DAMAGE_TO_NORMALS_PERCENTAGE = 0.0
constant real BONUS_DAMAGE_TO_ELITES_PERCENTAGE = 0.2
constant real BONUS_DAMAGE_TO_BOSS_PERCENTAGE = 0.1
constant real BONUS_CRIT_CHANCE = 0.25
constant real BONUS_CRIT_MULT = 4.0

// ============================================================================
public class MarksmanJobComponent extends SurvivorJobComponent
  private _handle m_dmgscalarnormal = INVALID_HANDLE
  private _handle m_dmgscalarelite = INVALID_HANDLE
  private _handle m_dmgscalarboss = INVALID_HANDLE
  private _handle m_critchance = INVALID_HANDLE
  private _handle m_critdamagescalar = INVALID_HANDLE

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function getJobDefinition() returns SurvivorJobDefinition
    return SurvivorJobs.marksman

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    let unitPropsComp = getOwner().getOrAddUnitPropertiesComponent()
    m_dmgscalarnormal = unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_NORMAL).affectAdd(BONUS_DAMAGE_TO_NORMALS_PERCENTAGE)
    m_dmgscalarelite = unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_ELITE).affectAdd(BONUS_DAMAGE_TO_ELITES_PERCENTAGE)
    m_dmgscalarboss = unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_BOSS).affectAdd(BONUS_DAMAGE_TO_BOSS_PERCENTAGE)
    m_critchance = unitPropsComp.getProperty(UnitProperty.CRIT_CHANCE_01).affectAdd(BONUS_CRIT_CHANCE)
    m_critdamagescalar = unitPropsComp.getProperty(UnitProperty.CRIT_DAMAGE_SCALAR).affectAdd(BONUS_CRIT_MULT)

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()

    let ownerUnit = getOwner()
    if (ownerUnit == null)
      return

    let unitPropsComp = getOwner().getUnitPropertiesComponent()
    if (unitPropsComp != null)
      unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_NORMAL).removeAffector(m_dmgscalarnormal)
      unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_ELITE).removeAffector(m_dmgscalarelite)
      unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_BOSS).removeAffector(m_dmgscalarboss)
      unitPropsComp.getProperty(UnitProperty.CRIT_CHANCE_01).removeAffector(m_critchance)
      unitPropsComp.getProperty(UnitProperty.CRIT_DAMAGE_SCALAR).removeAffector(m_critdamagescalar)

    m_dmgscalarnormal = INVALID_HANDLE
    m_dmgscalarelite = INVALID_HANDLE
    m_dmgscalarboss = INVALID_HANDLE
    m_critchance = INVALID_HANDLE
    m_critdamagescalar = INVALID_HANDLE

// ============================================================================
public function IUnitMetadata.getMarksmanJobComponent() returns MarksmanJobComponent
  return this.getComponent(MarksmanJobComponent.typeId) castTo MarksmanJobComponent

// ============================================================================
public function IUnitMetadata.getOrAddMarksmanJobComponent() returns MarksmanJobComponent
  var component = this.getMarksmanJobComponent()
  if (component == null)
    component = this.addComponent(new MarksmanJobComponent(this), false) castTo MarksmanJobComponent
  return component

// ============================================================================
init
  SurvivorJobComponent.registerSurvivorJobComponentGetter(SurvivorJobType.Marksman, MarksmanJobComponent.typeId)
  SurvivorJobComponent.registerSurvivorJobComponentFactory(SurvivorJobType.Marksman, metadata -> metadata.getOrAddMarksmanJobComponent())