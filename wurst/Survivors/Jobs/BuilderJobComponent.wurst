package BuilderJobComponent
import SurvivorJobComponent
import UnitMetadata
import Events
import Orders
import UnitExtensions
import GroupUtils
import Type

constant real EXP_PER_REPAIR = 0.1

// ============================================================================
public class BuilderJobComponent extends SurvivorJobComponent
  private Action1<UnitHealedEventArgs> m_unitHealedEventHandler
  
  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    listenToRepairEvent()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unlistenToRepairEvent()

  // --------------------------------------------------------------------------
  private function onHealedUnit(UnitHealedEventArgs args)
    let owner = getOwnerUnit()
    if (owner == null)
      return

    let source = args.getHealingSource()
    let target = args.getHealedUnit()
    let amount = args.getAmountHealed()

    // Someone else did the healing
    if (source != null and source != owner)
      return

    // Repairing is just healing for buildings
    if (not args.getHealedUnit().isStructure())
      return

    // This builder is not currently building or repairing
    let currentOrderId = owner.getCurrentOrder()
    if (currentOrderId != OrderIds.repair and
        currentOrderId != OrderIds.repairon and
        currentOrderId != OrderIds.build)
      return

    var isRepairer = false
    let g = getGroup()
    g.enumUnitsInRange(target.getPos(), 256.0)
    for u from g
      if (u == owner)
        isRepairer = true
        break
    g.release()

    let amountInt = R2I(amount * EXP_PER_REPAIR)

    if (isRepairer)
      owner.addXp(amountInt, true)
      Log.debug(owner.getName() + " repaired " + target.getName() + " for " + amountInt.toString() + " hp")
    else
      Log.debug("Source is not within range of target")

  // --------------------------------------------------------------------------
  private function listenToRepairEvent()
    unlistenToRepairEvent()
    if (m_unitHealedEventHandler == null)
      m_unitHealedEventHandler = PlayerUnitEvents.unitHealed.add((UnitHealedEventArgs args) -> onHealedUnit(args))

  // --------------------------------------------------------------------------
  private function unlistenToRepairEvent()
    if (m_unitHealedEventHandler != null)
      PlayerUnitEvents.unitHealed.remove(m_unitHealedEventHandler)
      destroy m_unitHealedEventHandler
      m_unitHealedEventHandler = null

// ============================================================================
public function IUnitMetadata.getBuilderJobComponent() returns BuilderJobComponent
  return this.getComponent(Type(BuilderJobComponent.typeId)) castTo BuilderJobComponent

// ============================================================================
public function IUnitMetadata.getOrAddBuilderJobComponent() returns BuilderJobComponent
  var component = this.getBuilderJobComponent()
  if (component == null)
    component = this.addComponent(new BuilderJobComponent(this)) castTo BuilderJobComponent
  return component