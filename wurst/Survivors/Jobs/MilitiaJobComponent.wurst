package MilitiaJobComponent
import SurvivorJobComponent
import UnitMetadata
import ExperienceComponent
import RangedTargetXpReceieverComponent
import UnitPropertiesComponent
import TlsAbilityIds
import SurvivorJobs
import Handle

constant real BONUS_DAMAGE_TO_NORMALS_PERCENTAGE = 10.0
constant real BONUS_DAMAGE_TO_ELITES_PERCENTAGE = -10.0
constant real BONUS_DAMAGE_TO_BOSS_PERCENTAGE = 0.0
constant real BONUS_EVADE_CHANCE_PERCENTAGE = 10.0

// ============================================================================
public class MilitiaJobComponent extends SurvivorJobComponent
  private int m_cleaveLevel = 0
  private int m_tauntLevel = 0
  private int m_defendLevel = 0
  private int m_thornsLevel = 0

  private _handle m_dmgscalarnormal = INVALID_HANDLE
  private _handle m_dmgscalarelite = INVALID_HANDLE
  private _handle m_dmgscalarboss = INVALID_HANDLE
  private _handle m_evadechance = INVALID_HANDLE
  
  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function getJob() returns SurvivorJobDefinition
    return SurvivorJobs.militia

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()
    getOwner().getOrAddRangedTargetXpRecieverComponent().setEnabled(true)
    getOwner().getOrAddExperienceComponent().setEnabled(true)

    let unitPropsComp = getOwner().getOrAddUnitPropertiesComponent()
    m_dmgscalarnormal = unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_NORMAL).affectAdd(BONUS_DAMAGE_TO_NORMALS_PERCENTAGE)
    m_dmgscalarelite = unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_ELITE).affectAdd(BONUS_DAMAGE_TO_ELITES_PERCENTAGE)
    m_dmgscalarboss = unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_BOSS).affectAdd(BONUS_DAMAGE_TO_ELITES_PERCENTAGE)
    m_evadechance = unitPropsComp.getProperty(UnitProperty.EVADE_CHANCE).affectAdd(BONUS_EVADE_CHANCE_PERCENTAGE)

    updateAbilities()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()

    let owner = getOwner()
    if (owner == null)
      return
    
    let rangedTargetXpReceieverComponent = owner.getRangedTargetXpRecieverComponent()
    if (rangedTargetXpReceieverComponent != null)
      rangedTargetXpReceieverComponent.setEnabled(false)

    let gainXpPerKillComponent = owner.getOrAddExperienceComponent()
    if (gainXpPerKillComponent != null)
      gainXpPerKillComponent.setEnabled(false)

    let unitPropsComp = getOwner().getUnitPropertiesComponent()
    if (unitPropsComp != null)
      unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_NORMAL).remove(m_dmgscalarnormal)
      unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_ELITE).remove(m_dmgscalarelite)
      unitPropsComp.getProperty(UnitProperty.DAMAGE_SCALAR_BOSS).remove(m_dmgscalarboss)
      unitPropsComp.getProperty(UnitProperty.EVADE_CHANCE).remove(m_evadechance)

    m_dmgscalarnormal = INVALID_HANDLE
    m_dmgscalarelite = INVALID_HANDLE
    m_dmgscalarboss = INVALID_HANDLE
    m_evadechance = INVALID_HANDLE

    let ownerUnit = getOwnerUnit()
    ownerUnit.removeAbility(TlsAbilityIds.militiaCleave)
    ownerUnit.removeAbility(TlsAbilityIds.militiaTaunt)
    ownerUnit.removeAbility(TlsAbilityIds.militiaDefend)
    ownerUnit.removeAbility(TlsAbilityIds.militiaThorns)

  // --------------------------------------------------------------------------
  override function saveJobData()
    super.saveJobData()
    let ownerUnit = getOwnerUnit()
    m_cleaveLevel = ownerUnit.getAbilityLevel(TlsAbilityIds.militiaCleave)
    m_tauntLevel = ownerUnit.getAbilityLevel(TlsAbilityIds.militiaTaunt)
    m_defendLevel = ownerUnit.getAbilityLevel(TlsAbilityIds.militiaDefend)
    m_thornsLevel = ownerUnit.getAbilityLevel(TlsAbilityIds.militiaThorns)

  // --------------------------------------------------------------------------
  override function onLevelChanged()
    super.onLevelChanged()
    updateAbilities()

  // --------------------------------------------------------------------------
  private function updateAbilities()
    let ownerUnit = getOwnerUnit()
    let ownerUnitLevel = ownerUnit.getLevel()    
    
    if (not ownerUnit.hasAbility(TlsAbilityIds.militiaCleave))
      ownerUnit.addAbility(TlsAbilityIds.militiaCleave)

    if (not ownerUnit.hasAbility(TlsAbilityIds.militiaTaunt))
      ownerUnit.addAbility(TlsAbilityIds.militiaTaunt)

    if (not ownerUnit.hasAbility(TlsAbilityIds.militiaDefend))
      ownerUnit.addAbility(TlsAbilityIds.militiaDefend)

    if (not ownerUnit.hasAbility(TlsAbilityIds.militiaThorns))
      ownerUnit.addAbility(TlsAbilityIds.militiaThorns)

    ownerUnit.setAbilityLevel(TlsAbilityIds.militiaCleave, ownerUnitLevel)

// ============================================================================
public function IUnitMetadata.getMilitiaJobComponent() returns MilitiaJobComponent
  return this.getComponent(MilitiaJobComponent.typeId) castTo MilitiaJobComponent

// ============================================================================
public function IUnitMetadata.getOrAddMilitiaJobComponent() returns MilitiaJobComponent
  var component = this.getMilitiaJobComponent()
  if (component == null)
    component = this.addComponent(new MilitiaJobComponent(this), false) castTo MilitiaJobComponent
  return component

// ============================================================================
init
  SurvivorJobComponent.registerSurvivorJobComponentGetter(SurvivorJobs.militia, metadata -> metadata.getMilitiaJobComponent())
  SurvivorJobComponent.registerSurvivorJobComponentFactory(SurvivorJobs.militia, metadata -> metadata.getOrAddMilitiaJobComponent())