package SurvivorJobChangeComponent
import UnitComponent
import FX
import SurvivorJobs
import RegisterEvents
import DisplayTextToPlayer
import MainItemLibrary
import SurvivorComponent
import TlsUnitDefinition
import TlsJobItemIds
import ColorUtility
import initlater SurvivorUnit

group g_temp = CreateGroup()

trigger g_onSurvivorJobChange = CreateTrigger()
unit g_jobChangingSurvivor

// ============================================================================
public function onSurvivorJobChanged(code func)
  g_onSurvivorJobChange.addCondition(Condition(func))

// ============================================================================
public function getJobChangingSurvivor() returns unit
  return g_jobChangingSurvivor

// ============================================================================
function raiseSurvivorJobChangeEvent(unit _unit)
  g_jobChangingSurvivor = _unit
  g_onSurvivorJobChange.evaluate()
  g_jobChangingSurvivor = null

// ============================================================================
function filterUnitIsSurvivorMale() returns bool
  return GetFilterUnit().getTypeId() == TlsUnitIds.Survivors.survivorMale

// ============================================================================
function countNumberOfJoblessSurvivors(player p) returns int
  let filter = Condition(function filterUnitIsSurvivorMale)
  g_temp.clear()
  g_temp.enumUnitsOfPlayer(p, filter)
  let count = g_temp.size()
  filter.destr()
  return count

// ============================================================================
public class SurvivorJobChangeComponent extends UnitComponent

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return SurvivorJobChangeComponent.typeId

  // --------------------------------------------------------------------------
  function changeJobs(SurvivorJobDefinition job) returns bool
    let ownerUnit = getOwnerUnit()
    let unitType = ownerUnit.getTypeId()

    if (job.hasUnitType(unitType))
      displayMessageToPlayer(ownerUnit.getOwner(), "{0} is already a {1}!".format(ownerUnit.getProperName().colorize(COLOR_GOLD), job.getTitle().colorize(COLOR_GOLD)))
      return false

    let survivorComp = getOwner().getSurvivorComponent()
    if (survivorComp == null)
      Log.debug("SurvivorJobChangeComponent", "changeJobs", ownerUnit.getName(), "Failed to change to job " + job.getTitle() + " : owner has no survivor component")
      return false

    let survivorData = survivorComp.getSurvivorData()
    if (survivorData == null)
      Log.debug("SurvivorJobChangeComponent", "changeJobs", ownerUnit.getName(), "Failed to change to job " + job.getTitle() + " : survivor has no survivor data")
      return false

    let jobData = survivorData.getJobData(job)
    if (jobData == null)
      Log.debug("SurvivorJobChangeComponent", "changeJobs", ownerUnit.getName(), "Failed to change to job " + job.getTitle() + " : survivor has no related job data")
      return false

    // The player has learned about this job now that they have assigned the job
    job.setIsJobKnownToPlayer(ownerUnit.getOwner(), true)

    let replacementUnitId = jobData.getUnitId()
    let replacedUnit = replaceUnit(replacementUnitId)

    raiseSurvivorJobChangeEvent(replacedUnit)

    return true

  // --------------------------------------------------------------------------
  function upgradeJob() returns bool
    let ownerUnit = getOwnerUnit()
    let currentUnitId = ownerUnit.getTypeId()
    let job = getJobDefinitionForUnitType(currentUnitId)
    
    let nextUnitId = job.getNextUpgrade(currentUnitId)
    if (nextUnitId == -1)
      return false

    let survivor = getOwner() castTo Survivor
    let survivorDataComp = survivor.getSurvivorComponent()
    let survivorData = survivorDataComp.getSurvivorData()
    let jobData = survivorData.getJobData(job)
    if (jobData == null)
      return false

    replaceUnit(nextUnitId)

    // There is a bug with upgrading non-building units where the player is not
    // charged for the upgrade - so do that now.
    let nextUnitDef = getUnitDefinition(nextUnitId)
    if (nextUnitDef != null)
      let p = getOwnerUnit().getOwner()
      p.subGold(nextUnitDef.getGoldCost())
      p.subLumber(nextUnitDef.getLumberCost())
    else
      Log.debug("SurvivorJobChangeComponent", "changeJobs", ownerUnit.getName(), "No definition registered for unit type {0}".format(nextUnitId.toString()))

    return true

  // --------------------------------------------------------------------------
  private function replaceUnit(int replacementUnitId) returns unit
    let ownerUnit = getOwnerUnit()

    let replacedUnit = replaceUnitTLS(ownerUnit, replacementUnitId, bj_UNIT_STATE_METHOD_RELATIVE, /* persist xp */ false)

    FX.createJobChangeEffect(replacedUnit.getPos())
    FX.createJobChangeTag(replacedUnit.getName(), replacedUnit.getPos(), replacedUnit.getOwner())

    return replacedUnit

// ============================================================================
public function IUnitMetadata.getSurvivorJobChangeComponent() returns SurvivorJobChangeComponent
  return this.getComponent(typeInfo(SurvivorJobChangeComponent.typeId)) castTo SurvivorJobChangeComponent

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorJobChangeComponent() returns SurvivorJobChangeComponent
  var component = this.getSurvivorJobChangeComponent()
  if (component == null)
    component = this.addComponent(new SurvivorJobChangeComponent(this)) castTo SurvivorJobChangeComponent
  return component

// ============================================================================
function onUnitUsedItem()
  let manipulatingUnit = GetManipulatingUnit()
  let manipulatedItem = GetManipulatedItem()

  if (not manipulatedItem.isJobItem())
    return

  let survivor = manipulatingUnit.getMetadata() castTo Survivor
  if (survivor == null)
    return

  let comp = survivor.getSurvivorJobChangeComponent()
  if (comp == null or not comp.getEnabled())
    displayMessageToPlayer(manipulatingUnit.getOwner(), "This item can only be used by a survivor")
    return

  let jobDef = getJobDefinitionForItemType(manipulatedItem.getTypeId())
  if (jobDef == null)
    Log.debug("[onUnitUsedItem] jobId is null for item type " + manipulatedItem.getName())
    return

  if (jobDef == SurvivorJobs.none)
    Log.debug("[onUnitUsedItem] Somehow the jobid equals SurvivorJobs.none for item type " + manipulatedItem.getName())
    return

  let jobData = survivor.getSurvivorComponent().getSurvivorData().getJobData(jobDef)
  if (jobData.getIsEnabled())
    displayMessageToPlayer(manipulatingUnit.getOwner(), "This survivor has already been assigned this job")
    return

  if (not comp.changeJobs(jobDef))
    return
  
  manipulatedItem.remove()

  // Enable the job
  jobData.setIsEnabled(true)

// ============================================================================
function onOrderIssued()

  let issuedOrderId = GetIssuedOrderId()
  let orderedUnit = GetOrderedUnit()

  let metadata = orderedUnit.getMetadata()
  if (metadata == null)
    return
  
  let comp = metadata.getSurvivorJobChangeComponent()
  if (comp == null)
    return

  let currentUnitId = orderedUnit.getTypeId()
  let job = getJobDefinitionForUnitType(currentUnitId)
  if (job == null)
    return

  let nextUnitId = job.getNextUpgrade(currentUnitId)
  if (nextUnitId == issuedOrderId)
    comp.upgradeJob()

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()

  if (not dyingUnit.isSurvivor())
    return

  let survivor = dyingUnit.getMetadata() castTo Survivor
  if (survivor == null)
    return

  let survivorData = survivor.getSurvivorComponent().getSurvivorData()

  // Create an item for each enabled job
  for jobDef in g_allJobDefinitions
    let jobData = survivorData.getJobData(jobDef)
    if (jobData.getIsEnabled())
      let jobItemType = jobDef.getItemType()
      g_MainItemLibrary.createItem(jobItemType, dyingUnit.getPos())
      jobData.setIsEnabled(false)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM, function onUnitUsedItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, function onOrderIssued)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)