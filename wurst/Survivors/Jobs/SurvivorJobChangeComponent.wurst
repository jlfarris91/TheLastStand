package SurvivorJobChangeComponent
import UnitComponent
import TlsItemIds
import TlsUnitIds
import UnitExtensions
import ClosureTimers
import FX
import SurvivorJobIds
import RegisterEvents

constant string JOB_CHANGE_FX_PATH = "Objects\\Spawnmodels\\Other\\ToonBoom\\ToonBoom.mdl"

item array g_tempInventory

// ============================================================================
public class SurvivorJobChangeComponent extends UnitComponent
  private bool m_ignoreItemEvents

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  function dropOtherJobItems(int exceptId)
    let ownerUnit = getOwnerUnit()
    let pos = ownerUnit.getPos()
    for jobItemId in g_jobItemIds
      if (jobItemId != exceptId)
        let itm = ownerUnit.getItemById(jobItemId)
        if (itm != null)
          ownerUnit.dropItemPoint(itm, pos)

  // --------------------------------------------------------------------------
  function playJobChangeFX()
    let fx = FX.createEffect(JOB_CHANGE_FX_PATH, getOwnerUnit().getPos())
    fx.setAlpha(255)
    fx.setColor(255, 255, 255)
    fx.setScale(1.0)
    doAfter(5) ->
      DestroyEffect(fx)

  // --------------------------------------------------------------------------
  function getIgnoringItemEvents() returns bool
    return m_ignoreItemEvents

  // --------------------------------------------------------------------------
  function setIgnoreItemEvents(bool value)
    m_ignoreItemEvents = value

// ============================================================================
public function IUnitMetadata.getSurvivorJobChangeComponent() returns SurvivorJobChangeComponent
  return this.getComponent(Type(SurvivorJobChangeComponent.typeId)) castTo SurvivorJobChangeComponent

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorJobChangeComponent() returns SurvivorJobChangeComponent
  var component = this.getSurvivorJobChangeComponent()
  if (component == null)
    component = this.addComponent(new SurvivorJobChangeComponent(this)) castTo SurvivorJobChangeComponent
  return component

// ============================================================================
function onPickupItem()

  let manipulatingUnit = GetManipulatingUnit()
  let metadata = manipulatingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSurvivorJobChangeComponent()
  if (comp == null or not comp.getEnabled())
    return

  if (comp.getIgnoringItemEvents())
    return

  let itm = GetManipulatedItem()

  if (not itm.isJobItem())
    return

  let itemType = itm.getTypeId()
  let unitBeingReplaced = manipulatingUnit
  let unitType = unitBeingReplaced.getTypeId()

  let jobId = getJobIdForItemType(itemType)
  if (jobId == SurvivorJobIds.none)
    return

  let matchingUnitType = getUnitTypeForJobId(jobId)
  if (matchingUnitType == -1)
    return

  if (unitType == matchingUnitType)
    return

  comp.setIgnoreItemEvents(true)

  comp.playJobChangeFX()

  let wasSelected = unitBeingReplaced.isSelectedByOwner()
  let replacedUnit = replaceUnitTLS(unitBeingReplaced, matchingUnitType, bj_UNIT_STATE_METHOD_RELATIVE)
  if (wasSelected)
    SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())

  comp.dropOtherJobItems(itemType)

  comp.setIgnoreItemEvents(false)

// ============================================================================
function onDropItem()

  let manipulatingUnit = GetManipulatingUnit()
  let metadata = manipulatingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSurvivorJobChangeComponent()
  if (comp == null or not comp.getEnabled())
    return

  if (comp.getIgnoringItemEvents())
    return

  let itm = GetManipulatedItem()

  if (not itm.isJobItem())
    return

  let unitBeingReplaced = manipulatingUnit
  if (not unitBeingReplaced.isAlive())
    return

  let droppedItemType = itm.getTypeId()
  let unitType = unitBeingReplaced.getTypeId()

  let jobId = getJobIdForUnitType(unitType)
  if (jobId == SurvivorJobIds.none)
    return

  let matchingJobItemType = getItemTypeForJobId(jobId)
  if (matchingJobItemType == -1)
    return

  if (droppedItemType != matchingJobItemType)
    return

  comp.playJobChangeFX()

  comp.setIgnoreItemEvents(true)

  for i = 0 to bj_MAX_INVENTORY - 1
    let indexItem = UnitItemInSlot(unitBeingReplaced, i)
    if (indexItem != null)
      g_tempInventory[i] = indexItem == itm ? null : indexItem
      UnitRemoveItemFromSlot(unitBeingReplaced, i)
  
  let wasSelected = unitBeingReplaced.isSelectedByOwner()
  let replacedUnit = replaceUnitTLS(unitBeingReplaced, TlsUnitIds.Survivors.survivorMale, bj_UNIT_STATE_METHOD_RELATIVE)
  if (wasSelected)
    SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())

  for i = 0 to bj_MAX_INVENTORY - 1
    let indexItem = g_tempInventory[i]
    if (indexItem != null)
      UnitAddItem(replacedUnit, indexItem)

  comp.setIgnoreItemEvents(false)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, function onPickupItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM, function onDropItem)