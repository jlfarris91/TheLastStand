package SurvivorJobChangeComponent
import UnitComponent
import UnitExtensions
import ClosureTimers
import FX
import SurvivorJobIds
import RegisterEvents
import DisplayTextToPlayer
import StringExtensions
import TlsItemIds
import MainItemLibrary

constant string JOB_CHANGE_FX_PATH = "Objects\\Spawnmodels\\Other\\ToonBoom\\ToonBoom.mdl"

// ============================================================================
public class SurvivorJobChangeComponent extends UnitComponent

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  function playJobChangeFX()
    let fx = FX.createEffect(JOB_CHANGE_FX_PATH, getOwnerUnit().getPos())
    fx.setAlpha(255)
    fx.setColor(255, 255, 255)
    fx.setScale(1.0)
    doAfter(5) ->
      DestroyEffect(fx)

  // --------------------------------------------------------------------------
  function changeJobs(string jobId) returns bool
    let matchingUnitType = getUnitTypeForJobId(jobId)
    if (matchingUnitType == -1)
      Log.error("Invalid job id: " + jobId)
      return false

    let ownerUnit = getOwnerUnit()

    let unitType = ownerUnit.getTypeId()
    if (unitType == matchingUnitType)
      displayMessageToPlayer(ownerUnit.getOwner(), "{0} is already a {1}!".format(ownerUnit.getProperName().colorize(COLOR_GOLD), getJobTitleForJobId(jobId).colorize(COLOR_GOLD)))
      return false

    playJobChangeFX()

    FX.createJobChangeTag(getJobTitleForJobId(jobId), ownerUnit.getPos(), ownerUnit.getOwner())

    let oldJobId = getJobIdForUnitType(unitType)

    let wasSelected = ownerUnit.isSelectedByOwner()
    let replacedUnit = replaceUnitTLS(ownerUnit, matchingUnitType, bj_UNIT_STATE_METHOD_RELATIVE)
    if (wasSelected)
      SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())
  
    if (oldJobId != SurvivorJobIds.none)
      let jobItemType = getItemTypeForJobId(oldJobId)
      let jobItem = g_MainItemLibrary.createItem(jobItemType, replacedUnit.getPos())
      UnitAddItemSwapped(jobItem, replacedUnit)

    return true

// ============================================================================
public function IUnitMetadata.getSurvivorJobChangeComponent() returns SurvivorJobChangeComponent
  return this.getComponent(typeInfo(SurvivorJobChangeComponent.typeId)) castTo SurvivorJobChangeComponent

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorJobChangeComponent() returns SurvivorJobChangeComponent
  var component = this.getSurvivorJobChangeComponent()
  if (component == null)
    component = this.addComponent(new SurvivorJobChangeComponent(this)) castTo SurvivorJobChangeComponent
  return component

// ============================================================================
function onUnitUsedItem()
  let manipulatingUnit = GetManipulatingUnit()
  let manipulatedItem = GetManipulatedItem()

  if (not manipulatedItem.isJobItem())
    return

  let metadata = manipulatingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSurvivorJobChangeComponent()
  if (comp == null or not comp.getEnabled())
    displayMessageToPlayer(manipulatingUnit.getOwner(), "This item can only be used by a survivor")
    return

  let jobId = getJobIdForItemType(manipulatedItem.getTypeId())
  if (jobId == SurvivorJobIds.none)
    return

  let successfullyChangedJobs = comp.changeJobs(jobId)

  if (successfullyChangedJobs)
    manipulatedItem.remove()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM, function onUnitUsedItem)