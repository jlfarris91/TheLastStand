package SurvivorJoblessComponent
import SurvivorJobComponent
import UnitMetadata
import TlsAbilityIds
import Ability_Harvest

// ============================================================================
public class SurvivorJoblessComponent extends SurvivorJobComponent
  
  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return SurvivorJoblessComponent.typeId

  // --------------------------------------------------------------------------
  override function onLevelChanged()
    super.onLevelChanged()
    let ownerUnit = getOwnerUnit()
    let ownerUnitLevel = ownerUnit.getLevel()
    let abilityId = TlsAbilityIds.harvest[ownerUnitLevel - 1]

    // Remove all versions of harvest
    for i = 0 to HARVEST_LEVELS - 1
      if (ownerUnit.hasAbility(TlsAbilityIds.harvest[i]))
        ownerUnit.removeAbility(TlsAbilityIds.harvest[i])

    // Add the version of harvest that matches the level of the survivor
    if (not ownerUnit.hasAbility(abilityId))
      ownerUnit.addAbility(abilityId, ownerUnitLevel)

// ============================================================================
public function IUnitMetadata.getSurvivorJoblessComponent() returns SurvivorJoblessComponent
  return this.getComponent(typeInfo(SurvivorJoblessComponent.typeId)) castTo SurvivorJoblessComponent

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorJoblessComponent() returns SurvivorJoblessComponent
  var component = this.getSurvivorJoblessComponent()
  if (component == null)
    component = this.addComponent(new SurvivorJoblessComponent(this)) castTo SurvivorJoblessComponent
  return component