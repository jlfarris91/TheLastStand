package SurvivorJobComponent
import UnitComponent
import SurvivorJobs
import Func
import HashMap

HashMap<SurvivorJobDefinition, Func1<IUnitMetadata, SurvivorJobComponent>> g_survivorJobComponentGetterMap = new HashMap<SurvivorJobDefinition, Func1<IUnitMetadata, SurvivorJobComponent>>()
HashMap<SurvivorJobDefinition, Func1<IUnitMetadata, SurvivorJobComponent>> g_survivorJobComponentFactoryMap = new HashMap<SurvivorJobDefinition, Func1<IUnitMetadata, SurvivorJobComponent>>()

// ============================================================================
public abstract class SurvivorJobComponent extends UnitComponent
  private int m_unitId
  private int m_skillPoints
  private bool m_isAssigned

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_skillPoints = 1
    m_isAssigned = false
    m_unitId = getJob().getInitialUnitType()

  // --------------------------------------------------------------------------
  abstract function getJob() returns SurvivorJobDefinition

  // --------------------------------------------------------------------------
  function getUnitId() returns int
    return m_unitId

  // --------------------------------------------------------------------------
  function setUnitId(int unitId)
    m_unitId = unitId

  // --------------------------------------------------------------------------
  function getIsAssigned() returns bool
    return m_isAssigned

  // --------------------------------------------------------------------------
  function setIsAssigned(bool value)
    m_isAssigned = value

  // --------------------------------------------------------------------------
  function getSkillPoints() returns int
    return m_skillPoints

  // --------------------------------------------------------------------------
  function setSkillPoints(int value)
    m_skillPoints = value

  // --------------------------------------------------------------------------
  function onLevelChanged()
    saveJobData()

  // --------------------------------------------------------------------------
  function onSkillPointSpent()
    saveJobData()

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    loadJobData()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    saveJobData()

  // --------------------------------------------------------------------------
  protected function loadJobData()
    let ownerUnit = getOwnerUnit()
    ownerUnit.setSkillPoints(getSkillPoints())

  // --------------------------------------------------------------------------
  protected function saveJobData()
    let ownerUnit = getOwnerUnit()
    setUnitId(ownerUnit.getTypeId())
    setSkillPoints(ownerUnit.getSkillPoints())

  // --------------------------------------------------------------------------
  static function registerSurvivorJobComponentGetter(SurvivorJobDefinition job, Func1<IUnitMetadata, SurvivorJobComponent> getter)
    g_survivorJobComponentGetterMap.put(job, getter.acquire())

  // --------------------------------------------------------------------------
  static function registerSurvivorJobComponentFactory(SurvivorJobDefinition job, Func1<IUnitMetadata, SurvivorJobComponent> getter)
    g_survivorJobComponentFactoryMap.put(job, getter.acquire())

// ============================================================================
public function IUnitMetadata.getSurvivorJobComponent(SurvivorJobDefinition job) returns SurvivorJobComponent
  let getter = g_survivorJobComponentGetterMap.get(job)
  if (getter == null)
    return null
  return getter.call(this)

// ============================================================================
public function IUnitMetadata.getOrAddSurvivorJobComponent(SurvivorJobDefinition job) returns SurvivorJobComponent
  let factory = g_survivorJobComponentFactoryMap.get(job)
  if (factory == null)
    return null
  return factory.call(this)