package SurvivorUnit
import Camp
import SurvivorJobComponent
import TlsUnitIds
import GameConstants
import SurvivorStats
import Statistic
import Icons
import SurvivorComponent
import HashMap

import DistanceTraveledStatistic
import KillsStat
import DaysSurvivedStat
import NightsSurvivedStat
import SurvivorData
import SurvivorNames
import SurvivorJobIds

import BuilderJobComponent
import MilitiaJobComponent
import SpearmanJobComponent
import MedicJobComponent
import MarksmanJobComponent
import SurvivorJobChangeComponent
import RangedTargetXpReceieverComponent

// ============================================================================
public class Survivor extends CampUnit
  private HashMap<string, SurvivorJobComponent> m_jobComponents
  private SurvivorJobComponent m_activeJobComponent
  private SurvivorData m_survivorData

  // --------------------------------------------------------------------------
  construct(ICamp camp)
    super(camp)
    m_jobComponents = new HashMap<string, SurvivorJobComponent>()
    initialize()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_jobComponents
    m_jobComponents = null
    m_activeJobComponent = null

    destroy m_survivorData
    m_survivorData = null

  // --------------------------------------------------------------------------
  protected override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)

    if (oldUnit != null)
      saveOldJobStats(oldUnit)

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(false)

    m_activeJobComponent = null

    if (newUnit == null)
      return

    let newUnitId = newUnit.getTypeId()
    let jobId = getJobIdForUnitType(newUnitId)
    m_activeJobComponent = getJobComponent(jobId)

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(true)

    loadNewJobStats(newUnit)

  // --------------------------------------------------------------------------
  private function saveOldJobStats(unit theUnit)
    let unitTypeId = theUnit.getTypeId()
    let jobId = getJobIdForUnitType(unitTypeId)
    let survivorDataComp = this.getSurvivorComponent()
    let survivorData = survivorDataComp.getSurvivorData()

    let jobData = survivorData.getJobData(jobId)
    if (jobData != null)
      jobData.setLevel(theUnit.getLevel())
      jobData.setExperience(theUnit.getXp())

  // --------------------------------------------------------------------------
  private function loadNewJobStats(unit theUnit)
    let unitTypeId = theUnit.getTypeId()
    let jobId = getJobIdForUnitType(unitTypeId)
    let survivorDataComp = this.getSurvivorComponent()
    let survivorData = survivorDataComp.getSurvivorData()

    theUnit.setProperName(survivorData.getName())

    let jobData = survivorData.getJobData(jobId)
    if (jobData != null)
      theUnit.setXp(jobData.getExperience(), false)

  // --------------------------------------------------------------------------
  private function registerJobComponent(string jobId, SurvivorJobComponent comp)
    m_jobComponents.put(jobId, comp)

  // --------------------------------------------------------------------------
  private function getJobComponent(string jobId) returns SurvivorJobComponent
    return m_jobComponents.get(jobId)

  // --------------------------------------------------------------------------
  private function initialize()

    let owningUnit = getUnit()
    let owningPlayer = owningUnit.getOwner()

    m_survivorData = new SurvivorData()
    m_survivorData.setName(getRandomSurvivorNameForPlayer(owningPlayer))

    initializeStats(m_survivorData)

    addComponent(new SurvivorJobChangeComponent(this))

    let rangedTargetXpReceiever = new RangedTargetXpRecieverComponent(this)
    ..setXpPerHit(1)
    addComponent(rangedTargetXpReceiever)

    let survivorDataComponent = this.getOrAddSurvivorComponent()
    survivorDataComponent.setSurvivorData(m_survivorData)

    registerJobComponent(SurvivorJobIds.builder,  this.getOrAddBuilderJobComponent()  ..setEnabled(false))
    registerJobComponent(SurvivorJobIds.militia,  this.getOrAddMilitiaJobComponent()  ..setEnabled(false))
    registerJobComponent(SurvivorJobIds.spearman, this.getOrAddSpearmanJobComponent() ..setEnabled(false))
    registerJobComponent(SurvivorJobIds.medic,    this.getOrAddMedicJobComponent()    ..setEnabled(false))
    registerJobComponent(SurvivorJobIds.marksman, this.getOrAddMarksmanJobComponent() ..setEnabled(false))

  // --------------------------------------------------------------------------
  private function initializeStats(SurvivorData survivorData)

    // Kills
    let killsStat = new IntStatistic("Kills")
    ..setIcon(Icons.bTNBattleStations)
    ..setUnits("kills")
    ..setTooltip("The number of enemies killed by getting the last hit")

    survivorData.addStatistic(SurvivorStats.kills, killsStat)
    addComponent(new KillsStat(this))

    // Distance traveled
    let distanceTraveledStat = new RealStatistic("Distance Traveled")
    ..setIcon(Icons.bTNBootsOfSpeed)
    ..setUnits("meters")
    ..setTooltip("The meters traveled")

    survivorData.addStatistic(SurvivorStats.distanceTraveled, distanceTraveledStat)
    addComponent(new DistanceTraveledStatisticComponent(this))

    // Days survived
    let daysSurvivedStat = new IntStatistic("Days Survived")
    ..setIcon(Icons.bTNFarSight)
    ..setUnits("days")
    ..setTooltip("The number of days survived")

    survivorData.addStatistic(SurvivorStats.daysSurvived, daysSurvivedStat)
    addComponent(new DaysSurvivedStat(this))

    // Nights survived
    let nightsSurvivedStat = new IntStatistic("Nights Survived")
    ..setIcon(Icons.bTNAnimateDead)
    ..setUnits("nights")
    ..setTooltip("The number of nights survived")

    survivorData.addStatistic(SurvivorStats.nightsSurvived, nightsSurvivedStat)
    addComponent(new NightsSurvivedStat(this))

    // m_stats.createIntStatistic(Stats.assists, "Assists", 0)
    // ..setIcon(Icons.bTNImmolationOff)
    // ..setUnits("assists")
    // ..setTooltip("The number of enemies killed with the help of this Survivor")

    // m_stats.createRealStatistic(Stats.damageDealt, "Damage Dealt", 0.0)
    // ..setIcon(Icons.bTNSteelMelee)
    // ..setUnits("damage")
    // ..setTooltip("The total amount of damage dealt")

    // m_stats.createRealStatistic(Stats.healthHealed, "HP Healed", 0.0)
    // ..setIcon(Icons.bTNStatUp)
    // ..setUnits("hp")
    // ..setTooltip("The amount of health healed")

// ============================================================================
public function unit.isSurvivor() returns bool
  let targetTypeId = this.getTypeId()
  return  targetTypeId == TlsUnitIds.Survivors.survivorMale or
          targetTypeId == TlsUnitIds.Survivors.survivorBuilder or
          targetTypeId == TlsUnitIds.Survivors.survivorMarksman or
          targetTypeId == TlsUnitIds.Survivors.survivorMedic or
          targetTypeId == TlsUnitIds.Survivors.survivorMilitia or
          targetTypeId == TlsUnitIds.Survivors.survivorSpearman

// ============================================================================
public function unit.isRescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() != PLAYER_VILLAGERS

// ============================================================================
public function unit.isUnrescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() == PLAYER_VILLAGERS

// ============================================================================
public function unit.isRescuableSurvivor() returns bool
  return this.isUnrescuedSurvivor()