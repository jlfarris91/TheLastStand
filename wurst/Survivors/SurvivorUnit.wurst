package SurvivorUnit
import SurvivorJobComponent
import TlsUnitIds
import GameConstants
import SurvivorStats
import Statistic
import Icons
import SurvivorComponent
import HashMap

import KillsStat
import DaysSurvivedStat
import NightsSurvivedStat
import SurvivorData
import SurvivorNames
import SurvivorJobs

import BuilderJobComponent
import MilitiaJobComponent
import SpearmanJobComponent
import MedicJobComponent
import MarksmanJobComponent
import SurvivorJobChangeComponent
import RangedTargetXpReceieverComponent
import UnitMetadata
import SurvivorJoblessComponent

// ============================================================================
public class Survivor extends UnitMetadata
  private HashMap<SurvivorJobDefinition, SurvivorJobComponent> m_jobComponents
  private SurvivorJobComponent m_activeJobComponent
  private SurvivorData m_survivorData

  // --------------------------------------------------------------------------
  construct()
    m_jobComponents = new HashMap<SurvivorJobDefinition, SurvivorJobComponent>()
    initialize()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_jobComponents
    m_jobComponents = null
    m_activeJobComponent = null

    destroy m_survivorData
    m_survivorData = null

  // --------------------------------------------------------------------------
  protected override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)

    if (oldUnit != null)
      saveOldJobStats(oldUnit)

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(false)

    m_activeJobComponent = null

    if (newUnit == null)
      return

    let newUnitId = newUnit.getTypeId()
    let job = getJobDefinitionForUnitType(newUnitId)
    m_activeJobComponent = getJobComponent(job)

    if (m_activeJobComponent != null)
      m_activeJobComponent.setEnabled(true)

    loadNewJobStats(newUnit)

  // --------------------------------------------------------------------------
  private function saveOldJobStats(unit theUnit)
    let unitTypeId = theUnit.getTypeId()
    let jobId = getJobDefinitionForUnitType(unitTypeId)
    let survivorDataComp = this.getSurvivorComponent()
    let survivorData = survivorDataComp.getSurvivorData()

    let jobData = survivorData.getJobData(jobId)
    if (jobData != null)
      jobData.setLevel(theUnit.getLevel())
      jobData.setExperience(theUnit.getXp())
      jobData.setUnitId(unitTypeId)

  // --------------------------------------------------------------------------
  private function loadNewJobStats(unit theUnit)
    let unitTypeId = theUnit.getTypeId()
    let jobId = getJobDefinitionForUnitType(unitTypeId)
    let survivorDataComp = this.getSurvivorComponent()
    let survivorData = survivorDataComp.getSurvivorData()

    theUnit.setProperName(survivorData.getName())

    let jobData = survivorData.getJobData(jobId)
    if (jobData != null)
      theUnit.setXp(jobData.getExperience(), false)

  // --------------------------------------------------------------------------
  private function registerJobComponent(SurvivorJobDefinition job, SurvivorJobComponent comp)
    m_jobComponents.put(job, comp)

  // --------------------------------------------------------------------------
  function getJobComponent(SurvivorJobDefinition job) returns SurvivorJobComponent
    return m_jobComponents.get(job)

  // --------------------------------------------------------------------------
  private function initialize()

    let owningUnit = getUnit()
    let owningPlayer = owningUnit.getOwner()

    m_survivorData = new SurvivorData()
    m_survivorData.setName(getRandomSurvivorNameForPlayer(owningPlayer))

    initializeStats(m_survivorData)

    addComponent(new SurvivorJobChangeComponent(this))

    let rangedTargetXpReceiever = new RangedTargetXpRecieverComponent(this)
    ..setXpPerHit(1)
    addComponent(rangedTargetXpReceiever)

    let survivorDataComponent = this.getOrAddSurvivorComponent()
    survivorDataComponent.setSurvivorData(m_survivorData)

    registerJobComponent(SurvivorJobs.none,     this.getOrAddSurvivorJoblessComponent() ..setEnabled(false))
    registerJobComponent(SurvivorJobs.builder,  this.getOrAddBuilderJobComponent()      ..setEnabled(false))
    registerJobComponent(SurvivorJobs.militia,  this.getOrAddMilitiaJobComponent()      ..setEnabled(false))
    registerJobComponent(SurvivorJobs.spearman, this.getOrAddSpearmanJobComponent()     ..setEnabled(false))
    registerJobComponent(SurvivorJobs.medic,    this.getOrAddMedicJobComponent()        ..setEnabled(false))
    registerJobComponent(SurvivorJobs.marksman, this.getOrAddMarksmanJobComponent()     ..setEnabled(false))

  // --------------------------------------------------------------------------
  private function initializeStats(SurvivorData survivorData)

    // Kills
    let killsStat = new IntStatistic("Kills")
    ..setIcon(Icons.bTNBattleStations)
    ..setUnits("kills")
    ..setTooltip("The number of enemies killed by getting the last hit")

    survivorData.addStatistic(SurvivorStats.kills, killsStat)
    addComponent(new KillsStat(this))

    // Days survived
    let daysSurvivedStat = new IntStatistic("Days Survived")
    ..setIcon(Icons.bTNFarSight)
    ..setUnits("days")
    ..setTooltip("The number of days survived")

    survivorData.addStatistic(SurvivorStats.daysSurvived, daysSurvivedStat)
    addComponent(new DaysSurvivedStat(this))

    // Nights survived
    let nightsSurvivedStat = new IntStatistic("Nights Survived")
    ..setIcon(Icons.bTNAnimateDead)
    ..setUnits("nights")
    ..setTooltip("The number of nights survived")

    survivorData.addStatistic(SurvivorStats.nightsSurvived, nightsSurvivedStat)
    addComponent(new NightsSurvivedStat(this))

    // m_stats.createIntStatistic(Stats.assists, "Assists", 0)
    // ..setIcon(Icons.bTNImmolationOff)
    // ..setUnits("assists")
    // ..setTooltip("The number of enemies killed with the help of this Survivor")

    // m_stats.createRealStatistic(Stats.damageDealt, "Damage Dealt", 0.0)
    // ..setIcon(Icons.bTNSteelMelee)
    // ..setUnits("damage")
    // ..setTooltip("The total amount of damage dealt")

    // m_stats.createRealStatistic(Stats.healthHealed, "HP Healed", 0.0)
    // ..setIcon(Icons.bTNStatUp)
    // ..setUnits("hp")
    // ..setTooltip("The amount of health healed")

// ============================================================================
public function unit.isRescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() != PLAYER_VILLAGERS

// ============================================================================
public function unit.isUnrescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() == PLAYER_VILLAGERS

// ============================================================================
public function unit.isRescuableSurvivor() returns bool
  return this.isUnrescuedSurvivor()