package SurvivorJob
import RegisterEvents
import UnitExtensions
import TlsUnitIds
import TlsItemIds
import UnitMetadata

function onUnitPickedUpItem()
  let itm = GetManipulatedItem()
  let u = GetManipulatingUnit()

  if (u.getTypeId() != TlsUnitIds.survivor)
    return

  int replaceUnitId

  switch (itm.getTypeId())
    case TlsItemIds.huntingRifle
      replaceUnitId = TlsUnitIds.survivorMarksman
    case TlsItemIds.basicTools
      replaceUnitId = TlsUnitIds.survivorBuilder
    case TlsItemIds.medicalKit
      replaceUnitId = TlsUnitIds.survivorMedic
    default
      return

  let wasSelected = u.isSelectedByOwner()
  let replacedUnit = replaceUnitTLS(u, replaceUnitId, bj_UNIT_STATE_METHOD_RELATIVE)
  UnitAddItemSwapped(itm, replacedUnit)
  itm.setDropOnDeath(true)
  if (wasSelected)
    SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())

function onUnitDroppedItem()
  let itm = GetManipulatedItem()
  let u = GetManipulatingUnit()
  let itemTypeId = itm.getTypeId()
  let unitTypeId = u.getTypeId()

  bool isValid =  (unitTypeId == TlsUnitIds.survivorBuilder and itemTypeId == TlsItemIds.basicTools) or
                  (unitTypeId == TlsUnitIds.survivorMarksman and itemTypeId == TlsItemIds.huntingRifle) or
                  (unitTypeId == TlsUnitIds.survivorMedic and itemTypeId == TlsItemIds.medicalKit)

  if (not isValid)
    return
   
  let wasSelected = u.isSelectedByOwner()
  let replacedUnit = replaceUnitTLS(u, TlsUnitIds.survivor, bj_UNIT_STATE_METHOD_RELATIVE)
  if (wasSelected)
    SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())

init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, function onUnitPickedUpItem)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM, function onUnitDroppedItem)