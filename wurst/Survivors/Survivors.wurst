package Survivors
import TlsUnitIds
import HumanPlayerMetadata
import UnitMetadata
import WeightedSet
import DisplayTextToPlayer
import SurvivorComponent
import Orders
import ColorUtility
import ErrorHandling
import SurvivorSpawnManager
import ClosureTimers
import GameConstants
import FX
import Bounds
import BoundsExtensions
import Range
import HumanPlayers
import FriendlyCircularCachedSpawnManager
import RandomSpawnPointProvider
import UnitExtensions

group g_tempGroup = CreateGroup()

// ============================================================================
public function spawnSurvivorUnitForPlayer(player _player) returns unit

  if (_player == null)
    argumentNullError("_player")
    return null

  let playerMetadata = _player.getHumanMetadataRequired()
  if (playerMetadata.getIsDead())
    Log.debug("[spawnSurvivorUnitForPlayer] Player {0} is dead".format(_player.getName()))
    return null

  let weightedSet = new WeightedSet<int>()
  ..add(TlsUnitIds.Survivors.survivorMale, 50)
  ..add(TlsUnitIds.Survivors.survivorMilitia1, 1)
  ..add(TlsUnitIds.Survivors.survivorSpearman1, 1)
  ..add(TlsUnitIds.Survivors.survivorMedic, 1)
  ..add(TlsUnitIds.Survivors.survivorMarksman, 1)
  // ..add(TlsUnitIds.Survivors.survivorEngineer, 1)

  let unitId = weightedSet.getRandom()

  let spawnPointResult = getSpawnPoint(_player)
  if (not spawnPointResult.succeeded)
    Log.debug("[spawnSurvivorUnitForPlayer] Failed to find spawn point for survivor, trying again")
    // try again
    doAfter(1.0, () -> spawnSurvivorUnitForPlayer(_player))
    return null

  let survivor = createUnitTLS(_player, unitId, spawnPointResult.spawnPoint, GetRandomDirectionDeg())
  let survivorMetadata = survivor.getMetadataRequired()

  let survivorUnit = survivorMetadata.getUnit()
  survivorUnit.issuePointOrderById(OrderIds.move, playerMetadata.getCampCenter())

  let survivorDataComponent = survivorMetadata.getSurvivorComponent()
  let survivorData = survivorDataComponent.getSurvivorData()
  
  let message = "{0} {1} has joined your camp!".format(
    survivorUnit.getName().colorize(Colors.gold),
    survivorData.getName())
  displayMessageToPlayer(_player, message)

  AddIndicator(survivorUnit, 0, 255, 0, 255)

  // Fade the survivor in over time
  survivorUnit.fadeIn(color(150, 150, 150))

  return survivorUnit

// ============================================================================
public function trySpawnSurvivorForPlayer(player _player)
  if (not _player.isPlayingHumanPlayer())
    return
  let availableSurvivors = _player.getCurrentSupply()
  let currentSurvivors = countNumberOfSurvivorsOwnedByPlayer(_player)
  Log.debug("[trySpawnSurvivorForPlayer] Player {0} has room for {1} Survivor(s) and has {2} Survivor(s)".format(_player.getName(), availableSurvivors.toString(), currentSurvivors.toString()))
  if (availableSurvivors > currentSurvivors)
    spawnSurvivorUnitForPlayer(_player)

// ============================================================================
public function countNumberOfSurvivorsOwnedByPlayer(player _player) returns int
  g_tempGroup.clear()
  g_tempGroup.enumUnitsOfPlayer(_player, null)
  var count = 0
  for _unit from g_tempGroup
    if (_unit.isAlive() and _unit.isSurvivor())
      count++
  return count

// ============================================================================
public function owningPlayerBanishSurvivor(unit targetUnit)
  let owningPlayer = targetUnit.getOwner()

  FX.createJobChangeTag("Banished!", targetUnit.getPos(), owningPlayer)

  displayMessageToPlayer(
    owningPlayer,
    "You have banished {0} {1} from your camp.".format(
      targetUnit.getName().colorize(Colors.gold),
      targetUnit.getProperName()))

  AddIndicator(targetUnit, 0, 255, 0, 255)

  // Try to spawn another survivor for the player later
  doAfter(SURVIVORS_RESPAWN_BANISHED_INTERVAL_RANGE.getRandom(), () -> trySpawnSurvivorForPlayer(owningPlayer))

  banishSurvivor(targetUnit)

// ============================================================================
public function banishSurvivor(unit targetUnit)

  // Give to the villagers player so the human player can't control it anymore
  targetUnit.setOwner(PLAYER_VILLAGERS, false)

  // Make the target move to a random point in the map while it is being banished
  targetUnit.issuePointOrder("move", playableBounds.getRandomPoint())

  // Fade out the survivor over time
  targetUnit.fadeOut(UNIT_FADE_DURATION, color(150, 150, 150))
  
  // Remove the survivor once it is invisible
  doAfter(UNIT_FADE_DURATION, () -> targetUnit.remove())

// ============================================================================
function getSpawnPoint(player p) returns spawnPointResult
  let currentSpawnManager = getPlayerCachedFriendlySpawnManager(p)
  let fallbackSpawnManager = getPlayerSurvivorSpawnManager(p)
  let spawnPointProvider = new RandomSpawnPointProvider(currentSpawnManager, fallbackSpawnManager, SpawnRange.CLOSE)
  let result = spawnPointProvider.getSpawnPoint()
  destroy spawnPointProvider
  return result