package Survivors
import TlsUnitIds
import HumanPlayerMetadata
import UnitMetadata
import WeightedSet
import DisplayTextToPlayer
import Orders
import ColorUtility
import ErrorHandling
import SurvivorSpawnManager
import ClosureTimers
import GameConstants
import FX
import Bounds
import BoundsExtensions
import Range
import HumanPlayers
import FriendlyCircularCachedSpawnManager
import RandomSpawnPointProvider
import UnitExtensions
import SurvivorJobs
import SurvivorComponent
import initlater SurvivorJobPanel
import PlayerExtensions
import Math
import GameInstance

group g_tempGroup = CreateGroup()

// ============================================================================
public class SurvivorUtility
    
  // --------------------------------------------------------------------------
  static function orderSelectedUnitsToAssignJob(player owner, SurvivorJobDefinition job)
    
    let survivorJobPanel = getSurvivorJobPanel(owner)
    if (survivorJobPanel != null)
      survivorJobPanel.batchUpdates(true)

    let selectedUnits = owner.getSelectedUnits()

    for u in selectedUnits
    //{
      if (owner.controlsUnit(u))
      //{
        let survivor = u.getSurvivorComponent()
        if (survivor != null and survivor.canChangeJob(job))
        //{
          survivor.changeJobs(job)
        //}
      //}
    //}

    destroy selectedUnits

    if (survivorJobPanel != null)
      survivorJobPanel.batchUpdates(false)

  // --------------------------------------------------------------------------
  static function orderSelectedUnitsToUnequipJobDefItem(player owner, SurvivorJobDefinition job)
    
    let survivorJobPanel = getSurvivorJobPanel(owner)
    if (survivorJobPanel != null)
      survivorJobPanel.batchUpdates(true)

    let selectedUnits = owner.getSelectedUnits()

    for u in selectedUnits
    //{
      if (owner.controlsUnit(u))
      //{
        let survivor = u.getSurvivorComponent()
        if (survivor != null)
          survivor.tryUnequipJob(job)
      //}
    //}
  
    destroy selectedUnits

    if (survivorJobPanel != null)
      survivorJobPanel.batchUpdates(false)

  // ============================================================================
  static function spawnSurvivorUnitForPlayer(player _player) returns unit

    if (_player == null)
      argumentNullError("_player")
      return null

    let playerMetadata = _player.getHumanMetadataRequired()
    if (playerMetadata.getIsHeroDead())
      Log.debug("[spawnSurvivorUnitForPlayer] Player {0} is dead".format(_player.getName()))
      return null

    let spawnPointResult = getSpawnPoint(_player)
    if (not spawnPointResult.succeeded)
      Log.debug("[spawnSurvivorUnitForPlayer] Failed to find spawn point for survivor, trying again")
      // try again
      doAfter(1.0, () -> spawnSurvivorUnitForPlayer(_player))
      return null

    var survivor = createUnitTLS(_player, TlsUnitIds.Survivors.survivorMale, spawnPointResult.spawnPoint, GetRandomDirectionDeg())

    let weightedSet = new WeightedSet<SurvivorJobDefinition>()
    ..add(SurvivorJobs.none, 50)
    ..add(SurvivorJobs.militia, 1)
    ..add(SurvivorJobs.spearman, 1)
    ..add(SurvivorJobs.medic, 1)
    ..add(SurvivorJobs.acolyte, 1)
    ..add(SurvivorJobs.marksman, 1)
    // ..add(SurvivorJobs.engineer, 1)

    let job = weightedSet.getRandom()

    let survivorComp = survivor.getOrAddSurvivorComponent()
    survivorComp.getJobData(job).setIsEquipped(true)

    if (survivorComp.canChangeJob(job))
      survivorComp.changeJobs(job)
      survivor = survivorComp.getOwnerUnit()

    // Scale survivor level with game progress
    let gameProgress01 = clamp01(g_GameInstance.getGameProgress01())
    let survivorLevel = SURVIVORS_SPAWN_LEVEL_RANGE.lerp(gameProgress01).floor()
    if (survivorLevel > 1)
      survivor.setLevel(survivorLevel, false)

    survivor.issuePointOrderById(OrderIds.move, playerMetadata.getCampCenter())
    
    let message = "{0} {1} has joined your camp!".format(
      survivor.getName().colorize(Colors.gold),
      survivor.getProperName())
    displayMessageToPlayer(_player, message)

    AddIndicator(survivor, 0, 255, 0, 255)

    // Fade the survivor in over time
    survivor.fadeIn(color(150, 150, 150))

    return survivor

  // ============================================================================
  static function trySpawnSurvivorForPlayer(player _player)
    if (not _player.isPlayingHumanPlayer())
      return
    let availableSurvivors = _player.getCurrentSupply()
    let currentSurvivors = countNumberOfSurvivorsOwnedByPlayer(_player)
    Log.debug("[trySpawnSurvivorForPlayer] Player {0} has room for {1} Survivor(s) and has {2} Survivor(s)".format(_player.getName(), availableSurvivors.toString(), currentSurvivors.toString()))
    if (availableSurvivors > currentSurvivors)
      spawnSurvivorUnitForPlayer(_player)

  // ============================================================================
  static function countNumberOfSurvivorsOwnedByPlayer(player _player) returns int
    g_tempGroup.clear()
    g_tempGroup.enumUnitsOfPlayer(_player, null)
    var count = 0
    for _unit from g_tempGroup
      if (_unit.isAlive() and _unit.isSurvivor())
        count++
    return count

  // ============================================================================
  static function owningPlayerBanishSurvivor(unit targetUnit)
    let owningPlayer = targetUnit.getOwner()

    FX.createJobChangeTag("Banished!", targetUnit.getPos(), owningPlayer)

    displayMessageToPlayer(
      owningPlayer,
      "You have banished {0} {1} from your camp.".format(
        targetUnit.getName().colorize(Colors.gold),
        targetUnit.getProperName()))

    AddIndicator(targetUnit, 0, 255, 0, 255)

    // Try to spawn another survivor for the player later
    doAfter(SURVIVORS_RESPAWN_BANISHED_INTERVAL_RANGE.getRandom(), () -> trySpawnSurvivorForPlayer(owningPlayer))

    banishSurvivor(targetUnit)

  // ============================================================================
  static function banishSurvivor(unit targetUnit)

    // Give to the villagers player so the human player can't control it anymore
    targetUnit.setOwner(PLAYER_VILLAGERS, false)

    // Make the target move to a random point in the map while it is being banished
    targetUnit.issuePointOrder("move", playableBounds.getRandomPoint())

    // Fade out the survivor over time
    targetUnit.fadeOut(UNIT_FADE_DURATION, color(150, 150, 150))
    
    // Remove the survivor once it is invisible
    doAfter(UNIT_FADE_DURATION, () -> targetUnit.remove())

// ============================================================================
function getSpawnPoint(player p) returns spawnPointResult
  let currentSpawnManager = getPlayerCachedFriendlySpawnManager(p)
  let fallbackSpawnManager = getPlayerSurvivorSpawnManager(p)
  let spawnPointProvider = new RandomSpawnPointProvider(currentSpawnManager, fallbackSpawnManager, SpawnRange.CLOSE)
  let result = spawnPointProvider.getSpawnPoint()
  destroy spawnPointProvider
  return result

// ============================================================================
public function unit.isRescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() != PLAYER_VILLAGERS

// ============================================================================
public function unit.isUnrescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() == PLAYER_VILLAGERS

// ============================================================================
public function unit.isRescuableSurvivor() returns bool
  return this.isUnrescuedSurvivor()