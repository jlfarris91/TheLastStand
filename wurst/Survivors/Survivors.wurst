package Survivors
import TlsUnitIds
import HumanPlayerComponent
import UnitMetadata
import WeightedSet
import DisplayTextToPlayer
import Orders
import ColorUtility
import ErrorHandling
import ClosureTimers
import GameConstants
import FX
import Bounds
import Range
import HumanPlayers
import UnitExtensions
import SurvivorJobs
import Math
import GameInstance
import Spawning
import Notifications
import RegisterEvents

constant real SURVIVOR_SPAWN_TELEPORT_THRESHOLD_SQ = 4000.0*4000.0

group g_tempGroup = CreateGroup()
WeightedSet<SurvivorJobType> g_weightedSurvivorJobSet

// ============================================================================
public class SurvivorUtility

  // --------------------------------------------------------------------------
  static function spawnSurvivorWithRandomJob(player forPlayer, vec2 pos) returns unit
    return spawnSurvivorWithRandomJob(forPlayer, pos, g_weightedSurvivorJobSet)

  // --------------------------------------------------------------------------
  static function spawnSurvivorWithRandomJob(player forPlayer, vec2 pos, WeightedSet<SurvivorJobType> jobSet) returns unit
    return spawnSurvivorWithJob(forPlayer, pos, jobSet.getRandom())

  // --------------------------------------------------------------------------
  static function spawnSurvivorWithJob(player forPlayer, vec2 pos, SurvivorJobType job) returns unit

    let jobDef = SurvivorJobs.getJobDefinition(job)

    let survivor = createUnitTLS(forPlayer, jobDef.getInitialUnitType(), pos, GetRandomDirectionDeg().asAngleDegrees())

    // Scale survivor level with game progress
    let gameProgress01 = clamp01(g_GameInstance.getGameProgress())
    let survivorLevel = SURVIVORS_SPAWN_LEVEL_RANGE.lerp(gameProgress01).floor()
    if (survivorLevel > 1)
      survivor.setLevel(survivorLevel, false)

    return survivor

  // --------------------------------------------------------------------------
  static function spawnSurvivorUnitForPlayer(player _player) returns unit
    let job = g_weightedSurvivorJobSet.getRandom()
    return spawnSurvivorUnitForPlayer(_player, job)

  // --------------------------------------------------------------------------
  static function spawnSurvivorUnitForPlayer(player _player, SurvivorJobType job) returns unit

    if (_player == null)
      argumentNullError("_player")
      return null

    let playerMetadata = _player.getMetadata()
    if (playerMetadata == null)
      Log.debug("[spawnSurvivorUnitForPlayer] Player {0} has no metadata")
      return null

    if (playerMetadata.getHasLostGame())
      Log.debug("[spawnSurvivorUnitForPlayer] Player {0} has lost the game")
      return null

    if (not _player.isIngame())
      Log.debug("[spawnSurvivorUnitForPlayer] Player {0} has left the game")
      return null

    let playerHumanComp = playerMetadata.getHumanPlayerComponent()
    if (playerHumanComp == null)
      Log.debug("[spawnSurvivorUnitForPlayer] Player {0} has no human player component")
      return null

    let spawnPointResult = getSpawnPoint(_player)

    let campCenter = playerHumanComp.getCampCenter()

    var spawnPoint = spawnPointResult.spawnPoint

    // If a player builds their HQ tent before the grid-based spawn system is ready then the spawn
    // point request will fail or it will succeed and return a spawn point in the subset of grid
    // cells that have completed initialization which may be very far away from the camp center.
    // In those cases just teleport the survivor to the camp center.
    if (not spawnPointResult.succeeded or spawnPoint.distanceToSq(campCenter) > SURVIVOR_SPAWN_TELEPORT_THRESHOLD_SQ)
      spawnPoint = campCenter

    let survivor = spawnSurvivorWithJob(_player, spawnPoint, job)

    survivor.issuePointOrderById(OrderIds.move, playerHumanComp.getCampCenter())

    let jobDef = SurvivorJobs.getJobDefinition(job)

    let message = "{0} {1} has joined your camp!".format(
      jobDef.getTitle(survivor.getTypeId()).colorize(Colors.gold),
      survivor.getProperName())

    notifyPlayer(_player, message, survivor.getIconPath()) () ->
      GetTriggerPlayer().selectSingle(survivor)
      if (GetTriggerPlayer() == localPlayer)
        PanCameraToForPlayer(localPlayer, survivor.getX(), survivor.getY())

    AddIndicator(survivor, 0, 255, 0, 255)

    // Fade the survivor in over time
    survivor.fadeIn(color(150, 150, 150))

    return survivor

  // --------------------------------------------------------------------------
  static function trySpawnSurvivorForPlayer(player _player)
    if (not _player.isPlayingHumanPlayer())
      return

    if (_player.getHumanPlayerComponent().getObelisk() == null)
      return

    let currentSurvivors = countNumberOfSurvivorsOwnedByPlayer(_player)
    let availableSurvivors = _player.getMaxSupply()
    // Log.debug("[trySpawnSurvivorForPlayer] Player {0} has room for {1} Survivor(s) and has {2} Survivor(s)".format(_player.getName(), availableSurvivors.toString(), currentSurvivors.toString()))
    
    if (availableSurvivors > currentSurvivors)
      spawnSurvivorUnitForPlayer(_player)

  // --------------------------------------------------------------------------
  static function trySpawnSurvivorForPlayer(player _player, SurvivorJobType job)
    if (not _player.isPlayingHumanPlayer())
      return

    if (_player.getHumanPlayerComponent().getObelisk() == null)
      return

    let currentSurvivors = countNumberOfSurvivorsOwnedByPlayer(_player)
    let availableSurvivors = _player.getMaxSupply()
    // Log.debug("[trySpawnSurvivorForPlayer] Player {0} has room for {1} Survivor(s) and has {2} Survivor(s)".format(_player.getName(), availableSurvivors.toString(), currentSurvivors.toString()))
    
    if (availableSurvivors > currentSurvivors)
      spawnSurvivorUnitForPlayer(_player, job)

  // --------------------------------------------------------------------------
  static function countNumberOfSurvivorsOwnedByPlayer(player _player) returns int
    return _player.getCurrentSupply()

  // --------------------------------------------------------------------------
  static function owningPlayerBanishSurvivor(unit targetUnit)
    let owningPlayer = targetUnit.getOwner()

    FX.createJobChangeTag("Banished!", targetUnit.getPos(), owningPlayer)

    displayMessageToPlayer(
      owningPlayer,
      "You have banished {0} {1} from your camp.".format(
        targetUnit.getName().colorize(Colors.gold),
        targetUnit.getProperName()))

    AddIndicator(targetUnit, 0, 255, 0, 255)

    // Try to spawn another survivor for the player later
    doAfter(SURVIVORS_RESPAWN_BANISHED_INTERVAL_RANGE.getRandom(), () -> trySpawnSurvivorForPlayer(owningPlayer))

    banishSurvivor(targetUnit)

  // --------------------------------------------------------------------------
  static function banishSurvivor(unit targetUnit)

    // Give to the villagers player so the human player can't control it anymore
    targetUnit.setOwner(PLAYER_VILLAGERS, false)

    // Make the target move to a random point in the map while it is being banished
    targetUnit.issuePointOrder("move", playableBounds.getRandomPoint())

    // Fade out the survivor over time
    targetUnit.fadeOut(UNIT_FADE_DURATION, color(150, 150, 150))
    
    // Remove the survivor once it is invisible
    doAfter(UNIT_FADE_DURATION, () -> targetUnit.remove())

// ============================================================================
function getSpawnPoint(player p) returns spawnPointResult

  let playerHumanComp = p.getHumanPlayerComponent()
  if (playerHumanComp == null)
    return spawnPointResult(false, ZERO2)

  let spawnPointProvider = getFriendlySpawnPointProviderForPlayer(p)
  let result = spawnPointProvider.getRandomSpawnPointInRange(playerHumanComp.getCampCenter(), SpawnRange.CLOSE.toRangeReal())
  
  return result

// ============================================================================
public function unit.isRescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() != PLAYER_VILLAGERS

// ============================================================================
public function unit.isUnrescuedSurvivor() returns bool
  return this.isSurvivor() and this.getOwner() == PLAYER_VILLAGERS

// ============================================================================
public function unit.isRescuableSurvivor() returns bool
  return this.isUnrescuedSurvivor()

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()
  if (dyingUnit.isSurvivor())
    doAfter(SURVIVORS_RESPAWN_INTERVAL_RANGE.getRandom(), () -> SurvivorUtility.trySpawnSurvivorForPlayer(dyingUnit.getOwner()))

// ============================================================================
function onConstructFinished()
  let constructedUnit = GetConstructedStructure()
  if (constructedUnit.isObelisk())
    SurvivorUtility.trySpawnSurvivorForPlayer(constructedUnit.getOwner())

// ============================================================================
init
  g_weightedSurvivorJobSet = new WeightedSet<SurvivorJobType>()
    ..add(SurvivorJobType.None, 50)
    // ..add(SurvivorJobType.Builder, 1)
    // ..add(SurvivorJobType.Militia, 1)
    // ..add(SurvivorJobType.Spearman, 1)
    // ..add(SurvivorJobType.Medic, 1)
    // ..add(SurvivorJobType.Marksman, 1)
    // ..add(SurvivorJobType.Acolyte, 1)
    // ..add(SurvivorJobType.Engineer, 1)

  doPeriodically(10.0) (CallbackPeriodic cb) ->
    for p in g_PlayingHumanPlayers
      SurvivorUtility.trySpawnSurvivorForPlayer(p)

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onConstructFinished)