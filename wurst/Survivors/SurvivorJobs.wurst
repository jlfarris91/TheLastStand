package SurvivorJobs
import TlsUnitIds
import HashMap
import HashList
import TlsJobItemIds
import Vector
import LinkedList
import ObjectIds
import ErrorHandling

public LinkedList<SurvivorJobDefinition> g_allJobDefinitions = new LinkedList<SurvivorJobDefinition>()
HashMap<int, SurvivorJobDefinition> g_unitTypeToJobMap = new HashMap<int, SurvivorJobDefinition>()
HashMap<int, SurvivorJobDefinition> g_itemTypeToJobMap = new HashMap<int, SurvivorJobDefinition>()

// ============================================================================
public class SurvivorJobDefinition
  private string m_id
  private string m_title
  private int m_itemType
  private Vector<int> m_unitTypes
  private HashList<int> m_equivalentUnitTypes
  private HashMap<int, int> m_upgradeMap
  private HashMap<player, bool> m_jobIsKnownToPlayer

  // --------------------------------------------------------------------------
  construct(string id, string title, int itemType)
    m_id = id
    m_title = title
    m_itemType = itemType
    g_itemTypeToJobMap.put(itemType, this)
    m_unitTypes = new Vector<int>(8)
    m_equivalentUnitTypes = new HashList<int>()
    m_upgradeMap = new HashMap<int, int>()
    m_jobIsKnownToPlayer = new HashMap<player, bool>()
    g_allJobDefinitions.add(this)

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_unitTypes
    m_unitTypes = null

    destroy m_equivalentUnitTypes
    m_equivalentUnitTypes = null

    destroy m_upgradeMap
    m_upgradeMap = null

    destroy m_jobIsKnownToPlayer
    m_jobIsKnownToPlayer = null

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // --------------------------------------------------------------------------
  function getTitle() returns string
    return m_title

  // --------------------------------------------------------------------------
  function registerUnitType(int unitType)
    m_unitTypes.add(unitType)
    registerEquivalentUnitType(unitType)

  // --------------------------------------------------------------------------
  function registerEquivalentUnitType(int unitType)
    m_equivalentUnitTypes.add(unitType)
    g_unitTypeToJobMap.put(unitType, this)

  // --------------------------------------------------------------------------
  function registerUpgrade(int unitTypeCurrent, int unitTypeNext)
    m_upgradeMap.put(unitTypeCurrent, unitTypeNext)

  // --------------------------------------------------------------------------
  function getNextUpgrade(int unitTypeCurrent) returns int
    if (not m_upgradeMap.has(unitTypeCurrent))
      return -1
    return m_upgradeMap.get(unitTypeCurrent)

  // --------------------------------------------------------------------------
  function getUnitTypes() returns Vector<int>
    return m_unitTypes

  // --------------------------------------------------------------------------
  function getInitialUnitType() returns int
    return m_unitTypes.getFirst()

  // --------------------------------------------------------------------------
  function getItemType() returns int
    return m_itemType

  // --------------------------------------------------------------------------
  function hasUnitType(int unitType) returns bool
    return m_equivalentUnitTypes.has(unitType)

  // --------------------------------------------------------------------------
  function getIsJobKnownToPlayer(player p) returns bool
    return m_jobIsKnownToPlayer.get(p)
  
  // --------------------------------------------------------------------------
  function setIsJobKnownToPlayer(player p, bool value)
    m_jobIsKnownToPlayer.put(p, value)

  // --------------------------------------------------------------------------
  function getUpgradeTier(int unitType) returns int
    if (getInitialUnitType() == unitType)
      return 0
    for ut in m_unitTypes
      let tier = getUpgradeTierRecursive(ut, unitType, 1)
      if (tier != -1)
        return tier
    return -1
  
  // --------------------------------------------------------------------------
  private function getUpgradeTierRecursive(int currUnitType, int unitType, int tier) returns int
    if (not m_upgradeMap.has(currUnitType))
      return -1
    let upgradeUnitType = m_upgradeMap.get(currUnitType)
    if (upgradeUnitType == unitType)
      return tier
    return getUpgradeTierRecursive(upgradeUnitType, unitType, tier + 1)

// ============================================================================
public class SurvivorJobs
  static constant SurvivorJobDefinition none = new SurvivorJobDefinition("none", "Survivor", -1)
  static constant SurvivorJobDefinition engineer = new SurvivorJobDefinition("engineer", "Engineer", TlsJobItemIds.engineer1)
  static constant SurvivorJobDefinition acolyte = new SurvivorJobDefinition("acolyte", "Acolyte", TlsJobItemIds.acolyte1)

  static constant SurvivorJobDefinition defenseBuilder = new SurvivorJobDefinition("defenseBuilder", "Defense Builder", TlsJobItemIds.defenseBuilder1)
  static constant SurvivorJobDefinition operator = new SurvivorJobDefinition("operator", "Operator", TlsJobItemIds.operator1)

  static constant SurvivorJobDefinition militaryBuilder = new SurvivorJobDefinition("militaryBuilder", "Military Builder", TlsJobItemIds.militaryBuilder1)
  static constant SurvivorJobDefinition militia = new SurvivorJobDefinition("militia", "Militia", TlsJobItemIds.militia1)
  static constant SurvivorJobDefinition spearman = new SurvivorJobDefinition("spearman", "Spearman", TlsJobItemIds.spearman1)
  static constant SurvivorJobDefinition priest = new SurvivorJobDefinition("medic", "Medic", TlsJobItemIds.medic1)
  static constant SurvivorJobDefinition marksman = new SurvivorJobDefinition("marksman", "Marksman", TlsJobItemIds.marksman1)


// ============================================================================
public function getJobDefinitionForUnitType(int unitType) returns SurvivorJobDefinition
  let jobDef = g_unitTypeToJobMap.get(unitType)
  if (jobDef == null)
    error("Could not find job definition for unit type {0} ({1})".format(unitType.toRawCode(), unitType.toString()))
  return jobDef

// ============================================================================
public function getJobDefinitionForItemType(int itemType) returns SurvivorJobDefinition
  let jobDef = g_itemTypeToJobMap.get(itemType)
  if (jobDef == null)
    error("Could not find job definition for item type {0} ({1})".format(itemType.toRawCode(), itemType.toString()))
  return jobDef

// ============================================================================
init
  // Survivor Male
  SurvivorJobs.none
  ..registerUnitType(TlsUnitIds.Survivors.survivorMale)

  // Defense Builder
  SurvivorJobs.defenseBuilder
  ..registerUnitType(TlsUnitIds.Survivors.defenseBuilder1)

  // Operator
  SurvivorJobs.operator
  ..registerUnitType(TlsUnitIds.Survivors.operator1)

  // Military Builder
  SurvivorJobs.militaryBuilder
  ..registerUnitType(TlsUnitIds.Survivors.militaryBuilder1)

  // Militia
  SurvivorJobs.militia
  ..registerUnitType(TlsUnitIds.Survivors.militia1)
  ..registerUnitType(TlsUnitIds.Survivors.militia2)
  ..registerUnitType(TlsUnitIds.Survivors.militia3)
  ..registerUpgrade(TlsUnitIds.Survivors.militia1, TlsUnitIds.Survivors.militia2)
  ..registerUpgrade(TlsUnitIds.Survivors.militia2, TlsUnitIds.Survivors.militia3)

  // Spearman
  SurvivorJobs.spearman
  ..registerUnitType(TlsUnitIds.Survivors.spearman1)
  ..registerUnitType(TlsUnitIds.Survivors.spearman2)
  ..registerUpgrade(TlsUnitIds.Survivors.spearman1, TlsUnitIds.Survivors.spearman2)

  // Medic
  SurvivorJobs.priest
  ..registerUnitType(TlsUnitIds.Survivors.priest1)

  // Acolyte
  SurvivorJobs.acolyte
  ..registerUnitType(TlsUnitIds.Survivors.survivorAcolyte1)

  // Marksman
  SurvivorJobs.marksman
  ..registerUnitType(TlsUnitIds.Survivors.marksman1)

  // Engineer
  SurvivorJobs.engineer
  ..registerUnitType(TlsUnitIds.Survivors.engineer1)