package SurvivorJobs
import TlsUnitIds
import HashMap
import HashList
import TlsJobItemIds
import Vector
import ObjectIds
import ErrorHandling

HashMap<int, SurvivorJobType> g_unitTypeToJobMap = new HashMap<int, SurvivorJobType>()
HashMap<int, SurvivorJobType> g_itemTypeToJobMap = new HashMap<int, SurvivorJobType>()

// ============================================================================
// Don't forget to increment this number when adding new jobs
// This number must include the None job
public constant int g_survivorJobCount = 7

public enum SurvivorJobType
  None
  Builder
  Militia
  Spearman
  Priest
  Marksman
  Engineer

// ============================================================================
public class SurvivorJobs

  static constant count = g_survivorJobCount

  static constant SurvivorJobDefinition none = new SurvivorJobDefinition(SurvivorJobType.None, "none")
  static constant SurvivorJobDefinition builder = new SurvivorJobDefinition(SurvivorJobType.Builder, "builder")
  static constant SurvivorJobDefinition militia = new SurvivorJobDefinition(SurvivorJobType.Militia, "militia")
  static constant SurvivorJobDefinition spearman = new SurvivorJobDefinition(SurvivorJobType.Spearman, "spearman")
  static constant SurvivorJobDefinition priest = new SurvivorJobDefinition(SurvivorJobType.Priest, "priest")
  static constant SurvivorJobDefinition marksman = new SurvivorJobDefinition(SurvivorJobType.Marksman, "marksman")
  static constant SurvivorJobDefinition engineer = new SurvivorJobDefinition(SurvivorJobType.Engineer, "engineer")

  static constant SurvivorJobDefinition array[g_survivorJobCount] allJobDefinitions = [
    none,
    builder,
    militia,
    spearman,
    priest,
    marksman,
    engineer
  ]

  // --------------------------------------------------------------------------
  static function getJobDefinition(SurvivorJobType job) returns SurvivorJobDefinition
    return allJobDefinitions[job castTo int]

  // --------------------------------------------------------------------------
  static function getJobTypeForUnitType(int unitType) returns SurvivorJobType
    if (not g_unitTypeToJobMap.has(unitType))
      error("Could not find survivor job type for unit type {0} ({1})".format(unitType.toRawCode(), unitType.toString()))
    return g_unitTypeToJobMap.get(unitType)

  // --------------------------------------------------------------------------
  static function getJobDefinitionForUnitType(int unitType) returns SurvivorJobDefinition
    return SurvivorJobs.getJobDefinition(getJobTypeForUnitType(unitType))

  // --------------------------------------------------------------------------
  static function getJobTypeForItemType(int itemType) returns SurvivorJobType
    if (not g_itemTypeToJobMap.has(itemType))
      error("Could not find survivor job type for item type {0} ({1})".format(itemType.toRawCode(), itemType.toString()))
    return g_itemTypeToJobMap.get(itemType)

  // --------------------------------------------------------------------------
  static function getJobDefinitionForItemType(int itemType) returns SurvivorJobDefinition
    return SurvivorJobs.getJobDefinition(getJobTypeForItemType(itemType))

// ============================================================================
public class SurvivorJobDefinition
  private SurvivorJobType m_type
  private string m_id
  private HashMap<int, string> m_unitTypeToTitleMap
  private Vector<int> m_itemTypes
  private Vector<int> m_unitTypes
  private HashList<int> m_equivalentUnitTypes
  private HashMap<int, int> m_upgradeMap
  private HashMap<int, int> m_reverseUpgradeMap
  private HashMap<int, int> m_itemTypeToUnitTypeMap
  private HashMap<player, bool> m_jobIsKnownToPlayer
  private HashMap<int, string> m_overheadIconPath

  // --------------------------------------------------------------------------
  construct(SurvivorJobType _type, string id)
    m_type = _type
    m_id = id
    m_unitTypeToTitleMap = new HashMap<int, string>()
    m_unitTypes = new Vector<int>(8)
    m_itemTypes = new Vector<int>(8)
    m_equivalentUnitTypes = new HashList<int>()
    m_upgradeMap = new HashMap<int, int>()
    m_reverseUpgradeMap = new HashMap<int, int>()
    m_jobIsKnownToPlayer = new HashMap<player, bool>()
    m_itemTypeToUnitTypeMap = new HashMap<int, int>()
    m_overheadIconPath = new HashMap<int, string>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_unitTypes
    m_unitTypes = null

    destroy m_equivalentUnitTypes
    m_equivalentUnitTypes = null

    destroy m_upgradeMap
    m_upgradeMap = null

    destroy m_reverseUpgradeMap
    m_reverseUpgradeMap = null

    destroy m_jobIsKnownToPlayer
    m_jobIsKnownToPlayer = null

    destroy m_itemTypeToUnitTypeMap
    m_itemTypeToUnitTypeMap = null

    destroy m_overheadIconPath
    m_overheadIconPath = null

  // --------------------------------------------------------------------------
  function getType() returns SurvivorJobType
    return m_type

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // --------------------------------------------------------------------------
  function getTitle(int unitType) returns string
    if (not m_unitTypeToTitleMap.has(unitType))
      error("Job definition " + m_id + " does not have a title for unit type id " + unitType.toRawCode())
    return m_unitTypeToTitleMap.get(unitType)

  // --------------------------------------------------------------------------
  function setTitle(int unitType, string title)
    m_unitTypeToTitleMap.put(unitType, title)

  // --------------------------------------------------------------------------
  function registerSubJob(int unitType, int itemType, string title)
    m_unitTypes.add(unitType)
    m_itemTypes.add(itemType)
    m_unitTypeToTitleMap.put(unitType, title)
    g_itemTypeToJobMap.put(itemType, m_type)
    m_itemTypeToUnitTypeMap.put(itemType, unitType)
    m_itemTypeToUnitTypeMap.put(unitType, itemType)
    registerEquivalentUnitType(unitType)

  // --------------------------------------------------------------------------
  function registerEquivalentUnitType(int unitType)
    m_equivalentUnitTypes.add(unitType)
    g_unitTypeToJobMap.put(unitType, m_type)

  // --------------------------------------------------------------------------
  function getUnitTypes() returns Vector<int>
    return m_unitTypes

  // --------------------------------------------------------------------------
  function getInitialUnitType() returns int
    return m_unitTypes.getFirst()

  // --------------------------------------------------------------------------
  function getInitialItemType() returns int
    return m_itemTypes.getFirst()

  // --------------------------------------------------------------------------
  function getItemType(int unitType) returns int
    return m_itemTypeToUnitTypeMap.get(unitType)

  // --------------------------------------------------------------------------
  function getUnitType(int itemType) returns int
    return m_itemTypeToUnitTypeMap.get(itemType)

  // --------------------------------------------------------------------------
  function hasUnitType(int unitType) returns bool
    return m_equivalentUnitTypes.has(unitType)

  // --------------------------------------------------------------------------
  function getIsJobKnownToPlayer(player p) returns bool
    return m_jobIsKnownToPlayer.get(p)
  
  // --------------------------------------------------------------------------
  function setIsJobKnownToPlayer(player p, bool value)
    m_jobIsKnownToPlayer.put(p, value)

  // --------------------------------------------------------------------------
  function setOverheadIconPath(int unitTypeId, string value)
    m_overheadIconPath.put(unitTypeId, value)

  // --------------------------------------------------------------------------
  function getOverheadIconPath(int unitTypeId) returns string
    return m_overheadIconPath.get(unitTypeId)

// ============================================================================
public function string.toSurvivorJobType() returns SurvivorJobType
  for i = 0 to g_survivorJobCount - 1
    if (this == SurvivorJobs.allJobDefinitions[i].getId())
      return i castTo SurvivorJobType
  return SurvivorJobType.None

// ============================================================================
public function SurvivorJobType.isCombatJob() returns bool
  return this == SurvivorJobType.Militia or
         this == SurvivorJobType.Spearman or
         this == SurvivorJobType.Priest or
         this == SurvivorJobType.Marksman

// ============================================================================
init
  // Survivor Male
  SurvivorJobs.none
  ..registerSubJob(TlsUnitIds.Survivors.survivorMale, -1, "Survivor")

  // Builder
  SurvivorJobs.builder
  ..registerSubJob(TlsUnitIds.Survivors.builder, TlsJobItemIds.builder, "Builder")
  ..setOverheadIconPath(TlsUnitIds.Survivors.builder, "abilities\\SurvivorJobOverhead_Builder.mdl")

  // Militia
  SurvivorJobs.militia
  ..registerSubJob(TlsUnitIds.Survivors.militia1, TlsJobItemIds.militia1, "Militia")
  ..registerSubJob(TlsUnitIds.Survivors.militia2, TlsJobItemIds.militia2, "Footman")
  ..registerSubJob(TlsUnitIds.Survivors.militia3, TlsJobItemIds.militia3, "Knight")
  ..setOverheadIconPath(TlsUnitIds.Survivors.militia1, "abilities\\SurvivorJobOverhead_Militia1.mdl")
  ..setOverheadIconPath(TlsUnitIds.Survivors.militia2, "abilities\\SurvivorJobOverhead_Militia2.mdl")
  ..setOverheadIconPath(TlsUnitIds.Survivors.militia3, "abilities\\SurvivorJobOverhead_Militia3.mdl")

  // Spearman
  SurvivorJobs.spearman
  ..registerSubJob(TlsUnitIds.Survivors.spearman1, TlsJobItemIds.spearman1, "Spearman")
  ..registerSubJob(TlsUnitIds.Survivors.spearman2, TlsJobItemIds.spearman2, "Assassin")
  ..setOverheadIconPath(TlsUnitIds.Survivors.spearman1, "abilities\\SurvivorJobOverhead_Spearman1.mdl")
  ..setOverheadIconPath(TlsUnitIds.Survivors.spearman2, "abilities\\SurvivorJobOverhead_Spearman2.mdl")

  // Priest
  SurvivorJobs.priest
  ..registerSubJob(TlsUnitIds.Survivors.priest1, TlsJobItemIds.priest1, "Priest")
  ..setOverheadIconPath(TlsUnitIds.Survivors.priest1, "abilities\\SurvivorJobOverhead_Priest1.mdl")

  // Marksman
  SurvivorJobs.marksman
  ..registerSubJob(TlsUnitIds.Survivors.marksman1, TlsJobItemIds.marksman1, "Marksman")
  ..setOverheadIconPath(TlsUnitIds.Survivors.marksman1, "abilities\\SurvivorJobOverhead_Marksman1.mdl")

  // Engineer
  SurvivorJobs.builder
  ..registerSubJob(TlsUnitIds.Survivors.engineer, TlsJobItemIds.engineer, "Engineer")
  ..setOverheadIconPath(TlsUnitIds.Survivors.engineer, "abilities\\SurvivorJobOverhead_Engineer.mdl")