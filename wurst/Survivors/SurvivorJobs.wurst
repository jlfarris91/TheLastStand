package SurvivorJobs
import TlsUnitIds
import HashMap
import HashList
import TlsJobItemIds
import Vector
import ObjectIds
import ErrorHandling

HashMap<int, SurvivorJobType> g_unitTypeToJobMap = new HashMap<int, SurvivorJobType>()
HashMap<int, SurvivorJobType> g_itemTypeToJobMap = new HashMap<int, SurvivorJobType>()

// ============================================================================
// Don't forget to increment this number when adding new jobs
// This number must include the None job
public constant int g_survivorJobCount = 8

public enum SurvivorJobType
  None
  Builder
  Militia
  Spearman
  Priest
  Marksman
  Engineer
  Acolyte

// ============================================================================
public class SurvivorJobs

  static constant count = g_survivorJobCount

  static constant SurvivorJobDefinition none = new SurvivorJobDefinition(SurvivorJobType.None, "none", -1)
  static constant SurvivorJobDefinition builder = new SurvivorJobDefinition(SurvivorJobType.Builder, "builder", TlsJobItemIds.builder1)
  static constant SurvivorJobDefinition militia = new SurvivorJobDefinition(SurvivorJobType.Militia, "militia", TlsJobItemIds.militia1)
  static constant SurvivorJobDefinition spearman = new SurvivorJobDefinition(SurvivorJobType.Spearman, "spearman", TlsJobItemIds.spearman1)
  static constant SurvivorJobDefinition priest = new SurvivorJobDefinition(SurvivorJobType.Priest, "priest", TlsJobItemIds.priest1)
  static constant SurvivorJobDefinition marksman = new SurvivorJobDefinition(SurvivorJobType.Marksman, "marksman", TlsJobItemIds.marksman1)
  static constant SurvivorJobDefinition engineer = new SurvivorJobDefinition(SurvivorJobType.Engineer, "engineer", TlsJobItemIds.engineer1)
  static constant SurvivorJobDefinition acolyte = new SurvivorJobDefinition(SurvivorJobType.Acolyte, "acolyte", TlsJobItemIds.acolyte1)

  static constant SurvivorJobDefinition array[g_survivorJobCount] allJobDefinitions = [
    none,
    builder,
    militia,
    spearman,
    priest,
    marksman,
    engineer,
    acolyte
  ]

  // --------------------------------------------------------------------------
  static function getJobDefinition(SurvivorJobType job) returns SurvivorJobDefinition
    return allJobDefinitions[job castTo int]

  // --------------------------------------------------------------------------
  static function getJobTypeForUnitType(int unitType) returns SurvivorJobType
    if (not g_unitTypeToJobMap.has(unitType))
      error("Could not find survivor job type for unit type {0} ({1})".format(unitType.toRawCode(), unitType.toString()))
    return g_unitTypeToJobMap.get(unitType)

  // --------------------------------------------------------------------------
  static function getJobDefinitionForUnitType(int unitType) returns SurvivorJobDefinition
    return SurvivorJobs.getJobDefinition(getJobTypeForUnitType(unitType))

  // --------------------------------------------------------------------------
  static function getJobTypeForItemType(int itemType) returns SurvivorJobType
    if (not g_itemTypeToJobMap.has(itemType))
      error("Could not find survivor job type for item type {0} ({1})".format(itemType.toRawCode(), itemType.toString()))
    return g_itemTypeToJobMap.get(itemType)

  // --------------------------------------------------------------------------
  static function getJobDefinitionForItemType(int itemType) returns SurvivorJobDefinition
    return SurvivorJobs.getJobDefinition(getJobTypeForItemType(itemType))

// ============================================================================
public class SurvivorJobDefinition
  private SurvivorJobType m_type
  private string m_id
  private HashMap<int, string> m_unitTypeToTitleMap
  private int m_itemType
  private Vector<int> m_unitTypes
  private HashList<int> m_equivalentUnitTypes
  private HashMap<int, int> m_upgradeMap
  private HashMap<player, bool> m_jobIsKnownToPlayer

  // --------------------------------------------------------------------------
  construct(SurvivorJobType _type, string id, int itemType)
    m_type = _type
    m_id = id
    m_itemType = itemType
    m_unitTypeToTitleMap = new HashMap<int, string>()
    g_itemTypeToJobMap.put(itemType, _type)
    m_unitTypes = new Vector<int>(8)
    m_equivalentUnitTypes = new HashList<int>()
    m_upgradeMap = new HashMap<int, int>()
    m_jobIsKnownToPlayer = new HashMap<player, bool>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_unitTypes
    m_unitTypes = null

    destroy m_equivalentUnitTypes
    m_equivalentUnitTypes = null

    destroy m_upgradeMap
    m_upgradeMap = null

    destroy m_jobIsKnownToPlayer
    m_jobIsKnownToPlayer = null

  // --------------------------------------------------------------------------
  function getType() returns SurvivorJobType
    return m_type

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // --------------------------------------------------------------------------
  function getTitle(int unitType) returns string
    if (not m_unitTypeToTitleMap.has(unitType))
      error("Job definition does not have a title for unit type id " + unitType.toRawCode())
    return m_unitTypeToTitleMap.get(unitType)

  // --------------------------------------------------------------------------
  function setTitle(int unitType, string title)
    m_unitTypeToTitleMap.put(unitType, title)

  // --------------------------------------------------------------------------
  function registerUnitType(int unitType, string title)
    m_unitTypes.add(unitType)
    m_unitTypeToTitleMap.put(unitType, title)
    registerEquivalentUnitType(unitType)

  // --------------------------------------------------------------------------
  function registerEquivalentUnitType(int unitType)
    m_equivalentUnitTypes.add(unitType)
    g_unitTypeToJobMap.put(unitType, m_type)

  // --------------------------------------------------------------------------
  function registerUpgrade(int unitTypeCurrent, int unitTypeNext)
    m_upgradeMap.put(unitTypeCurrent, unitTypeNext)

  // --------------------------------------------------------------------------
  function getNextUpgrade(int unitTypeCurrent) returns int
    if (not m_upgradeMap.has(unitTypeCurrent))
      return -1
    return m_upgradeMap.get(unitTypeCurrent)

  // --------------------------------------------------------------------------
  function getUnitTypes() returns Vector<int>
    return m_unitTypes

  // --------------------------------------------------------------------------
  function getInitialUnitType() returns int
    return m_unitTypes.getFirst()

  // --------------------------------------------------------------------------
  function getItemType() returns int
    return m_itemType

  // --------------------------------------------------------------------------
  function hasUnitType(int unitType) returns bool
    return m_equivalentUnitTypes.has(unitType)

  // --------------------------------------------------------------------------
  function getIsJobKnownToPlayer(player p) returns bool
    return m_jobIsKnownToPlayer.get(p)
  
  // --------------------------------------------------------------------------
  function setIsJobKnownToPlayer(player p, bool value)
    m_jobIsKnownToPlayer.put(p, value)

  // --------------------------------------------------------------------------
  function getUpgradeTier(int unitType) returns int
    if (getInitialUnitType() == unitType)
      return 0
    for ut in m_unitTypes
      let tier = getUpgradeTierRecursive(ut, unitType, 1)
      if (tier != -1)
        return tier
    return -1
  
  // --------------------------------------------------------------------------
  private function getUpgradeTierRecursive(int currUnitType, int unitType, int tier) returns int
    if (not m_upgradeMap.has(currUnitType))
      return -1
    let upgradeUnitType = m_upgradeMap.get(currUnitType)
    if (upgradeUnitType == unitType)
      return tier
    return getUpgradeTierRecursive(upgradeUnitType, unitType, tier + 1)

// ============================================================================
init
  // Survivor Male
  SurvivorJobs.none
  ..registerUnitType(TlsUnitIds.Survivors.survivorMale, "Survivor")

  // Builder
  SurvivorJobs.builder
  ..registerUnitType(TlsUnitIds.Survivors.builder1, "Builder")

  // Militia
  SurvivorJobs.militia
  ..registerUnitType(TlsUnitIds.Survivors.militia1, "Militia")
  ..registerUnitType(TlsUnitIds.Survivors.militia2, "Footman")
  ..registerUnitType(TlsUnitIds.Survivors.militia3, "Captain")
  ..registerUpgrade(TlsUnitIds.Survivors.militia1, TlsUnitIds.Survivors.militia2)
  ..registerUpgrade(TlsUnitIds.Survivors.militia2, TlsUnitIds.Survivors.militia3)

  // Spearman
  SurvivorJobs.spearman
  ..registerUnitType(TlsUnitIds.Survivors.spearman1, "Spearman")
  ..registerUnitType(TlsUnitIds.Survivors.spearman2, "Assassin")
  ..registerUpgrade(TlsUnitIds.Survivors.spearman1, TlsUnitIds.Survivors.spearman2)

  // Priest
  SurvivorJobs.priest
  ..registerUnitType(TlsUnitIds.Survivors.priest1, "Priest")

  // Acolyte
  SurvivorJobs.acolyte
  ..registerUnitType(TlsUnitIds.Survivors.acolyte1, "Acolyte")

  // Marksman
  SurvivorJobs.marksman
  ..registerUnitType(TlsUnitIds.Survivors.marksman1, "Marksman")

  // Engineer
  SurvivorJobs.engineer
  ..registerUnitType(TlsUnitIds.Survivors.engineer1, "Engineer")