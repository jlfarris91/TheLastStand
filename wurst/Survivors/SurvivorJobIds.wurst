package SurvivorJobIds
import TlsUnitIds
import ErrorHandling
import ObjectIds
import TlsItemIds
import LinkedList
import HashMap

HashMap<int, int> g_jobUpgradeMap

// ============================================================================
public class SurvivorJobIds
  static constant string none = "none"
  static constant string builder = "builder"
  static constant string militia = "militia"
  static constant string spearman = "spearman"
  static constant string medic = "medic"
  static constant string marksman = "marksman"

// ============================================================================
public class SurvivorJobTitles
  static constant string none = "Survivor"
  static constant string builder = "Camp Builder"
  static constant string spearman = "Spearman"
  static constant string medic = "Medic"
  static constant string marksman = "Marksman"
  static constant string militia = "Militia"

// ============================================================================
public function getJobIdForUnitType(int unitType) returns string
  switch (unitType)
    case TlsUnitIds.Survivors.survivorMale
      return SurvivorJobIds.none    
    case TlsUnitIds.Survivors.survivorBuilder
      return SurvivorJobIds.builder
    case TlsUnitIds.Survivors.survivorMilitia1 | TlsUnitIds.Survivors.survivorMilitia2 | TlsUnitIds.Survivors.survivorMilitia3
      return SurvivorJobIds.militia
    case TlsUnitIds.Survivors.survivorSpearman
      return SurvivorJobIds.spearman
    case TlsUnitIds.Survivors.survivorMedic
      return SurvivorJobIds.medic
    case TlsUnitIds.Survivors.survivorMarksman | TlsUnitIds.Survivors.survivorMarksmanTower
      return SurvivorJobIds.marksman
    default
      error("Invalid unit type: " + unitType.toRawCode())
      return "<UNKNOWN>"

// ============================================================================
public function getUnitTypeForJobId(string jobId) returns LinkedList<int>
  let unitTypes = new LinkedList<int>()
  switch (jobId)
    case SurvivorJobIds.builder
      unitTypes.add(TlsUnitIds.Survivors.survivorBuilder)
    case SurvivorJobIds.militia
      unitTypes.add(TlsUnitIds.Survivors.survivorMilitia1)
      unitTypes.add(TlsUnitIds.Survivors.survivorMilitia2)
      unitTypes.add(TlsUnitIds.Survivors.survivorMilitia3)
    case SurvivorJobIds.spearman
      unitTypes.add(TlsUnitIds.Survivors.survivorSpearman)
    case SurvivorJobIds.medic
      unitTypes.add(TlsUnitIds.Survivors.survivorMedic)
    case SurvivorJobIds.marksman
      unitTypes.add(TlsUnitIds.Survivors.survivorMarksman)
    case SurvivorJobIds.none
      unitTypes.add(TlsUnitIds.Survivors.survivorMale)
    default
      error("Invalid job id: " + jobId)
  return unitTypes

// ============================================================================
public function getJobIdForItemType(int itemType) returns string
  switch (itemType)
    case TlsItemIds.builderTools
      return SurvivorJobIds.builder
    case TlsItemIds.rustySword
      return SurvivorJobIds.militia
    case TlsItemIds.spears
      return SurvivorJobIds.spearman
    case TlsItemIds.medicalKit
      return SurvivorJobIds.medic
    case TlsItemIds.huntingRifle
      return SurvivorJobIds.marksman
    default
      return SurvivorJobIds.none

// ============================================================================
public function getItemTypeForJobId(string jobId) returns int
  switch (jobId)
    case SurvivorJobIds.builder
      return TlsItemIds.builderTools
    case SurvivorJobIds.militia
      return TlsItemIds.rustySword
    case SurvivorJobIds.spearman
      return TlsItemIds.spears
    case SurvivorJobIds.medic
      return TlsItemIds.medicalKit
    case SurvivorJobIds.marksman
      return TlsItemIds.huntingRifle
    default
      return -1

// ============================================================================
public function getJobTitleForJobId(string jobId) returns string
  switch (jobId)
    case SurvivorJobIds.none
      return SurvivorJobTitles.none
    case SurvivorJobIds.builder
      return SurvivorJobTitles.builder
    case SurvivorJobIds.militia
      return SurvivorJobTitles.militia
    case SurvivorJobIds.spearman
      return SurvivorJobTitles.spearman
    case SurvivorJobIds.medic
      return SurvivorJobTitles.medic
    case SurvivorJobIds.marksman
      return SurvivorJobTitles.marksman
    default
      Log.error("Invalid job id: " + jobId)
      return "<UNKNOWN>"

// ============================================================================
public function getNextJobUpgradeUnitType(int unitId) returns int
  if (not g_jobUpgradeMap.has(unitId))
    return -1
  return g_jobUpgradeMap.get(unitId)

// ============================================================================
init
  g_jobUpgradeMap = new HashMap<int, int>()
  ..put(TlsUnitIds.Survivors.survivorMilitia1, TlsUnitIds.Survivors.survivorMilitia2)
  ..put(TlsUnitIds.Survivors.survivorMilitia2, TlsUnitIds.Survivors.survivorMilitia3)