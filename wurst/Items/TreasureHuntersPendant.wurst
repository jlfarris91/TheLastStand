package TreasureHuntersPendant
import LooterComponent
import UnitMetadata
import ItemEffectComponent
import TlsItemDefinition
import Icons

ItemChances g_betterItemChances = ItemChances(32.0, 32.0, 18.0, 8.0)

// ============================================================================
class TreasureHuntersPendantComponent extends ItemEffectComponent

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

    setMode(ItemEffectApplication.ACQUIRED)
    setItemTypeId(TlsItemIds.treasureHuntersPendant)
    setDestroyOnDrop(true)
  
  // --------------------------------------------------------------------------
  override function onApplied(int stacks)
    super.onApplied(stacks)
    let comp = getOwner().getLooterComponent()
    if (comp != null)
      comp.setOverrideItemChances(true)
      comp.setItemChances(g_betterItemChances)

  // --------------------------------------------------------------------------
  override function onReverted(int stacks)
    super.onReverted(stacks)
    let comp = getOwner().getLooterComponent()
    if (comp != null)
      comp.setOverrideItemChances(false)

// ============================================================================
@compiletime function createItem()

  new TlsItemDefinition(TlsItemIds.treasureHuntersPendant, 'gmfr')
  ..setName("Treasure Hunter's Pendant")
  ..setDescription("Increases the chances to find higher quality items when looting.")
  ..setTooltipBasic("Purchase Treasure Hunter's Pendant")
  ..setTooltipExtended("Increases the wearer's chances to find higher quality items when looting. Does not stack.")
  ..setInterfaceIcon(Icons.bTNGem)
  ..setGoldCost(2)
  ..setLumberCost(1200)
  ..setStockInitial(0)
  ..setStockMaximum(1)
  ..setStockStartDelay(60)
  ..setStockReplenishInterval(120)
  ..addTlsUnitClassifications(TlsUnitClassification.HUMAN)
  ..build()

// ============================================================================
init
  if (not compiletime)
    createItem()

  ItemEffectComponent.registerComponentFactory(TlsItemIds.treasureHuntersPendant) (_unit) ->
  //{
    let metadata = _unit.getMetadata()
    ItemEffectComponent comp = null
    if (metadata != null)
      comp = metadata.getComponent(TreasureHuntersPendantComponent.typeId) castTo TreasureHuntersPendantComponent
      if (comp == null)
        comp = metadata.addComponent(new TreasureHuntersPendantComponent(metadata)) castTo TreasureHuntersPendantComponent
    return comp
  //}