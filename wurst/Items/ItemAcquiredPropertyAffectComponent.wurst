package ItemAcquiredPropertyAffectComponent
import Handle
import ItemEffectComponent
import UnitMetadata
import UnitPropertiesComponent
import SmartValue

// ============================================================================
public abstract class ItemAcquiredPropertyAffectComponent extends ItemEffectComponent
  private UnitProperty m_unitProperty
  private AffectorType m_affectorType
  private _handle m_propertyAffectorHandle = INVALID_HANDLE

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner, int itemTypeId, UnitProperty unitProperty, AffectorType affectorType)
    super(owner)

    m_unitProperty = unitProperty
    m_affectorType = affectorType

    setMode(ItemEffectApplication.ACQUIRED)
    setItemTypeId(itemTypeId)
    setDestroyOnDrop(true)
  
  // --------------------------------------------------------------------------
  override function onApplied(int stacks)
    super.onApplied(stacks)

    if (stacks == 0)
      return

    let comp = getOwner().getOrAddUnitPropertiesComponent()
    m_propertyAffectorHandle = comp.getProperty(m_unitProperty).affect(m_affectorType, getUnitPropertyAffectorValue(stacks))

  // --------------------------------------------------------------------------
  override function onReverted(int stacks)
    super.onReverted(stacks)

    if (stacks == 0)
      return

    let comp = getOwner().getUnitPropertiesComponent()
    if (comp != null)
      let prop = comp.getProperty(m_unitProperty)
      if (prop != null)
        prop.removeAffector(m_propertyAffectorHandle)

    m_propertyAffectorHandle = INVALID_HANDLE

  // --------------------------------------------------------------------------
  abstract function getUnitPropertyAffectorValue(int stacks) returns real