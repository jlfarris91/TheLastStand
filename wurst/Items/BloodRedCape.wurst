package BloodRedCape
import TlsItemIds
import UnitPropertiesComponent
import UnitComponent
import ClosureTimers
import TimerUtils
import Abilities
import SoundUtils
import TlsAbilityIds
import GroupUtils
import ItemEffectComponent
import UnitExtensions
import HumanPlayers
import Handle

constant real BLOODREDCAPE_LIFESTEAL = 0.5
constant real BLOODREDCAPE_DURATION = 10.0
constant string BLOODREDCAPE_FX_PATH = Abilities.vampPotionCaster
constant real BLOODREDCAPE_AOE = 256.0

constant SoundDefinition BLOODREDCAPE_SOUND = new SoundDefinition(Sounds.soulPreservation, false, true)
constant int BLOODREDCAPE_SOUND_DURATION = 3
constant int BLOODREDCAPE_SOUND_VOLUME = 64

// ============================================================================
class BloodRedCapeComponent extends ItemEffectComponent

  private CallbackManual m_durationCallback
  private CallbackSingle m_destroyCallback
  private effect m_fx
  private bool m_playedSound
  private _handle m_propertyAffectorHandle = INVALID_HANDLE

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

    setMode(ItemEffectApplication.KILL)
    setItemTypeId(TlsItemIds.bloodRedCape)
    setDestroyOnDrop(false)

  // --------------------------------------------------------------------------
  ondestroy
    resetState()

    if (m_durationCallback != null)
      destroy m_durationCallback
      m_durationCallback = null

    if (m_destroyCallback != null)
      destroy m_destroyCallback
      m_destroyCallback = null

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    resetState()

  // --------------------------------------------------------------------------
  function getIsCaster() returns bool
    return getStacks() > 0

  // --------------------------------------------------------------------------
  protected override function onApplied(int stacks)
    super.onApplied(stacks)

    if (stacks == 0)
      return

    let comp = getOwner().getOrAddUnitPropertiesComponent()
    m_propertyAffectorHandle = comp.getProperty(UnitProperty.LIFE_STEAL).affectAdd(stacks * BLOODREDCAPE_LIFESTEAL)

  // --------------------------------------------------------------------------
  protected override function onReverted(int stacks)
    super.onReverted(stacks)

    if (stacks == 0)
      return

    let comp = getOwner().getUnitPropertiesComponent()
    if (comp != null)
      let lifeStealProp = comp.getProperty(UnitProperty.LIFE_STEAL)
      if (lifeStealProp != null)
        lifeStealProp.remove(m_propertyAffectorHandle)

    m_propertyAffectorHandle = INVALID_HANDLE

  // --------------------------------------------------------------------------
  override function apply()

    let ownerUnit = getOwnerUnit()

    if (m_durationCallback == null)
      m_durationCallback = getTimer().doManual(BLOODREDCAPE_DURATION, true, () -> resetState())
      ownerUnit.addAbility(TlsAbilityIds.Items.bloodRedCape_BuffOnly)
      ownerUnit.hideAbility(TlsAbilityIds.Items.bloodRedCape_BuffOnly, true)
    else
      m_durationCallback.restart()

    super.apply()

    createFX()

    if (not m_playedSound)
      BLOODREDCAPE_SOUND.playOnPoint(
        getOwnerUnit().getPos().toVec3(),
        BLOODREDCAPE_SOUND_DURATION,
        BLOODREDCAPE_SOUND_VOLUME)
      m_playedSound = true

    if (getIsCaster())
      triggerAoe()

  // --------------------------------------------------------------------------
  function triggerAoe()
    let ownerUnit = getOwnerUnit()
    let tempGroup = getGroup()
    tempGroup.enumUnitsInRange(ownerUnit.getPos(), BLOODREDCAPE_AOE)
    for _unit in tempGroup
      if (isValidTarget(_unit))
        triggerBloodRedCape(_unit)
    tempGroup.release()

  // --------------------------------------------------------------------------
  function isValidTarget(unit _unit) returns bool
    let ownerUnit = getOwnerUnit()
    return _unit != ownerUnit and 
           _unit.getOwner().isHumanPlayer() and
           not _unit.isStructure() 

  // --------------------------------------------------------------------------
  function triggerBloodRedCape(unit _unit)
    let metadata = _unit.getMetadata()
    if (metadata == null)
      return

    let comp = metadata.getOrAddBloodRedCapeComponent()
    if (comp.getIsCaster())
      return

    let greaterStackCount = max(getStacks(), comp.getStacks())
    comp.setStacks(greaterStackCount)
    comp.apply()

  // --------------------------------------------------------------------------
  function resetState()
    revert()
    destroyFX()
    m_playedSound = false
    getOwnerUnit().removeAbility(TlsAbilityIds.Items.bloodRedCape_BuffOnly)

  // --------------------------------------------------------------------------
  function markForDestruction()
    if (m_destroyCallback != null)
      return
    let owner = getOwner()
    m_destroyCallback = doAfter(5.0) () ->
      // The callback will destroy itself since the timer has expired
      m_destroyCallback = null
      owner.removeComponent(this)

  // --------------------------------------------------------------------------
  function cancelDestruction()
    if (m_destroyCallback == null)
      return
    destroy m_destroyCallback
    m_destroyCallback = null

  // --------------------------------------------------------------------------
  function createFX()
    if (m_fx == null)
      m_fx = AddSpecialEffectTarget(BLOODREDCAPE_FX_PATH, getOwnerUnit(), "origin")

  // --------------------------------------------------------------------------
  function destroyFX()
    if (m_fx != null)
      m_fx.destr()
      m_fx = null

// ============================================================================
function IUnitMetadata.getBloodRedCapeComponent() returns BloodRedCapeComponent
  return this.getComponent(BloodRedCapeComponent.typeId) castTo BloodRedCapeComponent

// ============================================================================
function IUnitMetadata.getOrAddBloodRedCapeComponent() returns BloodRedCapeComponent
  var component = this.getBloodRedCapeComponent()
  if (component == null)
    component = this.addComponent(new BloodRedCapeComponent(this)) castTo BloodRedCapeComponent
  return component

// ============================================================================
init
  ItemEffectComponent.registerComponentFactory(TlsItemIds.bloodRedCape) _unit ->
  //{
    let metadata = _unit.getMetadata()
    ItemEffectComponent comp = null
    if (metadata != null)
      comp = metadata.getOrAddBloodRedCapeComponent()
    return comp
  //}
