package MainItemLibrary
import ItemLibrary
import ItemSetLibrary
import TlsItemIds
import TlsJobItemIds
import Math

public MainItemSetLibrary g_MainItemLibrary

public tuple ItemChances(real common, real rare, real epic, real legendary)

// ============================================================================
public function lerp(ItemChances start, ItemChances _end, real t) returns ItemChances
  return ItemChances(
    lerp(start.common, _end.common, t),
    lerp(start.rare, _end.rare, t),
    lerp(start.epic, _end.epic, t),
    lerp(start.legendary, _end.legendary, t))

constant real ITEM_SET_CHANCE_COMMON = 8.0
constant real ITEM_SET_CHANCE_RARE = 4.0
constant real ITEM_SET_CHANCE_EPIC = 2.0
constant real ITEM_SET_CHANCE_LEGENDARY = 1.0

constant color ITEM_SET_COLOR_COMMON = fromHexString("FFC7C7C7").withoutAlpha()
constant color ITEM_SET_COLOR_RARE = fromHexString("FF4293F5").withoutAlpha()
constant color ITEM_SET_COLOR_EPIC = fromHexString("FF7842F5").withoutAlpha()
constant color ITEM_SET_COLOR_LEGENDARY = fromHexString("FFF2ED5E").withoutAlpha()

// ============================================================================
public class MainItemSetLibrary extends ItemSetLibrary
  ItemSet commonSet
  ItemSet rareSet
  ItemSet epicSet
  ItemSet legendarySet

  // --------------------------------------------------------------------------
  construct()
    this.commonSet = new ItemSet("Common", ITEM_SET_COLOR_COMMON)
    this.rareSet = new ItemSet("Rare", ITEM_SET_COLOR_RARE)
    this.epicSet = new ItemSet("Epic", ITEM_SET_COLOR_EPIC)
    this.legendarySet = new ItemSet("Legendary", ITEM_SET_COLOR_LEGENDARY)

    add(commonSet, ITEM_SET_CHANCE_COMMON)
    add(rareSet, ITEM_SET_CHANCE_RARE)
    add(epicSet, ITEM_SET_CHANCE_EPIC)
    add(legendarySet, ITEM_SET_CHANCE_LEGENDARY)

  // --------------------------------------------------------------------------
  function getRandomItemSet(ItemChances chances) returns ItemSet
    let tempSet = new WeightedItemSetSet()

    if (not commonSet.isEmpty())
      tempSet.add(commonSet, chances.common)
    if (not rareSet.isEmpty())
      tempSet.add(rareSet, chances.rare)
    if (not epicSet.isEmpty())
      tempSet.add(epicSet, chances.epic)
    if (not legendarySet.isEmpty())
      tempSet.add(legendarySet, chances.legendary)

    ItemSet selectedItemSet = null
    if (not tempSet.isEmpty())
      selectedItemSet = tempSet.getRandom()

    destroy tempSet
    return selectedItemSet

  // --------------------------------------------------------------------------
  function getRandomItemType(ItemChances chances) returns ItemType
    let itemSet = this.getRandomItemSet(chances)
    return itemSet != null ? itemSet.getRandomItemType() : null

  // --------------------------------------------------------------------------
  function createRandomItem(vec2 pos, ItemChances chances) returns item
    let itemSet = this.getRandomItemSet(chances)
    if (itemSet == null)
      Log.error("MainItemLibrary", "createRandomItem", "", "No item set found")
    return itemSet.createRandomItem(pos)

  // --------------------------------------------------------------------------
  function giveRandomItemToUnit(unit u, ItemChances chances) returns item
    let itm = this.createRandomItem(u.getPos(), chances)
    if (itm == null)
      Log.error("MainItemLibrary", "giveRandomItemToUnit", "", "No item was created")
    UnitAddItemSwapped(itm, u)
    return itm

  // --------------------------------------------------------------------------
  function getItemType(int itemTypeId) returns ItemType
    let owningSet = getOwningSet(itemTypeId)
    if (owningSet != null)
      return owningSet.getItemType(itemTypeId)
    return null

  // --------------------------------------------------------------------------
  function getOwningSet(int itemTypeId) returns ItemSet
    var itemType = commonSet.getItemType(itemTypeId)
    if (itemType != null)
      return commonSet
    itemType = rareSet.getItemType(itemTypeId)
    if (itemType != null)
      return rareSet
    itemType = epicSet.getItemType(itemTypeId)
    if (itemType != null)
      return epicSet
    itemType = legendarySet.getItemType(itemTypeId)
    if (itemType != null)
      return legendarySet
    return null

// ============================================================================
init
  g_MainItemLibrary = new MainItemSetLibrary()

  // Common Set
  g_MainItemLibrary.commonSet.add(TlsItemIds.bandages, 30.0)..setMaxStacks(10)
  g_MainItemLibrary.commonSet.add(TlsItemIds.portableBarricade, 10.0)..setMaxStacks(4)
  g_MainItemLibrary.commonSet.add(TlsItemIds.tent, 5.0)
  g_MainItemLibrary.commonSet.add(TlsItemIds.cheese, 20.0)..setMaxStacks(10)
  g_MainItemLibrary.commonSet.add(TlsItemIds.armor1, 20.0)
  g_MainItemLibrary.commonSet.add(TlsItemIds.attackSpeed1, 20.0)
  g_MainItemLibrary.commonSet.add(TlsItemIds.attackDamage1, 20.0)
  g_MainItemLibrary.commonSet.add(TlsItemIds.scrollOfCampPortal, 5.0)
  g_MainItemLibrary.commonSet.add(TlsItemIds.staminaPotion1, 20.0)..setMaxStacks(10)

  g_MainItemLibrary.commonSet.add(TlsJobItemIds.militia1, "Job Item", 1.0)
  g_MainItemLibrary.commonSet.add(TlsJobItemIds.builder1, "Job Item", 1.0)

  // Rare Set
  g_MainItemLibrary.rareSet.add(TlsItemIds.boots1, 10.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.armor2, 20.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.attackSpeed2, 20.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.attackDamage2, 20.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.nightScope, 10.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.staminaPotion2, 20.0)..setMaxStacks(10)
  g_MainItemLibrary.rareSet.add(TlsItemIds.wirtsPipe, 20.0)..setMaxStacks(5)
  g_MainItemLibrary.rareSet.add(TlsItemIds.wirtsLeg, 20.0)..setMaxStacks(5)
  g_MainItemLibrary.rareSet.add(TlsItemIds.monsterTooth, 20.0)..setMaxStacks(5)
  g_MainItemLibrary.rareSet.add(TlsItemIds.wisdomKnuckle, 20.0)..setMaxStacks(5)

  g_MainItemLibrary.rareSet.add(TlsJobItemIds.medic1, "Job Item", 1.0)
  g_MainItemLibrary.rareSet.add(TlsJobItemIds.spearman1, "Job Item", 1.0)

  // Epic Set
  g_MainItemLibrary.epicSet.add(TlsItemIds.grenade, 10.0)..setMaxStacks(10)
  g_MainItemLibrary.epicSet.add(TlsItemIds.armor3, 20.0)
  g_MainItemLibrary.epicSet.add(TlsItemIds.attackSpeed3, 20.0)
  g_MainItemLibrary.epicSet.add(TlsItemIds.attackDamage3, 20.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.staminaPotion3, 20.0)..setMaxStacks(10)
  g_MainItemLibrary.epicSet.add(TlsItemIds.shapeshiftingKey, 5.0)
  g_MainItemLibrary.epicSet.add(TlsItemIds.treasureHuntersPendant, 5.0)
  g_MainItemLibrary.rareSet.add(TlsItemIds.bloodRedCape, 20.0)..setMaxStacks(3)
  g_MainItemLibrary.rareSet.add(TlsItemIds.brassContraption, 20.0)..setMaxStacks(3)
  g_MainItemLibrary.rareSet.add(TlsItemIds.lightningRod, 20.0)..setMaxStacks(5)

  g_MainItemLibrary.epicSet.add(TlsJobItemIds.marksman1, "Job Item", 1.0)

  // Legendary Set
  g_MainItemLibrary.legendarySet.add(TlsItemIds.portableTurret, 10.0)
  g_MainItemLibrary.legendarySet.add(TlsItemIds.thunderlizardDiamond, 10.0)
  g_MainItemLibrary.legendarySet.add(TlsItemIds.sacredRelic, 10.0)
  g_MainItemLibrary.legendarySet.add(TlsItemIds.luckyHorseshoe, 10.0)..setMaxStacks(3)