package ItemSetLibrary
import WeightedItemSetSet
import ItemSet
import ItemType
import WeightedSet
import ItemExtensions

// ============================================================================
public class ItemSetLibrary
  protected WeightedItemSetSet itemSets

  // --------------------------------------------------------------------------
  construct()
    this.itemSets = new WeightedItemSetSet()

  // --------------------------------------------------------------------------
  ondestroy
    destroy this.itemSets

  // --------------------------------------------------------------------------
  function add(ItemSet itemSet, real weight)
    this.itemSets.add(itemSet, weight)
  
  // --------------------------------------------------------------------------
  function remove(ItemSet itemSet)
    this.itemSets.remove(itemSet)

  // --------------------------------------------------------------------------
  function getItemSetByName(string itemSetName) returns ItemSet
    for i in this.itemSets
      if (i.getName() == itemSetName)
        return i
    return null

  // --------------------------------------------------------------------------
  function getRandomItemSet() returns ItemSet
    return this.itemSets.getRandom()

  // --------------------------------------------------------------------------
  function getRandomItemType() returns ItemType
    let itemSet = this.getRandomItemSet()
    return itemSet != null ? itemSet.getRandomItemType() : null

  // --------------------------------------------------------------------------
  function createRandomItem(vec2 pos) returns item
    let itemType = this.getRandomItemSet()
    return itemType.createRandomItem(pos)

  // --------------------------------------------------------------------------
  function giveRandomItemToUnit(unit u) returns item
    let itm = this.createRandomItem(u.getPos())
    UnitAddItemSwapped(itm, u)
    return itm

  // --------------------------------------------------------------------------
  function getItemTypeChance(int id) returns real
    for itemSet in this.itemSets
      for itemType in itemSet
        if (itemType.id == id)
          return itemSet.getItemTypeChance(id)
    return 0.0

  // --------------------------------------------------------------------------
  function getOverallItemTypeChance(int id) returns real
    for itemSet in this.itemSets
      for itemType in itemSet
        if (itemType.id == id)
          return itemSet.getItemTypeChance(id) * this.itemSets.getChance(itemSet)
    return 0.0

  // --------------------------------------------------------------------------
  function createItem(int id, vec2 pos) returns item
    for itemSet in this.itemSets
      let itemType = itemSet.getItemType(id)
      if (itemType != null)
        let itm = itemSet.createItem(id, pos)
        if (itm != null)
          return itm
    return CreateItem(id, pos.x, pos.y)

  // --------------------------------------------------------------------------
  function createItemForUnit(unit u, int itemId) returns item
    let itm = this.createItem(itemId, u.getPos())
    if (itm != null)
      itm.giveTo(u)
    return itm

  // --------------------------------------------------------------------------
  function iterator() returns WeightedSetIterator<ItemSet>
    return this.itemSets.iterator()
