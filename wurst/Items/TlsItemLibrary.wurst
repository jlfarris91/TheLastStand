package TlsItemLibrary
import Math
import ItemSet
import WeightedItemSetSet
import ItemSetLibrary
import ItemType

public tuple ItemChances(real common, real rare, real epic, real legendary)

constant real        ITEM_SET_CHANCE_COMMON = 8.0
constant real        ITEM_SET_CHANCE_RARE = 4.0
constant real        ITEM_SET_CHANCE_EPIC = 2.0
constant real        ITEM_SET_CHANCE_LEGENDARY = 1.0

// ============================================================================
public function lerp(ItemChances start, ItemChances _end, real t) returns ItemChances
  return ItemChances(
    lerp(start.common, _end.common, t),
    lerp(start.rare, _end.rare, t),
    lerp(start.epic, _end.epic, t),
    lerp(start.legendary, _end.legendary, t))

// ============================================================================
public class TlsItemSetLibrary extends ItemSetLibrary
  ItemSet commonSet
  ItemSet rareSet
  ItemSet epicSet
  ItemSet legendarySet
  ItemSet questSet

  // --------------------------------------------------------------------------
  construct()
    commonSet = new ItemSet()
    rareSet = new ItemSet()
    epicSet = new ItemSet()
    legendarySet = new ItemSet()
    questSet = new ItemSet()

    add(commonSet, ITEM_SET_CHANCE_COMMON)
    add(rareSet, ITEM_SET_CHANCE_RARE)
    add(epicSet, ITEM_SET_CHANCE_EPIC)
    add(legendarySet, ITEM_SET_CHANCE_LEGENDARY)

  // --------------------------------------------------------------------------
  function getRandomItemSet(ItemChances chances) returns ItemSet
    let tempSet = new WeightedItemSetSet()

    if (not commonSet.isEmpty())
      tempSet.add(commonSet, chances.common)
    if (not rareSet.isEmpty())
      tempSet.add(rareSet, chances.rare)
    if (not epicSet.isEmpty())
      tempSet.add(epicSet, chances.epic)
    if (not legendarySet.isEmpty())
      tempSet.add(legendarySet, chances.legendary)

    ItemSet selectedItemSet = null
    if (not tempSet.isEmpty())
      selectedItemSet = tempSet.getRandom()

    destroy tempSet
    return selectedItemSet

  // --------------------------------------------------------------------------
  function getRandomItemType(ItemChances chances) returns ItemType
    let itemSet = this.getRandomItemSet(chances)
    return ItemType.getItemType(itemSet.getRandom())

  // --------------------------------------------------------------------------
  function createRandomItem(vec2 pos, ItemChances chances) returns item
    let itemSet = this.getRandomItemSet(chances)
    if (itemSet == null)
      Log.error("MainItemLibrary", "createRandomItem", "", "No item set found")
    return itemSet.createRandomItem(pos)

  // --------------------------------------------------------------------------
  function giveRandomItemToUnit(unit u, ItemChances chances) returns item
    let itm = this.createRandomItem(u.getPos(), chances)
    if (itm == null)
      Log.error("MainItemLibrary", "giveRandomItemToUnit", "", "No item was created")
    UnitAddItemSwapped(itm, u)
    return itm

  // --------------------------------------------------------------------------
  function getOwningSet(int itemTypeId) returns ItemSet
    if (commonSet.has(itemTypeId))
      return commonSet
    if (rareSet.has(itemTypeId))
      return rareSet
    if (epicSet.has(itemTypeId))
      return epicSet
    if (legendarySet.has(itemTypeId))
      return legendarySet
    if (questSet.has(itemTypeId))
      return questSet
    return null