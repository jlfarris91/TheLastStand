package MonsterTooth
import TlsItemIds
import UnitMetadata
import UnitPropertiesComponent
import ItemEffectComponent

constant real LIFESTEAL_AMOUNT = 10.0

// ============================================================================
public class MonsterToothItemEffectComponent extends ItemEffectComponent

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

    setMode(ItemEffectApplication.ACQUIRED)
    setItemTypeId(TlsItemIds.monsterTooth)
    setDestroyOnDrop(true)

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return MonsterToothItemEffectComponent.getTypeId()

  // --------------------------------------------------------------------------
  protected override function onApplied(int stacks)
    super.onApplied(stacks)

    if (stacks == 0)
      return

    let comp = getOwner().getOrAddUnitPropertiesComponent()
    comp.setLifeStealPercentage(comp.getLifeStealPercentage() + stacks * LIFESTEAL_AMOUNT)

  // --------------------------------------------------------------------------
  protected override function onReverted(int stacks)
    super.onReverted(stacks)

    if (stacks == 0)
      return

    let comp = getOwner().getOrAddUnitPropertiesComponent()
    comp.setLifeStealPercentage(comp.getLifeStealPercentage() - stacks * LIFESTEAL_AMOUNT)

// ============================================================================
function IUnitMetadata.getMonsterToothItemEffectComponent() returns MonsterToothItemEffectComponent
  return this.getComponent(typeInfo(MonsterToothItemEffectComponent.typeId)) castTo MonsterToothItemEffectComponent

// ============================================================================
function IUnitMetadata.getOrAddMonsterToothItemEffectComponent() returns MonsterToothItemEffectComponent
  var component = this.getMonsterToothItemEffectComponent()
  if (component == null)
    component = this.addComponent(new MonsterToothItemEffectComponent(this)) castTo MonsterToothItemEffectComponent
  return component

// ============================================================================
init
  g_itemIdToComponentFactoryMap.put(TlsItemIds.monsterTooth) _unit ->
  //{
    let metadata = _unit.getMetadata()
    ItemEffectComponent comp = null
    if (metadata != null)
      comp = metadata.getOrAddMonsterToothItemEffectComponent()
    return comp
  //}