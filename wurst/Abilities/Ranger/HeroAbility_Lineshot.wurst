package HeroAbility_Lineshot
import ChannelAbilityPreset
import Math
import RealExtensions
import SmartValue
import DamageEvent
import Range
import Action
import Func
import Icons
import HeroAbilities
import ArcProjectile
import SoundUtils
import TlsAbilityIds

constant rangeReal ABIL_DAMAGE_DISTANCE_SCALE = rangeReal(1.0, 0.5)

constant SoundDefinition g_attackSound = new SoundDefinition("units\\human\\rifleman\\riflemanattack1.flac", false, true)

// ============================================================================
class Lineshot
  static constant int ABILITY_ID = TlsAbilityIds.Hero.lineshot
  static constant int ABILITY_LEARN_ID = TlsAbilityIds.Hero.lineshot_learn

  // --------------------------------------------------------------------------
  static function getDamageScalar01(int effectiveAbilityLevel) returns real
    return lerp(6.0, 18.0, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Lineshot - [{0}]".format("Level {0}".format(
      effectiveAbilityLevel.toString()).colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // --------------------------------------------------------------------------
  static function getManaCost(int effectiveAbilityLevel) returns int
    return 125 + effectiveAbilityLevel * 25
    //return lerpInt(150, 250, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getCooldown(int effectiveAbilityLevel) returns real
    return lerp(25.0, 15.0, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Fires a projectile that deals {0} of your base damage in a line. Each target hit reduces the damage by 50%. Hits air units.".format(
      getDamageScalar01(effectiveAbilityLevel).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

// ============================================================================
public class LineshotComponent extends HeroAbilityComponent

  SmartValue damageScale01 = new SmartValue(1.0)

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner, Lineshot.ABILITY_ID, Lineshot.ABILITY_LEARN_ID)

  // --------------------------------------------------------------------------
  override protected function updateAbilityState()
    super.updateAbilityState()
  
    let abilityLevelAdjusted = abilityLevel.getIntValue()
    damageScale01.setBase(Lineshot.getDamageScalar01(abilityLevelAdjusted))

  // --------------------------------------------------------------------------
  protected override function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Lineshot.getTooltipNormal(effectiveAbilityLevel, learnedAbilityLevel)
    
  // --------------------------------------------------------------------------
  protected override function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Lineshot.getTooltipNormalExtended(effectiveAbilityLevel, learnedAbilityLevel)

  // --------------------------------------------------------------------------
  override protected function onCastPoint(int _abilityId, vec2 target)

    let ownerUnit = getOwnerUnit()
    let ownerPlayer = ownerUnit.getOwner()

    let distance = ownerUnit.getAbility(Lineshot.ABILITY_ID).getField(ABILITY_RLF_CAST_RANGE, ownerUnit.getAbilityLevel(Lineshot.ABILITY_ID))

    let startPos = ownerUnit.getPos()
    let endPos = startPos + (target - startPos).norm() * distance
    let baseDamage = ownerUnit.getBaseDamage(0)
    let finalDamage = baseDamage * damageScale01.getValue()

    Func2<ArcProjectile, unit, bool> unitFilter = (as, u) ->
      return u.isAlive() and u.isEnemyOf(ownerPlayer)

    let callback = new ProjectileDamageCallback()
    callback.ownerUnit = ownerUnit
    callback.damage = finalDamage
    callback.scalar = 0.25

    let fx = addEffect("Abilities\\Weapons\\Banditmissile\\Banditmissile.mdl", startPos)
    ..setOrientation(startPos.angleTo(endPos).radians, 0.0, 0.0)

    new ArcProjectile(ownerUnit, fx, startPos, endPos, 64.0, 64.0, 1000, 0.05, unitFilter, callback)

    g_attackSound.playOnPoint(startPos.toVec3())

// ============================================================================
public function IUnitMetadata.getLineshotComponent() returns LineshotComponent
  return this.getComponent(LineshotComponent.typeId) castTo LineshotComponent

// ============================================================================
public function IUnitMetadata.getOrAddLineshotComponent() returns LineshotComponent
  var component = this.getLineshotComponent()
  if (component == null)
    component = this.addComponent(new LineshotComponent(this)) castTo LineshotComponent
  return component

// ============================================================================
public function unit.getLineshotComponent() returns LineshotComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getLineshotComponent() : null

// ============================================================================
public function unit.getOrAddLineshotComponent() returns LineshotComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddLineshotComponent() : null

// ============================================================================
class ProjectileDamageCallback extends Action2<ArcProjectile, unit>
  unit ownerUnit
  real damage
  real scalar

  // --------------------------------------------------------------------------
  override function call(ArcProjectile arg1, unit target)
    DamageEvent.setNextDamageFromCode()
    DamageEvent.setNextDamageId(Lineshot.ABILITY_ID)
    DamageEvent.setNextDamageElement(DAMAGE_ELEMENT_ATTACK)
    ownerUnit.damageTarget(target, damage, true, true, ATTACK_TYPE_CHAOS)
    damage = damage * scalar

// ============================================================================
@compiletime function createObjects()

  new ChannelAbilityPreset(Lineshot.ABILITY_ID, 10, true)
    ..setupHeroAbilityGroup(HeroAbilityGroup.R)
    ..presetTargetTypes(Targettype.POINT)
    ..presetOption(Option.VISIBLE, true)
    ..presetOption(Option.PHYSICALSPELL, true)
    ..setName("Lineshot")
    ..presetTooltipNormal(lvl -> Lineshot.getTooltipNormal(lvl, lvl))
    ..presetTooltipNormalExtended(lvl -> Lineshot.getTooltipNormalExtended(lvl, lvl))
    ..presetCastingTime(lvl -> (5. / 30.) * 1.267)
    ..presetCastRange(lvl -> 800)
    ..presetTargetsAllowed(lvl -> "ground,air,enemy,vulnerable")
    ..setAnimationNames("spell,attack,throw")
    ..setIconNormal(Icons.bTNHumanMissileUpTwo)
    ..presetCooldown(lvl -> Lineshot.getCooldown(lvl))
    ..presetManaCost(lvl -> Lineshot.getManaCost(lvl))

  new HeroLearnAbilityDefinition(Lineshot.ABILITY_LEARN_ID, 3)
    ..setupHeroAbilityGroup(HeroAbilityGroup.R, 0)
    ..setName("Lineshot")
    ..setTooltipLearn("Learn Lineshot - [|cFFFFCC00 Level %d|r]")
    ..setTooltipLearnExtended("Fires a projectile that deals damage to targets in a line. Each target hit reduces further damage dealt by 25%. Hits air units.|n|n|cFFFFCC00Level 1|r - Deals {0} of the unit's base damage|n|cFFFFCC00Level 2|r - Deals {1} of the unit's base damage|n|cFFFFCC00Level 3|r - Deals {2} of the unit's base damage".format(
      Lineshot.getDamageScalar01(1).toPercentageString01(),
      Lineshot.getDamageScalar01(2).toPercentageString01(),
      Lineshot.getDamageScalar01(3).toPercentageString01()))
    ..setIconResearch(Icons.bTNHumanMissileUpTwo)
    ..presetCooldown(lvl -> Lineshot.getCooldown(lvl))
    ..presetManaCost(lvl -> Lineshot.getManaCost(lvl))

// ============================================================================
init
  registerHeroAbilityComponent(LineshotComponent.typeId)