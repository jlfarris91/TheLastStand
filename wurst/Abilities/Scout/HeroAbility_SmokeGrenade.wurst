package HeroAbility_SmokeGrenade
import RealExtensions
import ChannelAbilityPreset
import Icons
import UnitIds
import ErrorHandling
import DummyCaster
import Math
import Orders
import BuffObjEditing
import ClosureTimers
import ECS
import Missile
import HeroAbilities
import TlsAbilityIds

constant int DUMMY_ID = compiletime(UNIT_ID_GEN.next())
public constant int CLOUD_ABIL_ID = compiletime(ABIL_ID_GEN.next())
constant int CLOUD_BUFF_ID = compiletime(BUFF_ID_GEN.next())
constant real CLOUD_AOE = 300.0
constant real CLOUD_DURATION = 15.0

// ============================================================================
class SmokeGrenade

  static constant int ABILITY_ID = TlsAbilityIds.Hero.smokeGrenade
  static constant int ABILITY_LEARN_ID = TlsAbilityIds.Hero.smokeGrenade_learn

  // --------------------------------------------------------------------------
  static function getChanceToMissPercentage01(int effectiveAbilityLevel) returns real
    return clamp01(lerp(0.3, 1.0, parameterize(1, 3, effectiveAbilityLevel)))

  // --------------------------------------------------------------------------
  static function getAttackSpeedModifier(int effectiveAbilityLevel) returns real
    return lerp(-0.1, -0.3, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getMovementSpeedModifier(int effectiveAbilityLevel) returns real
    return lerp(-0.1, -0.3, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getManaCost(int effectiveAbilityLevel) returns int
    return lerpInt(150, 350, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getCooldown(int effectiveAbilityLevel) returns real
    return lerp(40.0, 25.0, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Smoke Grenade - [{0}]".format("Level {0}".format(
      effectiveAbilityLevel.toString()).colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Throws a smoke grenade at a target area causing all enemies within to have a {0} chance to miss attacks and have {1} reduced attack speed for {2} seconds.".format(
      getChanceToMissPercentage01(effectiveAbilityLevel).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel),
      (-getAttackSpeedModifier(effectiveAbilityLevel)).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel),
      CLOUD_DURATION.toInt().toString())

// ============================================================================
public class SmokeGrenadeComponent extends HeroAbilityComponent
  
  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner, SmokeGrenade.ABILITY_ID, SmokeGrenade.ABILITY_LEARN_ID)

  // --------------------------------------------------------------------------
  override protected function onDisabled()
    super.onDisabled()

  // --------------------------------------------------------------------------
  override protected function onCast(int _abilityId)

    let ownerUnit = getOwnerUnit()
    let targetPos = vec2(GetSpellTargetX(), GetSpellTargetY())

    ECS.createEntity() (ECEntity entity) ->
    //{
      let startPos = ownerUnit.getPos()

      let missileEffect = entity.addComponentAs<ECMissileEffect>(ECMissileEffect.typeId)
      missileEffect.setEffect(addEffect("Abilities\\Spells\\Other\\AcidBomb\\BottleMissile.mdl", startPos))
      missileEffect.m_updateOrientation = false

      let missile = entity.addComponentAs<ECMissile>(ECMissile.typeId)
      missile.setFiringUnit(ownerUnit)
      missile.m_targetPos = targetPos
      missile.m_projectileLaunchOffset = vec3(60, 0, 60)
      missile.m_projectileImpactOffset = vec3(0, 0, 0)
      missile.m_speed = 300
      missile.m_arc = 0.5

      missile.onArrived().registerDispatched(this, true) (ECMissile arg1) ->
        onMissileLanded(arg1.getTargetPos())
    //}

  // --------------------------------------------------------------------------
  protected function onMissileLanded(vec2 targetPos)
    let ownerUnit = getOwnerUnit()

    let caster = new DummyCaster()
      ..owner(ownerUnit.getOwner())
      ..origin(targetPos)
      ..delay(CLOUD_DURATION)
  
    if (caster.castPoint(CLOUD_ABIL_ID, getEffectiveAbilityLevel(), OrderIds.cloudoffog, targetPos) == null)
      error("Failed to cast cloud ability")

    let circlefx = addEffect("circle.mdl", targetPos)
      ..setPos(targetPos)
      ..setScale(CLOUD_AOE / 64.0)
      ..setColor(colorA(150, 150, 150, 100))
    doAfter(CLOUD_DURATION, () -> circlefx.destr())

  // --------------------------------------------------------------------------
  protected override function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return SmokeGrenade.getTooltipNormal(effectiveAbilityLevel, learnedAbilityLevel)
    
  // --------------------------------------------------------------------------
  protected override function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return SmokeGrenade.getTooltipNormalExtended(effectiveAbilityLevel, learnedAbilityLevel)

// ============================================================================
public function IUnitMetadata.getSmokeGrenadeComponent() returns SmokeGrenadeComponent
  return this.getComponent(SmokeGrenadeComponent.typeId) castTo SmokeGrenadeComponent

// ============================================================================
public function IUnitMetadata.getOrAddSmokeGrenadeComponent() returns SmokeGrenadeComponent
  var component = this.getSmokeGrenadeComponent()
  if (component == null)
    component = this.addComponent(new SmokeGrenadeComponent(this)) castTo SmokeGrenadeComponent
  return component

// ============================================================================
public function unit.getSmokeGrenadeComponent() returns SmokeGrenadeComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getSmokeGrenadeComponent() : null

// ============================================================================
public function unit.getOrAddSmokeGrenadeComponent() returns SmokeGrenadeComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddSmokeGrenadeComponent() : null

// ============================================================================
@compiletime function createObjects()

  new UnitDefinition(DUMMY_ID, UnitIds.wisp)
    ..setScalingValue(0.01)
    ..setNormalAbilities(commaList(AbilityIds.invulnerable, AbilityIds.locust))
    ..setSightRadiusDay(1)
    ..setSightRadiusNight(1)
    ..setArtSpecial("")
    ..setModelFile("dummy.mdl")
    ..setCollisionSize(0.0)
    ..setFoodCost(0)
    ..setFoodProduced(0)
    ..setAttacksEnabled(0)

  new BuffDefinition(CLOUD_BUFF_ID, 'bclf')
    ..setName("Smoke Grenade")
    ..setTooltipNormal(1, "Smoke Grenade")
    ..setTooltipNormalExtended(1, "This unit is inside of a thick cloud of smoke causing it to miss attacks.")
  
  new AbilityDefinitionCloudofFog(CLOUD_ABIL_ID)
    ..setLevels(10)
    ..setItemAbility(false)
    ..presetAreaofEffect(lvl -> CLOUD_AOE)
    ..presetAttackSpeedModifier(lvl -> SmokeGrenade.getAttackSpeedModifier(lvl))
    ..presetAttacksPrevented(lvl -> 0)
    ..presetChanceToMiss(lvl -> SmokeGrenade.getChanceToMissPercentage01(lvl))
    ..presetMovementSpeedModifier(lvl -> SmokeGrenade.getMovementSpeedModifier(lvl))
    ..presetBuffs(lvl -> CLOUD_BUFF_ID.toRawCode())
    ..presetTargetsAllowed(lvl -> "ground,vulnerable,invulnerable")
    ..presetDurationHero(lvl -> CLOUD_DURATION)
    ..presetDurationNormal(lvl -> CLOUD_DURATION)
    ..presetManaCost(lvl -> 0)
    ..presetCooldown(lvl -> 0)
    ..setRequirements("")

  new ChannelAbilityPreset(SmokeGrenade.ABILITY_ID, 10, true)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E)
    ..setAnimationNames("spell,attack,throw")
    ..setIconNormal(Icons.bTNCloudOfFog)
    ..presetTooltipNormal(lvl -> SmokeGrenade.getTooltipNormal(lvl, lvl))
    ..presetTooltipNormalExtended(lvl -> SmokeGrenade.getTooltipNormalExtended(lvl, lvl))
    ..presetCastingTime(lvl -> (5. / 30.) * 1.267)
    ..presetAreaofEffect(lvl -> CLOUD_AOE)
    ..presetTargetTypes(Targettype.POINT)
    ..presetOption(Option.TARGETIMAGE, true)
    ..presetOption(Option.VISIBLE, true)
    ..presetDurationHero(lvl -> 0.02)
    ..presetDurationNormal(lvl -> 0.02)
    ..presetManaCost(lvl -> SmokeGrenade.getManaCost(lvl))
    ..presetCooldown(lvl -> SmokeGrenade.getCooldown(lvl))

  new HeroLearnAbilityDefinition(SmokeGrenade.ABILITY_LEARN_ID, 3)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E, 0)
    ..setName("Smoke Grenade")
    ..setTooltipLearn("Learn [Smoke Grenade |cFFFFCC00 Level %d|r]")
    ..setTooltipLearnExtended("Throws a smoke grenade at a target area causing all enemies within to miss attacks for {6} seconds.|n|n|cFFFFCC00Level 1|r - {0} chance to miss and attack speed is reduced by {1}|n|cFFFFCC00Level 2|r - {2} chance to miss and attack speed is reduced by {3}|n|cFFFFCC00Level 3|r - {4} chance to miss and attack speed is reduced by {5}".format(
      SmokeGrenade.getChanceToMissPercentage01(1).toPercentageString01(), (-SmokeGrenade.getAttackSpeedModifier(1)).toPercentageString01(),
      SmokeGrenade.getChanceToMissPercentage01(2).toPercentageString01(), (-SmokeGrenade.getAttackSpeedModifier(2)).toPercentageString01(),
      SmokeGrenade.getChanceToMissPercentage01(3).toPercentageString01(), (-SmokeGrenade.getAttackSpeedModifier(3)).toPercentageString01(),
      CLOUD_DURATION.toInt().toString()))
    ..setIconResearch(Icons.bTNCloudOfFog)

// ============================================================================
init
  registerHeroAbilityComponentType(SmokeGrenadeComponent.typeId, TlsAbilityIds.Hero.smokeGrenade)
  registerHeroAbilityComponentType(SmokeGrenadeComponent.typeId, TlsAbilityIds.Hero.smokeGrenade_learn)