package HeroAbility_Blundershot
import ChannelAbilityPreset
import Math
import RealExtensions
import SmartValue
import DamageEvent
import Range
import Icons
import HeroAbilities
import SoundUtils
import TlsAbilityIds
import ECS
import Missile

constant rangeReal ABIL_DAMAGE_DISTANCE_SCALE = rangeReal(1.0, 0.5)

constant SoundDefinition g_attackSound = new SoundDefinition("units\\human\\rifleman\\riflemanattack1.flac", false, true)

// ============================================================================
class Blundershot
  static constant int ABILITY_ID = TlsAbilityIds.Hero.blundershot
  static constant int ABILITY_LEARN_ID = TlsAbilityIds.Hero.blundershot_learn

  // --------------------------------------------------------------------------
  static function getDamageScalar01(int effectiveAbilityLevel) returns real
    return lerp(6.0, 18.0, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Blundershot - [{0}]".format("Level {0}".format(
      effectiveAbilityLevel.toString()).colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // --------------------------------------------------------------------------
  static function getManaCost(int effectiveAbilityLevel) returns int
    return 125 + effectiveAbilityLevel * 25
    //return lerpInt(150, 250, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getCooldown(int effectiveAbilityLevel) returns real
    return lerp(25.0, 15.0, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Fires a spread of projectiles that deal {0} of your base damage to targets in their path. Targets receive less damage the further away they are. Hits air units.".format(
      getDamageScalar01(effectiveAbilityLevel).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

// ============================================================================
public class BlundershotComponent extends HeroAbilityComponent

  SmartValue damageScale01 = new SmartValue(1.0)

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner, Blundershot.ABILITY_ID, Blundershot.ABILITY_LEARN_ID)

  // --------------------------------------------------------------------------
  override protected function updateAbilityState()
    super.updateAbilityState()
  
    let abilityLevelAdjusted = abilityLevel.getIntValue()
    damageScale01.setBase(Blundershot.getDamageScalar01(abilityLevelAdjusted))

  // --------------------------------------------------------------------------
  protected override function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Blundershot.getTooltipNormal(effectiveAbilityLevel, learnedAbilityLevel)
    
  // --------------------------------------------------------------------------
  protected override function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Blundershot.getTooltipNormalExtended(effectiveAbilityLevel, learnedAbilityLevel)

  // --------------------------------------------------------------------------
  override protected function onCast(int _abilityId)

    let target = EventData.getSpellTargetPos().withZ(60.0)
    let ownerUnit = getOwnerUnit()
    let ownerPlayer = ownerUnit.getOwner()

    let distance = ownerUnit.getAbility(Blundershot.ABILITY_ID).getField(ABILITY_RLF_CAST_RANGE, ownerUnit.getAbilityLevel(Blundershot.ABILITY_ID))

    let startPos = ownerUnit.getPos().withZ(60.0)
    let endPos = startPos + (target - startPos).norm() * distance
    let baseDamage = ownerUnit.getBaseDamage(0)
    let finalDamage = baseDamage * damageScale01.getValue()

    ECS.createEntity() (ECEntity entity) ->
    //{
      let transformComp = entity.addComponentAs<ECTransform>(ECTransform.typeId)
      transformComp.getTransform().setWorldPosition(startPos)

      let effectComp = entity.addComponentAs<ECMissileEffect>(ECMissileEffect.typeId)
      effectComp.setEffect(addEffect("Abilities\\Spells\\NightElf\\FanOfKnives\\FanOfKnivesMissile.mdl", startPos))

      let missile = entity.addComponentAs<ECMissile>(ECMissile.typeId)
      missile.m_owner = ownerUnit
      missile.m_startPos = startPos
      missile.m_targetPos = endPos
      missile.m_speed = 1000

      let lineDamage = entity.addComponentAs<ECMissileLineDamage>(ECMissileLineDamage.typeId)
      lineDamage.m_startSize = 64
      lineDamage.m_endSize = 256
      lineDamage.m_ignoreMissileTarget = false

      lineDamage.setTargetFilter() (unit target) ->
        return target.isAlive() and target.isEnemyOf(ownerPlayer)

      lineDamage.setDamageCallback() (unit target) ->
        DamageEvent.setNextDamageFromCode()
        DamageEvent.setNextDamageId(Blundershot.ABILITY_ID)
        DamageEvent.setNextDamageElement(DAMAGE_ELEMENT_ATTACK)
        let scale = ABIL_DAMAGE_DISTANCE_SCALE.lerp(parameterize(startPos.toVec2(), endPos.toVec2(), target.getPos()))
        ownerUnit.damageTarget(target, finalDamage * scale, true, true, ATTACK_TYPE_PIERCE)
    //}

    g_attackSound.playOnPoint(startPos)

// ============================================================================
public function IUnitMetadata.getBlundershotComponent() returns BlundershotComponent
  return this.getComponent(BlundershotComponent.typeId) castTo BlundershotComponent

// ============================================================================
public function IUnitMetadata.getOrAddBlundershotComponent() returns BlundershotComponent
  var component = this.getBlundershotComponent()
  if (component == null)
    component = this.addComponent(new BlundershotComponent(this)) castTo BlundershotComponent
  return component

// ============================================================================
public function unit.getBlundershotComponent() returns BlundershotComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getBlundershotComponent() : null

// ============================================================================
public function unit.getOrAddBlundershotComponent() returns BlundershotComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddBlundershotComponent() : null

// ============================================================================
@compiletime function createObjects()

  new ChannelAbilityPreset(Blundershot.ABILITY_ID, 10, true)
    ..setupHeroAbilityGroup(HeroAbilityGroup.R)
    ..presetTargetTypes(Targettype.POINT)
    ..presetOption(Option.VISIBLE, true)
    ..presetOption(Option.PHYSICALSPELL, true)
    ..setName("Blundershot")
    ..presetTooltipNormal(lvl -> Blundershot.getTooltipNormal(lvl, lvl))
    ..presetTooltipNormalExtended(lvl -> Blundershot.getTooltipNormalExtended(lvl, lvl))
    ..presetCastingTime(lvl -> (5. / 30.) * 1.267)
    ..presetCastRange(lvl -> 400)
    ..presetTargetsAllowed(lvl -> "ground,air,enemy,vulnerable")
    ..setAnimationNames("spell,attack,throw")
    ..setIconNormal(Icons.bTNHumanMissileUpTwo)
    ..presetCooldown(lvl -> Blundershot.getCooldown(lvl))
    ..presetManaCost(lvl -> Blundershot.getManaCost(lvl))

  new HeroLearnAbilityDefinition(Blundershot.ABILITY_LEARN_ID, 3)
    ..setupHeroAbilityGroup(HeroAbilityGroup.R, 0)
    ..setName("Blundershot")
    ..setTooltipLearn("Learn Blundershot - [|cFFFFCC00 Level %d|r]")
    ..setTooltipLearnExtended("Fires a spread of projectiles that deal damage to targets in their path. Targets receive less damage the further away they are.|n|n|cFFFFCC00Level 1|r - Deals {0} of the unit's base damage|n|cFFFFCC00Level 2|r - Deals {1} of the unit's base damage|n|cFFFFCC00Level 3|r - Deals {2} of the unit's base damage".format(
      Blundershot.getDamageScalar01(1).toPercentageString01(),
      Blundershot.getDamageScalar01(2).toPercentageString01(),
      Blundershot.getDamageScalar01(3).toPercentageString01()))
    ..setIconResearch(Icons.bTNHumanMissileUpTwo)
    ..presetCooldown(lvl -> Blundershot.getCooldown(lvl))
    ..presetManaCost(lvl -> Blundershot.getManaCost(lvl))

// ============================================================================
init
  registerHeroAbilityComponent(BlundershotComponent.typeId)