package Sprint
import UnitComponent
import ChannelAbilityPreset
import Icons
import RealtimeUpdate
import Meters
import DummyCaster
import Orders
import SmartValue
import BuffObjEditing
import RealExtensions
import Math
import Handle
import HeroAbilities
import TlsAbilityIds

constant int EXHAUST_ABIL_ID = compiletime(ABIL_ID_GEN.next())
constant int EXHAUST_BUFF_ID = compiletime(BUFF_ID_GEN.next())
constant int LEARN_SPRINTING_MAX_LEVEL = 3

constant buffTuple SPRINT_BUFF = compiletime(createDummyBuffObject("Sprinting", "This unit is sprinting; it has increased movement speed.", Icons.bTNBootsOfSpeed))

// ============================================================================
class Sprint
  
  // --------------------------------------------------------------------------
  static function getSprintMovementSpeedFactor(int level) returns real
    return min(lerp(0.2, 0.4, parameterize(1, LEARN_SPRINTING_MAX_LEVEL, level)), 1.0)

  // --------------------------------------------------------------------------
  static function getExhaustDuration(int level) returns real
    return min(lerp(5.0, 10.0, parameterize(1, LEARN_SPRINTING_MAX_LEVEL, level)), 12.0)

  // --------------------------------------------------------------------------
  static function getExhaustAttackSpeedFactor(int level) returns real
    return max(lerp(0.4, 0.2, parameterize(1, LEARN_SPRINTING_MAX_LEVEL, level)), 0.01)

  // --------------------------------------------------------------------------
  static function getExhaustMovementSpeedFactor(int level) returns real
    return max(lerp(0.6, 0.3, parameterize(1, LEARN_SPRINTING_MAX_LEVEL, level)), 0.1)

  // --------------------------------------------------------------------------
  static function getSprintManaCostPerMeter(int level) returns real
    return lerp(2.0, 4.0, parameterize(1, LEARN_SPRINTING_MAX_LEVEL, level))

  // --------------------------------------------------------------------------
  static function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Sprint - [{0}]".format("Level {0}".format(
      effectiveAbilityLevel.toString()).colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Increases movement speed by {0} at the cost of mana lost while moving.".format(
      (getSprintMovementSpeedFactor(effectiveAbilityLevel)).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

// ============================================================================
public class SprintComponent extends HeroAbilityComponent implements IRealtimeListener
  private bool m_isSprinting
  private vec2 m_lastPos

  SmartValue movementSpeedFactor = new SmartValue()
  SmartValue exhaustLevel = new SmartValue()
  SmartValue manaCostPerMeter = new SmartValue()

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner, TlsAbilityIds.Hero.sprint_on, TlsAbilityIds.Hero.sprint_learn)

    // Also register the off ability id
    registerAbilityEvents(TlsAbilityIds.Hero.sprint_off)

    movementSpeedFactor.onValueChanged().registerDispatched(this) () ->
      Log.info("movementSpeedFactor: " + movementSpeedFactor.getValue().toString())

    exhaustLevel.onValueChanged().registerDispatched(this) () ->
      Log.info("exhaustLevel: " + exhaustLevel.getValue().toString())

    manaCostPerMeter.onValueChanged().registerDispatched(this) () ->
      Log.info("manaCostPerMeter: " + manaCostPerMeter.getValue().toString())

  // --------------------------------------------------------------------------
  ondestroy
    destroy exhaustLevel
    destroy manaCostPerMeter

  // --------------------------------------------------------------------------
  function startSprinting()
    if (m_isSprinting)
      return

    m_lastPos = getOwnerUnit().getPos()
    m_isSprinting = true
    updateAbilityState()
    this.registerForRealtimeUpdate(RealtimeUpdatePriority.Fast)

  // --------------------------------------------------------------------------
  function stopSprinting()
    stopSprinting(true)

  // --------------------------------------------------------------------------  
  protected function stopSprinting(bool _issueOrder)
    if (not m_isSprinting)
      return

    m_isSprinting = false
    updateAbilityState()
    this.unregisterForRealtimeUpdate()

  // --------------------------------------------------------------------------
  function exhaust()
    if (m_isSprinting)
      stopSprinting()

    let ownerUnit = getOwnerUnit()
    let exhaustLvl = exhaustLevel.getIntValue()

    let caster = new DummyCaster()..origin(ownerUnit.getPos())..delay(2.0)    
    if (caster.castTarget(EXHAUST_ABIL_ID, exhaustLvl, OrderIds.slow, ownerUnit) == null)
      Log.error("Failed to cast exhaust!")

    let exhaustLevelValue = exhaustLevel.getIntValue()
    let exhaustDuration = Sprint.getExhaustDuration(exhaustLevelValue)
    if (exhaustDuration > 0.0)
      BlzStartUnitAbilityCooldown(ownerUnit, TlsAbilityIds.Hero.sprint_on, exhaustDuration)

  // --------------------------------------------------------------------------
  override protected function onDisabled()
    super.onDisabled()
    this.unregisterForRealtimeUpdate()

  // --------------------------------------------------------------------------
  override protected function realtimeUpdate(real _)
    let ownerUnit = getOwnerUnit()
    let unitPos = ownerUnit.getPos()
    let dist = unitPos.distanceTo(m_lastPos)
    let meters = dist * WORLD_TO_METERS
    let manaCost = meters * manaCostPerMeter.getValue()
    if (manaCost > 0.0)
      ownerUnit.subMana(manaCost)
    if (ownerUnit.getMana() <= 0.0)
      stopSprinting()
      exhaust()
    m_lastPos = unitPos

  // --------------------------------------------------------------------------
  override function onCast(int abilityId)
    if (abilityId == TlsAbilityIds.Hero.sprint_on)
      startSprinting()
    else if (abilityId == TlsAbilityIds.Hero.sprint_off)
      stopSprinting()

  // --------------------------------------------------------------------------
  protected override function updateAbilityState()
    let sprintLevelVal = getEffectiveAbilityLevel()
    
    exhaustLevel.setBase(sprintLevelVal)
    manaCostPerMeter.setBase(Sprint.getSprintManaCostPerMeter(sprintLevelVal))
    movementSpeedFactor.setBase(Sprint.getSprintMovementSpeedFactor(sprintLevelVal))
    
    let ownerUnit = getOwnerUnit()

    if (sprintLevelVal == 0)
      ownerUnit.removeAbility(TlsAbilityIds.Hero.sprint_on)
      ownerUnit.removeAbility(TlsAbilityIds.Hero.sprint_off)
      if (m_isSprinting)
        stopSprinting()
        ownerUnit.setMoveSpeed(ownerUnit.getDefaultMovespeed())
      return

    if (m_isSprinting)
    //{
      ownerUnit.removeAbility(TlsAbilityIds.Hero.sprint_on)
      ownerUnit.addAbility(TlsAbilityIds.Hero.sprint_off)

      ownerUnit.addAbility(SPRINT_BUFF.abilId)
      ownerUnit.setMoveSpeed(clamp(ownerUnit.getDefaultMovespeed() * (1.0 + movementSpeedFactor.getValue()), 1, 522))
    //}
    else
    //{
      ownerUnit.removeAbility(TlsAbilityIds.Hero.sprint_off)
      ownerUnit.addAbility(TlsAbilityIds.Hero.sprint_on)
      ownerUnit.setAbilityLevel(TlsAbilityIds.Hero.sprint_on, sprintLevelVal)

      ownerUnit.removeAbility(SPRINT_BUFF.abilId)
      ownerUnit.removeAbility(SPRINT_BUFF.buffId)
      ownerUnit.setMoveSpeed(ownerUnit.getDefaultMovespeed())
    //}

  // --------------------------------------------------------------------------
  protected override function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Sprint.getTooltipNormal(effectiveAbilityLevel, learnedAbilityLevel)

  // --------------------------------------------------------------------------
  protected override function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Sprint.getTooltipNormalExtended(effectiveAbilityLevel, learnedAbilityLevel)

// ============================================================================
public function IUnitMetadata.getSprintComponent() returns SprintComponent
  return this.getComponent(SprintComponent.typeId) castTo SprintComponent

// ============================================================================
public function IUnitMetadata.getOrAddSprintComponent() returns SprintComponent
  var component = this.getSprintComponent()
  if (component == null)
    component = this.addComponent(new SprintComponent(this)) castTo SprintComponent
  return component

// ============================================================================
public function unit.getSprintComponent() returns SprintComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getSprintComponent() : null

// ============================================================================
public function unit.getOrAddSprintComponent() returns SprintComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddSprintComponent() : null

// ============================================================================
@compiletime function createObjects()

  new HeroLearnAbilityDefinition(TlsAbilityIds.Hero.sprint_learn, 3)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E)
    ..setName("Learn Sprint")
    ..setTooltipLearn("Learn Sprint - [|cffffcc00Level %d|r]")
    ..setTooltipLearnExtended("Increases movement speed at the cost of mana lost while moving.|n|n|cffffcc00Level 1|r - Movement speed is increased by {0}|n|cffffcc00Level 2|r - Movement speed is increased by {1}|n|cffffcc00Level 3|r - Movement speed is increased by {2}".format(
      Sprint.getSprintMovementSpeedFactor(1).toPercentageString01(),
      Sprint.getSprintMovementSpeedFactor(2).toPercentageString01(),
      Sprint.getSprintMovementSpeedFactor(3).toPercentageString01()))
    ..setIconResearch(Icons.bTNBootsOfSpeed)

  new AbilityDefinitionBeserk(TlsAbilityIds.Hero.sprint_on)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E)
    ..setArtCaster("")
    ..setAnimationNames("")
    ..setLevels(10)
    ..setName("Start Sprinting")
    ..presetTooltipNormal(lvl -> Sprint.getTooltipNormal(lvl, LEARN_SPRINTING_MAX_LEVEL))
    ..presetTooltipNormalExtended(lvl -> Sprint.getTooltipNormalExtended(lvl, LEARN_SPRINTING_MAX_LEVEL))
    ..setIconNormal(Icons.bTNBootsOfSpeed)
    ..presetAttackSpeedIncrease(lvl -> 0.0)
    ..presetDamageTakenIncrease(lvl -> 0.0)
    ..presetMovementSpeedIncrease(lvl -> 0.0)
    ..presetCooldown(lvl -> 0.0)
    ..presetDurationHero(lvl -> 0.1)
    ..presetDurationNormal(lvl -> 0.1)
    ..presetBuffs(lvl -> SPRINT_BUFF.buffId.toRawCode())
    ..presetTargetsAllowed(lvl -> "self")

  new AbilityDefinitionBeserk(TlsAbilityIds.Hero.sprint_off)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E)
    ..setArtCaster("")
    ..setAnimationNames("")
    ..setName("Stop Sprinting")
    ..presetTooltipNormal(lvl -> "Stop Sprinting")
    ..presetTooltipNormalExtended(lvl -> "Stop sprinting.")
    ..setIconNormal(Icons.bTNCancel)
    ..presetAttackSpeedIncrease(lvl -> 0.0)
    ..presetDamageTakenIncrease(lvl -> 0.0)
    ..presetMovementSpeedIncrease(lvl -> 0.0)
    ..presetCooldown(lvl -> 0.0)
    ..presetDurationHero(lvl -> 0.1)
    ..presetDurationNormal(lvl -> 0.1)
    ..presetBuffs(lvl -> SPRINT_BUFF.buffId.toRawCode())
    ..presetTargetsAllowed(lvl -> "self")

  new BuffDefinition(EXHAUST_BUFF_ID, 'Bslo')
    ..setTooltipNormal(1, "Exhausted")
    ..setTooltipNormalExtended(1, "This unit is exhausted; it's movement speed and attack rate are temporarily reduced.")

  new AbilityDefinitionSlowCreep(EXHAUST_ABIL_ID)
    ..presetManaCost(lvl -> 0)
    ..presetCooldown(lvl -> 0)
    ..presetCastRange(lvl -> 9999)
    ..setLevels(10)
    ..presetDurationHero(lvl -> Sprint.getExhaustDuration(lvl))
    ..presetDurationNormal(lvl -> Sprint.getExhaustDuration(lvl))
    ..presetAttackSpeedFactor(lvl -> Sprint.getExhaustAttackSpeedFactor(lvl))
    ..presetMovementSpeedFactor(lvl -> Sprint.getExhaustMovementSpeedFactor(lvl))
    ..presetTargetsAllowed(lvl -> "ground,air")
    ..setArtCaster("")
    ..presetBuffs(lvl -> EXHAUST_BUFF_ID.toRawCode())