package HeroAbility_HolyLight
import ChannelAbilityPreset
import Math
import Icons
import HeroAbilities
import TlsAbilityIds
import RealExtensions

// ============================================================================
class HolyLight
  static constant int ABILITY_ID = TlsAbilityIds.Hero.holyLight
  static constant int ABILITY_LEARN_ID = TlsAbilityIds.Hero.holyLight_learn

  // --------------------------------------------------------------------------
  static function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Holy Light - [{0}]".format("Level {0}".format(
      effectiveAbilityLevel.toString()).colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // --------------------------------------------------------------------------
  static function getHitPointsRestored(int effectiveAbilityLevel) returns real
    return lerp(400.0, 1200.0, parameterize(1, 3, effectiveAbilityLevel))

  // --------------------------------------------------------------------------
  static function getManaCost(int _effectiveAbilityLevel) returns int
    return 60

  // --------------------------------------------------------------------------
  static function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "A holy light that can heal a friendly living unit for {0} or deal half damage to an enemy Undead unit.".format(
      getHitPointsRestored(effectiveAbilityLevel).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

// ============================================================================
public class HolyLightComponent extends HeroAbilityComponent

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner, HolyLight.ABILITY_ID, HolyLight.ABILITY_LEARN_ID)

  // --------------------------------------------------------------------------
  protected override function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return HolyLight.getTooltipNormal(effectiveAbilityLevel, learnedAbilityLevel)
    
  // --------------------------------------------------------------------------
  protected override function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return HolyLight.getTooltipNormalExtended(effectiveAbilityLevel, learnedAbilityLevel)

// ============================================================================
public function IUnitMetadata.getHolyLightComponent() returns HolyLightComponent
  return this.getComponent(HolyLightComponent.typeId) castTo HolyLightComponent

// ============================================================================
public function IUnitMetadata.getOrAddHolyLightComponent() returns HolyLightComponent
  var component = this.getHolyLightComponent()
  if (component == null)
    component = this.addComponent(new HolyLightComponent(this)) castTo HolyLightComponent
  return component

// ============================================================================
public function unit.getHolyLightComponent() returns HolyLightComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getHolyLightComponent() : null

// ============================================================================
public function unit.getOrAddHolyLightComponent() returns HolyLightComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddHolyLightComponent() : null

// ============================================================================
@compiletime function createObjects()

  new AbilityDefinitionPaladinHolyLight(HolyLight.ABILITY_ID)
    ..setLevels(10)
    ..setupHeroAbilityGroup(HeroAbilityGroup.R)
    ..setName("Holy Light")
    ..presetTooltipNormal(lvl -> HolyLight.getTooltipNormal(lvl, lvl))
    ..presetTooltipNormalExtended(lvl -> HolyLight.getTooltipNormalExtended(lvl, lvl))
    ..presetAmountHealedDamaged(lvl -> HolyLight.getHitPointsRestored(lvl))
    ..presetManaCost(lvl -> HolyLight.getManaCost(lvl))
    ..setIconNormal(Icons.bTNHolyBolt)

  new HeroLearnAbilityDefinition(HolyLight.ABILITY_LEARN_ID, 3)
    ..setupHeroAbilityGroup(HeroAbilityGroup.R)
    ..setName("Holy Light")
    ..setTooltipLearn("Learn Holy Light - [|cFFFFCC00 Level %d|r]")
    ..setTooltipLearnExtended("A holy light that can heal a friendly living unit or damage an enemy Undead unit.|n|n|cFFFFCC00Level 1|r - Heals for {0} hit points.|n|cFFFFCC00Level 2|r - Heals for {1} hit points.|n|cFFFFCC00Level 3|r - Heals for {2} hit points.".format(
      HolyLight.getHitPointsRestored(1).toString(),
      HolyLight.getHitPointsRestored(2).toString(),
      HolyLight.getHitPointsRestored(3).toString()))
    ..setIconResearch(Icons.bTNHolyBolt)

// ============================================================================
init
  registerHeroAbilityComponent(HolyLightComponent.typeId)