package HeroAbility_Blink
import ChannelAbilityPreset
import Math
import Icons
import HeroAbilities
import TlsAbilityIds
import RealExtensions
import ClosureTimers
import SmartValue
import DamageEvent
import Damage
import StandardTextTags
import UnitPropertiesComponent

constant string HEAL_EFFECT_PATH = "Abilities\\Spells\\Human\\Heal\\HealTarget.mdl"

// ============================================================================
class Blink
  static constant int ABILITY_ID = TlsAbilityIds.Hero.blink
  static constant int ABILITY_LEARN_ID = TlsAbilityIds.Hero.blink_learn

  // --------------------------------------------------------------------------
  static function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "Blink - [{0}]".format("Level {0}".format(
      effectiveAbilityLevel.toString()).colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // --------------------------------------------------------------------------
  static function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return "The Captain teleports to a unit. If the unit is an ally it is healed for {0} of its max health. If the unit is an enemy it is damaged for {1} of the Captain's damage.".format(
      getHealPercent01(effectiveAbilityLevel).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel),
      getDamagePercent01(effectiveAbilityLevel).toPercentageString01().colorizeTooltipForHeroAbility(effectiveAbilityLevel, learnedAbilityLevel))

  // ----------------------------------------------------------------------------
  static function getHealPercent01(int level) returns real
    return lerp(0.2, 0.6, parameterize(1, 3, level))

  // ----------------------------------------------------------------------------
  static function getDamagePercent01(int level) returns real
    return lerp(25, 100, parameterize(1, 3, level))

  // ----------------------------------------------------------------------------
  static function getCooldown(int level) returns real
    return lerp(16, 8, parameterize(1, 3, level))

// ============================================================================
public class BlinkComponent extends HeroAbilityComponent

  SmartValue healPercent01 = new SmartValue(0.0)
  SmartValue damageScale01 = new SmartValue(0.0)

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner, Blink.ABILITY_ID, Blink.ABILITY_LEARN_ID)

  // ----------------------------------------------------------------------------
  ondestroy
    destroy healPercent01
    destroy damageScale01

  // --------------------------------------------------------------------------
  protected override function getTooltipNormal(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Blink.getTooltipNormal(effectiveAbilityLevel, learnedAbilityLevel)
    
  // --------------------------------------------------------------------------
  protected override function getTooltipNormalExtended(int effectiveAbilityLevel, int learnedAbilityLevel) returns string
    return Blink.getTooltipNormalExtended(effectiveAbilityLevel, learnedAbilityLevel)

  // --------------------------------------------------------------------------
  override protected function updateAbilityState()
    super.updateAbilityState()
  
    let abilityLevelAdjusted = abilityLevel.getIntValue()
    healPercent01.setBase(Blink.getHealPercent01(abilityLevelAdjusted))
    damageScale01.setBase(Blink.getDamagePercent01(abilityLevelAdjusted))

  // ----------------------------------------------------------------------------
  protected override function onCast(int _abilityId)

    let ownerUnit = getOwnerUnit()
    let ownerPlayer = ownerUnit.getOwner()
    let targetUnit = GetSpellTargetUnit()

    flashEffect("Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl", ownerUnit.getPos())
    flashEffect("Abilities\\Spells\\NightElf\\Blink\\BlinkTarget.mdl", targetUnit.getPos())

    let targetPos = targetUnit.getPos()

    let baseDamage = ownerUnit.getBaseDamage(0) + ownerUnit.getBonusDamage()
    let finalDamage = baseDamage * damageScale01.getValue()
    let finalHeal = targetUnit.getMaxHP() * healPercent01.getValue()

    doAfter(0.33) () ->
    //{
      if (ownerUnit.isAlive())
      //{
        ownerUnit.setPos(targetPos)

        if (targetUnit.isAlive())
        //{
          if (targetUnit.isEnemyOf(ownerPlayer))
            DamageEvent.setNextDamageFromCode()
            DamageEvent.setNextDamageId(Blink.ABILITY_ID)
            DamageEvent.setNextDamageElement(DAMAGE_ELEMENT_ATTACK)
            ownerUnit.damageTarget(targetUnit, finalDamage, true, true, ATTACK_TYPE_MAGIC)
          else if (targetUnit.getOwner() == ownerPlayer or targetUnit.isAllyOf(ownerPlayer))
            targetUnit.addHP(finalHeal)
            flashEffect(HEAL_EFFECT_PATH, targetPos)
        //}
      //}
    //}

// ============================================================================
public function IUnitMetadata.getBlinkComponent() returns BlinkComponent
  return this.getComponent(BlinkComponent.typeId) castTo BlinkComponent

// ============================================================================
public function IUnitMetadata.getOrAddBlinkComponent() returns BlinkComponent
  var component = this.getBlinkComponent()
  if (component == null)
    component = this.addComponent(new BlinkComponent(this)) castTo BlinkComponent
  return component

// ============================================================================
public function unit.getBlinkComponent() returns BlinkComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getBlinkComponent() : null

// ============================================================================
public function unit.getOrAddBlinkComponent() returns BlinkComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddBlinkComponent() : null

// ============================================================================
@compiletime function createObjects()

  new ChannelAbilityPreset(Blink.ABILITY_ID, 10, true)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..presetTargetTypes(Targettype.UNIT)
    ..setTargetsAllowed(1, "ground,organic,vuln,invu")
    ..setIconNormal(Icons.bTNBlink)
    ..setName("Blink")
    ..presetTooltipNormal(lvl -> Blink.getTooltipNormal(lvl, lvl))
    ..presetTooltipNormalExtended(lvl -> Blink.getTooltipNormalExtended(lvl, lvl))
    ..presetCastRange(lvl -> 600.0)
    ..presetCooldown(lvl -> Blink.getCooldown(lvl))
    ..presetManaCost(lvl -> 60)

  new HeroLearnAbilityDefinition(Blink.ABILITY_LEARN_ID, 3)
    ..setupHeroAbilityGroup(HeroAbilityGroup.E, 0)
    ..setName("Blink")
    ..setTooltipLearn("Learn Blink - [|cFFFFCC00 Level %d|r]")
    ..setTooltipLearnExtended("The Captain teleports to a nearby unit. If the target unit is an ally, the unit is healed. If the target unit is an enemy, the unit is damaged. |n|n|cFFFFCC00Level 1|r - Heals {0}, deals {1} damage.|n|cFFFFCC00Level 2|r - Heals {2}, deals {3} damage.|n|cFFFFCC00Level 3|r - Heals {4}, deals {5} damage.".format(
      Blink.getHealPercent01(1).toPercentageString01(), Blink.getDamagePercent01(1).toPercentageString01(),
      Blink.getHealPercent01(2).toPercentageString01(), Blink.getDamagePercent01(2).toPercentageString01(),
      Blink.getHealPercent01(3).toPercentageString01(), Blink.getDamagePercent01(3).toPercentageString01()))
    ..setIconResearch(Icons.bTNBlink)

// ============================================================================
init
  registerHeroAbilityComponentType(BlinkComponent.typeId, Blink.ABILITY_ID)
  registerHeroAbilityComponentType(BlinkComponent.typeId, Blink.ABILITY_LEARN_ID)

  // Show crit text tag when enemy is hit by blink
  DamageEvent.addListener(DAMAGE_EVENT_PRIO_FINAL) -> 
    if (DamageEvent.getType() == DamageType.CODE and
        DamageEvent.getId() == Blink.ABILITY_ID and
        DamageEvent.getAmount() > 0)
      createCriticalStrikeTextTag(DamageEvent.getSource(), DamageEvent.getAmount().floor())
