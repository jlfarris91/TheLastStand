package Elites
import TlsUnitIds
import HashList
import GameConstants

public constant string MINIMAP_ICON_PATH_NORMAL = null
public constant string MINIMAP_ICON_PATH_ELITE = "ui\\minimap\\MinimapEnemyEliteIcon.mdl"
public constant string MINIMAP_ICON_PATH_BOSS = "ui\\minimap\\minimap-boss.mdx"

public constant color MINIMAP_ICON_COLOR_NORMAL = color(150, 150, 150)
public constant color MINIMAP_ICON_COLOR_ELITE = color(255, 0, 0)
public constant color MINIMAP_ICON_COLOR_BOSS = color(255, 0, 0)

public constant color TIER1_COLOR = color(255,255,255)
public constant color TIER2_COLOR = color(53, 53, 255)
public constant color TIER3_COLOR = color(255, 255, 0)

HashList<int> g_eliteUnitTypes = new HashList<int>()
HashList<int> g_bossUnitTypes = new HashList<int>()
HashList<int> array g_tieredUnitTypes = [new HashList<int>(),new HashList<int>(),new HashList<int>()]

// ============================================================================
public function unit.isElite() returns bool
  return this.getTypeId().isEliteUnitTypeId()

// ============================================================================
public function int.isEliteUnitTypeId() returns bool
  return g_eliteUnitTypes.has(this)

// ============================================================================
public function unit.isBoss() returns bool
  return this.getTypeId().isBossUnitTypeId()

// ============================================================================
public function int.isBossUnitTypeId() returns bool
  return g_bossUnitTypes.has(this)

// ============================================================================
public function getMinimapIconPath(int unitTypeId) returns string
  if (unitTypeId.isEliteUnitTypeId())
    return MINIMAP_ICON_PATH_ELITE
  if (unitTypeId.isBossUnitTypeId())
    return MINIMAP_ICON_PATH_BOSS
  return MINIMAP_ICON_PATH_NORMAL  

// ============================================================================
public function getMinimapIconColor(int unitTypeId) returns color
  if (unitTypeId.isEliteUnitTypeId())
    return MINIMAP_ICON_COLOR_ELITE
  if (unitTypeId.isBossUnitTypeId())
    return MINIMAP_ICON_COLOR_BOSS
  return MINIMAP_ICON_COLOR_NORMAL

// ============================================================================
public function getTier(int unitTypeId) returns int
  for i = 0 to 2
    if (g_tieredUnitTypes[i].has(unitTypeId))
      return i
  return 0

// ============================================================================
public function getTierColor(int tier) returns color
  switch (tier)
    case 0
      return TIER1_COLOR
    case 1
      return TIER2_COLOR
    case 2
      return TIER3_COLOR
  return TIER1_COLOR

// ============================================================================
public function registerTieredUnitType(int unitTypeId, int tier)
  g_tieredUnitTypes[tier].add(unitTypeId)

// ============================================================================
public function registerEliteType(int unitTypeId, int tier)
  g_eliteUnitTypes.add(unitTypeId)
  registerTieredUnitType(unitTypeId, tier)

// ============================================================================
public function registerBossType(int unitTypeId, int tier)
  g_bossUnitTypes.add(unitTypeId)
  registerEliteType(unitTypeId, tier)

// ============================================================================
init

  for i = 0 to MAX_ELITE_TIER-1
  //{
    // Zombies
    registerTieredUnitType(TlsUnitIds.Undead.zombiesDay[i], i)
    registerTieredUnitType(TlsUnitIds.Undead.zombiesNight[i], i)

    // Elites
    registerEliteType(TlsUnitIds.Undead.skeletonArchers[i], i)
    registerEliteType(TlsUnitIds.Undead.crows[i], i)
    registerEliteType(TlsUnitIds.Undead.necromancers[i], i)
    registerEliteType(TlsUnitIds.Undead.tombstones[i], i)
    registerEliteType(TlsUnitIds.Undead.darkMinions[i], i)
    registerEliteType(TlsUnitIds.Undead.skeletonOrcs[i], i)
    registerEliteType(TlsUnitIds.Undead.ghosts[i], i)
    registerEliteType(TlsUnitIds.Undead.cultists[i], i)
    registerEliteType(TlsUnitIds.Undead.wagons[i], i)
    registerEliteType(TlsUnitIds.Undead.wyrms[i], i)
    registerEliteType(TlsUnitIds.Undead.abominations[i], i)

    // Bosses
    registerBossType(TlsUnitIds.Undead.abominations[i], i)
    registerBossType(TlsUnitIds.Undead.fiends[i], i)
    
    registerEliteType(TlsUnitIds.Undead.tentacles[i], i)
    registerBossType(TlsUnitIds.Undead.forgottenOnes[i], i)

    // Archimonde
    registerEliteType(TlsUnitIds.Undead.infernal[i], i)
    registerEliteType(TlsUnitIds.Undead.doomGuard[i], i)
    registerEliteType(TlsUnitIds.Undead.felHound[i], i)
    registerBossType(TlsUnitIds.Undead.archimonde[i], i)
  //}

  registerEliteType(TlsUnitIds.Undead.skeletonWarrior, 0)
  registerEliteType(TlsUnitIds.Undead.skeletonMage, 0)
  registerEliteType(TlsUnitIds.Undead.skeletonChampion, 0)