// package Zombies
// import GroupUtils
// import GameConstants
// import HumanPlayers
// import GameSettings
// import HashMap
// import HashList
// import UnitExtensions
// import RegisterEvents
// import FX
// import ErrorHandling
// import Math
// import MainItemLibrary
// import TlsUnitIds
// import Camp
// import HumanPlayerMetadata
// import UnitMetadata
// import UndeadSpawnManager

// timer g_SpawnTimer
// HashMap<player, PlayerZombieMetadata> g_PlayerMetadata
// HashMap<unit, Zombie> g_Zombies

// // ============================================================================
// public class Zombies

//   // --------------------------------------------------------------------------
//   static function spawnDayZombiesNearPlayers()
//     g_PlayingHumanPlayers.forEach() (player p) ->
//       spawnDayZombiesNearPlayer(p)

//   // --------------------------------------------------------------------------
//   static function spawnDayZombiesNearPlayer(player p)
//     let playerMetadata = p.getHumanMetadataRequired()

//     if (playerMetadata.getIsDead())
//       return
    
//     let camp = playerMetadata.getCamp()
//     var center = camp.getCenter()

//     // Clamp the spawn area to the world bounds
//     center = clampToWorldBounds(center, ZOMBIES_DAY_SPAWN_RANGE_MAX)

//     let spawnPoints = g_undeadSpawnManager.getRandomSpawnPointsInRange(
//       center,
//       ZOMBIES_DAY_SPAWN_RANGE_MIN,
//       ZOMBIES_DAY_SPAWN_RANGE_MAX,
//       GameSettings.zombies_DaySpawnCountPerPlayer)

//     let groupSize = GetRandomInt(ZOMBIES_DAY_GROUP_SIZE_MIN, ZOMBIES_DAY_GROUP_SIZE_MAX)

//     for sp in spawnPoints
//       // TODO: unit recycler
//       for j = 0 to groupSize - 1
//         createUnitTLS(
//           PLAYER_UNDEAD,
//           TlsUnitIds.zombieDay,
//           sp.x, sp.y,
//           GetRandomDirectionDeg())

//     let chance = ZOMBIES_DAY_GROUP_ITEM_CHANCE + (groupSize * ZOMBIES_DAY_GROUP_ITEM_CHANCE)

//     if (passesChanceCheck(chance))
//       g_MainItemLibrary.giveRandomItemToUnit(bj_lastCreatedUnit, ZOMBIES_DAY_GROUP_ITEM_CHANCES)

//     destroy spawnPoints

// // ============================================================================
// function spawnZombieNearPlayer(player p, vec2 pos) returns Zombie
//   var zombie = createZombie(pos.x, pos.y)
//   zombie.targetPlayer = p

//   let target = getClosestZombieTarget(p, zombie.getPos())

//   if (target != null)
//     zombie.zombieUnit.issueTargetOrder("attack", target)
//   else
//     BlzSetUnitRealField(zombie.zombieUnit, UNIT_RF_ACQUISITION_RANGE, 99999.0)

//   return zombie

// // ============================================================================
// function spawnZombiesNearPlayer(player p)
//   let playerMetadata = p.getHumanMetadataRequired()

//   if (playerMetadata.getIsDead())
//     return

//   let camp = playerMetadata.getCamp()
//   var center = camp.getCenter()
//   let playerZombieMetadata = g_PlayerMetadata.get(p)

//   // Clamp the spawn area to the world bounds
//   center = clampToWorldBounds(center, ZOMBIES_SPAWN_RANGE_MAX)

//   let zombieCount = playerZombieMetadata.zombies.size()
//   let max = R2I(GameSettings.zombies_SpawnsMaxPerPlayer)

//   if (zombieCount == max)
//     return

//   var numberOfSpawnPoints = R2I(GameSettings.zombies_SpawnsPerTick)
//   numberOfSpawnPoints = clamp(max - zombieCount, 1, numberOfSpawnPoints)

//   if (numberOfSpawnPoints == 1)
//     let sp = g_undeadSpawnManager.getRandomSpawnPointInRange(center, ZOMBIES_SPAWN_RANGE_MIN, ZOMBIES_SPAWN_RANGE_MAX)
//     if (sp == INVALID_SPAWN_POINT)
//       error("Couldn't find a zombie spawn points")
//     let zombie = spawnZombieNearPlayer(p, sp)
//     playerZombieMetadata.zombies.add(zombie)
//   else
//     let spawnPoints = g_undeadSpawnManager.getRandomSpawnPointsInRange(
//       center,
//       ZOMBIES_SPAWN_RANGE_MIN,
//       ZOMBIES_SPAWN_RANGE_MAX,
//       numberOfSpawnPoints)

//     if (spawnPoints.isEmpty())
//       error("Couldn't find " + I2S(numberOfSpawnPoints) + " zombie spawn points")

//     var zombieIndex = 0
//     for sp in spawnPoints
//       if (zombieCount + zombieIndex < max)
//         let zombie = spawnZombieNearPlayer(p, sp)
//         playerZombieMetadata.zombies.add(zombie)
//         zombieIndex++

//     destroy spawnPoints

// // ============================================================================
// function spawnZombiesNearPlayers()
//   for p in g_PlayingHumanPlayers
//     spawnZombiesNearPlayer(p)

// // ============================================================================
// function createZombie(real x, real y) returns Zombie
//   let u = createUnitTLS(PLAYER_UNDEAD, TlsUnitIds.zombieNight, x, y, GetRandomDirectionDeg())
//   let scale = GetRandomReal(-0.2, 0.2)

//   u.setScale(1.0 + scale)
//   u.setTimeScale(1.0 - scale)
//   u.setMoveSpeedPercChange(-scale)
//   u.setAnimation("birth")

//   let w = u.getField(UNIT_RF_SHADOW_IMAGE_WIDTH) * (1.0 + scale)
//   let h = u.getField(UNIT_RF_SHADOW_IMAGE_HEIGHT) * (1.0 + scale)
//   u.setField(UNIT_RF_SHADOW_IMAGE_WIDTH, w)
//   u.setField(UNIT_RF_SHADOW_IMAGE_HEIGHT, h)

//   let zombie = new Zombie(u)
//   g_Zombies.put(u, zombie)
//   return zombie

// // ============================================================================
// init
//   g_SpawnTimer = CreateTimer()
//   g_PlayerMetadata = new HashMap<player, PlayerZombieMetadata>()
//   g_Zombies = new HashMap<unit, Zombie>()

//   for p in g_HumanPlayers
//     g_PlayerMetadata.put(p, new PlayerZombieMetadata(p))

//   registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onZombieKilled)