package TombstoneComponent
import UnitComponent
import ClosureTimers
import ISpawnWave
import Orders
import ErrorHandling
import ObjectIds
import UndeadTargetingComponent
import RegisterEvents
import TlsUnitIds
import TlsAbilityIds

constant int SUMMON_ORDER_ID = OrderIds.waterelemental

// ============================================================================
public class TombstoneComponent extends UnitComponent
  private CallbackPeriodic m_castCallback
  private ISpawnWaveContext m_spawnedContext
  private player m_targetPlayer

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)
  
  // --------------------------------------------------------------------------
  ondestroy
    if (m_castCallback != null)
      destroy m_castCallback
      m_castCallback = null

    if (m_spawnedContext != null)
      destroy m_spawnedContext
      m_spawnedContext = null

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return TombstoneComponent.typeId

  // --------------------------------------------------------------------------
  function getSpawnedContext() returns ISpawnWaveContext
    return m_spawnedContext

  // --------------------------------------------------------------------------
  function setSpawnedContext(ISpawnWaveContext contextToClone)
    if (m_spawnedContext != null)
      destroy m_spawnedContext
      m_spawnedContext = null
    m_spawnedContext = contextToClone.clone()

  // --------------------------------------------------------------------------
  function setTargetPlayer(player _player)
    m_targetPlayer = _player

  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)

    if (oldUnit != null)
      if (oldUnit.hasAbility(TlsAbilityIds.tombstoneSummon))
        oldUnit.removeAbility(TlsAbilityIds.tombstoneSummon)

    if (newUnit != null)
      if (not newUnit.hasAbility(TlsAbilityIds.tombstoneSummon))
        newUnit.addAbility(TlsAbilityIds.tombstoneSummon)

      switch (newUnit.getTypeId())
        case TlsUnitIds.Undead.darkMinions[0]
          newUnit.setAbilityLevel(TlsAbilityIds.tombstoneSummon, 1)
        case TlsUnitIds.Undead.darkMinions[1]
          newUnit.setAbilityLevel(TlsAbilityIds.tombstoneSummon, 2)
        case TlsUnitIds.Undead.darkMinions[2]
          newUnit.setAbilityLevel(TlsAbilityIds.tombstoneSummon, 3)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()
    let lvl = ownerUnit.getAbilityLevel(TlsAbilityIds.tombstoneSummon)
    let cooldown = ownerUnit.getAbilityCooldown(TlsAbilityIds.tombstoneSummon, lvl) + 1.0

    m_castCallback = doPeriodically(cooldown) (CallbackPeriodic cb) ->
      if (ownerUnit != null and ownerUnit.isAlive())
        ownerUnit.issueImmediateOrderById(SUMMON_ORDER_ID)

// ============================================================================
public function IUnitMetadata.getTombstoneComponent() returns TombstoneComponent
  return this.getComponent(typeInfo(TombstoneComponent.typeId)) castTo TombstoneComponent

// ============================================================================
public function IUnitMetadata.getOrAddTombstoneComponent() returns TombstoneComponent
  var component = this.getTombstoneComponent()
  if (component == null)
    component = this.addComponent(new TombstoneComponent(this)) castTo TombstoneComponent
  return component

// ============================================================================
public function unit.getTombstoneComponent() returns TombstoneComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getTombstoneComponent() : null

// ============================================================================
public function unit.getOrAddTombstoneComponent() returns TombstoneComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddTombstoneComponent() : null

// ============================================================================
function onUnitSummoned()
  let summoner = GetSummoningUnit()
  let summoned = GetSummonedUnit()

  let comp = summoner.getTombstoneComponent()
  if (comp == null)
    return

  let spawnedContext = comp.getSpawnedContext()
  if (spawnedContext == null)
    error("Tombstone was spawned with no spawn context!")
    return

  let summonedTypeId = summoned.getTypeId()

  let modifier = spawnedContext.getSpawnWaveDefinition().getUnitModifier(summoned.getTypeId())
  if (modifier == null)
    Log.error("No modifier for unit summoned by Tombstone of type " + summonedTypeId.toRawCode())
    return

  modifier.call(summoned, spawnedContext)

  let summonerUTC = summoner.getUndeadTargetingComponent()
  if (summonerUTC == null)
    return

  let summonedUTC = summoned.getUndeadTargetingComponent()
  if (summonedUTC != null)
    summonedUTC.setTargetPlayer(summonerUTC.getTargetPlayer())

// ============================================================================
function onTombstoneAttacked()
  let attackedUnit = GetTriggerUnit()
  if (not attackedUnit.isTypeOfTombstone())
    return

  let gate = attackedUnit.getTombstoneComponent()
  if (gate != null)
    attackedUnit.setAnimation("hit")
    ResetUnitAnimation(attackedUnit)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SUMMON, function onUnitSummoned)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED, function onTombstoneAttacked)