package ForgottenOneComponent
import UnitMetadata
import Trace
import UndeadTargetingComponent
import HashMap
import World
import CancellationToken
import Jobs
import Elites
import TlsUnitIds
import SummonerComponent
import GameConstants
import Range
import Math

HashMap<unit, unit> g_summonedToSummonerMap = new HashMap<unit, unit>()

// ============================================================================
public class ForgottenOneComponent extends UnitComponent
  private CancellationToken m_ct

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    m_ct = new CancellationToken()..acquire()

    let ownerUnit = getOwnerUnit()
    let tier = getTier(ownerUnit.getTypeId())
    let cooldown = lerp(15.0, 10.0, parameterize01(0, MAX_ELITE_TIER - 1, tier))

    let tentacleSpawnJob = new TentacleSpawnRequest(ownerUnit, TlsUnitIds.Undead.tentacles[tier], cooldown)
    World.unitSpawnThread.enqueue(m_ct, tentacleSpawnJob)

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    m_ct.cancelAndRelease()
    m_ct = null

// ============================================================================
class TentacleSpawnRequest extends Job
  private unit m_owner
  private timer m_timer
  private int m_summonUnitTypeId
  private real m_cooldown

  // --------------------------------------------------------------------------
  construct(unit owner, int summonUnitTypeId, real cooldown)
    super("Tentacle", 300.0)
    m_owner = owner
    m_timer = CreateTimer()
    m_summonUnitTypeId = summonUnitTypeId
    m_cooldown = cooldown

  // --------------------------------------------------------------------------
  ondestroy
    m_timer.destr()
    m_timer = null

  // --------------------------------------------------------------------------
  override function next() returns int

    if (m_owner == null or not m_owner.isAlive())
      return 0

    if (m_timer.getRemaining() > 0)
      return 0

    let comp = m_owner.getForgottenOneComponent()
    if (comp == null)
      return 0

    let utc = m_owner.getUndeadTargetingComponent()
    if (utc == null)
      return 0

    let utp = getUndeadTargetProviderForPlayer(utc.getTargetPlayer())
    if (utp == null)
      return 0

    // Find a target unit even if that unit is unreachable
    var targetUnit = utp.getRandomOrganicTargetIncludingUnreachable(m_owner.getPos(), rangeReal(0, SPAWN_RANGE_FAR.max))
    if (targetUnit == null)
      targetUnit = utp.getRandomStructureTargetIncludingUnreachable(m_owner.getPos(), rangeReal(0, SPAWN_RANGE_FAR.max))
      
    if (targetUnit == null)
      // Try again after a random number of seconds
      m_timer.start(GetRandomReal(1.0, 5.0), null)
      return 0

    // Pick a random spawn point around the target unit within attack range
    let pos = targetUnit.getPos().polarOffset(GetRandomDirectionDeg().asAngleDegrees(), MELEE_UNIT_ATTACK_RANGE.toReal())

    let summonedUnit = createUnitTLS(m_owner.getOwner(), m_summonUnitTypeId, pos, angle(0))
    if (summonedUnit == null)
      return 0

    let tier = getTier(summonedUnit.getTypeId())
    summonedUnit.setTimedLife(30.0 + tier * 10.0)

    let summonerComponent = m_owner.getSummonerComponent()
    if (summonerComponent == null)
      return 0
      
    summonerComponent.modifySummonedUnit(summonedUnit)

    Trace.trace("ForgottenOne.summon")

    m_timer.start(m_cooldown, null)

    return 1

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return m_owner != null and m_owner.isAlive()

  // --------------------------------------------------------------------------
  override function getDebuggerStateString() returns string
    return "Tentacles " + m_timer.getRemaining().toString() + "s"

// ============================================================================
public function IUnitMetadata.getForgottenOneComponent() returns ForgottenOneComponent
  return this.getComponent(ForgottenOneComponent.typeId) castTo ForgottenOneComponent

// ============================================================================
public function IUnitMetadata.getOrAddForgottenOneComponent() returns ForgottenOneComponent
  var component = this.getForgottenOneComponent()
  if (component == null)
    component = this.addComponent(new ForgottenOneComponent(this)) castTo ForgottenOneComponent
  return component

// ============================================================================
public function unit.getForgottenOneComponent() returns ForgottenOneComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getForgottenOneComponent() : null

// ============================================================================
public function unit.getOrAddForgottenOneComponent() returns ForgottenOneComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddForgottenOneComponent() : null
