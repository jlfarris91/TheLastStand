package ArchimondeComponent
import UnitComponent
import HashMap
import Action
import TlsAbilityIds
import ObjectIds
import RegisterEvents
import GameConstants
import UndeadTargetingComponent

constant string RAINOFCHAOS_ORDER = "rainofchaos"
constant conditionfunc g_rainOfChaosTargetFilter = Condition(function isFilterUnitValidRainofChaosTarget)

// ============================================================================
public class ArchimondeComponent extends UnitComponent
  private IterableMap<int, Action2<unit, real>> m_summonedUnitModifiers

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)
    m_summonedUnitModifiers = new IterableMap<int, Action2<unit, real>>()

  // --------------------------------------------------------------------------
  ondestroy
    for key in m_summonedUnitModifiers
      m_summonedUnitModifiers.get(key).release()
    destroy m_summonedUnitModifiers
    m_summonedUnitModifiers = null

  // --------------------------------------------------------------------------
  function addSummonedUnitModifier(int unitTypeId, Action2<unit, real> modifier)
    let existing = m_summonedUnitModifiers.get(unitTypeId)
    if (existing != null)
      existing.release()
    m_summonedUnitModifiers.put(unitTypeId, modifier.acquire())

  // --------------------------------------------------------------------------
  function getModifierForSummonedUnit(int unitTypeId) returns Action2<unit, real>
    return m_summonedUnitModifiers.get(unitTypeId)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()
    
    if (not ownerUnit.hasAbility(TlsAbilityIds.rainOfChaos))
      ownerUnit.addAbility(TlsAbilityIds.rainOfChaos)

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let ownerUnit = getOwnerUnit()
    if (ownerUnit.hasAbility(TlsAbilityIds.rainOfChaos))
      ownerUnit.removeAbility(TlsAbilityIds.rainOfChaos)

// ============================================================================
public function IUnitMetadata.getArchimondeComponent() returns ArchimondeComponent
  return this.getComponent(ArchimondeComponent.typeId) castTo ArchimondeComponent

// ============================================================================
public function IUnitMetadata.getOrAddArchimondeComponent() returns ArchimondeComponent
  var component = this.getArchimondeComponent()
  if (component == null)
    component = this.addComponent(new ArchimondeComponent(this)) castTo ArchimondeComponent
  return component

// ============================================================================
function unit.isValidRainOfChaosTarget() returns bool
  return this.isAlive() and
         this.isEnemyOf(PLAYER_UNDEAD) and
         not this.isInvulnerable()

// ============================================================================
function isFilterUnitValidRainofChaosTarget() returns bool
  return GetFilterUnit().isValidRainOfChaosTarget()

// ============================================================================
function onUnitSummoned()
  let summoner = GetSummoningUnit()
  let summoned = GetSummonedUnit()

  let metadata = summoner.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getArchimondeComponent()
  if (comp == null)
    return

  let summonedTypeId = summoned.getTypeId()

  let modifier = comp.getModifierForSummonedUnit(summoned.getTypeId())
  if (modifier == null)
    Log.debug("No modifier for unit summoned by Archimonde of type " + summonedTypeId.toRawCode())
    return

  modifier.call(summoned, 1.0)

  let summonerUTC = metadata.getUndeadTargetingComponent()
  if (summonerUTC == null)
    return
  
  let summonedMetadata = summoned.getMetadata()
  if (summonedMetadata == null)
    return

  let summonedUTC = summonedMetadata.getUndeadTargetingComponent()
  if (summonedUTC != null)
    summonedUTC.setTargetPlayer(summonerUTC.getTargetPlayer())

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SUMMON, function onUnitSummoned)