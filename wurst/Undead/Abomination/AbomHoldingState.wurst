package AbomHoldingState
import StateMachine
import Abomination
import TlsAbilityIds
import Zombie
import ErrorHandling
import Math
import GroupUtils
import FX
import Orders
import UnitExtensions
import UndeadTargetingComponent
import HumanPlayers
import Units

constant real ABOM_MIN_THROW_RANGE = 400.0
constant real ABOM_MAX_THROW_RANGE = 700.0
constant real ABOM_HOLD_DURATION = 3.0
constant int ABOM_THROW_ORDER_ID = OrderIds.flare
constant string ABOM_TARGET_INDICATOR_EFFECT = "Abilities\\Spells\\NightElf\\TrueshotAura\\TrueshotAura.mdl"

rect g_minThrowArea

// ============================================================================
public class AbomHoldingState extends BaseStateMachineState
  private Abomination m_abom
  private real m_timer
  private bool m_threwZombie
  private effect m_heldZombieEffect
  private effect m_targetIndicatorEffect

  // --------------------------------------------------------------------------
  construct(Abomination abom, IStateMachine machine)
    super(machine)
    m_abom = abom

  // --------------------------------------------------------------------------
  ondestroy
    hideTargetIndicator()

  // --------------------------------------------------------------------------
  override function getName() returns string
    return "HoldingZombie"

  // --------------------------------------------------------------------------
  override function enter()
    m_timer = 0.0
    m_threwZombie = false

    let zombie = m_abom.getHoldingZombie()
    if (zombie == null)
      error("Expected Abomination to be holding a zombie when entering this state")

    let abomUnit = m_abom.getUnit()
    abomUnit.addAbility(TlsAbilityIds.abomThrowZombie)

    if (m_heldZombieEffect == null)
      m_heldZombieEffect = AddSpecialEffectTargetUnitBJ("hand left", abomUnit, Units.zombie)

  // --------------------------------------------------------------------------
  override function exit()
    m_timer = 0.0
    m_threwZombie = false
    let abomUnit = m_abom.getUnit()
    abomUnit.removeAbility(TlsAbilityIds.holdingZombieFemale)
    abomUnit.removeAbility(TlsAbilityIds.holdingZombieMale)
    abomUnit.removeAbility(TlsAbilityIds.abomThrowZombie)
    hideTargetIndicator()

    if (m_heldZombieEffect != null)
      m_heldZombieEffect.destr()
      m_heldZombieEffect = null

  // --------------------------------------------------------------------------
  override function update(real dt)
    m_timer += dt

    if (m_timer >= ABOM_HOLD_DURATION and not m_threwZombie)
      m_threwZombie = tryThrowZombie()
      if (m_threwZombie == false)
        m_timer -= ABOM_HOLD_DURATION
        attackPlayer()

  // --------------------------------------------------------------------------
  private function tryThrowZombie() returns bool
    let target = findThrowTarget()
    if (target == null)
      Log.debug("[AbomHoldingState] Found no target to throw zombie at")
      hideTargetIndicator()
      return false

    Log.debug("[AbomHoldingState] Found target to throw zombie at: " + target.getName())

    let abomUnit = m_abom.getUnit()
    let currentPos = abomUnit.getPos()
    let targetPos = target.getPos()
    let throwRange = m_abom.getThrowRange()
    let angle = currentPos.angleTo(targetPos)
    var dist = currentPos.distanceTo(targetPos)
    dist = clamp(dist, ABOM_MIN_THROW_RANGE, throwRange)

    let finalPos = currentPos.polarOffset(angle, dist)
    abomUnit.issuePointOrderById(ABOM_THROW_ORDER_ID, finalPos)

    showTargetIndicator(finalPos)

    return true

  // --------------------------------------------------------------------------
  private function findThrowTarget() returns unit
    let abomUnit = m_abom.getUnit()

    // === These must be cleaned up
    let ug = getGroup()
    let cond = Condition(function isFilterUnitAValidThrowTarget)
    g_minThrowArea = abomUnit.getPos().withRadiusRect(ABOM_MIN_THROW_RANGE)
    // ===

    ug.enumUnitsInRange(abomUnit.getPos(), ABOM_MAX_THROW_RANGE, cond)
    let target = ug.getRandomUnit()

    // === Cleanup
    RemoveRect(g_minThrowArea)
    DestroyCondition(cond)
    ug.release()
    // ===

    return target

  // --------------------------------------------------------------------------
  private function attackPlayer()
    m_abom.getOrAddUndeadTargetingComponent()
    ..issueOrderTargetingPlayer()

  // --------------------------------------------------------------------------
  private function showTargetIndicator(vec2 pos)
    hideTargetIndicator()
    m_targetIndicatorEffect = FX.createEffect(ABOM_TARGET_INDICATOR_EFFECT, pos)

  // --------------------------------------------------------------------------
  private function hideTargetIndicator()
    if (m_targetIndicatorEffect != null)
      m_targetIndicatorEffect.setAlpha(0)
      m_targetIndicatorEffect.destr()
      m_targetIndicatorEffect = null

// ============================================================================
function isFilterUnitAValidThrowTarget() returns bool
  let target = GetFilterUnit()
  return not target.isStructure() and target.getOwner().isHumanPlayer() and not g_minThrowArea.contains(target.getPos())