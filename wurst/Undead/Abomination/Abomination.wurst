package Abomination
import UndeadUnit
import TlsUnitIds
import Orders
import ClosureEvents
import TlsAbilityIds
import UnitMetadata
import StateMachineComponent
import ClosureTimers
import DummyUtils
import Units
import Zombie

import initlater AbomIdleState
import initlater AbomHoldingState
import UndeadTargetingComponent
import Events

constant real ABOM_THROW_PROJ_DURATION = 1.0
constant real ABOM_THROW_ANIM_DURATION = 1.0
constant real ABOM_THROW_ANIM_PROJECTILE_POINT = 0.5
constant int ABOM_THROW_ANIM_INDEX = 7

constant real ABOM_ANIM_GRAB_DURATION = 0.6
constant int ABOM_ANIM_GRAB_INDEX = 2

constant string ABOM_THROW_DUST_EFFECT = "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"

// ============================================================================
public class Abomination extends UndeadUnit
  private unit _holdingZombie
  private StateMachineComponent m_stateMachine
  private Action1<UndeadTargetingComponent> m_targetPlayerChangedEvent

  // --------------------------------------------------------------------------
  construct()
    listenToTargetPlayerChangedEvent()

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToTargetPlayerChangedEvent()
    stopStateMachine()

  // --------------------------------------------------------------------------
  function getStateMachine() returns StateMachineComponent
    return m_stateMachine

  // --------------------------------------------------------------------------
  function getHoldingZombie() returns unit
    return _holdingZombie

  // --------------------------------------------------------------------------
  function setHoldingZombie(unit zombie)
    _holdingZombie = zombie

  // --------------------------------------------------------------------------
  function getThrowRange() returns real
    return this.getAbility(TlsAbilityIds.abomThrowZombie).getField(ABILITY_RLF_CAST_RANGE, 0)
  
  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)
    startStateMachine()

  // --------------------------------------------------------------------------
  override function onKilled()
    super.onKilled()
    stopStateMachine()
    dropZombie()

  // --------------------------------------------------------------------------
  private function startStateMachine()
    stopStateMachine()
    
    m_stateMachine = new StateMachineComponent(this)
    m_stateMachine.addState(new AbomIdleState(this, m_stateMachine))
    m_stateMachine.addState(new AbomHoldingState(this, m_stateMachine))
    addComponent(m_stateMachine)

    m_stateMachine.transitionToState("Idle")

  // --------------------------------------------------------------------------
  private function stopStateMachine()
    if (m_stateMachine != null)
      removeComponent(m_stateMachine)
      m_stateMachine = null

  // --------------------------------------------------------------------------
  function dropZombie()
    dropZombieAtPos(getUnit().getPos(), GetRandomDirectionDeg().asAngleDegrees())

  // --------------------------------------------------------------------------
  function dropZombieAtPos(vec2 pos, angle facingAngle)
    let zombie = getHoldingZombie()
    if (zombie == null)
      return
    setHoldingZombie(null)
    moveAndUnhideZombie(zombie, pos, facingAngle)

  // --------------------------------------------------------------------------
  private function listenToTargetPlayerChangedEvent()
    unlistenToTargetPlayerChangedEvent()
    let undeadTargetComponent = this.getOrAddUndeadTargetingComponent()
    if (undeadTargetComponent != null)
      m_targetPlayerChangedEvent = undeadTargetComponent.getTargetPlayerChangedEvent().add() (UndeadTargetingComponent comp) ->
        startStateMachine()

  // --------------------------------------------------------------------------
  private function unlistenToTargetPlayerChangedEvent()
    if (m_targetPlayerChangedEvent != null)
      let undeadTargetComponent = this.getUndeadTargetingComponent()
      if (undeadTargetComponent != null)
        undeadTargetComponent.getTargetPlayerChangedEvent().remove(m_targetPlayerChangedEvent)
      destroy m_targetPlayerChangedEvent
      m_targetPlayerChangedEvent = null      

// ============================================================================
function onAbomGrabbedZombie(unit caster, unit target)
  let abom = caster.getMetadata() castTo Abomination
  if (abom == null)
    return

  if (not target.isZombie())
    return

  let stateMachine = abom.getStateMachine()
  if (stateMachine == null)
    return

  target.setInvulnerable(true)
  abom.setAnimation(ABOM_ANIM_GRAB_INDEX)

  doAfter(ABOM_ANIM_GRAB_DURATION) () ->
    if (abom != null)
      abom.setHoldingZombie(target)
      if (target != null)
        target.hide()
      doAfter(0.2) () ->
        if (stateMachine != null)
          stateMachine.transitionToState("HoldingZombie")

// ============================================================================
function getZombieArtPath(unit zombie) returns string
  let id = zombie.getTypeId()

  if (id == TlsUnitIds.Undead.zombieFemale)
    return "Units\\Creeps\\ZombieFemale\\ZombieFemale.mdl"

  return Units.zombie

// ============================================================================
function onAbomThrowZombie(unit caster)
  let abom = caster.getMetadata() castTo Abomination
  if (abom == null)
    return

  let stateMachine = abom.getStateMachine()
  if (stateMachine == null)
    return

  let zombie = abom.getHoldingZombie()
  if (zombie == null)
    Log.warn("Expected Abomination to be holding a zombie when entering this state")
    return

  let throwStartPos = caster.getPos()
  var throwEndPos = EventData.getSpellTargetPos()

  let facingAngle = throwStartPos.angleTo(throwEndPos)

  let dummyTarget = createDummy(throwEndPos, DUMMY_PLAYER, facingAngle)
  throwEndPos = dummyTarget.getPos()

  let distance = throwStartPos.distanceTo(throwEndPos)
  let throwRange = abom.getThrowRange()
  let rangeScalar = distance / throwRange

  let dummyCaster = CreateUnit(
    DUMMY_PLAYER,
    TlsUnitIds.Undead.abomThrowCaster,
    throwStartPos.x,
    throwStartPos.y,
    facingAngle.radians)

  // set the dummy's projectile art to match the held zombie
  let projectileArtPath = getZombieArtPath(zombie)
  dummyCaster.setFieldWeapon(UNIT_WEAPON_SF_ATTACK_PROJECTILE_ART, 1, projectileArtPath)

  // Start the animation for throwing the held zombie
  abom.setAnimation(ABOM_THROW_ANIM_INDEX)
  doAfter(ABOM_THROW_ANIM_DURATION) () ->
    // Get the statemachine again here in case the abom dies before this is called
    let stateMachine2 = getAliveAbomStateMachine(caster)
    if (stateMachine2 != null)
      stateMachine2.transitionToState("Idle")

  // At the peak of the throw animation order the dummy to attack ground
  doAfter(ABOM_THROW_ANIM_PROJECTILE_POINT) ->    
    dummyCaster.issuePointOrderById(OrderIds.attackground, throwEndPos)
    
    // Get the abom metadata again here in case the abom dies before this is called
    let abom2 = getAliveAbom(caster)
    if (abom2 != null)

      let projectileDuration = rangeScalar * ABOM_THROW_PROJ_DURATION
      doAfter(projectileDuration) () ->
        // cleanup casters
        dummyCaster.remove()
        dummyTarget.remove()

        // create a dust effect
        addEffect(ABOM_THROW_DUST_EFFECT, throwEndPos)
        ..setScale(0.5)
        ..setColor(50, 50, 50)
        ..setAlpha(100)
        ..destr()

        // Get the abom metadata again here in case the abom dies before this is called
        let abom3 = getAliveAbom(caster)
        if (abom3 != null)
          // move and unhide the actual zombie unit
          abom3.dropZombieAtPos(throwEndPos, facingAngle)
        else
          moveAndUnhideZombie(zombie, throwEndPos, facingAngle)

    else
      moveAndUnhideZombie(zombie, throwEndPos, facingAngle)

// ==========================================================================
function getAliveAbom(unit abom) returns Abomination
  if (not abom.isAlive())
    return null
  return abom.getMetadata() castTo Abomination

// ==========================================================================
function getAliveAbomStateMachine(unit abom) returns StateMachineComponent
  let abomMetadata = getAliveAbom(abom)
  return abomMetadata != null ? abomMetadata.getStateMachine() : null

// ==========================================================================
function moveAndUnhideZombie(unit zombie, vec2 pos, angle facingAngle)
  if (zombie == null)
    return
  // move and unhide the actual zombie unit
  zombie.setInvulnerable(false)
  zombie.setPos(pos)
  zombie.setFacing(facingAngle)
  zombie.setAnimation("birth")
  zombie.show()

// ==========================================================================
init

  EventListener.onTargetCast(TlsAbilityIds.abomGrabZombie) (caster, target) ->
    onAbomGrabbedZombie(caster, target)

  EventListener.onCast(TlsAbilityIds.abomThrowZombie) (caster) ->
    onAbomThrowZombie(caster)