package Abomination
import UndeadUnit
import ClosureEvents
import TlsAbilityIds
import UnitMetadata
import StateMachineComponent
import ClosureTimers
import DummyUtils
import Units
import Zombie

import initlater AbomIdleState
import initlater AbomHoldingState
import UndeadTargetingComponent
import Events
import LinkedList
import Math
import Interpolation
import Orders

constant real ABOM_THROW_PROJ_DURATION = 1.5
constant real ABOM_THROW_PROJ_HEIGHT = 300.0
constant real ABOM_THROW_ANIM_DURATION = 1.667
constant real ABOM_THROW_ANIM_PROJECTILE_POINT = 0.5
constant int ABOM_THROW_ANIM_INDEX = 7

constant real ABOM_ANIM_GRAB_ZOMBIE_POINT = 0.6
constant real ABOM_ANIM_GRAB_DURATION = 1.667
constant int ABOM_GRAB_ANIM_INDEX = 2

constant string ABOM_THROW_DUST_EFFECT = "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"

constant string ABOM_PROJECTILE_EFFECT1 = "units\\abomination\\GrabbedZombie.mdl"
constant string ABOM_PROJECTILE_EFFECT2 = "Abilities\\Weapons\\MeatwagonMissile\\MeatwagonMissile.mdl"

LinkedList<ZombieProjectile> g_zombieProjectiles = new LinkedList<ZombieProjectile>()
trigger g_updateZombieProjectilesTrigger

// ============================================================================
public class Abomination extends UndeadUnit
  private unit _holdingZombie
  private StateMachineComponent m_stateMachine
  private EventCallback m_targetPlayerChangedHandler

  // --------------------------------------------------------------------------
  construct()
    listenToTargetPlayerChangedEvent()

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToTargetPlayerChangedEvent()
    stopStateMachine()

  // --------------------------------------------------------------------------
  function getStateMachine() returns StateMachineComponent
    return m_stateMachine

  // --------------------------------------------------------------------------
  function getHoldingZombie() returns unit
    return _holdingZombie

  // --------------------------------------------------------------------------
  function setHoldingZombie(unit zombie)
    _holdingZombie = zombie

  // --------------------------------------------------------------------------
  function getThrowRange() returns real
    return this.getUnit().getAbility(TlsAbilityIds.abomThrowZombie).getField(ABILITY_RLF_CAST_RANGE, 0)
  
  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)
    startStateMachine()

  // --------------------------------------------------------------------------
  override function onKilled()
    super.onKilled()
    stopStateMachine()
    dropZombie()

  // --------------------------------------------------------------------------
  private function startStateMachine()
    stopStateMachine()
    
    m_stateMachine = new StateMachineComponent(this)
    m_stateMachine.addState(new AbomIdleState(this, m_stateMachine))
    m_stateMachine.addState(new AbomHoldingState(this, m_stateMachine))
    addComponent(m_stateMachine)

    m_stateMachine.transitionToState(ABOM_IDLE_STATE_ID)

  // --------------------------------------------------------------------------
  private function stopStateMachine()
    if (m_stateMachine != null)
      removeComponent(m_stateMachine)
      m_stateMachine = null

  // --------------------------------------------------------------------------
  function dropZombie()
    dropZombieAtPos(getUnit().getPos(), GetRandomDirectionDeg().asAngleDegrees())

  // --------------------------------------------------------------------------
  function dropZombieAtPos(vec2 pos, angle facingAngle)
    let zombie = getHoldingZombie()
    if (zombie == null)
      return
    setHoldingZombie(null)
    moveAndUnhideZombie(zombie, pos, facingAngle)

  // --------------------------------------------------------------------------
  private function listenToTargetPlayerChangedEvent()
    unlistenToTargetPlayerChangedEvent()

    let evt = getTargetPlayerChangedEvent()
    if (evt != null)
      m_targetPlayerChangedHandler = evt.register() () ->
        startStateMachine()

  // --------------------------------------------------------------------------
  private function unlistenToTargetPlayerChangedEvent()
    if (m_targetPlayerChangedHandler != null)
      destroy m_targetPlayerChangedHandler
      m_targetPlayerChangedHandler = null

  // --------------------------------------------------------------------------
  private function getTargetPlayerChangedEvent() returns Event
    let undeadTargetingComponent = this.getUndeadTargetingComponent()
    return undeadTargetingComponent != null ? undeadTargetingComponent.getTargetPlayerChangedEvent() : null

// ============================================================================
function onAbomGrabbedZombie(unit caster, unit target)
  let abom = caster.getMetadata() castTo Abomination
  if (abom == null)
    return

  if (not target.isZombie())
    return

  let stateMachine = abom.getStateMachine()
  if (stateMachine == null)
    return

  let abomUnit = abom.getUnit()

  target.setInvulnerable(true)

  abomUnit.pauseEx()

  // Looks like he's grabbing the zombie
  abomUnit.setAnimation(ABOM_GRAB_ANIM_INDEX)

  // "Grab" the zombie half way through the animation when the abom's hand comes closest to the target
  doAfter(ABOM_ANIM_GRAB_ZOMBIE_POINT) () ->
  //{
    if (caster != null)
      let abom2 = caster.getMetadata() castTo Abomination
      if (abom2 != null)
        abom2.setHoldingZombie(target)
        let stateMachine2 = abom2.getStateMachine()
        if (stateMachine2 != null)
          stateMachine2.transitionToState(ABOM_HOLDING_STATE_ID)
    if (target != null)
      target.hide()
  //}

  // Switch to the holding state after the full grab animation has played
  doAfter(ABOM_ANIM_GRAB_DURATION) () ->
    abomUnit.unpauseEx()
    abomUnit.setAnimation("stand")

// ============================================================================
function getZombieArtPath(unit _) returns string
  // Doesn't work for SD
  //let id = zombie.getTypeId()
  // if (id == TlsUnitIds.Undead.zombieFemale)
  //   return "Units\\Creeps\\ZombieFemale\\ZombieFemale.mdl"
  return Units.zombie

// ============================================================================
function onAbomThrowZombie(unit caster)
  let abom = caster.getMetadata() castTo Abomination
  if (abom == null)
    return

  let stateMachine = abom.getStateMachine()
  if (stateMachine == null)
    return

  let zombie = abom.getHoldingZombie()
  if (zombie == null)
    Log.warn("Expected Abomination to be holding a zombie when entering this state")
    return

  let throwStartPos = caster.getPos()
  var throwEndPos = EventData.getSpellTargetPos()

  let facingAngle = throwStartPos.angleTo(throwEndPos)

  // Create a dummy target just to get a valid point for the zombie to land
  // Otherwise, the arc could show the zombie landing in a different place
  let dummyTarget = createDummy(throwEndPos, DUMMY_PLAYER, facingAngle)
  throwEndPos = dummyTarget.getPos()
  nullTimer(() -> dummyTarget.remove())

  let distance = throwStartPos.distanceTo(throwEndPos)
  let throwRange = abom.getThrowRange()
  let rangeScalar = distance / throwRange

  let abomUnit = abom.getUnit()

  // Start the animation for throwing the held zombie
  abomUnit.pauseEx()
  abomUnit.setAnimation(ABOM_THROW_ANIM_INDEX)

  doAfter(ABOM_THROW_ANIM_DURATION) () ->
  //{
    let abom2 = getAliveAbom(caster)
    if (abom2 != null)
      let abomUnit2 = abom2.getUnit()
      // Get the statemachine again here in case the abom dies before this is called
      let stateMachine2 = getAliveAbomStateMachine(caster)
      if (stateMachine2 != null)
        stateMachine2.transitionToState(ABOM_IDLE_STATE_ID)
      abomUnit2.unpauseEx()
      abomUnit2.setAnimation("stand")
      abomUnit2.issuePointOrderById(OrderIds.attack, abomUnit2.getPos())
  //}

  // At the peak of the throw animation order the dummy to attack ground
  doAfter(ABOM_THROW_ANIM_PROJECTILE_POINT) ->
  //{
    // Get the abom metadata again here in case the abom dies before this is called
    let abom2 = getAliveAbom(caster)
    if (abom2 != null)
    //{
      let projectileDuration = rangeScalar * ABOM_THROW_PROJ_DURATION
      new ZombieProjectile(throwStartPos, throwEndPos, ABOM_THROW_PROJ_HEIGHT, projectileDuration)

      let stateMachine2 = getAliveAbomStateMachine(caster)
      if (stateMachine2 != null)
      //{
        let holdingState = stateMachine2.getState(ABOM_HOLDING_STATE_ID) castTo AbomHoldingState
        if (holdingState != null)
          holdingState.onZombieThrown()
      //}
       
      doAfter(projectileDuration) ->
      //{
        // create a dust effect
        addEffect(ABOM_THROW_DUST_EFFECT, throwEndPos)
        ..setScale(0.5)
        ..setColor(50, 50, 50)
        ..setAlpha(100)
        ..destr()

        // Get the abom metadata again here in case the abom dies before this is called
        let abom3 = getAliveAbom(caster)
        if (abom3 != null)
          // move and unhide the actual zombie unit
          abom3.dropZombieAtPos(throwEndPos, facingAngle)
        else
          moveAndUnhideZombie(zombie, throwEndPos, facingAngle)
      //}
    //}
    else
      moveAndUnhideZombie(zombie, throwEndPos, facingAngle)
  //}

// ==========================================================================
function getAliveAbom(unit abom) returns Abomination
  if (not abom.isAlive())
    return null
  return abom.getMetadata() castTo Abomination

// ==========================================================================
function getAliveAbomStateMachine(unit abom) returns StateMachineComponent
  let abomMetadata = getAliveAbom(abom)
  return abomMetadata != null ? abomMetadata.getStateMachine() : null

// ==========================================================================
function moveAndUnhideZombie(unit zombie, vec2 pos, angle facingAngle)
  if (zombie == null)
    Log.error("[moveAndUnhideZombie] : zombie was null")
    return
  // move and unhide the actual zombie unit
  zombie.setInvulnerable(false)
  zombie.setPos(pos)
  zombie.setFacing(facingAngle)
  zombie.setAnimation("birth")
  zombie.show()

// ==========================================================================
class ZombieProjectile
  private vec2 m_startPos
  private vec2 m_endPos
  private real m_height
  private real m_elapsed
  private real m_duration
  private effect m_effect
  private effect m_effect2

  // --------------------------------------------------------------------------
  construct(vec2 startPos, vec2 endPos, real height, real duration)

    m_startPos = startPos
    m_endPos = endPos
    m_height = height
    m_duration = duration
    m_elapsed = 0

    m_effect = AddSpecialEffect(ABOM_PROJECTILE_EFFECT1, startPos.x, startPos.y)
    m_effect.playAnimation(ANIM_TYPE_BIRTH)
    m_effect.setTimeScale(0.0)
    m_effect.setYaw(startPos.angleTo(endPos))

    m_effect2 = AddSpecialEffect(ABOM_PROJECTILE_EFFECT2, startPos.x, startPos.y)

    registerZombieProjectile(this)

    update(0)

  // --------------------------------------------------------------------------
  ondestroy

    if (m_effect != null)
      m_effect.destr()
      m_effect = null

    if (m_effect2 != null)
      m_effect2.destr()
      m_effect2 = null

  // --------------------------------------------------------------------------
  function update(real dt)

    m_elapsed += dt

    let t = clamp01(m_elapsed / m_duration)
    let pos = calculatePos(t)
    let pitch = calculatePitchRads(t)

    m_effect.setPos(pos)
    m_effect.setPitch(pitch)

    m_effect2.setPos(pos)

    if (t >= 1.0)
      onCompleted()
      
  // --------------------------------------------------------------------------
  private function calculatePos(real t) returns vec3
    let xy = m_startPos.lerp(m_endPos, t)
    let z = clamp01(Sin(t * PI)) * m_height
    return xy.withTerrainZ(z)

  // --------------------------------------------------------------------------
  private function calculatePitchRads(real t) returns real
    return lerp(-60, 60, t) * DEGTORAD

  // --------------------------------------------------------------------------
  function onCompleted()

    // Hide the effect
    m_effect.setColor(colorA(0, 0, 0, 0))
    m_effect.setAlpha(0)
    
    m_effect2.setColor(colorA(0, 0, 0, 0))
    m_effect2.setAlpha(0)

    unregisterZombieProjectile(this)

    destroy this

// ==========================================================================
function registerZombieProjectile(ZombieProjectile zombieProjectile)
  g_zombieProjectiles.add(zombieProjectile)
  if (g_zombieProjectiles.size() == 1)
    g_updateZombieProjectilesTrigger.enable()

// ==========================================================================
function unregisterZombieProjectile(ZombieProjectile zombieProjectile)
  g_zombieProjectiles.remove(zombieProjectile)
  if (g_zombieProjectiles.isEmpty())
    g_updateZombieProjectilesTrigger.disable()

// ==========================================================================
function updateZombieProjectiles()
  for zombieProjectile in g_zombieProjectiles
    zombieProjectile.update(ANIMATION_PERIOD)

// ==========================================================================
init

  g_updateZombieProjectilesTrigger = CreateTrigger()
  g_updateZombieProjectilesTrigger.addAction(function updateZombieProjectiles)
  TriggerRegisterTimerEventPeriodic(g_updateZombieProjectilesTrigger, ANIMATION_PERIOD)

  EventListener.onTargetCast(TlsAbilityIds.abomGrabZombie) (caster, target) ->
    onAbomGrabbedZombie(caster, target)

  EventListener.onCast(TlsAbilityIds.abomThrowZombie) (caster) ->
    onAbomThrowZombie(caster)