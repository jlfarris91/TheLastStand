package NecromancerComponent
import UnitComponent
import TlsAbilityIds
import ClosureTimers
import Action
import TlsUnitIds
import ObjectIds
import RegisterEvents
import UndeadTargetingComponent
import ErrorHandling
import ISpawnWave

constant string RAISEDEAD_IMMEDIATEORDERSTR = "instant" // don't ask me why

// ============================================================================
public class NecromancerComponent extends UnitComponent
  private CallbackPeriodic castTimer
  private ISpawnWaveContext m_spawnedContext

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  ondestroy
    if (castTimer != null)
      destroy castTimer
      castTimer = null

    if (m_spawnedContext != null)
      destroy m_spawnedContext
      m_spawnedContext = null

  // --------------------------------------------------------------------------
  function getSpawnedContext() returns ISpawnWaveContext
    return m_spawnedContext

  // --------------------------------------------------------------------------
  function setSpawnedContext(ISpawnWaveContext contextToClone)
    if (m_spawnedContext != null)
      destroy m_spawnedContext
      m_spawnedContext = null
    m_spawnedContext = contextToClone.clone()

  // --------------------------------------------------------------------------
  override function onUnitChanged(unit oldUnit, unit newUnit)
    super.onUnitChanged(oldUnit, newUnit)

    if (newUnit != null)
      switch (newUnit.getTypeId())
        case TlsUnitIds.Undead.necromancers[0]
          newUnit.setAbilityLevel(TlsAbilityIds.necromancerRaiseDead, 1)
        case TlsUnitIds.Undead.necromancers[1]
          newUnit.setAbilityLevel(TlsAbilityIds.necromancerRaiseDead, 2)
        case TlsUnitIds.Undead.necromancers[2]
          newUnit.setAbilityLevel(TlsAbilityIds.necromancerRaiseDead, 3)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()
    if (not ownerUnit.hasAbility(TlsAbilityIds.necromancerRaiseDead))
      ownerUnit.addAbility(TlsAbilityIds.necromancerRaiseDead)

    let lvl = ownerUnit.getAbilityLevel(TlsAbilityIds.necromancerRaiseDead)
    let cooldown = ownerUnit.getAbilityCooldown(TlsAbilityIds.necromancerRaiseDead, lvl) + 1.0

    castTimer = doPeriodically(cooldown) (CallbackPeriodic cb) ->
      if (ownerUnit != null and ownerUnit.isAlive())
        ownerUnit.issueImmediateOrder(RAISEDEAD_IMMEDIATEORDERSTR)

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let ownerUnit = getOwnerUnit()
    if (ownerUnit.hasAbility(TlsAbilityIds.necromancerRaiseDead))
      ownerUnit.removeAbility(TlsAbilityIds.necromancerRaiseDead)

// ============================================================================
public function IUnitMetadata.getNecromancerComponent() returns NecromancerComponent
  return this.getComponent(NecromancerComponent.typeId) castTo NecromancerComponent

// ============================================================================
public function IUnitMetadata.getOrAddNecromancerComponent() returns NecromancerComponent
  var component = this.getNecromancerComponent()
  if (component == null)
    component = this.addComponent(new NecromancerComponent(this)) castTo NecromancerComponent
  return component

// ============================================================================
function onUnitSummoned()
  let summoner = GetSummoningUnit()
  let summoned = GetSummonedUnit()

  let metadata = summoner.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getNecromancerComponent()
  if (comp == null)
    return

  let spawnedContext = comp.getSpawnedContext()
  if (spawnedContext == null)
    error("Necromancer was spawned with no spawn context!")
    return

  let summonedTypeId = summoned.getTypeId()

  let modifier = spawnedContext.getSpawnWaveDefinition().getUnitModifier(summoned.getTypeId())
  if (modifier == null)
    Log.error("No modifier for unit summoned by Necromancer of type " + summonedTypeId.toRawCode())
    return

  modifier.call(summoned, spawnedContext)

  let summonerUTC = metadata.getUndeadTargetingComponent()
  if (summonerUTC == null)
    return
  
  let summonedMetadata = summoned.getMetadata()
  if (summonedMetadata == null)
    return

  let summonedUTC = summonedMetadata.getUndeadTargetingComponent()
  if (summonedUTC != null)
    summonedUTC.setTargetPlayer(summonerUTC.getTargetPlayer())

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SUMMON, function onUnitSummoned)