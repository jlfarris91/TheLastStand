package SummonerComponent
import UnitComponent
import ErrorHandling
import ObjectIds
import UndeadTargetingComponent
import RegisterEvents
import Spawning

// ============================================================================
public class SummonerComponent extends UnitComponent
  private SpawnContext m_spawnedContext
  private int array[3] m_summonerUnitTypes
  private int m_abilityId

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)
    m_spawnedContext = null
    m_summonerUnitTypes[0] = 0
    m_summonerUnitTypes[1] = 0
    m_summonerUnitTypes[2] = 0
    m_abilityId = 0

  // --------------------------------------------------------------------------
  ondestroy

    if (m_spawnedContext != null)
      destroy m_spawnedContext
      m_spawnedContext = null

  // --------------------------------------------------------------------------
  function getSpawnedContext() returns SpawnContext
    return m_spawnedContext

  // --------------------------------------------------------------------------
  function setSpawnedContext(SpawnContext contextToClone)
    if (m_spawnedContext != null)
      destroy m_spawnedContext
      m_spawnedContext = null
    m_spawnedContext = contextToClone.clone()

  // --------------------------------------------------------------------------
  function setSummonerUnitTypes(int tier1, int tier2, int tier3)
    m_summonerUnitTypes[0] = tier1
    m_summonerUnitTypes[1] = tier2
    m_summonerUnitTypes[2] = tier3

  // --------------------------------------------------------------------------
  function setAbilityId(int abilityId)
    m_abilityId = abilityId

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()
    if (not ownerUnit.hasAbility(m_abilityId))
      ownerUnit.addAbility(m_abilityId)
    
    let unitTypeId = ownerUnit.getTypeId()
    if (unitTypeId == m_summonerUnitTypes[1])
      ownerUnit.setAbilityLevel(m_abilityId, 2)
    else if (unitTypeId == m_summonerUnitTypes[2])
      ownerUnit.setAbilityLevel(m_abilityId, 3)
    else
      ownerUnit.setAbilityLevel(m_abilityId, 1)

// ============================================================================
public function IUnitMetadata.getSummonerComponent() returns SummonerComponent
  return this.getComponent(SummonerComponent.typeId) castTo SummonerComponent

// ============================================================================
public function IUnitMetadata.getOrAddSummonerComponent() returns SummonerComponent
  var component = this.getSummonerComponent()
  if (component == null)
    component = this.addComponent(new SummonerComponent(this)) castTo SummonerComponent
  return component

// ============================================================================
public function unit.getSummonerComponent() returns SummonerComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getSummonerComponent() : null

// ============================================================================
public function unit.getOrAddSummonerComponent() returns SummonerComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddSummonerComponent() : null

// ============================================================================
function onUnitSummoned()
  let summoner = GetSummoningUnit()
  let summoned = GetSummonedUnit()

  let metadata = summoner.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSummonerComponent()
  if (comp == null)
    return

  let spawnedContext = comp.getSpawnedContext()
  if (spawnedContext == null)
    error("Summoner was spawned with no spawn context!")
    return

  let summonedTypeId = summoned.getTypeId()

  let definition = spawnedContext.getSpawnDefinition()
  if (definition != null)
  //{
    let modifier = definition.getUnitModifier(summoned.getTypeId())
    if (modifier == null)
      Log.error("No modifier for unit summoned of type " + summonedTypeId.toRawCode())
      return

    modifier.call(summoned, spawnedContext)
  //}

  let summonerUTC = metadata.getUndeadTargetingComponent()
  if (summonerUTC == null)
    return
  
  let summonedMetadata = summoned.getMetadata()
  if (summonedMetadata == null)
    return

  let summonedUTC = summonedMetadata.getUndeadTargetingComponent()
  if (summonedUTC != null)
    summonedUTC.setTargetPlayer(summonerUTC.getTargetPlayer())

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SUMMON, function onUnitSummoned)