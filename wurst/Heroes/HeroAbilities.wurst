package HeroAbilities
import TechAvailabilityGroup
import HashMap
import ErrorHandling
import LinkedList
import ObjectIds

TechAvailabilityGroup array[4] g_abilityGroup = [ new TechAvailabilityGroup(), new TechAvailabilityGroup(), new TechAvailabilityGroup(), new TechAvailabilityGroup() ]
int array[4] g_abilityGroupDefault = [ 0, 0, 0, 0 ]
HashMap<int, HeroAbilityGroup> g_abilIdToGroup = new HashMap<int, HeroAbilityGroup>()

// ============================================================================
public enum HeroAbilityGroup
  Q
  W
  E
  R
  UNKNOWN

// ============================================================================
function HeroAbilityGroup.toString() returns string
  return this == Q ? "Q" : (this == W ? "W" : (this == E ? "E" : (this == R ? "R" : "<Unknown>")))

// ============================================================================
public class HeroAbilities

  // --------------------------------------------------------------------------
  private construct()
    skip

  // --------------------------------------------------------------------------
  static function hasAbility(int abilId) returns bool
    return g_abilIdToGroup.has(abilId)

  // --------------------------------------------------------------------------
  static function getHeroAbilityGroup(int abilId) returns HeroAbilityGroup
    return g_abilIdToGroup.has(abilId) ? g_abilIdToGroup.get(abilId) : HeroAbilityGroup.UNKNOWN

  // --------------------------------------------------------------------------
  static function setHeroAbilityGroup(int abilId, HeroAbilityGroup heroAbilityGroup)
    setHeroAbilityGroup(abilId, heroAbilityGroup, false)

  // --------------------------------------------------------------------------
  static function setHeroAbilityGroup(int abilId, HeroAbilityGroup heroAbilityGroup, bool isGroupDefault)
    let existingHeroAbilityGroup = getHeroAbilityGroup(abilId)
    if (existingHeroAbilityGroup != UNKNOWN)
      error("Ability " + AbilityId2String(abilId) + " already registered with group " + existingHeroAbilityGroup.toString())
    if (heroAbilityGroup == UNKNOWN)
      error("Argument 'heroAbilityGroup' cannot be value 'UNKNOWN'")
    g_abilIdToGroup.put(abilId, heroAbilityGroup)
    g_abilityGroup[heroAbilityGroup castTo int].add(abilId)
    if (isGroupDefault)
      g_abilityGroupDefault[heroAbilityGroup castTo int] = abilId

  // --------------------------------------------------------------------------
  static function getHeroAbilityGroupDefault(HeroAbilityGroup heroAbilityGroup) returns int
    return g_abilityGroupDefault[heroAbilityGroup castTo int]

  // --------------------------------------------------------------------------
  static function getHeroAbilitiesDefinitionString() returns string
    let list = new LinkedList<int>()
    for i = 0 to 3
      for abilId in g_abilityGroup[i]
        list.add(abilId)
    let result = list.joinBy((int i) -> i.toRawCode(), ",")
    destroy list
    return result

  // --------------------------------------------------------------------------
  static function disableAllHeroAbilities(player _player)
    for i = 0 to 3
      g_abilityGroup[i].disable(_player)

// ============================================================================
init