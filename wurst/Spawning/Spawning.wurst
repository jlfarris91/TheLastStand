package Spawning
import public ISpawnPointProvider
import public SpawnRegion
import public SpawnRegionInit
import public SpawnPointCollection
import public PlayerSpawnPointProviders
import public RandomSpawnPointProvider
import BuffObjEditing
import GameConstants
import RefObject

public bool SPAWNING_ENABLED = true

constant int SPAWNS_MAX_PER_TICK = 1
constant int PROCESS_MAX_PER_TICK = 8 // 1 per player?
constant real PROCESS_QUEUE_INTERVAL = 0.1

public constant buffTuple g_goldCarrierBuff = compiletime(createDummyBuffObject("Gold Carrier", "This unit is carrying gold!", "ReplaceableTextures\\CommandButtons\\BTNMGExchange.blp", "Abilities\\Spells\\NightElf\\FaerieFire\\FaerieFireTarget.mdl", "chest"))

public tuple tierChances(real tier1, real tier2, real tier3)
public tuple tieredUnitType(int id, int tier)

// ============================================================================
public class TieredUnitTypeCollection
  private tieredUnitType array[12] m_unitTypes
  private int m_size = 0

  // --------------------------------------------------------------------------
  function clear()
    m_size = 0

  // --------------------------------------------------------------------------
  function add(tieredUnitType unitType)
    m_unitTypes[m_size] = unitType
    m_size++

  // --------------------------------------------------------------------------
  function add(int unitTypeId, int tier)
    m_unitTypes[m_size].id = unitTypeId
    m_unitTypes[m_size].tier = tier
    m_size++

  // --------------------------------------------------------------------------
  function get(int index) returns tieredUnitType
    return m_unitTypes[index]

  // --------------------------------------------------------------------------
  function size() returns int
    return m_size

// ============================================================================
public interface ITieredUnitTypeProvider
  function getUnitTypes(SpawnContext context, int count, TieredUnitTypeCollection output)

// ============================================================================
public class SpawnContext
  private real m_unitModifierGameProgress01
  private real m_unitModifierDifficultyScalar01
  private real m_unitDamageScalar01
  private real m_unitHealthScalar01
  private real m_gameProgress01
  private real m_gameDifficulty01
  private int m_tier
  private int m_groupId
  private real array[MAX_ELITE_TIER] m_tierChances = [ 1.0, 0.0, 0.0]
  private player m_targetPlayer
  private unit m_targetUnit

  use RefObject

  // --------------------------------------------------------------------------
  construct()

  // --------------------------------------------------------------------------
  construct(SpawnContext other)
    m_unitModifierGameProgress01 = other.m_unitModifierGameProgress01
    m_unitModifierDifficultyScalar01 = other.m_unitModifierDifficultyScalar01
    m_unitDamageScalar01 = other.m_unitDamageScalar01
    m_unitHealthScalar01 = other.m_unitHealthScalar01
    m_gameProgress01 = other.m_gameProgress01
    m_gameDifficulty01 = other.m_gameDifficulty01
    m_tier = other.m_tier
    m_groupId = other.m_groupId
    m_tierChances[0] = other.m_tierChances[0]
    m_tierChances[1] = other.m_tierChances[1]
    m_tierChances[2] = other.m_tierChances[2]
    m_targetPlayer = other.m_targetPlayer
    m_targetUnit = other.m_targetUnit

  // --------------------------------------------------------------------------
  function clone() returns SpawnContext
    return new SpawnContext(this)

  // --------------------------------------------------------------------------
  function getUnitModifierGameProgress01() returns real
    return m_unitModifierGameProgress01
  
  // --------------------------------------------------------------------------
  function setUnitModifierGameProgress01(real value)
    m_unitModifierGameProgress01 = value

  // --------------------------------------------------------------------------
  function getUnitModifierDifficultyScalar01() returns real
    return m_unitModifierDifficultyScalar01
  
  // --------------------------------------------------------------------------
  function setUnitModifierDifficultyScalar01(real value)
    m_unitModifierDifficultyScalar01 = value

  // --------------------------------------------------------------------------
  function getUnitDamageScalar01() returns real
    return m_unitDamageScalar01
  
  // --------------------------------------------------------------------------
  function setUnitDamageScalar01(real value)
    m_unitDamageScalar01 = value

  // --------------------------------------------------------------------------
  function getUnitHealthScalar01() returns real
    return m_unitHealthScalar01
  
  // --------------------------------------------------------------------------
  function setUnitHealthScalar01(real value)
    m_unitHealthScalar01 = value

  // --------------------------------------------------------------------------
  function getGameProgress01() returns real
    return m_gameProgress01
  
  // --------------------------------------------------------------------------
  function setGameProgress01(real value)
    m_gameProgress01 = value

  // --------------------------------------------------------------------------
  function getGameDifficulty01() returns real
    return m_gameDifficulty01
  
  // --------------------------------------------------------------------------
  function setGameDifficulty01(real value)
    m_gameDifficulty01 = value

  // --------------------------------------------------------------------------
  function getTier() returns int
    return m_tier

  // --------------------------------------------------------------------------
  function setTier(int value)
    m_tier = value
  
  // --------------------------------------------------------------------------
  function getGroupId() returns int
    return m_groupId
  
  // --------------------------------------------------------------------------
  function setGroupId(int value)
    m_groupId = value

  // --------------------------------------------------------------------------
  function getTierChance(int index) returns real
    return m_tierChances[index]

  // --------------------------------------------------------------------------
  function setTierChance(int index, real value)
    m_tierChances[index] = value

  // --------------------------------------------------------------------------
  function getRandomTier() returns int
    var roll01 = GetRandomReal(0, 1)
    var tier = 0
    for i = 0 to MAX_ELITE_TIER - 1
      let tierChance = m_tierChances[i]
      if (roll01 < tierChance)
        tier = i
        break
      roll01 -= tierChance
    return tier

  // --------------------------------------------------------------------------
  function getTargetPlayer() returns player
    return m_targetPlayer
  
  // --------------------------------------------------------------------------
  function setTargetPlayer(player value)
    m_targetPlayer = value

  // --------------------------------------------------------------------------
  function getTargetUnit() returns unit
    return m_targetUnit
  
  // --------------------------------------------------------------------------
  function setTargetUnit(unit value)
    m_targetUnit = value