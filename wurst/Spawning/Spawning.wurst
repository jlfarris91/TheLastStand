package Spawning
import public ISpawnPointProvider
import public SpawnRegion
import public SpawnRegionInit
import public SpawnPointCollection
import public PlayerSpawnPointProviders
import public RandomSpawnPointProvider
import BuffObjEditing
import RefObject
import Difficulties
import Math
import GameInstance
import GameConstants

public bool SPAWNING_ENABLED = true

constant int SPAWNS_MAX_PER_TICK = 1
constant int PROCESS_MAX_PER_TICK = 8 // 1 per player?
constant real PROCESS_QUEUE_INTERVAL = 0.1

constant int MAX_TIERS = 3
constant int INVALID_UNIT_TYPE = -1

public constant buffTuple g_goldCarrierBuff = compiletime(createDummyBuffObject("Gold Carrier", "This unit is carrying gold!", "ReplaceableTextures\\CommandButtons\\BTNMGExchange.blp", "Abilities\\Spells\\NightElf\\FaerieFire\\FaerieFireTarget.mdl", "chest"))

public tuple tierChances(real tier1, real tier2, real tier3)

// ============================================================================
public class UnitTypeCollection
  private int array[12] m_unitTypes
  private int m_size = 0

  // --------------------------------------------------------------------------
  function clear()
    m_size = 0

  // --------------------------------------------------------------------------
  function add(int unitType)
    m_unitTypes[m_size] = unitType
    m_size++

  // --------------------------------------------------------------------------
  function get(int index) returns int
    return m_unitTypes[index]

  // --------------------------------------------------------------------------
  function size() returns int
    return m_size

// ============================================================================
public interface ITieredUnitTypeProvider
  function getUnitTypes(SpawnContext context, int count, UnitTypeCollection output)

// ============================================================================
public class TieredUnitTypeProvider implements ITieredUnitTypeProvider
  private int array[MAX_TIERS] m_unitTypes

  // --------------------------------------------------------------------------
  construct()
    for i = 0 to MAX_TIERS - 1
      m_unitTypes[i] = INVALID_UNIT_TYPE

  // --------------------------------------------------------------------------
  function setUnitType(int tier, int unitType)
    m_unitTypes[tier] = unitType

  // --------------------------------------------------------------------------
  function getUnitType(int tier) returns int
    return m_unitTypes[tier]

  // --------------------------------------------------------------------------
  override function getUnitTypes(SpawnContext context, int count, UnitTypeCollection output)    
    let tier = context.getTier()
    let unitTypeId = getUnitType(tier)
    for i = 0 to count - 1
      output.add(unitTypeId)

// ============================================================================
public class SpawnContext
  private int m_tier
  private int m_groupId
  private unit m_targetUnit
  private real m_playerDifficulty = 1.0

  use RefObject

  // --------------------------------------------------------------------------
  construct()

  // --------------------------------------------------------------------------
  construct(SpawnContext other)
    m_tier = other.m_tier
    m_groupId = other.m_groupId
    m_targetUnit = other.m_targetUnit
    m_playerDifficulty = other.m_playerDifficulty

  // --------------------------------------------------------------------------
  function clone() returns SpawnContext
    return new SpawnContext(this)

  // --------------------------------------------------------------------------
  function getGameProgress01() returns real
    return parameterize(1, TOTAL_NIGHTS, g_GameInstance.getNight())

  // --------------------------------------------------------------------------
  function getGameDifficulty() returns real
    return g_GameInstance.getGameDifficulty01()

  // --------------------------------------------------------------------------
  function getDifficultyCoefficient() returns real
    if (m_playerDifficulty != 0.0)
      return DifficultyScaling.getEliteGeneralScalar01(m_playerDifficulty, m_tier.toReal())
    return DifficultyScaling.getEliteGeneralScalar01(getGameDifficulty(), m_tier.toReal())

  // --------------------------------------------------------------------------
  function getUnitDamageScalar01() returns real
    if (m_playerDifficulty != 0.0)
      return DifficultyScaling.getEliteDamageScalar01(m_playerDifficulty, m_tier.toReal())
    return DifficultyScaling.getEliteDamageScalar01(getGameDifficulty(), m_tier.toReal())

  // --------------------------------------------------------------------------
  function getUnitHealthScalar01() returns real
    if (m_playerDifficulty != 0.0)
      return DifficultyScaling.getEliteHealthScalar01(m_playerDifficulty, m_tier.toReal())
    return DifficultyScaling.getEliteHealthScalar01(getGameDifficulty(), m_tier.toReal())

  // --------------------------------------------------------------------------
  function getTier() returns int
    return m_tier

  // --------------------------------------------------------------------------
  function setTier(int value)
    m_tier = value
  
  // --------------------------------------------------------------------------
  function getGroupId() returns int
    return m_groupId
  
  // --------------------------------------------------------------------------
  function setGroupId(int value)
    m_groupId = value

  // --------------------------------------------------------------------------
  function getTargetUnit() returns unit
    return m_targetUnit
  
  // --------------------------------------------------------------------------
  function setTargetUnit(unit value)
    m_targetUnit = value

  // --------------------------------------------------------------------------
  function getPlayerDifficulty() returns real
    return m_playerDifficulty
  
  // --------------------------------------------------------------------------
  function setPlayerDifficulty(real value)
    m_playerDifficulty = value