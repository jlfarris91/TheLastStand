package SpawnManager
import SpawnRegion
import RegionExtensions
import ErrorHandling
import SpawnPointCollection
import BoundsExtensions
import Bounds
import MapBounds

constant int NUM_RETRIES = 100
public constant INVALID_SPAWN_POINT = vec2(-999999, -999999)

public class SpawnManager

  function getRandomSpawnPointInPlayableMap() returns vec2
    return getRandomPointInRect(bounds(playableMin, playableMax))

  function getRandomSpawnPoint(bounds b) returns vec2
    return getRandomPointInRect(b)

  function getRandomSpawnPointsInRect(bounds b, int count) returns SpawnPointCollection
    let validSpawnPoints = new SpawnPointCollection()
    while (validSpawnPoints.getCount() < count)
      let spawnPos = getRandomPointInRect(b)
      if (spawnPos != INVALID_SPAWN_POINT)
        validSpawnPoints.pushPoint(spawnPos)
    return validSpawnPoints

  function getRandomSpawnPointInRange(vec2 pos, real minRange, real maxRange) returns vec2
    return getRandomPointInRange(pos, minRange, maxRange)

  function getRandomSpawnPointsInRange(vec2 pos, real minRange, real maxRange, int count) returns SpawnPointCollection
    let validSpawnPoints = new SpawnPointCollection()
    while (validSpawnPoints.getCount() < count)
      let spawnPos = getRandomPointInRange(pos, minRange, maxRange)
      if (spawnPos != INVALID_SPAWN_POINT)
        validSpawnPoints.pushPoint(spawnPos)
    return validSpawnPoints

  private function getRandomPointInRange(vec2 pos, real minRange, real maxRange) returns vec2
    var angleRad = GetRandomReal(0, PI2)
    for i = 0 to NUM_RETRIES
      angleRad = angleRad + GetRandomReal(PI*0.5, PI*1.5)
      let dist = GetRandomReal(minRange, maxRange)
      let testPos = pos.polarOffset(angle(angleRad), dist)
      if (isSpawnPointValid(testPos))
        return testPos
    error("Failed to find a valid spawn point")
    return INVALID_SPAWN_POINT

  private function getRandomPointInRect(bounds b) returns vec2
    for i = 0 to NUM_RETRIES
      let testPos = b.getRandomPoint()
      if (isSpawnPointValid(testPos))
        return testPos
    error("Failed to find a valid spawn point")
    return INVALID_SPAWN_POINT

  protected function isSpawnPointValid(vec2 pos) returns bool
    return g_spawnRegion.containsPoint(pos)