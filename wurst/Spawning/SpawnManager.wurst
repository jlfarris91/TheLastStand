package SpawnManager
import SpawnRegion
import RegionExtensions
import ErrorHandling
import SpawnPointCollection
import BoundsExtensions
import Bounds
import MapBounds

constant int NUM_RETRIES = 100
public constant INVALID_SPAWN_POINT = vec2(-999999, -999999)

// ============================================================================
public interface ISpawnManager
  function getRandomSpawnPointInPlayableMap() returns vec2
  function getRandomSpawnPoint(bounds b) returns vec2
  function getRandomSpawnPointsInRect(bounds b, int count) returns SpawnPointCollection
  function getRandomSpawnPointInRange(vec2 pos, real minRange, real maxRange) returns vec2
  function getRandomSpawnPointsInRange(vec2 pos, real minRange, real maxRange, int count) returns SpawnPointCollection

// ============================================================================
public class SpawnManager implements ISpawnManager

  // --------------------------------------------------------------------------
  override function getRandomSpawnPointInPlayableMap() returns vec2
    return getRandomPointInRect(bounds(playableMin, playableMax))

  // --------------------------------------------------------------------------
  override function getRandomSpawnPoint(bounds b) returns vec2
    return getRandomPointInRect(b)

  // --------------------------------------------------------------------------
  override function getRandomSpawnPointsInRect(bounds b, int count) returns SpawnPointCollection
    let validSpawnPoints = new SpawnPointCollection()
    while (validSpawnPoints.getCount() < count)
      let spawnPos = getRandomPointInRect(b)
      if (spawnPos != INVALID_SPAWN_POINT)
        validSpawnPoints.pushPoint(spawnPos)
    return validSpawnPoints

  // --------------------------------------------------------------------------
  override function getRandomSpawnPointInRange(vec2 pos, real minRange, real maxRange) returns vec2
    return getRandomPointInRange(pos, minRange, maxRange)

  // --------------------------------------------------------------------------
  override function getRandomSpawnPointsInRange(vec2 pos, real minRange, real maxRange, int count) returns SpawnPointCollection
    let validSpawnPoints = new SpawnPointCollection()
    while (validSpawnPoints.getCount() < count)
      let spawnPos = getRandomPointInRange(pos, minRange, maxRange)
      if (spawnPos != INVALID_SPAWN_POINT)
        validSpawnPoints.pushPoint(spawnPos)
    return validSpawnPoints

  // --------------------------------------------------------------------------
  private function getRandomPointInRange(vec2 pos, real minRange, real maxRange) returns vec2
    var angleDeg = GetRandomReal(0, 360.0)
    for i = 0 to NUM_RETRIES
      angleDeg = angleDeg + GetRandomReal(180.0 * 0.75, 180.0 * 1.25)
      let dist = GetRandomReal(minRange, maxRange)
      let angle = angle(angleDeg*DEGTORAD)
      let testPos = pos.polarOffset(angle, dist)
      if (isSpawnPointValid(testPos))
        return testPos
    error("Failed to find a valid spawn point")
    return INVALID_SPAWN_POINT

  // --------------------------------------------------------------------------
  private function getRandomPointInRect(bounds b) returns vec2
    for i = 0 to NUM_RETRIES
      let testPos = b.getRandomPoint()
      if (isSpawnPointValid(testPos))
        return testPos
    error("Failed to find a valid spawn point")
    return INVALID_SPAWN_POINT

  // --------------------------------------------------------------------------
  protected function isSpawnPointValid(vec2 pos) returns bool
    return g_spawnRegion.containsPoint(pos)