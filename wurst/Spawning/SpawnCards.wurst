package SpawnCards
import Spawning
import GameConstants
import TlsUnitIds
import WaveGeneratorCommon
import UnitModifiers
import ObjEditingCommons
import BossItemLibrary
import SpawnUndeadUnitDirector
import SpawnDefinitionTags
import FX
import Range
import Math
import ActionUnitTypeProvider

// ============================================================================
public class SpawnDefinitions

  // Normals
  static SpawnDefinition zombies          = createSpawnDefinition_Zombies()
  
  // Elites
  static SpawnDefinition skeletonArchers  = createSpawnDefinition_SkeletonArchers()
  static SpawnDefinition necromancers     = createSpawnDefinition_Necromancers()
  static SpawnDefinition crows            = createSpawnDefinition_Crows()
  static SpawnDefinition abominations     = createSpawnDefinition_Abomination()
  static SpawnDefinition cultists         = createSpawnDefinition_Cultists()
  static SpawnDefinition orcSkeletons     = createSpawnDefinition_OrcSkeletons()
  static SpawnDefinition tombstones       = createSpawnDefinition_Tombstones()
  static SpawnDefinition gargoyles        = createSpawnDefinition_Gargoyles()
  static SpawnDefinition cryptFiends      = createSpawnDefinition_CryptFiends()
  static SpawnDefinition ghosts           = createSpawnDefinition_Ghosts()
  static SpawnDefinition meatWagons       = createSpawnDefinition_MeatWagons()
  static SpawnDefinition raiders          = createSpawnDefinition_Raiders()
  static SpawnDefinition wyrms            = createSpawnDefinition_Wyrms()
  static SpawnDefinition forgottenOne     = createSpawnDefinition_ForgottenOne()
  static SpawnDefinition archimonde       = createSpawnDefinition_Archimonde()

// ============================================================================
public class SpawnCards

  // Basics
  static SpawnCard zombies          = new SpawnCard(SpawnDefinitions.zombies)           ..setCost(3)
  
  // Elites
  static SpawnCard skeletonArchers  = new SpawnCard(SpawnDefinitions.skeletonArchers)   ..setCost(10)
  static SpawnCard necromancers     = new SpawnCard(SpawnDefinitions.necromancers)      ..setCost(10)
  static SpawnCard crows            = new SpawnCard(SpawnDefinitions.crows)             ..setCost(10)

  static SpawnCard cultists         = new SpawnCard(SpawnDefinitions.cultists)          ..setCost(10)
  static SpawnCard orcSkeletons     = new SpawnCard(SpawnDefinitions.orcSkeletons)      ..setCost(10)
  static SpawnCard tombstones       = new SpawnCard(SpawnDefinitions.tombstones)        ..setCost(10)
  static SpawnCard gargoyles        = new SpawnCard(SpawnDefinitions.gargoyles)         ..setCost(10)
  
  static SpawnCard ghosts           = new SpawnCard(SpawnDefinitions.ghosts)            ..setCost(10)
  static SpawnCard meatWagons       = new SpawnCard(SpawnDefinitions.meatWagons)        ..setCost(20)
  static SpawnCard raiders          = new SpawnCard(SpawnDefinitions.raiders)           ..setCost(10)
  static SpawnCard wyrms            = new SpawnCard(SpawnDefinitions.wyrms)             ..setCost(10)
  
  // Bosses
  static SpawnCard abominations     = new SpawnCard(SpawnDefinitions.abominations)      ..setCost(100)
  static SpawnCard cryptFiends      = new SpawnCard(SpawnDefinitions.cryptFiends)       ..setCost(100)
  static SpawnCard forgottenOne     = new SpawnCard(SpawnDefinitions.forgottenOne)      ..setCost(100)
  static SpawnCard archimonde       = new SpawnCard(SpawnDefinitions.archimonde)        ..setCost(100)

// ============================================================================
function createSpawnDefinition_Zombies() returns SpawnDefinition

  let def = new SpawnDefinition("Zombie")
  ..setSpawnRange(SpawnRange.CLOSE)
  ..setUseUnitRecycler(true)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.zombiesNight[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
  //{
    g_zombieMeleeModifiers.apply(context, u)
    u.preferStructureTargets()
  //}

  def.setUnitModifier(TlsUnitIds.Undead.zombiesNight[0]) (u, context) ->
    u.setDefenseType(ArmorType.Unarmored)

  def.setUnitModifier(TlsUnitIds.Undead.zombiesNight[1]) (u, context) ->
    u.setDefenseType(ArmorType.Normal)

  def.setUnitModifier(TlsUnitIds.Undead.zombiesNight[2]) (u, context) ->
    u.setDefenseType(ArmorType.Large)

  return def

// ============================================================================
function createSpawnDefinition_SkeletonArchers() returns SpawnDefinition

  let def = new SpawnDefinition("Skeleton Archer")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.skeletonArchers[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteRangedModifiers.apply(context, u)
    u.setDefenseType(ArmorType.Medium)

  return def

// ============================================================================
function createSpawnDefinition_Crows() returns SpawnDefinition

  let def = new SpawnDefinition("Crows")
  ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.crows[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteAirModifiers.apply(context, u)
    u.setDefenseType(ArmorType.Small)
    u.setMoveSpeed(300)

  return def

// ============================================================================
function createSpawnDefinition_Gargoyles() returns SpawnDefinition

  let def = new SpawnDefinition("Gargoyles")
  ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.gargoyles[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteAirModifiers.apply(context, u)
    u.setDefenseType(ArmorType.Medium)
    u.setMoveSpeed(300)

  return def

// ============================================================================
function createSpawnDefinition_Wyrms() returns SpawnDefinition

  let def = new SpawnDefinition("Wyrms")
  ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.wyrms[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteAirModifiers.apply(context, u)
    g_eliteAirModifiers.applyHealth(context, u, 1.25)
    g_eliteAirModifiers.applyAttack1Cooldown(context, u, 1.5)
    g_eliteAirModifiers.applyAttack1DamageRange(context, u, 0.50)
    u.preferStructureTargets()

  return def

// ============================================================================
function createSpawnDefinition_Cultists() returns SpawnDefinition

  let def = new SpawnDefinition("Fallen Cultists")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.melee, SpawnDefinitionTags.piercing)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.cultists[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteMeleeModifiers.apply(context, u)
    g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 0.6)

  return def

// ============================================================================
function createSpawnDefinition_Necromancers() returns SpawnDefinition

  let def = new SpawnDefinition("Necromancers")
  ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.necromancers[i])
  def.setUnitTypeProvider(unitTypeProvider)

  // NOTE: Can't use common modifer here since summoned units would also share it

  def.setUnitModifier(TlsUnitIds.Undead.necromancers[0]) (unit u, SpawnContext context) ->
  //{
    g_eliteRangedModifiers.apply(context, u)
    u.setupNecromancer()
    u.setMoveSpeed(300)
    u.setupSummoner(context)
  //}

  def.setUnitModifier(TlsUnitIds.Undead.necromancers[1]) (unit u, SpawnContext context) ->
  //{
    g_eliteRangedModifiers.apply(context, u)
    u.setupNecromancer()
    u.setMoveSpeed(300)
    u.setupSummoner(context)
  //}

  def.setUnitModifier(TlsUnitIds.Undead.necromancers[2]) (unit u, SpawnContext context) ->
  //{
    g_eliteRangedModifiers.apply(context, u)
    u.setupNecromancer()
    u.setMoveSpeed(300)
    u.setupSummoner(context)
  //}

  // SUMMONS - Skeleton Warrior
  def.setUnitModifier(TlsUnitIds.Undead.skeletonWarrior) (unit u, SpawnContext context) ->
  //{
    g_necromancerSkeletonWarriorModifiers.apply(context, u)
  //}

  // SUMMONS - Skeleton Mage
  def.setUnitModifier(TlsUnitIds.Undead.skeletonMage) (unit u, SpawnContext context) ->
  //{
    g_necromancerSkeletonMageModifiers.apply(context, u)
  //}

  // SUMMONS - Skeleton Champion
  def.setUnitModifier(TlsUnitIds.Undead.skeletonChampion) (unit u, SpawnContext context) ->
  //{
    g_necromancerSkeletonChampionModifiers.apply(context, u)
  //}

  return def

// ============================================================================
function createSpawnDefinition_Tombstones() returns SpawnDefinition

  let def = new SpawnDefinition("Tombstones")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
  ..setSpawnRange(SpawnRange.CLOSE)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.tombstones[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setUnitModifier(TlsUnitIds.Undead.tombstones[0]) (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.applyHealth(context, u, 0.5)
    g_eliteMeleeModifiers.applyArmor(context, u, 0.5)
    u.setupSummoner(context)
  //}

  def.setUnitModifier(TlsUnitIds.Undead.tombstones[1]) (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.applyHealth(context, u, 0.75)
    g_eliteMeleeModifiers.applyArmor(context, u, 0.75)
    u.setupSummoner(context)
  //}

  def.setUnitModifier(TlsUnitIds.Undead.tombstones[2]) (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.applyHealth(context, u, 1.0)
    g_eliteMeleeModifiers.applyArmor(context, u, 1.0)
    u.setupSummoner(context)
  //}

  let summonEffectPath = "Abilities\\Spells\\Undead\\AnimateDead\\AnimateDeadTarget.mdl"

  def.setUnitModifier(TlsUnitIds.Undead.darkMinions[0]) (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.apply(context, u, 0.5)
    FX.createEffectOneShot(summonEffectPath, u.getPos())
  //}

  def.setUnitModifier(TlsUnitIds.Undead.darkMinions[1]) (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.apply(context, u, 0.75)
    FX.createEffectOneShot(summonEffectPath, u.getPos())
  //}

  def.setUnitModifier(TlsUnitIds.Undead.darkMinions[2]) (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.apply(context, u, 1.0)
    FX.createEffectOneShot(summonEffectPath, u.getPos())
  //}

  return def

// ============================================================================
function createSpawnDefinition_Ghosts() returns SpawnDefinition

  let def = new SpawnDefinition("Ghosts")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.melee, SpawnDefinitionTags.magic)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.ghosts[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteRangedModifiers.apply(context, u)
    g_eliteRangedModifiers.applyHealth(context, u, 0.5)

  return def

// ============================================================================
function createSpawnDefinition_OrcSkeletons() returns SpawnDefinition

  let def = new SpawnDefinition("Orc Skeletons")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.heavy, SpawnDefinitionTags.normal)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.skeletonOrcs[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteMeleeModifiers.apply(context, u)
    g_eliteMeleeModifiers.applyAttack1Cooldown(context, u, 2.0)
    g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 0.75)
    u.setMoveSpeed(150)

  return def

// ============================================================================
function createSpawnDefinition_MeatWagons() returns SpawnDefinition

  let def = new SpawnDefinition("Meat Wagons")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.siege)
  ..setSpawnRange(SpawnRange.MID)

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.wagons[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
    g_eliteRangedModifiers.apply(context, u)
    g_eliteRangedModifiers.applyAttack1Cooldown(context, u, 2.0)

  return def

constant int RAIDER_GROUP_COUNT = 3                                        //              4  6  8                6  8  10                 8  10  12
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenBandit =     [/* Tier I */ 3, 4, 4, /* Tier II */ 3, 4,  4, /* Tier III */ 4,  4,  4]
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenMarksman =   [/* Tier I */ 1, 2, 3, /* Tier II */ 2, 2,  3, /* Tier III */ 2,  3,  4]
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenWizard =     [/* Tier I */ 0, 0, 0, /* Tier II */ 1, 2,  2, /* Tier III */ 2,  3,  3]
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenBanditLord = [/* Tier I */ 0, 0, 1, /* Tier II */ 0, 0,  1, /* Tier III */ 0,  0,  1]

constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_groupUnitCounts = [
  s_fallenBandit[0] + s_fallenMarksman[0] + s_fallenWizard[0] + s_fallenBanditLord[0],
  s_fallenBandit[1] + s_fallenMarksman[1] + s_fallenWizard[1] + s_fallenBanditLord[1],
  s_fallenBandit[2] + s_fallenMarksman[2] + s_fallenWizard[2] + s_fallenBanditLord[2],
  s_fallenBandit[3] + s_fallenMarksman[3] + s_fallenWizard[3] + s_fallenBanditLord[3],
  s_fallenBandit[4] + s_fallenMarksman[4] + s_fallenWizard[4] + s_fallenBanditLord[4],
  s_fallenBandit[5] + s_fallenMarksman[5] + s_fallenWizard[5] + s_fallenBanditLord[5],
  s_fallenBandit[6] + s_fallenMarksman[6] + s_fallenWizard[6] + s_fallenBanditLord[6],
  s_fallenBandit[7] + s_fallenMarksman[7] + s_fallenWizard[7] + s_fallenBanditLord[7],
  s_fallenBandit[8] + s_fallenMarksman[8] + s_fallenWizard[8] + s_fallenBanditLord[8]
]

constant int array[MAX_ELITE_TIER] s_groupUnitCountTotal = [
  s_groupUnitCounts[0] + s_groupUnitCounts[1] + s_groupUnitCounts[2],
  s_groupUnitCounts[3] + s_groupUnitCounts[4] + s_groupUnitCounts[5],
  s_groupUnitCounts[6] + s_groupUnitCounts[7] + s_groupUnitCounts[8]
]

// ============================================================================
function createSpawnDefinition_Raiders() returns SpawnDefinition
  
  let def = new SpawnDefinition("Raiders")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.piercing)
  ..setSpawnRange(SpawnRange.MID)
  ..setGroupSize(context -> begin
    let tier = clamp(context.getTier(), 0, MAX_ELITE_TIER-1)
    let groupId = clamp(context.getGroupId(), 0, RAIDER_GROUP_COUNT-1)
    return s_groupUnitCounts[tier * MAX_ELITE_TIER + groupId]
  end)
  ..setWaitForFullSpawnGroup(true)

  def.setUnitTypeProvider(new ActionUnitTypeProvider((SpawnContext context, int count, UnitTypeCollection result) -> begin
    let tier = clamp(context.getTier(), 0, MAX_ELITE_TIER-1)
    let groupId = clamp(context.getGroupId(), 0, RAIDER_GROUP_COUNT-1)
    var added = 0

    for i = 0 to s_fallenBandit[tier * RAIDER_GROUP_COUNT + groupId]
      if (added == count)
        break
      result.add(TlsUnitIds.Undead.fallenBandit[tier])
      added++

    for i = 0 to s_fallenMarksman[tier * RAIDER_GROUP_COUNT + groupId]
      if (added == count)
        break
      result.add(TlsUnitIds.Undead.fallenMarksman[tier])
      added++

    for i = 0 to s_fallenWizard[tier * RAIDER_GROUP_COUNT + groupId]
      if (added == count)
        break
      result.add(TlsUnitIds.Undead.fallenWizard[tier])
      added++

    for i = 0 to s_fallenBanditLord[tier * RAIDER_GROUP_COUNT + groupId]
      if (added == count)
        break
      result.add(TlsUnitIds.Undead.fallenBanditLord[tier])
      added++

  end))

  for tier = 0 to MAX_ELITE_TIER-1
  //{
    def.setUnitModifier(TlsUnitIds.Undead.fallenBandit[tier]) (unit u, SpawnContext context) ->
    //{
      g_eliteMeleeModifiers.apply(context, u, 0.5)
    //}

    def.setUnitModifier(TlsUnitIds.Undead.fallenMarksman[tier]) (unit u, SpawnContext context) ->
    //{
      g_eliteRangedModifiers.apply(context, u, 0.5)
    //}

    def.setUnitModifier(TlsUnitIds.Undead.fallenWizard[tier]) (unit u, SpawnContext context) ->
    //{
      g_eliteRangedModifiers.apply(context, u, 0.5)
    //}

    def.setUnitModifier(TlsUnitIds.Undead.fallenBanditLord[tier]) (unit u, SpawnContext context) ->
    //{
      g_eliteMeleeModifiers.apply(context, u, 1.5)
    //}    
  //}

  return def

// ============================================================================
function createSpawnDefinition_Abomination() returns SpawnDefinition
  
  let def = new SpawnDefinition("Abominations")
  ..setTags(SpawnDefinitionTags.leader, SpawnDefinitionTags.heavy, SpawnDefinitionTags.siege)
  ..setGoldDropAmount(context -> GOLD_PER_BOSS)
  ..setSpawnRange(SpawnRange.MID)
  ..setupForBoss()

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.abominations[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.applyHealth(context, u, 4.0)
    g_eliteMeleeModifiers.applyArmor(context, u, 3.0)
    g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 2.0)
    g_eliteMeleeModifiers.applyAttack1Cooldown(context, u, 1.0)
    u.awardXpOnDeath(100)
    u.setAcquisitionRange(ELITE_SIGHT_RANGE)
    u.setSightRadius(ELITE_SIGHT_RANGE)
    u.setMoveSpeed(125.0)
    u.awardRandomItemOnDeath(g_BossItemLibrary.rareSet, 1.0)
    u.preferStructureTargets()
  //}

  return def

// ============================================================================
function createSpawnDefinition_CryptFiends() returns SpawnDefinition
  
  let def = new SpawnDefinition("Crypt Fiends")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setGoldDropAmount(context -> GOLD_PER_BOSS)
  ..setSpawnRange(SpawnRange.MID)
  ..setupForBoss()

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.fiends[i])
  def.setUnitTypeProvider(unitTypeProvider)

  def.setCommonUnitModifier() (unit u, SpawnContext context) ->
  //{
    g_eliteMeleeModifiers.applyHealth(context, u, 4.0)
    g_eliteMeleeModifiers.applyArmor(context, u, 3.0)
    g_eliteRangedModifiers.applyAttack1DamageRange(context, u, 2.0)
    g_eliteRangedModifiers.applyAttack1Cooldown(context, u, 1.0)
    u.awardXpOnDeath(100)
    u.setAcquisitionRange(ELITE_SIGHT_RANGE)
    u.setSightRadius(ELITE_SIGHT_RANGE)
    u.awardRandomItemOnDeath(g_BossItemLibrary.epicSet, 1.0)
    u.setMoveSpeed(350)
    u.preferOrganicTargets()
  //}

  return def

// ============================================================================
function createSpawnDefinition_ForgottenOne() returns SpawnDefinition
  
  let def = new SpawnDefinition("Forbidden One")
  ..setTags(SpawnDefinitionTags.boss, SpawnDefinitionTags.ranged, SpawnDefinitionTags.chaos, SpawnDefinitionTags.hero, SpawnDefinitionTags.summoner)
  ..setGoldDropAmount(context -> GOLD_PER_BOSS)
  ..setSpawnRange(SpawnRange.FAR)
  ..setupForBoss()

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.forgottenOnes[i])
  def.setUnitTypeProvider(unitTypeProvider)

  for i = 0 to MAX_ELITE_TIER-1
  //{
    def.setUnitModifier(TlsUnitIds.Undead.forgottenOnes[i]) (unit u, SpawnContext context) ->
      g_eliteMeleeModifiers.applyHealth(context, u, 2.0)
      g_eliteMeleeModifiers.applyArmor(context, u, 1.0)
      g_eliteMeleeModifiers.applyAttack1Cooldown(context, u, 1.5)
      g_eliteRangedModifiers.applyAttack1DamageRange(context, u, 1.0)
      u.awardRandomItemOnDeath(g_BossItemLibrary.legendarySet, 1.0)
      u.setAttackRange(0, RANGED_UNIT_ATTACK_RANGE.toReal())
      u.setAcquisitionRange(SPAWN_RANGE_FAR.max)
      u.setSightRadius(SPAWN_RANGE_FAR.max)
      u.preferStructureTargets()
      u.setupSummoner(context)
    
    def.setUnitModifier(TlsUnitIds.Undead.tentacles[i]) (unit u, SpawnContext context) ->
      g_eliteMeleeModifiers.applyHealth(context, u, 0.5)
      g_eliteMeleeModifiers.applyArmor(context, u, 0.5)
      g_eliteMeleeModifiers.applyAttack1Cooldown(context, u, 1.0)
      g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 0.25)
      u.setAcquisitionRange(ELITE_SIGHT_RANGE)
      u.setSightRadius(ELITE_SIGHT_RANGE)
      u.preferOrganicTargets()
  //}

  return def

// ============================================================================
function createSpawnDefinition_Archimonde() returns SpawnDefinition
  
  let def = new SpawnDefinition("Archimonde")
  ..setTags(SpawnDefinitionTags.boss, SpawnDefinitionTags.ranged, SpawnDefinitionTags.chaos, SpawnDefinitionTags.hero, SpawnDefinitionTags.summoner)
  ..setGoldDropAmount(context -> GOLD_PER_BOSS)
  ..setSpawnRange(SpawnRange.MID)
  ..setupForBoss()

  let unitTypeProvider = new TieredUnitTypeProvider()
  for i = 0 to MAX_ELITE_TIER-1
    unitTypeProvider.setUnitType(i, TlsUnitIds.Undead.archimonde)
  def.setUnitTypeProvider(unitTypeProvider)

  def.setUnitModifier(TlsUnitIds.Undead.archimonde) (unit u, SpawnContext context) ->
    g_eliteMeleeModifiers.applyHealth(context, u, 4.0)
    g_eliteMeleeModifiers.applyArmor(context, u, 2.0)
    g_eliteMeleeModifiers.applyAttack1Cooldown(context, u, 1.0)
    g_eliteRangedModifiers.applyAttack1DamageRange(context, u, 1.5)
    u.setAttackRange(0, RANGED_UNIT_ATTACK_RANGE.toReal())
    u.setAcquisitionRange(ELITE_SIGHT_RANGE)
    u.setSightRadius(ELITE_SIGHT_RANGE)
    u.setupSummoner(context)

  def.setUnitModifier(TlsUnitIds.Undead.infernal) (unit u, SpawnContext context) ->
    g_eliteMeleeModifiers.apply(context, u, 1.0)
    g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 0.75)

  def.setUnitModifier(TlsUnitIds.Undead.doomGuard) (unit u, SpawnContext context) ->
    g_eliteMeleeModifiers.apply(context, u, 1.25)
    g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 0.75)

  def.setUnitModifier(TlsUnitIds.Undead.felHound) (unit u, SpawnContext context) ->
    g_eliteMeleeModifiers.apply(context, u, 1.0)
    g_eliteMeleeModifiers.applyAttack1DamageRange(context, u, 0.75)

  return def