package SpawnPointCollection
import ErrorHandling

constant MAX_SPAWN_POINTS = 32

// ============================================================================
public class SpawnPointCollection
  private vec2 array[MAX_SPAWN_POINTS] points
  private int m_count

  // --------------------------------------------------------------------------
  function getCapacity() returns int
    return MAX_SPAWN_POINTS

  // --------------------------------------------------------------------------
  function getCount() returns int
    return m_count

  // --------------------------------------------------------------------------
  function isEmpty() returns bool
    return m_count == 0

  // --------------------------------------------------------------------------
  function getPoint(int index) returns vec2
    if (index >= m_count)
      error("Argument out of bounds: index")
    return points[index]

  // --------------------------------------------------------------------------
  function pushPoint(vec2 point)
    if (m_count == MAX_SPAWN_POINTS)
      error("Too many spawn points")
    points[m_count] = point
    m_count++

  // --------------------------------------------------------------------------
  function popPoint() returns vec2
    let point = peekPoint()
    m_count--
    return point

  // --------------------------------------------------------------------------
  function peekPoint() returns vec2
    if (m_count == 0)
      error("Collection is empty")
    return points[m_count]

  // --------------------------------------------------------------------------
  function iterator() returns SpawnPointCollectionIterator
    return new SpawnPointCollectionIterator(this)

// ============================================================================
public class SpawnPointCollectionIterator
  private SpawnPointCollection m_collection
  private int m_index

  // --------------------------------------------------------------------------
  construct(SpawnPointCollection collection)
    m_collection = collection
    m_index = 0

  // --------------------------------------------------------------------------
  function hasNext() returns bool
    return m_index < m_collection.getCount()

  // --------------------------------------------------------------------------
  function next() returns vec2
    vec2 point = m_collection.getPoint(m_index)
    m_index++
    return point

  // --------------------------------------------------------------------------
  function close()
    destroy this