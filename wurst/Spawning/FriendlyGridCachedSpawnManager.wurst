package FriendlyGridCachedSpawnManager
import GridCachedSpawnManager
import UnitExtensions
import GameConstants
import UnitIndexer
import HumanPlayers
import Circle
import ColorUtility

constant real FRIENDLY_INVALIDATION_RANGE = 512.0
GridCachedSpawnManager g_gridCachedSpawnManager = new GridCachedSpawnManager((unit u) -> doesUnitInvalidateFriendlySpawnPoint(u), Colors.green)

// ============================================================================
public function getPlayerCachedFriendlySpawnManager(player _) returns GridCachedSpawnManager
  return g_gridCachedSpawnManager

// ============================================================================
function doesUnitInvalidateFriendlySpawnPoint(unit u) returns bool
  return u.isStructure()
         and u.isAlive()
         and u.isEnemyOf(PLAYER_VILLAGERS)
         and not u.isInvulnerable()

// ============================================================================
function onUnitIndexing()

  let indexingUnit = getIndexingUnit()
  let unitPos = indexingUnit.getPos()

  if (doesUnitInvalidateFriendlySpawnPoint(indexingUnit))
    for p in g_PlayingHumanPlayers
      getPlayerCachedFriendlySpawnManager(p).invalidateSpawnPoints(circle(unitPos, FRIENDLY_INVALIDATION_RANGE).getBounds())

// ============================================================================
init
  onUnitIndex(() -> onUnitIndexing())
  onUnitDeindex(() -> onUnitIndexing())