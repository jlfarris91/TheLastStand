package SprintComponent
import UnitComponent
import TlsAbilityIds
import Events
import ExhaustComponent
import MovementComponent

// ============================================================================
public class SprintComponent extends UnitComponent
  private MovementComponent m_movement
  private real m_sprintSpeed = 0
  private real m_staminaCost = 0
  private int m_level = 1
  private bool m_isSprinting
  private Action1<real> m_onUnitMovedHandler

  Event startedSprintingEvent
  Event stoppedSprintingEvent

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    startedSprintingEvent = new Event()
    stoppedSprintingEvent = new Event()

  // --------------------------------------------------------------------------
  ondestroy
    stopSprinting()
    
    destroy startedSprintingEvent
    startedSprintingEvent = null

    destroy stoppedSprintingEvent
    stoppedSprintingEvent = null

    m_movement = null

  // --------------------------------------------------------------------------
  function getIsSprinting() returns bool
    return m_isSprinting

  // --------------------------------------------------------------------------
  function setSprintSpeed(real sprintSpeed)
    m_sprintSpeed = sprintSpeed

  // --------------------------------------------------------------------------
  function getSprintSpeed() returns real
    return m_sprintSpeed

  // --------------------------------------------------------------------------
  function setStaminaCost(real staminaCost)
    m_staminaCost = staminaCost

  // --------------------------------------------------------------------------
  function getStaminaCost() returns real
    return m_staminaCost

  // --------------------------------------------------------------------------
  function setLevel(int level)
    m_level = level

  // --------------------------------------------------------------------------
  function getLevel() returns int
    return m_level

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()

    m_movement = getOwner().getOrAddMovementComponent()

    let u = getOwnerUnit()
    if (u.getAbilityLevel(TlsAbilityIds.sprint) <= 0)
      u.addAbility(TlsAbilityIds.sprint)
    u.setAbilityLevel(TlsAbilityIds.sprint, m_level)

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()

    let u = getOwnerUnit()
    if (u.getAbilityLevel(TlsAbilityIds.sprint) > 0)
      u.removeAbility(TlsAbilityIds.sprint)

    m_movement = null

  // --------------------------------------------------------------------------
  function startSprinting()
    if (m_isSprinting)
      return

    m_isSprinting = true

    let u = getOwnerUnit()
    let baseSpeed = u.getDefaultMovespeed()
    u.removeAbility(TlsAbilityIds.sprint)
    u.addAbility(TlsAbilityIds.stopSprinting)
    u.setAbilityLevel(TlsAbilityIds.stopSprinting, m_level)
    u.setMoveSpeed(baseSpeed + m_sprintSpeed)

    listenToUnitMovedEvent()
    startedSprintingEvent.call()

  // --------------------------------------------------------------------------
  function stopSprinting()
    if (not m_isSprinting)
      return

    m_isSprinting = false

    let u = getOwnerUnit()
    let baseSpeed = u.getDefaultMovespeed()
    u.removeAbility(TlsAbilityIds.stopSprinting)
    u.addAbility(TlsAbilityIds.sprint)
    u.setAbilityLevel(TlsAbilityIds.sprint, m_level)
    u.setMoveSpeed(baseSpeed)
    
    unlistenToUnitMovedEvent()
    stoppedSprintingEvent.call()

  // --------------------------------------------------------------------------
  function exhaustUnit()
    let exhaustion = getOwner().getOrAddExhaustionComponent()
    exhaustion.exhaustUnit()

  // --------------------------------------------------------------------------
  private function onUnitMoved(real distanceInMeters)
    let u = getOwnerUnit()
    let totalStaminaCost = distanceInMeters * m_staminaCost
    u.subMana(totalStaminaCost)
    if (u.getMana() < totalStaminaCost)
      stopSprinting()
      exhaustUnit()

  // --------------------------------------------------------------------------
  private function listenToUnitMovedEvent()
    unlistenToUnitMovedEvent()

    let unitMovedEvent = getUnitMovedEvent()
    if (unitMovedEvent == null)
      return

    m_onUnitMovedHandler = unitMovedEvent.register() (real distanceInMeters) ->
      onUnitMoved(distanceInMeters)

  // --------------------------------------------------------------------------
  private function unlistenToUnitMovedEvent()
    if (m_onUnitMovedHandler == null)
      return

    let unitMovedEvent = getUnitMovedEvent()
    if (unitMovedEvent != null)      
      unitMovedEvent.unregister(m_onUnitMovedHandler)

    destroy m_onUnitMovedHandler
    m_onUnitMovedHandler = null

  // --------------------------------------------------------------------------
  private function getUnitMovedEvent() returns Event1<real>
    return m_movement == null ? null : m_movement.getUnitMovedEvent()

// ============================================================================
public function IUnitMetadata.getOrAddSprintComponent() returns SprintComponent
  var component = this.getComponent(Type(SprintComponent.typeId)) castTo SprintComponent
  if (component == null)
    component = this.addComponent(new SprintComponent(this)) castTo SprintComponent
  return component