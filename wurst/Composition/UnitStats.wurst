package UnitStats
import UnitComponent
import AbilityObjEditing
import ObjectIdGenerator

constant int ABILITY_ID_CRIT = compiletime(ABIL_ID_GEN.next())
constant int ABILITY_ID_EVASION = compiletime(ABIL_ID_GEN.next())
constant int ABILITY_ID_LIFESTEAL = compiletime(ABIL_ID_GEN.next())

// ============================================================================
@compiletime function createAbilities()
  
  new AbilityDefinitionCriticalStrikecreep(ABILITY_ID_CRIT)
  ..setName("STAT_CRIT")
  ..setChancetoCriticalStrike(1, 0.0)
  ..setDamageMultiplier(1, 0.0)
  ..setDamageBonus(1, 0.0)
  ..setIconNormal("")
  
  new AbilityDefinitionEvasioncreep(ABILITY_ID_EVASION)
  ..setName("STAT_EVASION")
  ..setChancetoEvade(1, 0.0)
  ..setIconNormal("")

  new AbilityDefinitionVampiricattackAIva(ABILITY_ID_LIFESTEAL)
  ..setName("STAT_LIFESTEAL")
  ..setLifeStolenPerAttack(1, 0.0)  
  ..setArtSpecial("")
  ..setMissileArt("")
  ..setIconNormal("")
  ..setItemAbility(false)

// ============================================================================
public class UnitStatsComponent extends UnitComponent
  private real m_critChancePercentage = 0.0
  private real m_critDamageMultiplierPercentage = 2.0
  private real m_critBonusDamage = 0.0
  private real m_evadeChancePercentage = 0.0
  private real m_lifeStealPerHit = 0.0
  private ability m_abilCritStrike
  private ability m_abilEvasion
  private ability m_abilLifeSteal

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return UnitStatsComponent.getTypeId()

  // --------------------------------------------------------------------------
  // Gets the critical chance percentage e.g. 100.0%
  function getCritChancePercentage() returns real
    return m_critChancePercentage

  // --------------------------------------------------------------------------
  // Sets the critical chance percentage e.g. 100.0%
  function setCritChancePercentage(real value)
    m_critChancePercentage = value
    update()

  // --------------------------------------------------------------------------
  // Gets the damage multiplier applied when the unit crits e.g. 2.0
  function getCritDamageMultiplier() returns real
    return m_critDamageMultiplierPercentage

  // --------------------------------------------------------------------------
  // Sets the damage multiplier applied when the unit crits e.g. 2.0
  function setCritDamageMultiplier(real value)
    m_critDamageMultiplierPercentage = value
    update()

  // --------------------------------------------------------------------------
  // Gets the evade chance percentage e.g. 100.0%
  function getEvadeChancePercentage() returns real
    return m_evadeChancePercentage

  // --------------------------------------------------------------------------
  // Sets the evade chance percentage e.g. 100.0%
  function setEvadeChancePercentage(real value)
    m_evadeChancePercentage = value
    update()

  // --------------------------------------------------------------------------
  function getCritBonusDamage() returns real
    return m_critBonusDamage

  // --------------------------------------------------------------------------
  function setCritBonusDamage(real value)
    m_critBonusDamage = value
    update()

  // --------------------------------------------------------------------------
  function getLifeSteal() returns real
    return m_lifeStealPerHit

  // --------------------------------------------------------------------------
  function setLifeSteal(real value)
    m_lifeStealPerHit = value
    update()

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()
    
    if (not ownerUnit.hasAbility(ABILITY_ID_CRIT))
      ownerUnit.addAbility(ABILITY_ID_CRIT)
    m_abilCritStrike = ownerUnit.getAbility(ABILITY_ID_CRIT)
    
    if (not ownerUnit.hasAbility(ABILITY_ID_EVASION))
      ownerUnit.addAbility(ABILITY_ID_EVASION)
    m_abilEvasion = ownerUnit.getAbility(ABILITY_ID_EVASION)
    
    if (not ownerUnit.hasAbility(ABILITY_ID_LIFESTEAL))
      ownerUnit.addAbility(ABILITY_ID_LIFESTEAL)
    m_abilLifeSteal = ownerUnit.getAbility(ABILITY_ID_LIFESTEAL)

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let ownerUnit = getOwnerUnit()

    ownerUnit.removeAbility(ABILITY_ID_CRIT)
    m_abilCritStrike = null

    ownerUnit.removeAbility(ABILITY_ID_EVASION)
    m_abilEvasion = null

    ownerUnit.removeAbility(ABILITY_ID_LIFESTEAL)
    m_abilLifeSteal = null

  // --------------------------------------------------------------------------
  private function update()

    let ownerUnit = getOwnerUnit()

    if (m_abilCritStrike != null)
      let lvl = 1
      ownerUnit.setAbilityLevel(ABILITY_ID_CRIT, lvl)
      m_abilCritStrike.setField(ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE, lvl, m_critChancePercentage)
      m_abilCritStrike.setField(ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2, lvl, m_critDamageMultiplierPercentage)
      m_abilCritStrike.setField(ABILITY_RLF_DAMAGE_BONUS_OCR3, lvl, m_critBonusDamage)

    if (m_abilEvasion != null)
      let lvl = 1
      ownerUnit.setAbilityLevel(ABILITY_ID_EVASION, lvl)
      m_abilEvasion.setField(ABILITY_RLF_CHANCE_TO_EVADE_EEV1, lvl, m_evadeChancePercentage)

    if (m_abilLifeSteal != null)
      let lvl = 1
      ownerUnit.setAbilityLevel(ABILITY_ID_LIFESTEAL, lvl)
      m_abilLifeSteal.setField(ABILITY_RLF_LIFE_STOLEN_PER_ATTACK, lvl, m_lifeStealPerHit)
      
// ============================================================================
public function IUnitMetadata.getUnitStatsComponent() returns UnitStatsComponent
  return this.getComponent(typeInfo(UnitStatsComponent.typeId)) castTo UnitStatsComponent

// ============================================================================
public function IUnitMetadata.getOrAddUnitStatsComponent() returns UnitStatsComponent
  var component = this.getUnitStatsComponent()
  if (component == null)
    component = this.addComponent(new UnitStatsComponent(this)) castTo UnitStatsComponent
  return component