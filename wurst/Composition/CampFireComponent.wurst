package CampFireComponent
import RegisterEvents
import TlsUnitIds
import TlsAbilityIds
import RealtimeUnitComponent
import PersistActiveAbilityComponent
import Unit_CampFire
import Crafting
import Handle
import FX

constant string CAMPFIRE2_EFFECT_1 = "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl"

constant colorA CAMPFIRE1_RANGE_EFFECT_COLOR = colorA(255, 136, 0, 150)
constant colorA CAMPFIRE2_RANGE_EFFECT_COLOR = colorA(0, 170, 255, 150)

// ============================================================================
public class CampFireComponent extends RealtimeUnitComponent
  private effect m_campFire2Effect1
  private _handle m_onCraftedItemHandler = INVALID_HANDLE
  private CookingRecipe m_cookingRecipe = null
  
  private effect m_rangeEffect = null
  private real m_auraRadius = 0.0
  private colorA m_rangeEffectColor = CAMPFIRE1_RANGE_EFFECT_COLOR

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    this.registerForRealtimeUpdate(RealtimeUpdatePriority.Background)
    updateState()

    let craftingComponent = getOwner().getOrAddCraftingComponent()
    m_onCraftedItemHandler = craftingComponent.onCraftedItem().registerDispatched(this, true, (ItemRecipe recipe) -> onCraftItem(recipe))

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    hideCampFire2Effects()

    let craftingComponent = getOwner().getCraftingComponent()
    if (craftingComponent != null)
      craftingComponent.onCraftedItem().unregister(m_onCraftedItemHandler)
    m_onCraftedItemHandler = INVALID_HANDLE

    hideRangeEffect()

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real dt)
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()

    if (ownerUnitId == TlsUnitIds.campFire2)
      updateCampFire2()

  // --------------------------------------------------------------------------
  function onCraftItem(ItemRecipe recipe)
    m_cookingRecipe = recipe castTo CookingRecipe

    // TODO: change effects depending on recipe
    convertToCampFire2()

  // --------------------------------------------------------------------------
  function updateCampFire2()
    let ownerUnit = getOwnerUnit()

    // lose mana per second
    ownerUnit.subMana(CAMP_FIRE_2_MANA_COST_PER_SECOND.toReal())

    if (ownerUnit.getMana() <= 0)
      ownerUnit.setMana(ownerUnit.getMaxMana())
      convertToCampFire()

  // --------------------------------------------------------------------------
  protected function showRangeEffect()
    if (m_rangeEffect == null)
      let ownerUnit = getOwnerUnit()
      m_rangeEffect = FX.createRangeEffect(ownerUnit.getPos(), m_auraRadius, m_rangeEffectColor, ownerUnit.getOwner())

  // --------------------------------------------------------------------------
  protected function updateRangeEffect()
    if (m_rangeEffect != null)
      hideRangeEffect()
      showRangeEffect()

  // --------------------------------------------------------------------------
  protected function hideRangeEffect()
    
    if (m_rangeEffect != null)
      m_rangeEffect.destr()
      m_rangeEffect = null

  // --------------------------------------------------------------------------
  private function convertToCampFire()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()
    if (ownerUnitId == TlsUnitIds.campFire)
      return

    ownerUnit.issueImmediateOrderById(TlsUnitIds.campFire)

    let craftingComponent = getOwner().getCraftingComponent()
    if (craftingComponent != null)
      craftingComponent.enable()

  // --------------------------------------------------------------------------
  private function convertToCampFire2()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()
    if (ownerUnitId == TlsUnitIds.campFire2)
      return

    ownerUnit.issueImmediateOrderById(TlsUnitIds.campFire2)
    ownerUnit.setMana(ownerUnit.getMaxMana())

    let craftingComponent = getOwner().getCraftingComponent()
    if (craftingComponent != null)
      craftingComponent.disable()

  // --------------------------------------------------------------------------
  function updateState()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()

    if (ownerUnitId == TlsUnitIds.campFire or ownerUnitId == TlsUnitIds.campFireBuild)
      ownerUnit.addAbility(TlsAbilityIds.campFireRestoreMana1)
      m_auraRadius = CAMPFIRE1_AREA_OF_EFFECT
      m_rangeEffectColor = CAMPFIRE1_RANGE_EFFECT_COLOR
    else
      ownerUnit.removeAbility(TlsAbilityIds.campFireRestoreMana1)

    if (ownerUnitId == TlsUnitIds.campFire2)
    //{
      ownerUnit.addAbility(TlsAbilityIds.campFireRestoreMana2)
      m_auraRadius = CAMPFIRE2_AREA_OF_EFFECT
      m_rangeEffectColor = CAMPFIRE2_RANGE_EFFECT_COLOR
      showCampFire2Effects()

      if (m_cookingRecipe != null)
        for i = 0 to m_cookingRecipe.getAbilityIdCount() - 1
          ownerUnit.addAbility(m_cookingRecipe.getAbilityId(i))
    //}
    else
    //{
      ownerUnit.removeAbility(TlsAbilityIds.campFireRestoreMana2)
      hideCampFire2Effects()

      if (m_cookingRecipe != null)
        for i = 0 to m_cookingRecipe.getAbilityIdCount() - 1
          ownerUnit.removeAbility(m_cookingRecipe.getAbilityId(i))
    //}

    updateRangeEffect()

  // --------------------------------------------------------------------------
  private function showCampFire2Effects()
    if (m_campFire2Effect1 == null)
      m_campFire2Effect1 = addEffect(CAMPFIRE2_EFFECT_1, getOwnerUnit().getPos())

  // --------------------------------------------------------------------------
  private function hideCampFire2Effects()
    if (m_campFire2Effect1 != null)
      m_campFire2Effect1.destr()
      m_campFire2Effect1 = null

// ============================================================================
public function IUnitMetadata.getCampFireComponent() returns CampFireComponent
  return this.getComponent(CampFireComponent.typeId) castTo CampFireComponent

// ============================================================================
public function IUnitMetadata.getOrAddCampFireComponent() returns CampFireComponent
  var component = this.getCampFireComponent()
  if (component == null)
    component = this.addComponent(new CampFireComponent(this)) castTo CampFireComponent
  return component

// ============================================================================
function onUnitConstructFinished()
  let constructedUnit = GetConstructedStructure()
  if (constructedUnit.getTypeId() != TlsUnitIds.campFire and
      constructedUnit.getTypeId() != TlsUnitIds.campFireBuild)
    return

  constructedUnit.addAbility(TlsAbilityIds.campFireRestoreMana1)

// ============================================================================
function onUnitConstructed()
  let constructedUnit = GetConstructedStructure()
  if (not constructedUnit.isCampFire())
    return

  // Make sure it has full mana after being constructed
  constructedUnit.setMana(constructedUnit.getMaxMana())

  // Now enable the Camp Fire component to start draining mana
  constructedUnit.getMetadataRequired().getOrAddCampFireComponent().enable()

// ============================================================================
function onUnitUpgraded()
  let upgradedUnit = GetTriggerUnit()
  if (not upgradedUnit.isCampFire())
    return
  let metadata = upgradedUnit.getMetadataRequired()
  
  metadata.getOrAddCampFireComponent()
  ..enable()
  ..updateState()

  metadata.getOrAddPersistActiveAbilityComponent()
  ..setUpgradingUnit(false)

// ============================================================================
function onUnitSelected()
  let selectedUnit = GetTriggerUnit()
  if (not selectedUnit.isCampFire())
    return
  let comp = selectedUnit.getMetadata().getCampFireComponent()
  if (comp != null)
    comp.showRangeEffect()

// ============================================================================
function onUnitDeselected()
  let selectedUnit = GetTriggerUnit()
  if (not selectedUnit.isCampFire())
    return
  let comp = selectedUnit.getMetadata().getCampFireComponent()
  if (comp != null)
    comp.hideRangeEffect()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onUnitConstructFinished)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onUnitConstructed)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUnitUpgraded)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED, function onUnitSelected)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DESELECTED, function onUnitDeselected)