package CampFireComponent
import RegisterEvents
import TlsUnitIds
import TlsAbilityIds
import RealtimeUnitComponent
import PersistActiveAbilityComponent
import Unit_CampFire
import Crafting
import Handle

constant string CAMPFIRE2_EFFECT_1 = "Environment\\LargeBuildingFire\\LargeBuildingFire1.mdl"
constant string CAMPFIRE2_EFFECT_2 = "Abilities\\Spells\\Human\\Brilliance\\Brilliance.mdl"

// ============================================================================
public class CampFireComponent extends RealtimeUnitComponent
  private PersistActiveAbilityComponent m_persistActiveAbilityComponent
  private effect m_campFire2Effect1
  private effect m_campFire2Effect2
  private _handle m_onCraftedItemHandler = INVALID_HANDLE
  private ItemRecipe m_cookingRecipe = null

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_persistActiveAbilityComponent = null

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    m_persistActiveAbilityComponent = getOwner().getOrAddPersistActiveAbilityComponent()
    this.registerForRealtimeUpdate(RealtimeUpdatePriority.Background)
    updateState()

    let craftingComponent = getOwner().getOrAddCraftingComponent()
    m_onCraftedItemHandler = craftingComponent.onCraftedItem().registerDispatched(this, true, (ItemRecipe recipe) -> onCraftItem(recipe))

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    hideCampFire2Effects()

    let craftingComponent = getOwner().getCraftingComponent()
    if (craftingComponent != null)
      craftingComponent.onCraftedItem().unregister(m_onCraftedItemHandler)
    m_onCraftedItemHandler = INVALID_HANDLE

    m_cookingRecipe = null

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real dt)
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()

    if (ownerUnitId == TlsUnitIds.campFire2)
      updateCampFire2()

  // --------------------------------------------------------------------------
  function onCraftItem(ItemRecipe recipe)
    // TODO: change effects depending on recipe
    convertToCampFire2()
    m_cookingRecipe = recipe

  // --------------------------------------------------------------------------
  function updateCampFire2()
    let ownerUnit = getOwnerUnit()

    // lose mana per second
    ownerUnit.subMana(CAMP_FIRE_2_MANA_COST_PER_SECOND.toReal())

    if (ownerUnit.getMana() <= 0)
      ownerUnit.setMana(ownerUnit.getMaxMana())
      convertToCampFire()

      if (m_cookingRecipe != null)
        getOwnerUnit().addItemById(m_cookingRecipe.getItemTypeId())

  // --------------------------------------------------------------------------
  private function convertToCampFire()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()
    if (ownerUnitId == TlsUnitIds.campFire)
      return
    m_persistActiveAbilityComponent.setUpgradingUnit(true)
    ownerUnit.issueImmediateOrderById(TlsUnitIds.campFire)

    let craftingComponent = getOwner().getCraftingComponent()
    if (craftingComponent != null)
      craftingComponent.enable()

  // --------------------------------------------------------------------------
  private function convertToCampFire2()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()
    if (ownerUnitId == TlsUnitIds.campFire2)
      return
    m_persistActiveAbilityComponent.setUpgradingUnit(true)
    ownerUnit.issueImmediateOrderById(TlsUnitIds.campFire2)
    ownerUnit.setMana(ownerUnit.getMaxMana())

    let craftingComponent = getOwner().getCraftingComponent()
    if (craftingComponent != null)
      craftingComponent.disable()

  // --------------------------------------------------------------------------
  function updateState()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()

    if (ownerUnitId == TlsUnitIds.campFire or ownerUnitId == TlsUnitIds.campFireBuild)
      ownerUnit.addAbility(TlsAbilityIds.campFireRestoreHealth)
      ownerUnit.addAbility(TlsAbilityIds.campFireRestoreMana)
    else
      ownerUnit.removeAbility(TlsAbilityIds.campFireRestoreHealth)
      ownerUnit.removeAbility(TlsAbilityIds.campFireRestoreMana)

    if (ownerUnitId == TlsUnitIds.campFire2)
      ownerUnit.addAbility(TlsAbilityIds.campFire2RestoreHealth)
      ownerUnit.addAbility(TlsAbilityIds.campFire2RestoreMana)
      showCampFire2Effects()
    else
      ownerUnit.removeAbility(TlsAbilityIds.campFire2RestoreHealth)
      ownerUnit.removeAbility(TlsAbilityIds.campFire2RestoreMana)
      hideCampFire2Effects()

  // --------------------------------------------------------------------------
  private function showCampFire2Effects()
    if (m_campFire2Effect1 == null)
      m_campFire2Effect1 = AddSpecialEffect(CAMPFIRE2_EFFECT_1, getOwnerUnit().getX(), getOwnerUnit().getY())
    if (m_campFire2Effect2 == null)
      m_campFire2Effect2 = AddSpecialEffect(CAMPFIRE2_EFFECT_2, getOwnerUnit().getX(), getOwnerUnit().getY())

  // --------------------------------------------------------------------------
  private function hideCampFire2Effects()
    if (m_campFire2Effect1 != null)
      m_campFire2Effect1.destr()
      m_campFire2Effect1 = null
    if (m_campFire2Effect2 != null)
      m_campFire2Effect2.destr()
      m_campFire2Effect2 = null

// ============================================================================
public function IUnitMetadata.getCampFireComponent() returns CampFireComponent
  return this.getComponent(CampFireComponent.typeId) castTo CampFireComponent

// ============================================================================
public function IUnitMetadata.getOrAddCampFireComponent() returns CampFireComponent
  var component = this.getCampFireComponent()
  if (component == null)
    component = this.addComponent(new CampFireComponent(this)) castTo CampFireComponent
  return component

// ============================================================================
function onUnitConstructFinished()
  let constructedUnit = GetConstructedStructure()
  if (constructedUnit.getTypeId() != TlsUnitIds.campFire and
      constructedUnit.getTypeId() != TlsUnitIds.campFireBuild)
    return

  constructedUnit.addAbility(TlsAbilityIds.campFireRestoreHealth)
  constructedUnit.addAbility(TlsAbilityIds.campFireRestoreMana)

// ============================================================================
function onUnitConstructed()
  let constructedUnit = GetConstructedStructure()
  if (not constructedUnit.isCampFire())
    return

  // Make sure it has full mana after being constructed
  constructedUnit.setMana(constructedUnit.getMaxMana())

  // Now enable the Camp Fire component to start draining mana
  constructedUnit.getMetadataRequired().getOrAddCampFireComponent().enable()

// ============================================================================
function onUnitUpgraded()
  let upgradedUnit = GetTriggerUnit()
  if (not upgradedUnit.isCampFire())
    return
  let metadata = upgradedUnit.getMetadataRequired()
  
  metadata.getOrAddCampFireComponent()
  ..enable()
  ..updateState()

  metadata.getOrAddPersistActiveAbilityComponent()
  ..setUpgradingUnit(false)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onUnitConstructFinished)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onUnitConstructed)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUnitUpgraded)
