package ScoutTowerComponent
import UnitComponent
import Events
import WorkstationComponent
import ObjectIdGenerator
import AbilityObjEditing
import Range

constant rangeInt SCOUT_TOWER_SIGHT_RANGE = rangeInt(1000, 1800)
constant int array SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID = [compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()),
                                                          compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next())]
constant int SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
constant int SCOUT_TOWER_INACTIVE_ICON_ABILITY_ID = compiletime(ABIL_ID_GEN.next())

// ============================================================================
@compiletime function createAbility()
  for i = 0 to 9
  //{
    new AbilityDefinitionSightBonus(SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID[i])
    ..setSightRangeBonus(1, SCOUT_TOWER_SIGHT_RANGE.lerp( i.toReal() / 9 ).toInt())
  //}

  new AbilityDefinition(SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID, 'Ahan')
    ..setTooltipNormal(1, "Workstation")

// ============================================================================
public class ScoutTowerComponent extends UnitComponent
  private _handle m_workedEnteredCallback = HANDLE_INVALID
  private _handle m_workedExitedCallback = HANDLE_INVALID
  private bool m_activated = false

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    
    let workstationComponent = getOwner().getOrAddWorkstationComponent()
    m_workedEnteredCallback = workstationComponent.workerEntered.registerDispatched(this, () -> onWorkerEntered())
    m_workedExitedCallback = workstationComponent.workerExited.registerDispatched(this, () -> onWorkedExited())

    if (getNumberOfWorkers() > 0)
      activate()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let workstationComponent = getOwner().getWorkstationComponent()
    if (workstationComponent != null)
      workstationComponent.workerEntered.unregister(m_workedEnteredCallback)
      workstationComponent.workerExited.unregister(m_workedExitedCallback)

    deactivate()
    
  // --------------------------------------------------------------------------
  private function onWorkerEntered()
    if (getNumberOfWorkers() == 1)
      activate()

  // --------------------------------------------------------------------------
  private function onWorkedExited()
    if (getNumberOfWorkers() == 0)
      deactivate()

  // --------------------------------------------------------------------------
  private function getNumberOfWorkers() returns int
    let workstationComponent = getOwner().getWorkstationComponent()
    return workstationComponent != null ? workstationComponent.getWorkerUnitCount() : 0

  // --------------------------------------------------------------------------
  private function activate()
    setActive(true)

  // --------------------------------------------------------------------------
  private function deactivate()
    setActive(false)

  // --------------------------------------------------------------------------
  private function setActive(bool active)
    if (m_activated == active)
      return
    m_activated = active
    updateSightAbility()

  // --------------------------------------------------------------------------
  function updateSightAbility()
    let ownerUnit = getOwnerUnit()

    var operatorLevel = 1

    if (m_activated)
      let workstationComponent = getOwner().getWorkstationComponent()
      if (workstationComponent != null)
        operatorLevel = workstationComponent.getMaxOperatorLevel()

    for i = 0 to 9
      if (m_activated and operatorLevel == i + 1)
        ownerUnit.addAbility(SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID[i])
      else
        ownerUnit.removeAbility(SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID[i])

// ============================================================================
public function IUnitMetadata.getScoutTowerComponent() returns ScoutTowerComponent
  return this.getComponent(ScoutTowerComponent.typeId) castTo ScoutTowerComponent

// ============================================================================
public function IUnitMetadata.getOrAddScoutTowerComponent() returns ScoutTowerComponent
  var component = this.getScoutTowerComponent()
  if (component == null)
    component = this.addComponent(new ScoutTowerComponent(this)) castTo ScoutTowerComponent
  return component