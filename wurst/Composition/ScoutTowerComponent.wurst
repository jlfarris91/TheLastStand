package ScoutTowerComponent
import UnitComponent
import Events
import WorkstationComponent
import ObjectIdGenerator
import AbilityObjEditing
import Range
import TooltipBuilder
import Unit_ScoutTower
import GameConstants

constant rangeInt   SCOUT_TOWER_SIGHT_RANGE                     = rangeInt(800, 1800)
constant real       SCOUT_TOWER_SIGHT_RANGE_PER_LEVEL           = SCOUT_TOWER_SIGHT_RANGE.getLength() / 10.0

constant rangeInt   SCOUT_TOWER_ARMOR_DEC_RANGE                 = rangeInt(1, 3)
constant real       SCOUT_TOWER_ARMOR_DEC_RANGE_PERC_PER_LEVEL  = SCOUT_TOWER_ARMOR_DEC_RANGE.getLength() / 10.0

constant int array  SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID         = [compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next())]
constant int        SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID          = compiletime(ABIL_ID_GEN.next())
constant int        SCOUT_TOWER_INACTIVE_ICON_ABILITY_ID        = compiletime(ABIL_ID_GEN.next())

// ============================================================================
function getActiveSightRadius(int level) returns int
  return SCOUT_TOWER_SIGHT_RANGE.lerp(RANGE_ONE_TO_TEN.parameterize01(level)).toInt()

// ============================================================================
function getActiveTargetArmorReduction(int level) returns int
  return SCOUT_TOWER_ARMOR_DEC_RANGE.lerp(RANGE_ONE_TO_TEN.parameterize01(level)).toInt()

// ============================================================================
@compiletime function createAbility()
  for i = 1 to 10
  //{
    new AbilityDefinitionSightBonus(SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID[i-1])
    ..setSightRangeBonus(1, getActiveSightRadius(i))
  //}

  let activeWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(true)..setDescription(g_scoutTowerDefinition.getDescription())
  let inactiveWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(false)..setDescription(g_scoutTowerDefinition.getDescription())

  let properties = new WorkstationOperatorBonusTooltipItem()
  ..addValue(lvl -> "{0}m sight radius".format((getActiveSightRadius(lvl) * WORLD_TO_METERS).toString()))
  ..addValue(lvl -> "Target armor is reduced by {0}".format(getActiveTargetArmorReduction(lvl).toString()))
  activeWorkstationIconTooltipBuilder.addItem(properties)

  new AbilityActiveWorkstationIconDefinition(SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID)
    ..setName("Lookout Tower")
    ..presetTooltipNormalExtended(lvl -> activeWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  new AbilityInactiveWorkstationIconDefinition(SCOUT_TOWER_INACTIVE_ICON_ABILITY_ID)
    ..setName("Lookout Tower")
    ..presetTooltipNormalExtended(lvl -> inactiveWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  destroy activeWorkstationIconTooltipBuilder
  destroy inactiveWorkstationIconTooltipBuilder

// ============================================================================
public class ScoutTowerComponent extends UnitComponent
  private _handle m_workedEnteredCallback = INVALID_HANDLE
  private _handle m_workedExitedCallback = INVALID_HANDLE
  private _handle m_workedLeveledCallback = INVALID_HANDLE
  private bool m_activated = false

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    
    let workstationComponent = getOwner().getOrAddWorkstationComponent()
    m_workedEnteredCallback = workstationComponent.workerEntered.registerDispatched(this, () -> onWorkerEntered())
    m_workedExitedCallback = workstationComponent.workerExited.registerDispatched(this, () -> onWorkedExited())
    m_workedLeveledCallback = workstationComponent.workerLeveled.registerDispatched(this, () -> onWorkerLeveled())

    updateState()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let workstationComponent = getOwner().getWorkstationComponent()
    if (workstationComponent != null)
      workstationComponent.workerEntered.unregister(m_workedEnteredCallback)
      workstationComponent.workerExited.unregister(m_workedExitedCallback)
      workstationComponent.workerLeveled.unregister(m_workedLeveledCallback)

    deactivate()
    
  // --------------------------------------------------------------------------
  private function onWorkerEntered()
    if (getNumberOfWorkers() == 1)
      activate()

  // --------------------------------------------------------------------------
  private function onWorkedExited()
    if (getNumberOfWorkers() == 0)
      deactivate()

  // --------------------------------------------------------------------------
  private function onWorkerLeveled()
    updateState()

  // --------------------------------------------------------------------------
  private function getNumberOfWorkers() returns int
    let workstationComponent = getOwner().getWorkstationComponent()
    return workstationComponent != null ? workstationComponent.getLoadedUnitCount() : 0

  // --------------------------------------------------------------------------
  private function activate()
    setActive(true)

  // --------------------------------------------------------------------------
  private function deactivate()
    setActive(false)

  // --------------------------------------------------------------------------
  private function setActive(bool active)
    if (m_activated == active)
      return
    m_activated = active
    updateState()

  // --------------------------------------------------------------------------
  function updateState()
    let ownerUnit = getOwnerUnit()

    var operatorLevel = 1

    if (m_activated)
      let workstationComponent = getOwner().getWorkstationComponent()
      if (workstationComponent != null)
        operatorLevel = workstationComponent.getMaxOperatorLevel()

    for i = 1 to 10
      if (m_activated and operatorLevel == i)
        ownerUnit.addAbility(SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID[i-1])
      else
        ownerUnit.removeAbility(SCOUT_TOWER_ACTIVE_SIGHT_ABILITY_ID[i-1])

    if (m_activated)
      ownerUnit.removeAbility(SCOUT_TOWER_INACTIVE_ICON_ABILITY_ID)
      ownerUnit.addAbility(SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID)
      ownerUnit.setAbilityLevel(SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID, operatorLevel)
    else
      ownerUnit.removeAbility(SCOUT_TOWER_ACTIVE_ICON_ABILITY_ID)
      ownerUnit.addAbility(SCOUT_TOWER_INACTIVE_ICON_ABILITY_ID)

// ============================================================================
public function IUnitMetadata.getScoutTowerComponent() returns ScoutTowerComponent
  return this.getComponent(ScoutTowerComponent.typeId) castTo ScoutTowerComponent

// ============================================================================
public function IUnitMetadata.getOrAddScoutTowerComponent() returns ScoutTowerComponent
  var component = this.getScoutTowerComponent()
  if (component == null)
    component = this.addComponent(new ScoutTowerComponent(this)) castTo ScoutTowerComponent
  return component