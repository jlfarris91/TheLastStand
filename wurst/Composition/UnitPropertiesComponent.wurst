package UnitPropertiesComponent
import UnitComponent
import AbilityObjEditing
import ObjectIdGenerator
import Action
import DamageEvent
import FX
import Damage
import Elites
import SmartValue
import RealExtensions
import Func
import RegisterEvents
import UnitExtensions

constant int ABILITY_ID_CRIT = compiletime(ABIL_ID_GEN.next())
constant int ABILITY_ID_EVASION = compiletime(ABIL_ID_GEN.next())
constant int ABILITY_ID_ATTACK_BONUS = compiletime(ABIL_ID_GEN.next())

// ============================================================================
public enum UnitProperty
  CRIT_CHANCE_01
  CRIT_DAMAGE_SCALAR
  CRIT_DAMAGE_BONUS
  EVADE_CHANCE_01
  LIFE_STEAL
  DAMAGE_SCALAR_NORMAL
  DAMAGE_SCALAR_ELITE
  DAMAGE_SCALAR_BOSS
  OPERATOR_LEVEL
  LOOT_DURATION_SCALE
  LOOT_TWICE_CHANCE_01
  LOOT_MANA_COST_SCALE
  ATTACK_BONUS
  __COUNT

// Must match number of items in UnitProperties enum
public constant int UNIT_PROPERTY_COUNT = 13

// ============================================================================
tuple unitPropertyMetadata(real defaultValue, string friendlyName, string shortName, Func1<real, string> stringifier, Action2<UnitPropertiesComponent, UnitProperty> onChangedCallback)
Func1<real, string> g_toString = (real v) -> v.toString()
Func1<real, string> g_toIntString = (real v) -> v.toInt().toString()
Func1<real, string> g_toScalarString = (real v) -> v.toString() + "x"
Func1<real, string> g_toPercentageString01 = (real v) -> v.toPercentageString01()

constant UpdateCritProperties g_updateCritProperties = new UpdateCritProperties()
constant UpdateEvadeChance g_updateEvadeChance = new UpdateEvadeChance()
constant UpdateAttackBonus g_updateAttackBonus = new UpdateAttackBonus()

// ============================================================================
public class UnitProperties

  static constant int count = UNIT_PROPERTY_COUNT

  protected static constant unitPropertyMetadata array[count] PROPERTY_METADATA = [
    /* CRIT_CHANCE          */  unitPropertyMetadata(0.0, "Crit Chance",          "critchance",     g_toPercentageString01.acquire(), g_updateCritProperties),
    /* CRIT_DAMAGE_SCALAR   */  unitPropertyMetadata(2.0, "Crit Damage Mult",     "critmult",       g_toScalarString.acquire(),       g_updateCritProperties),
    /* CRIT_DAMAGE_BONUS    */  unitPropertyMetadata(0.0, "Crit Damage Bonus",    "critbonus",      g_toString.acquire(),             g_updateCritProperties),
    /* EVADE_CHANCE         */  unitPropertyMetadata(0.0, "Evade Chance",         "evade",          g_toPercentageString01.acquire(), g_updateEvadeChance),
    /* LIFE_STEAL_PERC      */  unitPropertyMetadata(0.0, "Life Steal",           "lifesteal",      g_toPercentageString01.acquire(), null),
    /* DAMAGE_SCALAR_NORMAL */  unitPropertyMetadata(1.0, "Damage Scalar Normal", "dmgscalenormal", g_toPercentageString01.acquire(), null),
    /* DAMAGE_SCALAR_ELITE  */  unitPropertyMetadata(1.0, "Damage Scalar Elite",  "dmgscaleelite",  g_toPercentageString01.acquire(), null),
    /* DAMAGE_SCALAR_BOSS   */  unitPropertyMetadata(1.0, "Damage Scalar Boss",   "dmgscaleboss",   g_toPercentageString01.acquire(), null),
    /* OPERATOR_LEVEL       */  unitPropertyMetadata(1.0, "Operator Level",       "oplevel",        g_toIntString.acquire(),          null),
    /* LOOT_DURATION_SCALAR */  unitPropertyMetadata(1.0, "Loot Duration",        "lootdur",        g_toPercentageString01.acquire(), null),
    /* LOOT_TWICE_CHANCE    */  unitPropertyMetadata(0.0, "Loot Twice Chance",    "loottwice",      g_toPercentageString01.acquire(), null),
    /* LOOT_MANA_COST_SCALE */  unitPropertyMetadata(1.0, "Loot Mana Cost",       "lootcost",       g_toPercentageString01.acquire(), null),
    /* ATTACK_BONUS         */  unitPropertyMetadata(0.0, "Attack Bonus",         "attackbonus",    g_toIntString.acquire(),          g_updateAttackBonus)
  ]

  // --------------------------------------------------------------------------
  static function getPropertyDefaultValue(UnitProperty property) returns real
    return PROPERTY_METADATA[property castTo int].defaultValue

  // --------------------------------------------------------------------------
  static function getPropertyFriendlyName(UnitProperty property) returns string
    return PROPERTY_METADATA[property castTo int].friendlyName

  // --------------------------------------------------------------------------
  static function getPropertyShortName(UnitProperty property) returns string
    return PROPERTY_METADATA[property castTo int].shortName

  // --------------------------------------------------------------------------
  static function formatPropertyValue(UnitProperty property, real value) returns string
    let stringifier = PROPERTY_METADATA[property castTo int].stringifier
    return stringifier != null ? stringifier.call(value) : value.toString()

  // --------------------------------------------------------------------------
  // Returns UnitProperty.__COUNT if no matching property could be found
  static function getPropertyByShortName(string shortName) returns UnitProperty
    for i = 0 to count - 1
      if (PROPERTY_METADATA[i].shortName == shortName)
        return i castTo UnitProperty
    return UnitProperty.__COUNT

// ============================================================================
public class UnitPropertiesComponent extends UnitComponent
  private SmartValue array[UNIT_PROPERTY_COUNT] m_smartValues

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  ondestroy
    for i = 0 to UnitProperties.count - 1
      if (m_smartValues[i] != null)
        destroy m_smartValues[i]
        m_smartValues[i] = null

  // --------------------------------------------------------------------------
  function hasProperty(UnitProperty property) returns bool
    return m_smartValues[property castTo int] != null

  // --------------------------------------------------------------------------
  function getProperty(UnitProperty property) returns SmartValue
    let propertyIndex = property castTo int
    if (m_smartValues[propertyIndex] == null)
      m_smartValues[propertyIndex] = new SmartValue(UnitProperties.getPropertyDefaultValue(property))
      let onChangedCallback = UnitProperties.PROPERTY_METADATA[propertyIndex].onChangedCallback
      if (onChangedCallback != null)
        m_smartValues[propertyIndex].onValueChanged().registerDispatched(this, () -> onChangedCallback.call(this, property))
        onChangedCallback.call(this, property)
    return m_smartValues[propertyIndex]

  // --------------------------------------------------------------------------
  function getPropertyValue(UnitProperty property) returns real
    return hasProperty(property) ? getProperty(property).getValue() : UnitProperties.getPropertyDefaultValue(property)

  // --------------------------------------------------------------------------
  function getPropertyIntValue(UnitProperty property) returns int
    return getPropertyValue(property).toInt()

  // --------------------------------------------------------------------------
  function getPropertyValueAsString(UnitProperty property) returns string
    return UnitProperties.formatPropertyValue(property, getPropertyValue(property))

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    updateAll()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let ownerUnit = getOwnerUnit()

    ownerUnit.removeAbility(ABILITY_ID_CRIT)
    ownerUnit.removeAbility(ABILITY_ID_EVASION)
    ownerUnit.removeAbility(ABILITY_ID_ATTACK_BONUS)

  // --------------------------------------------------------------------------
  protected function onUnitLeveled()
    updateAll()

  // --------------------------------------------------------------------------
  protected function onUnitUpgraded()
    updateAll()

  // --------------------------------------------------------------------------
  private function updateAll()

    let ownerUnit = getOwnerUnit()

    if (not ownerUnit.hasAbility(ABILITY_ID_CRIT))
      ownerUnit.addAbility(ABILITY_ID_CRIT)
      ownerUnit.hideAbility(ABILITY_ID_CRIT, true)

    if (not ownerUnit.hasAbility(ABILITY_ID_EVASION))
      ownerUnit.addAbility(ABILITY_ID_EVASION)
      ownerUnit.hideAbility(ABILITY_ID_EVASION, true)

    if (not ownerUnit.hasAbility(ABILITY_ID_ATTACK_BONUS))
      ownerUnit.addAbility(ABILITY_ID_ATTACK_BONUS)

    g_updateCritProperties.call(this, UnitProperty.CRIT_CHANCE_01)
    g_updateEvadeChance.call(this, UnitProperty.EVADE_CHANCE_01)
    g_updateAttackBonus.call(this, UnitProperty.ATTACK_BONUS)

    if (ownerUnit.isHero())
      getProperty(UnitProperty.OPERATOR_LEVEL).setBase(ownerUnit.getLevel())

// ============================================================================
function setAbilityField(ability _ability, abilityreallevelfield field, int lvl, real value)
  if (not _ability.setField(field, lvl, value))
    Log.debug("Failed to set ability real level field: {0} lvl {1} {2} to {3}".format(
      getAbilityName(_ability),
      lvl.toString(),
      getAbilityFieldName(field),
      value.toString()))
  // Log.debug("{0} lvl {1} {2} : {3}".format(
  //     getAbilityName(_ability),
  //     lvl.toString(),
  //     getAbilityFieldName(field),
  //     value.toString()))

// ============================================================================
function setAbilityField(ability _ability, abilityintegerlevelfield field, int lvl, int value)
  if (not _ability.setField(field, lvl, value))
    Log.debug("Failed to set ability int level field: {0} lvl {1} {2} to {3}".format(
      getAbilityName(_ability),
      lvl.toString(),
      getAbilityFieldName(field),
      value.toString()))
  // Log.debug("{0} lvl {1} {2} : {3}".format(
  //     getAbilityName(_ability),
  //     lvl.toString(),
  //     getAbilityFieldName(field),
  //     value.toString()))

// ============================================================================
function getAbilityName(ability _ability) returns string
  // if (_ability == m_abilCritStrike)
  //   return "crit"
  // if (_ability == m_abilEvasion)
  //   return "evade"
  return "<unknown>"

// ============================================================================
function getAbilityFieldName(abilityreallevelfield field) returns string
  if (field == ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE)
    return "critchance"
  if (field == ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2)
    return "critmult"
  if (field == ABILITY_RLF_DAMAGE_BONUS_OCR3)
    return "critbonus"
  if (field == ABILITY_RLF_CHANCE_TO_EVADE_EEV1)
    return "evade"
  return "<unknown>"

// ============================================================================
function getAbilityFieldName(abilityintegerlevelfield field) returns string
  if (field == ABILITY_ILF_ATTACK_BONUS)
    return "attackbonus"
  return "<unknown>"

// ============================================================================
public function UnitPropertiesComponent.printDebug(Action1<string> print)
  print.acquire()
  let ownerUnit = this.getOwnerUnit()
  print.call("===== Unit Properties for {0}: =====".format(ownerUnit.getName()))
  for i = 0 to UnitProperties.count - 1
    print.call("{0} : {1}".format(UnitProperties.getPropertyFriendlyName(i castTo UnitProperty), this.getPropertyValueAsString(i castTo UnitProperty)))
  print.release()

// ============================================================================
public function IUnitMetadata.getUnitPropertiesComponent() returns UnitPropertiesComponent
  return this.getComponent(UnitPropertiesComponent.typeId) castTo UnitPropertiesComponent

// ============================================================================
public function IUnitMetadata.getOrAddUnitPropertiesComponent() returns UnitPropertiesComponent
  var component = this.getUnitPropertiesComponent()
  if (component == null)
    component = this.addComponent(new UnitPropertiesComponent(this)) castTo UnitPropertiesComponent
  return component

// ============================================================================
public function unit.getUnitPropertiesComponent() returns UnitPropertiesComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getUnitPropertiesComponent() : null

// ============================================================================
public function unit.getOrAddUnitPropertiesComponent() returns UnitPropertiesComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddUnitPropertiesComponent() : null

// ============================================================================
public function unit.hasProperty(UnitProperty property) returns bool
  let comp = this.getUnitPropertiesComponent()
  return comp != null and comp.hasProperty(property)

// ============================================================================
public function unit.getProperty(UnitProperty property) returns SmartValue
  let comp = this.getOrAddUnitPropertiesComponent()
  return comp != null ? comp.getProperty(property) : null

// ============================================================================
public function unit.getPropertyValue(UnitProperty property) returns real
  let comp = this.getUnitPropertiesComponent()
  return comp != null and comp.hasProperty(property) ? this.getProperty(property).getValue() : UnitProperties.getPropertyDefaultValue(property)

// ============================================================================
public function unit.getPropertyIntValue(UnitProperty property) returns int
  return this.getPropertyValue(property).toInt()

// ============================================================================
public function unit.getPropertyValueAsString(UnitProperty property) returns string
  return UnitProperties.formatPropertyValue(property, this.getPropertyValue(property))

// ============================================================================
function onDamageEventRelative()
  let source = DamageEvent.getSource()

  if (DamageEvent.getType() != DamageType.ATTACK)
    return

  let metadata = source.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getUnitPropertiesComponent()
  if (comp == null)
    return

  let target = DamageEvent.getTarget()

  if (target.isElite())
    if (target.isBoss())
      DamageEvent.setAmount(DamageEvent.getAmount() * comp.getPropertyValue(UnitProperty.DAMAGE_SCALAR_BOSS))
    else
      DamageEvent.setAmount(DamageEvent.getAmount() * comp.getPropertyValue(UnitProperty.DAMAGE_SCALAR_ELITE))
  else
    DamageEvent.setAmount(DamageEvent.getAmount() * comp.getPropertyValue(UnitProperty.DAMAGE_SCALAR_NORMAL))

// ============================================================================
function onDamageEventFinal()
  let source = DamageEvent.getSource()

  if (DamageEvent.getType() != DamageType.ATTACK)
    return

  let metadata = source.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getUnitPropertiesComponent()
  if (comp == null)
    return

  let target = DamageEvent.getTarget()

  // Apply lifesteal
  let lifesteal = comp.getPropertyValue(UnitProperty.LIFE_STEAL)
  if (lifesteal != 0.0)
    let damageDone = min(DamageEvent.getAmount(), target.getHP())
    let hpStolen = damageDone * lifesteal
    source.addHP(hpStolen)
    let amountHealed = max(source.getMaxHP() - source.getHP(), 0.0)
    if (amountHealed > 0.0)
      FX.createEffectOneShot("Abilities\\Spells\\Undead\\VampiricAura\\VampiricAuraTarget.mdl", source.getPos())

// ============================================================================
function onHeroLeveled()
  let comp = GetLevelingUnit().getUnitPropertiesComponent()
  if (comp != null)
    comp.onUnitLeveled()

// ============================================================================
function onUnitUpgradeFinished()
  let comp = GetTriggerUnit().getUnitPropertiesComponent()
  if (comp != null)
    comp.onUnitUpgraded()

// ============================================================================
class UpdateCritProperties extends Action2<UnitPropertiesComponent, UnitProperty>

  // --------------------------------------------------------------------------
  construct()
    acquire()

  // --------------------------------------------------------------------------
  override function call(UnitPropertiesComponent comp, UnitProperty _prop)
    let ownerUnit = comp.getOwnerUnit()
    let abil = ownerUnit.getAbility(ABILITY_ID_CRIT)
    if (abil != null)
      let lvl = 0
      ownerUnit.incAbilityLevel(ABILITY_ID_CRIT)
      setAbilityField(abil, ABILITY_RLF_CHANCE_TO_CRITICAL_STRIKE, lvl, comp.getPropertyValue(UnitProperty.CRIT_CHANCE_01) * 100.0)
      setAbilityField(abil, ABILITY_RLF_DAMAGE_MULTIPLIER_OCR2, lvl, comp.getPropertyValue(UnitProperty.CRIT_DAMAGE_SCALAR))
      setAbilityField(abil, ABILITY_RLF_DAMAGE_BONUS_OCR3, lvl, comp.getPropertyValue(UnitProperty.CRIT_DAMAGE_BONUS))
      ownerUnit.decAbilityLevel(ABILITY_ID_CRIT)

// ============================================================================
class UpdateEvadeChance extends Action2<UnitPropertiesComponent, UnitProperty>

  // --------------------------------------------------------------------------
  construct()
    acquire()

  // --------------------------------------------------------------------------
  override function call(UnitPropertiesComponent comp, UnitProperty _prop)
    let ownerUnit = comp.getOwnerUnit()
    let abil = ownerUnit.getAbility(ABILITY_ID_EVASION)
    if (abil != null)
      let lvl = 0
      ownerUnit.incAbilityLevel(ABILITY_ID_EVASION)
      setAbilityField(abil, ABILITY_RLF_CHANCE_TO_EVADE_EEV1, lvl, comp.getPropertyValue(UnitProperty.EVADE_CHANCE_01))
      ownerUnit.decAbilityLevel(ABILITY_ID_EVASION)

// ============================================================================
class UpdateAttackBonus extends Action2<UnitPropertiesComponent, UnitProperty>

  // --------------------------------------------------------------------------
  construct()
    acquire()

  // --------------------------------------------------------------------------
  override function call(UnitPropertiesComponent comp, UnitProperty _prop)
    let ownerUnit = comp.getOwnerUnit()
    let abil = ownerUnit.getAbility(ABILITY_ID_ATTACK_BONUS)
    if (abil != null)
      let lvl = 0
      ownerUnit.incAbilityLevel(ABILITY_ID_ATTACK_BONUS)
      setAbilityField(abil, ABILITY_ILF_ATTACK_BONUS, lvl, comp.getPropertyIntValue(UnitProperty.ATTACK_BONUS))
      ownerUnit.decAbilityLevel(ABILITY_ID_ATTACK_BONUS)

// ============================================================================
@compiletime function createCompiledObjects()
  
  new AbilityDefinitionCriticalStrikecreep(ABILITY_ID_CRIT)
  ..setName("STAT_CRIT")
  ..setLevels(2)
  ..setChancetoCriticalStrike(1, 0.0)
  ..setDamageMultiplier(1, 0.0)
  ..presetDamageBonus(lvl -> 0.0)
  
  new AbilityDefinitionEvasioncreep(ABILITY_ID_EVASION)
  ..setName("STAT_EVASION")
  ..setLevels(2)
  ..presetChancetoEvade(lvl -> 0.0)

  new AbilityDefinitionAttackBonusPlus1(ABILITY_ID_ATTACK_BONUS)
  ..setName("STAT_ATTACK_BONUS")
  ..setLevels(2)
  ..setItemAbility(false)
  ..presetAttackBonus(lvl -> 0)

// ============================================================================
init
  DamageEvent.addListener(DAMAGE_EVENT_PRIO_RELATIVE, () -> onDamageEventRelative())
  DamageEvent.addListener(DAMAGE_EVENT_PRIO_FINAL, () -> onDamageEventFinal())
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL, function onHeroLeveled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUnitUpgradeFinished)
    