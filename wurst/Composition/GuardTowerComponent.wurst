package GuardTowerComponent
import UnitComponent
import Events
import WorkstationComponent
import ObjectIdGenerator
import AbilityObjEditing
import Unit_GuardTower
import TooltipBuilder
import Range
import GameConstants
import Dice
import Math
import UnitExtensions

constant int        ACTIVE_SIGHT_ABILITY_ID               = compiletime(ABIL_ID_GEN.next())

constant rangeInt   GUARD_TOWER_ATTACK_RANGE              = rangeInt(400, 800)
constant rangeReal  GUARD_TOWER_ATTACK_COOLDOWN           = rangeReal(2, 0.25)
constant rangeInt   GUARD_TOWER_ATTACK_DAMAGE_BASE        = rangeInt(65, 200)

constant int        GUARD_TOWER_ACTIVE_ICON_ABILITY_ID    = compiletime(ABIL_ID_GEN.next())
constant int        GUARD_TOWER_INACTIVE_ICON_ABILITY_ID  = compiletime(ABIL_ID_GEN.next())

// ============================================================================
function getActiveAttackRange(int level) returns int
  return GUARD_TOWER_ATTACK_RANGE.lerp(RANGE_ONE_TO_TEN.parameterize01(level)).toInt()

// ============================================================================
function getAttackCooldown(int level) returns real
  return GUARD_TOWER_ATTACK_COOLDOWN.lerp(RANGE_ONE_TO_TEN.parameterize01(level))

// ============================================================================
function getDice(int level) returns dice
  let t = parameterize01(1, 10, level)
  return dice(GUARD_TOWER_ATTACK_DAMAGE_BASE.lerp(t).floor(), 1, 5)

// ============================================================================
function getDPSRange(int level) returns rangeInt
  let attacksPerSecond = 1.0 / getAttackCooldown(level)
  let guardTowerDamageDice = getDice(level)
  return rangeInt(guardTowerDamageDice.min(), guardTowerDamageDice.max()) * attacksPerSecond

// ============================================================================
@compiletime function createAbility()
  new AbilityDefinitionSightBonus(ACTIVE_SIGHT_ABILITY_ID)
  ..setSightRangeBonus(1, 800)

  let activeWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(true)..setDescription(g_guardTowerDefinition.getDescription())
  let inactiveWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(false)..setDescription(g_guardTowerDefinition.getDescription())

  let properties = new WorkstationOperatorBonusTooltipItem()
  ..addValue(lvl -> "{0}m range".format((getActiveAttackRange(lvl) * WORLD_TO_METERS).toInt().toString()))
  ..addValue(lvl -> "{0} dps".format(getDPSRange(lvl).toDamageRangeString()))
  activeWorkstationIconTooltipBuilder.addItem(properties)

  new AbilityActiveWorkstationIconDefinition(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID)
    ..setName("Guard Tower")
    ..presetTooltipNormalExtended(lvl -> activeWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  new AbilityInactiveWorkstationIconDefinition(GUARD_TOWER_INACTIVE_ICON_ABILITY_ID)
    ..setName("Guard Tower")
    ..presetTooltipNormalExtended(lvl -> inactiveWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  destroy activeWorkstationIconTooltipBuilder
  destroy inactiveWorkstationIconTooltipBuilder

// ============================================================================
public class GuardTowerComponent extends UnitComponent
  private _handle m_workedEnteredCallback = INVALID_HANDLE
  private _handle m_workedExitedCallback = INVALID_HANDLE
  private _handle m_workedLeveledCallback = INVALID_HANDLE
  private bool m_activated = false

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    
    let workstationComponent = getOwner().getOrAddWorkstationComponent()
    m_workedEnteredCallback = workstationComponent.onWorkedEntered().registerDispatched(this, () -> onWorkerEntered())
    m_workedExitedCallback = workstationComponent.onWorkedExited().registerDispatched(this, () -> onWorkedExited())
    m_workedLeveledCallback = workstationComponent.onWorkedLeveled().registerDispatched(this, () -> onWorkerLeveled())

    updateState()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let workstationComponent = getOwner().getWorkstationComponent()
    if (workstationComponent != null)
      workstationComponent.onWorkedEntered().unregister(m_workedEnteredCallback)
      workstationComponent.onWorkedExited().unregister(m_workedExitedCallback)
      workstationComponent.onWorkedLeveled().unregister(m_workedLeveledCallback)

    deactivate()
    
  // --------------------------------------------------------------------------
  private function onWorkerEntered()
    if (getNumberOfWorkers() == 1)
      activate()

  // --------------------------------------------------------------------------
  private function onWorkedExited()
    if (getNumberOfWorkers() == 0)
      deactivate()

  // --------------------------------------------------------------------------
  private function onWorkerLeveled()
    updateState()

  // --------------------------------------------------------------------------
  private function getNumberOfWorkers() returns int
    let workstationComponent = getOwner().getWorkstationComponent()
    return workstationComponent != null ? workstationComponent.getLoadedUnitCount() : 0

  // --------------------------------------------------------------------------
  private function activate()
    setActive(true)

  // --------------------------------------------------------------------------
  private function deactivate()
    setActive(false)

  // --------------------------------------------------------------------------
  private function setActive(bool active)
    if (m_activated == active)
      return
    m_activated = active
    updateState()

  // --------------------------------------------------------------------------
  private function updateState()

    let ownerUnit = getOwnerUnit()

    if (m_activated)
      ownerUnit.addAbility(ACTIVE_SIGHT_ABILITY_ID)
    else
      ownerUnit.removeAbility(ACTIVE_SIGHT_ABILITY_ID)

    ownerUnit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, m_activated)

    var operatorLevel = 1

    if (m_activated)
      let workstationComponent = getOwner().getWorkstationComponent()
      if (workstationComponent != null)
        operatorLevel = workstationComponent.getMaxOperatorLevel()

    ownerUnit.setFieldWeapon(UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN, 0, getAttackCooldown(operatorLevel))
    ownerUnit.setDamageRange(0, getDice(operatorLevel).toRange())

    if (m_activated)
      ownerUnit.removeAbility(GUARD_TOWER_INACTIVE_ICON_ABILITY_ID)
      ownerUnit.addAbility(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID)
      ownerUnit.setAbilityLevel(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID, operatorLevel)
    else
      ownerUnit.removeAbility(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID)
      ownerUnit.addAbility(GUARD_TOWER_INACTIVE_ICON_ABILITY_ID)

// ============================================================================
public function IUnitMetadata.getGuardTowerComponent() returns GuardTowerComponent
  return this.getComponent(GuardTowerComponent.typeId) castTo GuardTowerComponent

// ============================================================================
public function IUnitMetadata.getOrAddGuardTowerComponent() returns GuardTowerComponent
  var component = this.getGuardTowerComponent()
  if (component == null)
    component = this.addComponent(new GuardTowerComponent(this)) castTo GuardTowerComponent
  return component