package GuardTowerComponent
import UnitComponent
import Events
import WorkstationComponent
import ObjectIdGenerator
import AbilityObjEditing
import Unit_GuardTower
import TooltipBuilder
import Range
import Dice
import UnitExtensions
import ExperienceComponent
import FX
import RegisterEvents
import RealExtensions
import TlsUnitIds

constant int          ACTIVE_SIGHT_ABILITY_ID               = compiletime(ABIL_ID_GEN.next())
constant int array[3] GUARD_TOWER_ACTIVE_ICON_ABILITY_ID    = [compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next())]
constant int array[3] GUARD_TOWER_INACTIVE_ICON_ABILITY_ID  = [compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next())]

// ============================================================================
function getAttackRange(int operatorLevel) returns int
  return GUARD_TOWER_ATTACK_RANGE.lerp(RANGE_ONE_TO_TEN.parameterize(operatorLevel)).toInt().clamp(800, 1800)

// ============================================================================
function getOperatorAttackRangeIncrease(int operatorLevel) returns real
  return (getAttackRange(operatorLevel) / GUARD_TOWER_ATTACK_RANGE.min) - 1.0

// ============================================================================
function getAttackDamageBase(int towerLevel, int operatorLevel) returns real
  return GUARD_TOWER_ATTACK_DAMAGE_BASE[towerLevel].lerp(RANGE_ONE_TO_TEN.parameterize(operatorLevel))

// ============================================================================
function getOperatorAttackDamageBaseIncrease(int towerLevel, int operatorLevel) returns real
  return (getAttackDamageBase(towerLevel, operatorLevel) / GUARD_TOWER_ATTACK_DAMAGE_BASE[towerLevel].min) - 1.0

// ============================================================================
function getDice(int towerLevel, int operatorLevel) returns dice
  return dice(getAttackDamageBase(towerLevel, operatorLevel).floor(), 1, 5)

// ============================================================================
function getAttackCooldown(int towerLevel, int operatorLevel) returns real
  return GUARD_TOWER_ATTACK_COOLDOWN[towerLevel].lerp(RANGE_ONE_TO_TEN.parameterize(operatorLevel))

// ============================================================================
function getOperatorAttackSpeedIncrease(int towerLevel, int operatorLevel) returns real
  return (getAttackCooldown(towerLevel, 0) / getAttackCooldown(towerLevel, operatorLevel)) - 1.0

// ============================================================================
function createWorkstationAbilities(int towerLevel)
  let activeWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(true)..setDescription(g_guardTowerDefinition[towerLevel].getTooltipExtended())..setShowItemBullets(false)
  let inactiveWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(false)..setDescription(g_guardTowerDefinition[towerLevel].getTooltipExtended())..setShowItemBullets(false)

  let properties = new WorkstationOperatorBonusTooltipItem()
  ..addValue(lvl -> "+{0} attack range".format(getOperatorAttackRangeIncrease(lvl).toPercentageString01()))
  ..addValue(lvl -> "+{0} attack speed".format(getOperatorAttackSpeedIncrease(towerLevel, lvl).toPercentageString01()))
  ..addValue(lvl -> "+{0} base damage".format(getOperatorAttackSpeedIncrease(towerLevel, lvl).toPercentageString01()))
  activeWorkstationIconTooltipBuilder.addItem(properties)

  new AbilityActiveWorkstationIconDefinition(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID[towerLevel])
    ..setName(GUARD_TOWER_NAME[towerLevel])
    ..presetTooltipNormalExtended(lvl -> activeWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  new AbilityInactiveWorkstationIconDefinition(GUARD_TOWER_INACTIVE_ICON_ABILITY_ID[towerLevel])
    ..setName(GUARD_TOWER_NAME[towerLevel])
    ..presetTooltipNormalExtended(lvl -> inactiveWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  destroy activeWorkstationIconTooltipBuilder
  destroy inactiveWorkstationIconTooltipBuilder

// ============================================================================
@compiletime function createAbility()
  new AbilityDefinitionSightBonus(ACTIVE_SIGHT_ABILITY_ID)
  ..setSightRangeBonus(1, 800)

  for i = 0 to 2
    createWorkstationAbilities(i)

// ============================================================================
public class GuardTowerComponent extends UnitComponent
  private _handle m_workedEnteredCallback = INVALID_HANDLE
  private _handle m_workedExitedCallback = INVALID_HANDLE
  private _handle m_workedLeveledCallback = INVALID_HANDLE
  private bool m_activated = false

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    
    let workstationComponent = getOwner().getOrAddWorkstationComponent()
    m_workedEnteredCallback = workstationComponent.onWorkedEntered().registerDispatched(this, () -> onWorkerEntered())
    m_workedExitedCallback = workstationComponent.onWorkedExited().registerDispatched(this, () -> onWorkedExited())
    m_workedLeveledCallback = workstationComponent.onWorkedLeveled().registerDispatched(this, () -> onWorkerLeveled())

    updateState()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let workstationComponent = getOwner().getWorkstationComponent()
    if (workstationComponent != null)
      workstationComponent.onWorkedEntered().unregister(m_workedEnteredCallback)
      workstationComponent.onWorkedExited().unregister(m_workedExitedCallback)
      workstationComponent.onWorkedLeveled().unregister(m_workedLeveledCallback)

    deactivate()
    
  // --------------------------------------------------------------------------
  private function onWorkerEntered()

    let workstationComponent = getOwner().getOrAddWorkstationComponent()
    getOwnerUnit().setXpTarget(workstationComponent.getLoadedUnitAt(0))

    if (getNumberOfWorkers() == 1)
      activate()

  // --------------------------------------------------------------------------
  private function onWorkedExited()
    
    getOwnerUnit().clearXpTarget()

    if (getNumberOfWorkers() == 0)
      deactivate()

  // --------------------------------------------------------------------------
  private function onWorkerLeveled()
    updateState()

  // --------------------------------------------------------------------------
  private function getNumberOfWorkers() returns int
    let workstationComponent = getOwner().getWorkstationComponent()
    return workstationComponent != null ? workstationComponent.getLoadedUnitCount() : 0

  // --------------------------------------------------------------------------
  private function activate()
    setActive(true)

  // --------------------------------------------------------------------------
  private function deactivate()
    setActive(false)

  // --------------------------------------------------------------------------
  private function setActive(bool active)
    if (m_activated == active)
      return
    m_activated = active
    updateState()

  // --------------------------------------------------------------------------
  protected function updateState()

    let ownerUnit = getOwnerUnit()

    if (m_activated)
      ownerUnit.addAbility(ACTIVE_SIGHT_ABILITY_ID)
    else
      ownerUnit.removeAbility(ACTIVE_SIGHT_ABILITY_ID)

    ownerUnit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, m_activated)

    var towerLevel = 0

    switch (ownerUnit.getTypeId())
      case TlsUnitIds.guardTowers[1]
        towerLevel = 1
      case TlsUnitIds.guardTowers[2]
        towerLevel = 2

    var operatorLevel = 1

    if (m_activated)
      let workstationComponent = getOwner().getWorkstationComponent()
      if (workstationComponent != null)
        operatorLevel = workstationComponent.getMaxOperatorLevel()

    ownerUnit.setFieldWeapon(UNIT_WEAPON_RF_ATTACK_BASE_COOLDOWN, 0, getAttackCooldown(towerLevel, operatorLevel))
    ownerUnit.setDamageRange(0, getDice(towerLevel, operatorLevel).toRange())

    if (m_activated)
      for i = 0 to 2
        ownerUnit.removeAbility(GUARD_TOWER_INACTIVE_ICON_ABILITY_ID[i])
      ownerUnit.addAbility(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID[towerLevel])
      ownerUnit.setAbilityLevel(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID[towerLevel], operatorLevel)
    else
      for i = 0 to 2
        ownerUnit.removeAbility(GUARD_TOWER_ACTIVE_ICON_ABILITY_ID[i])
      ownerUnit.addAbility(GUARD_TOWER_INACTIVE_ICON_ABILITY_ID[towerLevel])

// ============================================================================
public function IUnitMetadata.getGuardTowerComponent() returns GuardTowerComponent
  return this.getComponent(GuardTowerComponent.typeId) castTo GuardTowerComponent

// ============================================================================
public function IUnitMetadata.getOrAddGuardTowerComponent() returns GuardTowerComponent
  var component = this.getGuardTowerComponent()
  if (component == null)
    component = this.addComponent(new GuardTowerComponent(this)) castTo GuardTowerComponent
  return component

// ============================================================================
function onUnitKilled()
  let killingUnit = GetKillingUnit()

  let metadata = killingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getGuardTowerComponent()
  if (comp == null or not comp.getEnabled())
    return

  let xpComp = metadata.getOrAddExperienceComponent()
  if (xpComp == null or not xpComp.getEnabled())
    return

  let xp = xpComp.getXpValueForKilledUnit(GetDyingUnit())

  // Just show the FX, the xp will be given to the operator elsewhere since it is the XP target of the tower
  FX.createGainedXPTag(killingUnit.getPos(), xp, killingUnit.getOwner())

// ============================================================================
function onUnitUpgraded()
  let upgradedUnit = GetTriggerUnit()

  let metadata = upgradedUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getGuardTowerComponent()
  if (comp != null)
    comp.updateState()
  
// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUnitUpgraded)