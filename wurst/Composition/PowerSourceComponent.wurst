package PowerSourceComponent
import UnitComponent
import initlater PoweredComponent
import Events
import HashList
import ClosureTimers

constant real SUB_POWER_INTERVAL = 1.0
HashList<unit> g_powerSources = new HashList<unit>()
CallbackPeriodic g_powerSourceTimer

// ============================================================================
public class PowerSourceComponent extends UnitComponent
  private HashList<PoweredComponent> m_consumers
  private int m_maxConsumers
  private real m_powerDepletionRatePerConsumer

  Event powerChanged

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)
    m_consumers = new HashList<PoweredComponent>()
    m_powerDepletionRatePerConsumer = 1.0
    powerChanged = new Event()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_consumers
    destroy powerChanged

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return PowerSourceComponent.typeId

  // --------------------------------------------------------------------------
  function getPower() returns real
    return getOwnerUnit().getMana()

  // --------------------------------------------------------------------------
  function setMaxConsumers(int value)
    m_maxConsumers = value

  // --------------------------------------------------------------------------
  function getMaxConsumers() returns int
    return m_maxConsumers

  // --------------------------------------------------------------------------
  function getConsumers() returns HashList<PoweredComponent>
    return m_consumers

  // --------------------------------------------------------------------------
  function getPowerDepletionRatePerConsumer() returns real
    return m_powerDepletionRatePerConsumer

  // --------------------------------------------------------------------------
  function setPowerDepletionRatePerConsumer(real value)
    m_powerDepletionRatePerConsumer = value

  // --------------------------------------------------------------------------
  function generatePower(real value)
    let ownerUnit = getOwnerUnit()
    let prevMana = ownerUnit.getMana()
    if (prevMana == ownerUnit.getMaxMana())
      return
    ownerUnit.addMana(value)
    powerChanged.call()

  // --------------------------------------------------------------------------
  function tryGetPower(real power) returns real
    let ownerUnit = getOwnerUnit()
    let mana = ownerUnit.getMana()
    let maxMana = ownerUnit.getMaxMana()
    let powerToGive = min(power, maxMana - mana)
    if (powerToGive > 0)
      ownerUnit.subMana(powerToGive)
    return powerToGive

  // --------------------------------------------------------------------------
  function tryLink(PoweredComponent powerConsumer) returns bool
    if (m_consumers.size() == m_maxConsumers)
      return false
    link(powerConsumer)
    return true

  // --------------------------------------------------------------------------
  private function link(PoweredComponent consumer)
    m_consumers.add(consumer)

  // --------------------------------------------------------------------------
  function unlink(PoweredComponent consumer)
    m_consumers.remove(consumer)

  // --------------------------------------------------------------------------
  protected function subPower()
    let mana = m_powerDepletionRatePerConsumer * m_consumers.size()
    getOwnerUnit().subMana(mana)

// ============================================================================
public function IUnitMetadata.getPowerSourceComponent() returns PowerSourceComponent
  return this.getComponent(typeInfo(PowerSourceComponent.typeId)) castTo PowerSourceComponent

// ============================================================================
public function IUnitMetadata.getOrAddPowerSourceComponent() returns PowerSourceComponent
  var component = this.getPowerSourceComponent()
  if (component == null)
    component = this.addComponent(new PowerSourceComponent(this)) castTo PowerSourceComponent
  return component

// ============================================================================
public function unit.getPowerSourceComponent() returns PowerSourceComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    return null
  return metadata.getPowerSourceComponent()

// ============================================================================
public function unit.getOrAddPowerSourceComponent() returns PowerSourceComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    return null
  return metadata.getOrAddPowerSourceComponent()

// ============================================================================
function subPower()
  for powerSource in g_powerSources
    let comp = powerSource.getPowerSourceComponent()
    if (comp != null)
      comp.subPower()

// ============================================================================
function registerActiveGenerator(unit generator)
  g_powerSources.add(generator)
  
  if (g_powerSources.size() == 1 and g_powerSourceTimer == null)
    g_powerSourceTimer = doPeriodically(SUB_POWER_INTERVAL, (CallbackPeriodic cb) -> subPower())

// ============================================================================
function unregisterActiveGenerator(unit generator)
  g_powerSources.remove(generator)
  
  if (g_powerSources.size() == 0 and g_powerSourceTimer != null)
    destroy g_powerSourceTimer
    g_powerSourceTimer = null