package Composition
import Type

// ============================================================================
public interface IComposite
  function addComponent(IComponent component) returns IComponent
  function getComponent(Type componentType) returns IComponent

// ============================================================================
public interface IComponent
  function getOwner() returns IComposite
  function setEnabled(bool enabled)
  function getEnabled() returns bool

// ============================================================================
public abstract class Component implements IComponent
  protected IComposite _owner
  private bool _enabled

  // --------------------------------------------------------------------------
  construct(IComposite owner)
    _owner = owner

  // --------------------------------------------------------------------------
  ondestroy
    onDisabled()

  // --------------------------------------------------------------------------
  override function getOwner() returns IComposite
    return _owner

  // --------------------------------------------------------------------------
  override function setEnabled(bool enabled)
    if (_enabled != enabled)
      if (enabled)
        onEnabled()
      else
        onDisabled()
      _enabled = enabled

  // --------------------------------------------------------------------------
  override function getEnabled() returns bool
    return _enabled

  // --------------------------------------------------------------------------
  function initialize()
    skip

  // --------------------------------------------------------------------------
  function onEnabled()
    skip

  // --------------------------------------------------------------------------
  function onDisabled()
    skip
