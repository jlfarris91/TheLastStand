package RealtimeUnitComponent
import UnitComponent
import ClosureTimers
import Pool

Pool<RealtimeUnitComponent> g_realtimeComponents
Pool<RealtimeUnitComponent> g_fastComponents
Pool<RealtimeUnitComponent> g_backgroundComponents

// ============================================================================
public abstract class RealtimeUnitComponent extends UnitComponent
  private poolHandle m_poolHandle

  static constant real REALTIME_UPDATE_INTERVAL = ANIMATION_PERIOD
  static constant real FAST_UPDATE_INTERVAL = 0.1
  static constant real BACKGROUND_UPDATE_INTERVAL = 0.4

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  ondestroy
    unregisterForUpdate()

  // --------------------------------------------------------------------------
  function update(real _dt)
    skip

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unregisterForUpdate()

  // --------------------------------------------------------------------------
  protected function registerForRealtimeUpdate()
    unregisterForUpdate()
    m_poolHandle = g_realtimeComponents.reserve(this)

  // --------------------------------------------------------------------------
  protected function registerForFastUpdate()
    unregisterForUpdate()
    m_poolHandle = g_fastComponents.reserve(this)

  // --------------------------------------------------------------------------
  protected function registerForBackgroundUpdate()
    unregisterForUpdate()
    m_poolHandle = g_backgroundComponents.reserve(this)

  // --------------------------------------------------------------------------
  protected function unregisterForUpdate()
    if (m_poolHandle == INVALID_POOL_HANDLE)
      return

    if (g_realtimeComponents.isHandleValid(m_poolHandle))
      g_realtimeComponents.release(m_poolHandle)
    else if (g_fastComponents.isHandleValid(m_poolHandle))
      g_fastComponents.release(m_poolHandle)
    else if (g_backgroundComponents.isHandleValid(m_poolHandle))
      g_backgroundComponents.release(m_poolHandle)

    m_poolHandle = INVALID_POOL_HANDLE

// ============================================================================
function updateComponents(Pool<RealtimeUnitComponent> pool, real dt)
  for ph in pool
    if (pool.isHandleValid(ph))
      let comp = pool.get(ph)
      if (comp != null)
        comp.update(dt)

// ============================================================================
init
  g_realtimeComponents = new Pool<RealtimeUnitComponent>(256)
  g_fastComponents = new Pool<RealtimeUnitComponent>(256)
  g_backgroundComponents = new Pool<RealtimeUnitComponent>(256)

  let animationTimer = CreateTimer()
  animationTimer.doPeriodically(RealtimeUnitComponent.REALTIME_UPDATE_INTERVAL) (CallbackPeriodic cb) ->
    updateComponents(g_realtimeComponents, RealtimeUnitComponent.REALTIME_UPDATE_INTERVAL)

  let fastTimer = CreateTimer()
  fastTimer.doPeriodically(RealtimeUnitComponent.FAST_UPDATE_INTERVAL) (CallbackPeriodic cb) ->
    updateComponents(g_fastComponents, RealtimeUnitComponent.FAST_UPDATE_INTERVAL)

  let backgroundTimer = CreateTimer()
  backgroundTimer.doPeriodically(RealtimeUnitComponent.BACKGROUND_UPDATE_INTERVAL) (CallbackPeriodic cb) ->
    updateComponents(g_backgroundComponents, RealtimeUnitComponent.BACKGROUND_UPDATE_INTERVAL)