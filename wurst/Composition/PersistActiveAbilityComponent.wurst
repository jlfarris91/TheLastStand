package PersistActiveAbilityComponent
import UnitMetadata
import Orders
import TlsAbilityIds
import RegisterEvents
import HashMap
import Vector

IterableMap<int, Vector<int>> g_orderIdToAbilityId = new IterableMap<int, Vector<int>>()
IterableMap<int, int> g_abilityIdToActivateOrderId = new IterableMap<int, int>()
IterableMap<int, int> g_abilityIdToDeactivateOrderId = new IterableMap<int, int>()

// ============================================================================
public class PersistActiveAbilityComponent extends UnitComponent
  private IterableMap<int, bool> m_abilityStates
  private bool m_upgradingUnit
  
  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_abilityStates = new IterableMap<int, bool>()
    m_upgradingUnit = false

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_abilityStates
    m_abilityStates = null
    

  // --------------------------------------------------------------------------
  function getAbilityActiveState(int abilityId) returns bool
    return m_abilityStates.has(abilityId) and m_abilityStates.get(abilityId)

  // --------------------------------------------------------------------------
  function setAbilityActiveState(int abilityId, bool value)
    if (m_upgradingUnit)
      return
    m_abilityStates.put(abilityId, value)

  // --------------------------------------------------------------------------
  function issueAbilityActivationOrder(int abilityId)
    if (g_abilityIdToActivateOrderId.has(abilityId))
      let orderId = g_abilityIdToActivateOrderId.get(abilityId)
      getOwnerUnit().issueImmediateOrderById(orderId)

  // --------------------------------------------------------------------------
  function issueAbilityDeactivationOrder(int abilityId)
    if (g_abilityIdToDeactivateOrderId.has(abilityId))
      let orderId = g_abilityIdToDeactivateOrderId.get(abilityId)
      getOwnerUnit().issueImmediateOrderById(orderId)

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()
    m_upgradingUnit = false
    updateAbilityStates()

  // --------------------------------------------------------------------------
  function setUpgradingUnit(bool value)
    if (m_upgradingUnit != value)
      m_upgradingUnit = value
      if (m_upgradingUnit == false)
        updateAbilityStates()
  
  // --------------------------------------------------------------------------
  function getUpgradingUnit() returns bool
    return m_upgradingUnit
  
  // --------------------------------------------------------------------------
  function updateAbilityStates()
    let ownerUnit = getOwnerUnit()

    for abilityId in m_abilityStates
      if (ownerUnit.hasAbility(abilityId))
        ownerUnit.issueImmediateOrderById(getActiveOrderId(abilityId))

  // --------------------------------------------------------------------------
  private function getActiveOrderId(int abilityId) returns int
    return getAbilityActiveState(abilityId)
           ? g_abilityIdToActivateOrderId.get(abilityId)
           : g_abilityIdToDeactivateOrderId.get(abilityId)

// ============================================================================
public function IUnitMetadata.getPersistActiveAbilityComponent() returns PersistActiveAbilityComponent
  return this.getComponent(PersistActiveAbilityComponent.typeId) castTo PersistActiveAbilityComponent

// ============================================================================
public function IUnitMetadata.getOrAddPersistActiveAbilityComponent() returns PersistActiveAbilityComponent
  var component = this.getPersistActiveAbilityComponent()
  if (component == null)
    component = this.addComponent(new PersistActiveAbilityComponent(this)) castTo PersistActiveAbilityComponent
  return component

// ============================================================================
public function registerActiveAbility(int abilityId, int activateOrderId, int deactivateOrderId)
  
  var abilityIds = g_orderIdToAbilityId.get(activateOrderId)
  if (abilityIds == null)
    abilityIds = new Vector<int>()
    g_orderIdToAbilityId.put(activateOrderId, abilityIds)
  abilityIds.add(abilityId)

  abilityIds = g_orderIdToAbilityId.get(deactivateOrderId)
  if (abilityIds == null)
    abilityIds = new Vector<int>()
    g_orderIdToAbilityId.put(deactivateOrderId, abilityIds)
  abilityIds.add(abilityId)

  g_abilityIdToActivateOrderId.put(abilityId, activateOrderId)
  g_abilityIdToDeactivateOrderId.put(abilityId, deactivateOrderId)

// ============================================================================
function onUnitIssuedOrder()
  let orderedUnit = GetOrderedUnit()
  let orderId = GetIssuedOrderId()

  if (not g_orderIdToAbilityId.has(orderId))
    return

  let metadata = orderedUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getPersistActiveAbilityComponent()
  if (comp == null or not comp.getEnabled())
    return
  
  let abilityIds = g_orderIdToAbilityId.get(orderId)

  for abilityId in abilityIds
    let activateOrderId = g_abilityIdToActivateOrderId.get(abilityId)
    comp.setAbilityActiveState(abilityId, orderId == activateOrderId)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, function onUnitIssuedOrder)

  // Register active abilities
  registerActiveAbility(TlsAbilityIds.basicRepair, OrderIds.repairon, OrderIds.repairoff)
  registerActiveAbility(TlsAbilityIds.builderBasicRepair, OrderIds.repairon, OrderIds.repairoff)
  registerActiveAbility(TlsAbilityIds.builderSkilledRepair, OrderIds.repairon, OrderIds.repairoff)
  registerActiveAbility(TlsAbilityIds.priestHeal, OrderIds.healon, OrderIds.healoff)
  registerActiveAbility(TlsAbilityIds.priestSlow, OrderIds.slowon, OrderIds.slowoff)
  registerActiveAbility(TlsAbilityIds.priestInnerFire, OrderIds.innerfireon, OrderIds.innerfireoff)
  registerActiveAbility(TlsAbilityIds.militiaDefend, OrderIds.defend, OrderIds.undefend)
  registerActiveAbility(TlsAbilityIds.spearmanEnsnare, OrderIds.ensnareon, OrderIds.ensnareoff)
  registerActiveAbility(TlsAbilityIds.spearmanHawkeye, OrderIds.faeriefireon, OrderIds.faeriefireoff)
  registerActiveAbility(TlsAbilityIds.marksmanStimshot, OrderIds.bloodluston, OrderIds.bloodlustoff)