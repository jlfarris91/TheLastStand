package BuildingUndeadTargetComponent
import UnitMetadata
import Action
import PathChecker
import Spawning
import UnitExtensions
import GroupUtils
import ColorUtility
import ClosureTimers
import PlayerSpawnPointProviders
import Range
import ProjectConstants
import HumanPlayerComponent
import DebuggerDialog
import Frame
import Host
import PlayerExtensions
import UndeadTargetingComponent

@configurable public bool g_enableBUTCDebugging = false

Action1<PathCheckerComponent> g_pathCheckCompleteCallback
constant rangeReal PATH_CHECK_COOLDOWN_RANGE = rangeReal(3.0, 5.0)
public BUTCDebugger g_butcDebugger

// ============================================================================
public class BuildingUndeadTargetComponent extends UnitComponent
  private unit m_pathChecker
  private SpawnPointProvider m_spawnPointManager
  private bool m_affectUTCTargetOrganic = false
  protected PathCheckerStatus m_pathStatus = UNDETERMINED
  protected bool m_searching = false
  protected real m_searchingAgainIn = 0.0

  // Only used when debugging
  protected real m_searchingElapsedTime = 0

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  function getIsPathableFromHostileSpawn() returns bool
    return m_pathStatus == FOUND

  // --------------------------------------------------------------------------
  function setAffectUTCTargetOrganic(bool value)
    m_affectUTCTargetOrganic = value

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    m_spawnPointManager = getHostileSpawnPointProviderForPlayer(getOwnerUnit().getOwner())

    setFoundPath(PathCheckerStatus.NOT_FOUND)
    startPathCheck()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    destroyPathChecker()

  // --------------------------------------------------------------------------
  override function onOwnerRevived()
    super.onOwnerRevived()
    
    setFoundPath(PathCheckerStatus.NOT_FOUND)
    startPathCheck()

  // --------------------------------------------------------------------------
  private function setFoundPath(PathCheckerStatus foundPath)
    if (m_pathStatus != foundPath)
      m_pathStatus = foundPath
      updateUTCStatus()
    if (g_enableBUTCDebugging)
      getOwnerUnit().setVertexColor(foundPath == FOUND ? Colors.green : Colors.red)
    if (m_affectUTCTargetOrganic)
      let humanPlayerComp = getOwnerUnit().getOwner().getHumanPlayerComponent()
      if (humanPlayerComp != null)
        humanPlayerComp.setCanPathToHeadquartersOrHero(foundPath == FOUND)

  // --------------------------------------------------------------------------
  protected function getPathCheckerActive() returns bool
    if (m_pathChecker == null)
      return false
    let comp = m_pathChecker.getPathCheckerComponent()
    return comp != null and comp.getEnabled()

  // --------------------------------------------------------------------------
  protected function startPathCheck_Delayed()
    m_searchingAgainIn = PATH_CHECK_COOLDOWN_RANGE.getRandom()
    this.dispatchAfter(m_searchingAgainIn, () -> startPathCheck())

  // --------------------------------------------------------------------------
  protected function startPathCheck()

    let ownerUnit = getOwnerUnit()
    if (ownerUnit == null)
      Log.error("[BUTC] ownerUnit is null")
      return

    if (ownerUnit.isAliveTrick() == false)
      setFoundPath(PathCheckerStatus.NOT_FOUND)
      return

    let spawnPosResult = m_spawnPointManager.getRandomSpawnPointInRange(ownerUnit.getPos(), SpawnRange.CLOSE.toRangeReal())
    if (spawnPosResult.succeeded == false)
      Log.debug("Could not find spawn point for path checker")
      startPathCheck_Delayed()
      return

    if (m_pathChecker == null)
      createPathChecker()
      
    // Log.debug("Starting path check for " + ownerUnit.getName())

    m_pathChecker.getPathCheckerComponent()
    ..setCallback(g_pathCheckCompleteCallback)
    ..setTargetUnit(ownerUnit)
    ..activate(spawnPosResult.spawnPoint)

    m_searching = true
    m_searchingElapsedTime = 0.0
    m_searchingAgainIn = 0.0

  // --------------------------------------------------------------------------
  private function createPathChecker()
    if (m_pathChecker != null)
      return
    m_pathChecker = PathChecker.getPathChecker()
    m_pathChecker.getPathCheckerComponent().setAutoDestroy(false)

  // --------------------------------------------------------------------------
  protected function onPathCheckComplete(PathCheckerStatus status)
    // Log.debug((foundPath ? "Found" : "Did not find") + " path for unit " + getOwnerUnit().getName() + " : " + foundPath.toString())
    setFoundPath(status)

    // Continuously path check
    startPathCheck_Delayed()

    m_searching = false

  // --------------------------------------------------------------------------
  private function updateUTCStatus()
    let ownerUnit = getOwnerUnit()
    
    let targetProvider = getUndeadTargetProviderForPlayer(ownerUnit.getOwner())
    if (targetProvider == null)
      return
    
    if (m_pathStatus == PathCheckerStatus.FOUND)
      targetProvider.registerPlayerUnit(ownerUnit)
    else
      targetProvider.unregisterPlayerUnit(ownerUnit)

  // --------------------------------------------------------------------------
  private function destroyPathChecker()
    if (m_pathChecker != null)
      let comp = m_pathChecker.getPathCheckerComponent()
      if (comp != null)
        comp.release()
      m_pathChecker = null

  // --------------------------------------------------------------------------
  static function runPathCheckersForAllStructures(player ownerPlayer)
    let temp = getGroup()
    temp.enumUnitsOfPlayer(ownerPlayer, null)
    for u in temp
      if (u.isBuilding())
        let metadata = u.getMetadata()
        if (metadata != null)
          let comp = metadata.getBuildingUndeadTargetComponent()
          if (comp != null)
            comp.startPathCheck()
    temp.release()

// ============================================================================
public function IUnitMetadata.getBuildingUndeadTargetComponent() returns BuildingUndeadTargetComponent
  return this.getComponent(BuildingUndeadTargetComponent.typeId) castTo BuildingUndeadTargetComponent

// ============================================================================
public function IUnitMetadata.getOrAddBuildingUndeadTargetComponent() returns BuildingUndeadTargetComponent
  var component = this.getBuildingUndeadTargetComponent()
  if (component == null)
    component = this.addComponent(new BuildingUndeadTargetComponent(this)) castTo BuildingUndeadTargetComponent
  return component

// ============================================================================
class BUTCDebugger extends DebuggerRealtimeUpdateFrame
  private group m_contextUnitGroup = CreateGroup()

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("TEXTAREA", "BUTCDebugger", GAME_UI, "", 0))

  // --------------------------------------------------------------------------
  ondestroy
    m_contextUnitGroup.destr()

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real dt)

    let frameHandle = getFrameHandle()

    let selectedUnit = g_HostPlayer.getFirstSelectedUnit()
    if (selectedUnit == null)
      frameHandle.setOrAddText("Select a unit")
      return

    let selectedPlayer = selectedUnit.getOwner()

    frameHandle.setOrAddText("===== BUTC {0} =====".format(selectedPlayer.getName()))

    m_contextUnitGroup.enumUnitsOfPlayer(selectedPlayer, null)

    for u in m_contextUnitGroup
    //{
      let metadata = u.getMetadata()
      if (metadata != null)
        let comp = metadata.getBuildingUndeadTargetComponent()
        if (comp != null)
        //{
          string status
          switch (comp.m_pathStatus)
            case UNDETERMINED
              status = "Undetermined".colorize(Colors.grey)
            case NOT_FOUND
              status = "No path".colorize(Colors.red)
            case FOUND
              status = "Found path".colorize(Colors.green)
            case TIMEDOUT
              status = "Timedout".colorize(Colors.yellow)

          string extraData = ""

          if (comp.m_searching)
            comp.m_searchingElapsedTime += dt
            extraData = " Searching... {0}s".format(comp.m_searchingElapsedTime.toInt().toString())

          if (comp.m_searchingAgainIn != 0.0)
            extraData = " Searching again in {0}s...".format(comp.m_searchingAgainIn.toString())
        
          frameHandle.setOrAddText("{0} : {1} {2}".format(u.getName(), status, extraData))
        //}
    //}

// ============================================================================
init

  g_pathCheckCompleteCallback = (PathCheckerComponent pathChecker) ->
    let targetUnit = pathChecker.getTargetUnit()
    if (targetUnit != null)
      let metadata = targetUnit.getMetadata()
      if (metadata != null)
        let comp = metadata.getBuildingUndeadTargetComponent()
        if (comp != null)
          comp.onPathCheckComplete(pathChecker.getStatus())
  g_pathCheckCompleteCallback.acquire() // keep alive

  if (DEV_ENVIRONMENT)
    DebuggerDialog.registerFrame("BUTC", () -> new BUTCDebugger())