package WorkstationComponent
import UnitComponent
import Events
import Loaded
import Orders
import SurvivorComponent
import SurvivorJobs
import TooltipBuilder
import ColorUtility
import StringBuilder
import Icons
import Func
import ErrorHandling
import HashList
import Suspend
import SoundUtils
import ChannelAbilityPreset
import TlsAbilityIds
import ClosureEvents
import BuffObjEditing

constant SoundDefinition g_loadingSoundDef = new SoundDefinition(Sounds.loading, false, true)

constant buffTuple WORKSTATION_ACTIVE_BUFF = compiletime(createDummyBuffObject("Workstation Active", "This workstation is actively being operated by a survivor", Icons.bTNEngineeringUpgrade, "abilities\\workstation\\workstationactive.mdl", "origin"))

// ============================================================================
public class WorkstationComponent extends UnitComponent
  private group m_loadedUnits
  private HashList<int> m_allowedUnitTypes
  private int m_maxUnits = 1
  private timer m_soundTimer
  
  Event workerEntered
  Event workerExited
  Event workerLeveled

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)
    workerEntered = new Event()
    workerExited = new Event()
    workerLeveled = new Event()

  // --------------------------------------------------------------------------
  ondestroy
    if (m_loadedUnits != null)
      m_loadedUnits.destr()
      m_loadedUnits = null

    if (m_allowedUnitTypes != null)
      destroy m_allowedUnitTypes
      m_allowedUnitTypes = null

    if (m_soundTimer != null)
      m_soundTimer.destr()
      m_soundTimer = null

    destroy workerEntered
    destroy workerExited
    destroy workerLeveled

  // --------------------------------------------------------------------------
  function setMaxUnits(int value)
    if (m_maxUnits != value)
      m_maxUnits = max(value, 0)

      if (m_loadedUnits != null)
        while (m_loadedUnits.size() > m_maxUnits)
          unloadUnit(m_loadedUnits.getUnitAt(m_loadedUnits.size()-1))

  // --------------------------------------------------------------------------
  function getMaxUnits() returns int
    return m_maxUnits

  // --------------------------------------------------------------------------
  function addAllowedUnitType(int unitTypeId)
    getAllowedUnitTypes().add(unitTypeId)

  // --------------------------------------------------------------------------
  function isUnitLoaded(unit u) returns bool
    return m_loadedUnits != null and m_loadedUnits.contains(u)

  // --------------------------------------------------------------------------
  function getLoadedUnitCount() returns int
    return m_loadedUnits.size()

  // --------------------------------------------------------------------------
  function getMaxOperatorLevel() returns int
    var level = 1
    for _unit in m_loadedUnits
      let operator = _unit.getSurvivorJobComponent(SurvivorJobs.operator)
      if (operator != null)
        level = max(level, operator.getLevel())
    return level

  // --------------------------------------------------------------------------
  function loadUnit(unit u) returns bool
    
    if (isUnitLoaded(u))
      error("Unit is already loaded into workstation")
      return false
    
    if (m_loadedUnits != null and m_loadedUnits.size() >= m_maxUnits)
      DisplayTextToPlayer(getOwnerUnit().getOwner(), 0, 0, "Workstation is full".colorize(Colors.red))
      return false

    if (m_allowedUnitTypes != null and m_allowedUnitTypes.isEmpty() and not m_allowedUnitTypes.has(u.getTypeId()))
      DisplayTextToPlayer(getOwnerUnit().getOwner(), 0, 0, u.getName() + " cannot operate this Workstation".colorize(Colors.red))
      return false

    onUnitLoaded(u)
    return true

  // --------------------------------------------------------------------------
  function unloadUnit(unit u) returns bool
    if (isUnitLoaded(u) == false)
      error("Unit is not loaded into workstation")
      return false
    onUnitUnloaded(u)
    return true

  // --------------------------------------------------------------------------
  function unloadAllUnits()
    if (m_loadedUnits != null)
      while (m_loadedUnits.isEmpty() == false)
        unloadUnit(m_loadedUnits.getUnitAt(0))

  // --------------------------------------------------------------------------
  override protected function onDisabled()
    super.onDisabled()
    unloadAllUnits()

  // --------------------------------------------------------------------------
  protected function onWorkerLeveled(unit worker)
    if (not m_loadedUnits.contains(worker))
      return
    workerLeveled.call()

  // --------------------------------------------------------------------------
  private function onUnitLoaded(unit u)
    getLoadedUnits().addUnit(u)
    u.hide()
    u.setInvulnerable(true)
    u.suspend()
    playSound()
    workerEntered.call()
    
    if (getLoadedUnitCount() == 1)
      let ownerUnit = getOwnerUnit()
      ownerUnit.addAnimationProperties("work")
      ownerUnit.addAbility(WORKSTATION_ACTIVE_BUFF.abilId)

  // --------------------------------------------------------------------------
  private function onUnitUnloaded(unit u)
    getLoadedUnits().removeUnit(u)
    u.unsuspend()
    u.setInvulnerable(false)
    u.show()
    playSound()
    workerExited.call()

    if (getLoadedUnitCount() == 0)
      let ownerUnit = getOwnerUnit()
      ownerUnit.removeAnimationProperties("work")
      ownerUnit.removeAbility(WORKSTATION_ACTIVE_BUFF.abilId)
      ownerUnit.removeAbility(WORKSTATION_ACTIVE_BUFF.buffId)

  // --------------------------------------------------------------------------
  private function getLoadedUnits() returns group
    if (m_loadedUnits == null)
      m_loadedUnits = CreateGroup()
    return m_loadedUnits

  // --------------------------------------------------------------------------
  private function getAllowedUnitTypes() returns HashList<int>
    if (m_allowedUnitTypes == null)
      m_allowedUnitTypes = new HashList<int>()
    return m_allowedUnitTypes

  // --------------------------------------------------------------------------
  private function playSound()
    if (m_soundTimer == null)
      m_soundTimer = CreateTimer()
    if (m_soundTimer.getRemaining() > 0.0)
      return
    m_soundTimer.start(1.0, null)
    g_loadingSoundDef.playOnPoint(getOwnerUnit().getPos().withTerrainZ())

// ============================================================================
public function IUnitMetadata.getWorkstationComponent() returns WorkstationComponent
  return this.getComponent(WorkstationComponent.typeId) castTo WorkstationComponent

// ============================================================================
public function IUnitMetadata.getOrAddWorkstationComponent() returns WorkstationComponent
  var component = this.getWorkstationComponent()
  if (component == null)
    component = this.addComponent(new WorkstationComponent(this)) castTo WorkstationComponent
  return component

// ============================================================================
/*
    [Workstation - Active]
    A unit is currently operating this Workstation.

    [Operator Bonuses]
    + 10% sight range
    + 10% bonus damage to target
*/
public class WorkstationIconTooltipBuilder extends TooltipBuilder
  private bool m_active

  // --------------------------------------------------------------------------
  construct(bool active)
    m_active = active

  // --------------------------------------------------------------------------
  override function getDescription(int level) returns string
    let sb = new StringBuilder()

    let desc = super.getDescription(level)
    if (desc != null)
      sb.appendLine(desc)
      sb.appendLine()
    
    if (m_active)
      sb.appendLine("A unit is currently operating this Workstation.".colorize(Colors.gold))
    else
      sb.appendLine("Load a unit into this Workstation to begin operations.".colorize(Colors.gold))

    sb.appendLine()
    
    return sb.toStringAndDestroy()

  // --------------------------------------------------------------------------
  override function getTooltipExtended(int level) returns string
    let sb = new StringBuilder()

    let desc = getDescription(level)
    if (desc != null)
      sb.appendLine(desc)
      sb.appendLine()

    sb.appendLine(super.getTooltipExtended(level))

    return sb.toStringAndDestroy()

// ============================================================================
public class WorkstationOperatorBonusTooltipItem extends TooltipItem
  private static Func1<int, string> s_nameGetter = null

  // --------------------------------------------------------------------------
  construct()
    super(getStaticNameGetter())

  // --------------------------------------------------------------------------
  private static function getStaticNameGetter() returns Func1<int, string>
    if (s_nameGetter == null)
      s_nameGetter = (int lvl) -> "[Operator Bonuses Lvl {0}]".format(lvl.toString())
      s_nameGetter.acquire() // keep alive forever
    return s_nameGetter

// ============================================================================
public class AbilityActiveWorkstationIconDefinition extends AbilityDefinition

  // --------------------------------------------------------------------------
  construct(int newId)
    super (newId, 'Ahan')
    setLevels(10)
    setButtonPositionNormalX(0)
    setButtonPositionNormalY(2)
    setIconNormal(Icons.bTNEngineeringUpgrade)
    presetTooltipNormal(lvl -> "Workstation {0}".format("Active".colorize(Colors.green)))

// ============================================================================
public class AbilityInactiveWorkstationIconDefinition extends AbilityDefinition

  // --------------------------------------------------------------------------
  construct(int newId)
    super (newId, 'Ahan')
    setLevels(1)
    setButtonPositionNormalX(0)
    setButtonPositionNormalY(2)
    setIconNormal(Icons.dISBTNEngineeringUpgrade)
    setTooltipNormal(1, "Workstation {0}".format("Inactive".colorize(Colors.gray)))

// ============================================================================
function onLoadUnitAbilCast(unit caster, unit target)

  let metadata = caster.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp == null)
    return

  comp.loadUnit(target)

// ============================================================================
function onUnloadAllAbilCast(unit caster)

  let metadata = caster.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp == null)
    return

  comp.unloadAllUnits()

// ============================================================================
function onUnitIssuedTargetOrder()
  let orderId = GetIssuedOrderId()
  if (orderId != OrderIds.smart)
    return

  let orderedUnit = GetOrderedUnit()
  let targetUnit = GetOrderTargetUnit()

  let targetUnitMetadata = targetUnit.getMetadata()
  if (targetUnitMetadata != null)
    let workstationComponent = targetUnitMetadata.getWorkstationComponent()
    if (workstationComponent != null)
      targetUnit.issueTargetOrderById(OrderIds.load, orderedUnit)

// ============================================================================
function onUnitLeveled()
  let levelingUnit = GetLevelingUnit()

  let holdingUnit = getTransportUnit(levelingUnit)
  if (holdingUnit == null)
    return

  let metadata = holdingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp != null)
    comp.onWorkerLeveled(levelingUnit)

// ============================================================================
@compiletime function createObjects()

  new ChannelAbilityPreset(TlsAbilityIds.workstationLoadUnit, 1, true)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..presetTargetTypes(Targettype.UNIT)
    ..removeChannelProperties(true, true)
    ..presetBaseOrderID((lvl) -> "load")
    ..setIconNormal(Icons.bTNLoad)
    ..setName("Load Unit")
    ..setTooltipNormal(1, "Load Unit")
    ..setTooltipNormalExtended(1, "Loads a targeted friendly land unit.")
    ..presetCastRange((int lvl) -> 80.0)
    ..presetTargetsAllowed((int lvl) -> "ground,friend,vulnerable,invulnerable")
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(2)
    ..setHotkeyNormal("L")

  new ChannelAbilityPreset(TlsAbilityIds.workstationUnloadUnit, 1, true)
    ..setHeroAbility(false)
    ..setItemAbility(false)
    ..presetTargetTypes(Targettype.NONE)
    ..removeChannelProperties(true, true)
    ..presetBaseOrderID((lvl) -> "unload")
    ..setIconNormal(Icons.bTNUnLoad)
    ..setName("Unload All")
    ..setTooltipNormal(1, "Unload All")
    ..setTooltipNormalExtended(1, "Unload all units.")
    ..presetCastRange((int lvl) -> 80.0)
    ..presetTargetsAllowed((int lvl) -> "")
    ..setButtonPositionNormalX(2)
    ..setButtonPositionNormalY(2)
    ..setHotkeyNormal("U")

// ============================================================================
init
  EventListener.onTargetCast(TlsAbilityIds.workstationLoadUnit, (caster, target) -> onLoadUnitAbilCast(caster, target))
  EventListener.onCast(TlsAbilityIds.workstationUnloadUnit, (caster) -> onUnloadAllAbilCast(caster))
  
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_UNIT_ORDER, function onUnitIssuedTargetOrder)
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL, function onUnitLeveled)