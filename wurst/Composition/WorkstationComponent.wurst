package WorkstationComponent
import UnitComponent
import TlsAbilityIds
import Events
import RegisterEvents
import Loaded
import Orders
import HashList
import HashMap
import TlsUnitIds

int array[2] g_cargoHoldAbilityId = [ TlsAbilityIds.workspaceCargoHold1, TlsAbilityIds.workspaceCargoHold2 ]

IterableMap<int, int> g_workerTypeToLoadAbilityId = new IterableMap<int, int>()

// ============================================================================
public class WorkstationComponent extends UnitComponent
  private HashList<unit> m_loadedUnits
  private int m_maxWorkers
  private int m_workerUnitType

  Event workerEntered
  Event workerExited

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)
    m_maxWorkers = 1
    m_workerUnitType = TlsUnitIds.Survivors.survivorMale
    workerEntered = new Event()
    workerExited = new Event()
    m_loadedUnits = new HashList<unit>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy workerEntered
    destroy workerExited
    destroy m_loadedUnits

  // --------------------------------------------------------------------------
  function getWorkerUnits() returns HashList<unit>
    return m_loadedUnits

  // --------------------------------------------------------------------------
  function getWorkerUnitCount() returns int
    return m_loadedUnits.size()

  // --------------------------------------------------------------------------
  function unloadWorkers()
    if (m_loadedUnits.isEmpty())
      return
    let ownerUnit = getOwnerUnit()
    ownerUnit.issuePointOrderById(OrderIds.unload, ownerUnit.getPos())

  // --------------------------------------------------------------------------
  function getMaxWorkers() returns int
    return m_maxWorkers

  // --------------------------------------------------------------------------
  function setMaxWorkers(int value)
    if (m_maxWorkers == value)
      return
    m_maxWorkers = value
    let ownerUnit = getOwnerUnit()

    for i = 0 to 1
      let abilId = g_cargoHoldAbilityId[i]
      if (abilId == value)
        ownerUnit.addAbility(abilId)
      else
        ownerUnit.removeAbility(abilId)

  // --------------------------------------------------------------------------
  function getWorkerUnitType() returns int
    return m_workerUnitType

  // --------------------------------------------------------------------------
  function setWorkerUnitType(int workerUnitType)
    if (m_workerUnitType == workerUnitType)
      return
    m_workerUnitType = workerUnitType
    let ownerUnit = getOwnerUnit()
    for key in g_workerTypeToLoadAbilityId
      let abilId = g_workerTypeToLoadAbilityId.get(key)
      if (key == workerUnitType)
        ownerUnit.addAbility(abilId)
      else
        ownerUnit.removeAbility(abilId)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()

    if (not ownerUnit.hasAbility(TlsAbilityIds.workspaceCargoHold1))
      ownerUnit.addAbility(TlsAbilityIds.workspaceCargoHold1)

    if (not ownerUnit.hasAbility(TlsAbilityIds.workspaceLoadSurvivor))
      ownerUnit.addAbility(TlsAbilityIds.workspaceLoadSurvivor)

    if (not ownerUnit.hasAbility(TlsAbilityIds.workspaceUnload))
      ownerUnit.addAbility(TlsAbilityIds.workspaceUnload)

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    unloadWorkers()

    // Clears cargo hold and load abilities
    setMaxWorkers(0)
    setWorkerUnitType(0)

    getOwnerUnit().removeAbility(TlsAbilityIds.workspaceUnload)

  // --------------------------------------------------------------------------
  protected function onUnitLoaded(unit loadedUnit)
    if (m_loadedUnits.has(loadedUnit))
      return
    m_loadedUnits.add(loadedUnit)
    onWorkerEntered()
    workerEntered.call()

  // --------------------------------------------------------------------------
  protected function onUnitUnloaded(unit loadedUnit)
    if (m_loadedUnits.remove(loadedUnit))
      onWorkerExited()
      workerExited.call()

  // --------------------------------------------------------------------------
  private function onWorkerEntered()
    if (getWorkerUnitCount() == 1)
      getOwnerUnit().addAnimationProperties("work")

  // --------------------------------------------------------------------------
  private function onWorkerExited()
    if (getWorkerUnitCount() == 0)
      getOwnerUnit().removeAnimationProperties("work")

// ============================================================================
public function IUnitMetadata.getWorkstationComponent() returns WorkstationComponent
  return this.getComponent(WorkstationComponent.typeId) castTo WorkstationComponent

// ============================================================================
public function IUnitMetadata.getOrAddWorkstationComponent() returns WorkstationComponent
  var component = this.getWorkstationComponent()
  if (component == null)
    component = this.addComponent(new WorkstationComponent(this)) castTo WorkstationComponent
  return component

// ============================================================================
function onUnitLoaded()
  let loadedUnit = GetLoadedUnit()
  let loadingUnit = GetTriggerUnit()

  let metadata = loadingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp != null)
    comp.onUnitLoaded(loadedUnit)

// ============================================================================
function onUnitUnloaded()
  let unloadedUnit = getUnloadedUnit()
  let holdingUnit = getHoldingUnit(unloadedUnit)

  let metadata = holdingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp != null)
    comp.onUnitUnloaded(unloadedUnit)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_LOADED, function onUnitLoaded)
  registerUnitUnloadedEvent(function onUnitUnloaded)

  g_workerTypeToLoadAbilityId.put(TlsUnitIds.Survivors.survivorMale, TlsAbilityIds.workspaceLoadSurvivor)
  g_workerTypeToLoadAbilityId.put(TlsUnitIds.Survivors.engineer1, TlsAbilityIds.workspaceLoadEngineer)