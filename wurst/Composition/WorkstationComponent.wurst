package WorkstationComponent
import UnitComponent
import Events
import RegisterEvents
import Loaded
import Orders
import SurvivorComponent
import SurvivorJobs
import TooltipBuilder
import ColorUtility
import StringBuilder
import AbilityObjEditing
import Icons

// ============================================================================
public class WorkstationComponent extends UnitComponent
  private group m_loadedUnits

  Event workerEntered
  Event workerExited
  Event workerLeveled

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)
    workerEntered = new Event()
    workerExited = new Event()
    workerLeveled = new Event()
    m_loadedUnits = CreateGroup()

  // --------------------------------------------------------------------------
  ondestroy
    destroy workerEntered
    destroy workerExited
    destroy workerLeveled
    m_loadedUnits.destr()

  // --------------------------------------------------------------------------
  function getWorkerUnits() returns group
    return m_loadedUnits

  // --------------------------------------------------------------------------
  function getWorkerUnitCount() returns int
    return m_loadedUnits.size()

  // --------------------------------------------------------------------------
  function unloadWorkers()
    if (m_loadedUnits.isEmpty())
      return
    let ownerUnit = getOwnerUnit()
    ownerUnit.issuePointOrderById(OrderIds.unload, ownerUnit.getPos())

  // --------------------------------------------------------------------------
  function getMaxOperatorLevel() returns int
    var level = 1
    for _unit in m_loadedUnits
      let operator = _unit.getSurvivorJobComponent(SurvivorJobs.operator)
      if (operator != null)
        level = max(level, operator.getLevel())
    return level

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    unloadWorkers()

  // --------------------------------------------------------------------------
  protected function onUnitLoaded(unit loadedUnit)
    if (m_loadedUnits.contains(loadedUnit))
      return
    onWorkerEntered(loadedUnit)
    workerEntered.call()

  // --------------------------------------------------------------------------
  protected function onUnitUnloaded(unit loadedUnit)
    if (not m_loadedUnits.contains(loadedUnit))
      return
    onWorkerExited(loadedUnit)
    workerExited.call()

  // --------------------------------------------------------------------------
  protected function onWorkerLeveled(unit worker)
    if (not m_loadedUnits.contains(worker))
      return
    workerLeveled.call()

  // --------------------------------------------------------------------------
  private function onWorkerEntered(unit worker)
    m_loadedUnits.addUnit(worker)
    if (getWorkerUnitCount() == 1)
      getOwnerUnit().addAnimationProperties("work")

  // --------------------------------------------------------------------------
  private function onWorkerExited(unit worker)
    m_loadedUnits.removeUnit(worker)
    if (getWorkerUnitCount() == 0)
      getOwnerUnit().removeAnimationProperties("work")

// ============================================================================
public function IUnitMetadata.getWorkstationComponent() returns WorkstationComponent
  return this.getComponent(WorkstationComponent.typeId) castTo WorkstationComponent

// ============================================================================
public function IUnitMetadata.getOrAddWorkstationComponent() returns WorkstationComponent
  var component = this.getWorkstationComponent()
  if (component == null)
    component = this.addComponent(new WorkstationComponent(this)) castTo WorkstationComponent
  return component

// ============================================================================
/*
    [Workstation - Active]
    A unit is currently operating this Workstation.

    [Operator Bonuses]
    + 10% sight range
    + 10% bonus damage to target
*/
public class WorkstationIconTooltipBuilder extends TooltipBuilder
  private bool m_active

  // --------------------------------------------------------------------------
  construct(bool active)
    m_active = active

  // --------------------------------------------------------------------------
  override function getDescription(int level) returns string
    let sb = new StringBuilder()

    let desc = getDescription(level)
    if (desc != null)
      sb.appendLine(desc)
      sb.appendLine()

    let activeStateString = m_active ? "Active".colorize(Colors.green) : "Inactive".colorize(Colors.gray)

    sb.appendLine("[Workstation - ".colorize(Colors.gold) + activeStateString + "]".colorize(Colors.gold))
    
    if (m_active)
      sb.appendLine("A unit is currently operating this Workstation.")
    else
      sb.appendLine("Load a unit into this Workstation to begin operations.")

    sb.appendLine()
    
    return sb.toStringAndDestroy()

// ============================================================================
public class AbilityActiveWorkstationIconDefinition extends AbilityDefinition

  // --------------------------------------------------------------------------
  construct(int newId)
    super (newId, 'Ahan')
    setLevels(10)
    setButtonPositionNormalX(0)
    setButtonPositionNormalY(2)
    setIconNormal(Icons.bTNEngineeringUpgrade)
    presetTooltipNormal(lvl -> "Workstation {0} [Level {1}]".format("Active".colorize(Colors.green), lvl.toString()))

// ============================================================================
public class AbilityInactiveWorkstationIconDefinition extends AbilityDefinition

  // --------------------------------------------------------------------------
  construct(int newId)
    super (newId, 'Ahan')
    setLevels(1)
    setButtonPositionNormalX(0)
    setButtonPositionNormalY(2)
    setIconNormal(Icons.dISBTNEngineeringUpgrade)
    setTooltipNormal(1, "Workstation {0}".format("Inactive".colorize(Colors.gray)))

// ============================================================================
function onUnitLoaded()
  let loadedUnit = GetLoadedUnit()
  let loadingUnit = GetTransportUnit()

  let metadata = loadingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp != null)
    comp.onUnitLoaded(loadedUnit)

// ============================================================================
function onUnitUnloaded()
  let unloadedUnit = getUnloadedUnit()
  let holdingUnit = getTransportUnit(unloadedUnit)

  let metadata = holdingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp != null)
    comp.onUnitUnloaded(unloadedUnit)

// ============================================================================
function onUnitLeveled()
  let levelingUnit = GetLevelingUnit()

  let holdingUnit = getTransportUnit(levelingUnit)
  if (holdingUnit == null)
    return

  let metadata = holdingUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getWorkstationComponent()
  if (comp != null)
    comp.onWorkerLeveled(levelingUnit)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_LOADED, function onUnitLoaded)
  registerPlayerUnitEvent(EVENT_PLAYER_HERO_LEVEL, function onUnitLeveled)
  registerUnitUnloadedEvent(function onUnitUnloaded)