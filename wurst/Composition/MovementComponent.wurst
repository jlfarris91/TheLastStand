package MovementComponent
import Composition
import UnitMetadata
import GameConstants
import Events
import RealtimeComponent

public class MovementComponent extends RealtimeComponent

  private vec2 _lastPos
  private IUnitMetadata _ownerUnit
  private unit _unit

  GenericArgsEvent<MovementComponent, real> unitMovedEvent

  construct(IUnitMetadata owner)
    super(owner)
    _ownerUnit = owner
    _unit = owner.getUnit()

    unitMovedEvent = new GenericArgsEvent<MovementComponent, real>()

  override function initialize()
    registerForUpdate()

  override function update()
    let pos = _unit.getPos()
    let distanceInMeters = _lastPos.distanceTo(pos) * WORLD_TO_METERS
    if (distanceInMeters > 0.0)
      unitMovedEvent.invoke(this, distanceInMeters)
    _lastPos = pos

public function IUnitMetadata.getOrAddMovementComponent() returns MovementComponent
  var component = this.getComponent(MovementComponent.typeId) castTo MovementComponent
  if (component == null)
    component = this.addComponent(new MovementComponent(this)) castTo MovementComponent
  return component