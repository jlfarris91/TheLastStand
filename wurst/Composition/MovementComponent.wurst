package MovementComponent
import UnitMetadata
import GameConstants
import Events
import RealtimeComponent

// ============================================================================
public class MovementComponent extends RealtimeComponent

  private vec2 m_lastPos
  private IUnitMetadata m_ownerUnit
  private GenericArgsEvent<MovementComponent, real> m_unitMovedEvent

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_ownerUnit = owner
    m_unitMovedEvent = new GenericArgsEvent<MovementComponent, real>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_unitMovedEvent
    m_unitMovedEvent = null

  // --------------------------------------------------------------------------
  function getUnitMovedEvent() returns GenericArgsEvent<MovementComponent, real>
    return m_unitMovedEvent

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    registerForUpdate()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    unregisterForUpdate()

  // --------------------------------------------------------------------------
  override function onUpdate(real dt)
    let pos = m_ownerUnit.getUnit().getPos()
    let distanceInMeters = m_lastPos.distanceTo(pos) * WORLD_TO_METERS
    if (distanceInMeters > 0.0)
      onMoved(distanceInMeters)
    m_lastPos = pos

  // --------------------------------------------------------------------------
  private function onMoved(real distanceInMeters)

    if (m_unitMovedEvent != null)
      m_unitMovedEvent.call(this, distanceInMeters)

// ============================================================================
public function IUnitMetadata.getOrAddMovementComponent() returns MovementComponent
  var component = this.getComponent(Type(MovementComponent.typeId)) castTo MovementComponent
  if (component == null)
    component = this.addComponent(new MovementComponent(this)) castTo MovementComponent
  return component