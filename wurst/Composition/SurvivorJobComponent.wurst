package SurvivorJobComponent
import UnitComponent
import UnitMetadata
import Events
import TlsItemIds
import TlsUnitIds
import UnitExtensions
import ClosureTimers
import FX
import initlater SurvivorUnit

constant string JOB_CHANGE_FX_PATH = "Objects\\Spawnmodels\\Other\\ToonBoom\\ToonBoom.mdl"

item array g_tempInventory

// ============================================================================
public class SurvivorJobComponent extends UnitComponent
  private AnonymousEventHandler m_itemAcquiredHandler
  private AnonymousEventHandler m_itemDroppedHandler
  private bool m_ignoreItemEvents

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()
    listenToItemAcquired()
    listenToItemDropped()

  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    unlistenToItemAcquired()
    unlistenToItemDropped()

  // --------------------------------------------------------------------------
  private function onItemAcquired(item itm)
    if (not itm.isJobItem())
      return

    let itemType = itm.getTypeId()
    let unitBeingReplaced = getOwnerUnit()
    let unitType = unitBeingReplaced.getTypeId()

    let matchingUnitType = getUnitTypeForJobItemType(itemType)
    if (matchingUnitType == -1)
      return

    if (unitType == matchingUnitType)
      return

    m_ignoreItemEvents = true

    playJobChangeFX()

    let wasSelected = unitBeingReplaced.isSelectedByOwner()
    let replacedUnit = replaceUnitTLS(unitBeingReplaced, matchingUnitType, bj_UNIT_STATE_METHOD_RELATIVE)
    if (wasSelected)
      SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())

    dropOtherJobItems(itemType)

    m_ignoreItemEvents = false

  // --------------------------------------------------------------------------
  private function onItemDropped(item itm)
    if (not itm.isJobItem())
      return

    let unitBeingReplaced = getOwnerUnit()
    if (not unitBeingReplaced.isAlive())
      return

    let droppedItemType = itm.getTypeId()
    let unitType = unitBeingReplaced.getTypeId()

    let matchingJobItemType = getJobItemTypeForUnitType(unitType)
    if (matchingJobItemType == -1)
      return

    if (droppedItemType != matchingJobItemType)
      return

    playJobChangeFX()

    m_ignoreItemEvents = true

    for i = 0 to bj_MAX_INVENTORY - 1
      let indexItem = UnitItemInSlot(unitBeingReplaced, i)
      if (indexItem != null)
        g_tempInventory[i] = indexItem == itm ? null : indexItem
        UnitRemoveItemFromSlot(unitBeingReplaced, i)
    
    let wasSelected = unitBeingReplaced.isSelectedByOwner()
    let replacedUnit = replaceUnitTLS(unitBeingReplaced, TlsUnitIds.survivorMale, bj_UNIT_STATE_METHOD_RELATIVE)
    if (wasSelected)
      SelectUnitAddForPlayer(replacedUnit, replacedUnit.getOwner())

    for i = 0 to bj_MAX_INVENTORY - 1
      let indexItem = g_tempInventory[i]
      if (indexItem != null)
        UnitAddItem(replacedUnit, indexItem)

    m_ignoreItemEvents = false  

  // --------------------------------------------------------------------------
  private function dropOtherJobItems(int exceptId)
    let ownerUnit = getOwnerUnit()
    let pos = ownerUnit.getPos()
    for jobItemId in g_jobItemIds
      if (jobItemId != exceptId)
        let itm = ownerUnit.getItemById(jobItemId)
        if (itm != null)
          ownerUnit.dropItemPoint(itm, pos)

  // --------------------------------------------------------------------------
  private function playJobChangeFX()
    let fx = FX.createEffect(JOB_CHANGE_FX_PATH, getOwnerUnit().getPos())
    fx.setAlpha(255)
    fx.setColor(255, 255, 255)
    fx.setScale(1.0)
    doAfter(5) ->
      DestroyEffect(fx)

  // --------------------------------------------------------------------------
  private function listenToItemAcquired()
    m_itemAcquiredHandler = PlayerUnitEvents.itemAcquired.addListener() -> 
      let u = GetManipulatingUnit()
      if (u == getOwnerUnit() and not m_ignoreItemEvents)
        onItemAcquired(GetManipulatedItem())

  // --------------------------------------------------------------------------
  private function unlistenToItemAcquired()
    m_itemAcquiredHandler = PlayerUnitEvents.itemAcquired.removeListener(m_itemAcquiredHandler)

  // --------------------------------------------------------------------------
  private function listenToItemDropped()
    m_itemDroppedHandler = PlayerUnitEvents.itemDropped.addListener() -> 
      let u = GetManipulatingUnit()
      if (u == getOwnerUnit() and not m_ignoreItemEvents)
        onItemDropped(GetManipulatedItem())

  // --------------------------------------------------------------------------
  private function unlistenToItemDropped()
    m_itemDroppedHandler = PlayerUnitEvents.itemDropped.removeListener(m_itemDroppedHandler)