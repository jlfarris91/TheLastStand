package ShelterComponent
import UnitComponent
import TlsUnitIds
import Handle
import RegisterEvents
import GameConstants
import PlayerProperties
import LinkedList
import Unit_Shelter
import UnitIndexer

constant color SHELTER_ENABLED_COLOR = color(150,150,150)
constant color SHELTER_DISABLED_COLOR = color(50,50,50)
constant LinkedList<ShelterComponent> g_shelterComponents = new LinkedList<ShelterComponent>()
int array g_playerShelterCount

// ============================================================================
public class ShelterComponent extends UnitComponent
  private _handle m_affector = INVALID_HANDLE

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  protected override function onEnabled()
    super.onEnabled()
    g_shelterComponents.add(this)
    g_playerShelterCount[getOwnerPlayer().getId()]++
    updateAffector(playerHasLTESheltersThanSurvivors(getOwnerPlayer()))
    
  // --------------------------------------------------------------------------
  protected override function onDisabled()
    super.onDisabled()
    destroyAffector()
    g_shelterComponents.remove(this)
    g_playerShelterCount[getOwnerPlayer().getId()]--

  // --------------------------------------------------------------------------
  protected function updateAffector(bool enabled)
    let ownerUnit = getOwnerUnit()
    let ownerPlayer = ownerUnit.getOwner()

    var hpBonusValue = 0
    var infoAbilId = 0

    switch (ownerUnit.getTypeId())
      case TlsUnitIds.shelter1
        hpBonusValue = SURVIVOR_HP_BONUS_SHELTER_1
        infoAbilId = SHELTER_1_ICON_ID
      case TlsUnitIds.shelter2
        hpBonusValue = SURVIVOR_HP_BONUS_SHELTER_2
        infoAbilId = SHELTER_2_ICON_ID
      case TlsUnitIds.shelter3
        hpBonusValue = SURVIVOR_HP_BONUS_SHELTER_3
        infoAbilId = SHELTER_3_ICON_ID
    
    let survivorHPBonusProp = ownerPlayer.getProperty(PlayerProperty.SURVIVOR_HP_BONUS)

    if (m_affector != INVALID_HANDLE)
      survivorHPBonusProp.remove(m_affector)

    if (enabled)
      ownerUnit.removeAbility(SHELTER_NO_EFFECT_ICON_ID)
      ownerUnit.addAbility(infoAbilId)
      ownerUnit.setVertexColor(SHELTER_ENABLED_COLOR)
      m_affector = survivorHPBonusProp.affectAdd(hpBonusValue.toReal())
    else
      ownerUnit.removeAbility(infoAbilId)
      ownerUnit.addAbility(SHELTER_NO_EFFECT_ICON_ID)
      ownerUnit.setVertexColor(SHELTER_DISABLED_COLOR)

  // --------------------------------------------------------------------------
  private function destroyAffector()
    if (m_affector == INVALID_HANDLE)
      return
    getOwnerPlayer().getProperty(PlayerProperty.SURVIVOR_HP_BONUS).remove(m_affector)
    m_affector = INVALID_HANDLE

// ============================================================================
public function IUnitMetadata.getShelterComponent() returns ShelterComponent
  return this.getComponent(ShelterComponent.typeId) castTo ShelterComponent

// ============================================================================
public function IUnitMetadata.getOrAddShelterComponent() returns ShelterComponent
  var component = this.getShelterComponent()
  if (component == null)
    component = this.addComponent(new ShelterComponent(this)) castTo ShelterComponent
  return component

// ============================================================================
function onUpgradeFinished()
  let upgradingUnit = GetTriggerUnit()
  if (upgradingUnit.isObelisk() or upgradingUnit.isShelter())
    updateShelterComponents(upgradingUnit.getOwner())

// ============================================================================
function playerHasLTESheltersThanSurvivors(player p) returns bool
  return g_playerShelterCount[p.getId()] <= p.getMaxSupply()

// ============================================================================
function updateShelterComponents(player p)
  let maxSupply = p.getMaxSupply()
  var count = 0
  for shelterComp in g_shelterComponents
    if (shelterComp.getOwnerPlayer() == p)
      shelterComp.updateAffector(count <= maxSupply)
      count++

// ============================================================================
function onUnitIndexed()
  let indexingUnit = getIndexingUnit()
  if (indexingUnit.isSurvivor())
    updateShelterComponents(indexingUnit.getOwner())

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUpgradeFinished)
  onUnitIndex(function onUnitIndexed)
  onUnitDeindex(function onUnitIndexed)