package BackpackComponent
import UnitMetadata
import BackpackInventory
import Orders
import TlsItemIds
import RegisterEvents

constant string MODEL_PATH_BACKPACK = "Items\\BackPack2.mdx"

// ============================================================================
public class BackpackComponent extends UnitComponent
  private effect m_backpackEffect
  private BackpackInventory m_inventory
  
  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    m_backpackEffect = null

  // --------------------------------------------------------------------------
  ondestroy
    hideBackpackModel()

  // --------------------------------------------------------------------------
  function getInventory() returns BackpackInventory
    return m_inventory

  // --------------------------------------------------------------------------
  function setInventory(BackpackInventory inventory)
    m_inventory = inventory

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    showBackpackModel()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    hideBackpackModel()

  // --------------------------------------------------------------------------
  function getIsBackpackVisible() returns bool
    return m_backpackEffect != null

  // --------------------------------------------------------------------------
  function openBackpack()
    let ownerUnit = getOwnerUnit()
    ownerUnit.issueImmediateOrderById(OrderIds.stop)

  // --------------------------------------------------------------------------
  function closeBackpack()
    skip

  // --------------------------------------------------------------------------
  function emptyBackpack()
    for i = 0 to BACKPACK_MAX_CAPACITY - 1
      dropItemFromSlot(i)

  // --------------------------------------------------------------------------
  function dropItemFromSlot(int _slot)
    skip
    
  // --------------------------------------------------------------------------
  private function showBackpackModel()
    if (m_backpackEffect != null)
      return
    let ownerUnit = getOwnerUnit()
    if (ownerUnit == null)
      return
    m_backpackEffect = AddSpecialEffectTargetUnitBJ("chest", ownerUnit, MODEL_PATH_BACKPACK)
    ..setScale(1.5)
    ..setAlpha(255)

  // --------------------------------------------------------------------------
  private function hideBackpackModel()
    if (m_backpackEffect == null)
      return
    m_backpackEffect.destr()
    m_backpackEffect = null

// ============================================================================
public function IUnitMetadata.getBackpackComponent() returns BackpackComponent
  return this.getComponent(BackpackComponent.typeId) castTo BackpackComponent

// ============================================================================
public function IUnitMetadata.getOrAddBackpackComponent() returns BackpackComponent
  var component = this.getBackpackComponent()
  if (component == null)
    component = this.addComponent(new BackpackComponent(this), false) castTo BackpackComponent
  return component

// ============================================================================
function onUnitAcquiredItem()
  let manipulatingUnit = GetManipulatingUnit()
  let manipulatingItem = GetManipulatedItem()

  if (manipulatingItem.getTypeId() != TlsItemIds.backpack)
    return

  let unitMetadata = manipulatingUnit.getMetadata()
  if (unitMetadata == null)
    return

  var backpackComponent = unitMetadata.getComponent(BackpackComponent.typeId) castTo BackpackComponent

  // This unit is already wearing a backpack
  if (backpackComponent != null)
    return

  let inventory = getOrCreateBackpackInventory(manipulatingItem)

  backpackComponent = new BackpackComponent(unitMetadata)..setInventory(inventory)
  unitMetadata.addComponent(backpackComponent)

  manipulatingUnit.dropItemPoint(manipulatingItem, manipulatingUnit.getPos())
  manipulatingItem.setPos(ZERO2)
  manipulatingItem.setVisible(false)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, function onUnitAcquiredItem)