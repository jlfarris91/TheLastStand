package EnableAttackWhenPoweredComponent
import UnitComponent
import Events
import PoweredComponent

constant POWER_CONSUMPTION_RATE = 2.0

// ============================================================================
public class EnableAttackWhenPoweredComponent extends UnitComponent
  private PoweredComponent m_poweredComp

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override function getTypeId() returns int
    return EnableAttackWhenPoweredComponent.getTypeId()

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    m_poweredComp = getOwner().getOrAddPoweredComponent()
    m_poweredComp.setPowerConsumptionRate(POWER_CONSUMPTION_RATE)
    m_poweredComp.poweredCallback = () -> onPowered()
    m_poweredComp.unpoweredCallback = () -> onUnpowered()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    
  // --------------------------------------------------------------------------
  private function onPowered()
    getOwnerUnit().setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, true)

  // --------------------------------------------------------------------------
  private function onUnpowered()
    getOwnerUnit().setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, false)

// ============================================================================
public function IUnitMetadata.getEnableAttackWhenPoweredComponent() returns EnableAttackWhenPoweredComponent
  return this.getComponent(typeInfo(EnableAttackWhenPoweredComponent.typeId)) castTo EnableAttackWhenPoweredComponent

// ============================================================================
public function IUnitMetadata.getOrAddEnableAttackWhenPoweredComponent() returns EnableAttackWhenPoweredComponent
  var component = this.getEnableAttackWhenPoweredComponent()
  if (component == null)
    component = this.addComponent(new EnableAttackWhenPoweredComponent(this)) castTo EnableAttackWhenPoweredComponent
  return component