package EnableAttackWhenPoweredComponent
import UnitComponent
import Events
import PoweredComponent

// ============================================================================
public class EnableAttackWhenPoweredComponent extends UnitComponent
  private PoweredComponent m_poweredComp
  private _handle m_poweredCallback
  private _handle m_unpoweredCallback

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()

    let ownerUnit = getOwnerUnit()
    m_poweredComp = getOwner().getOrAddPoweredComponent()
    m_poweredCallback = m_poweredComp.powered.register(() -> onPowered(ownerUnit))
    m_unpoweredCallback = m_poweredComp.unpowered.register(() -> onUnpowered(ownerUnit))

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    if (m_poweredComp != null)
      m_poweredComp.powered.unregister(m_poweredCallback)
      m_poweredComp.unpowered.unregister(m_unpoweredCallback)

  // --------------------------------------------------------------------------
  private static function onPowered(unit ownerUnit)
    let comp = ownerUnit.getEnableAttackWhenPoweredComponent()
    if (comp != null)
      comp.onPowered()
    
  // --------------------------------------------------------------------------
  private function onPowered()
    getOwnerUnit().setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, true)

  // --------------------------------------------------------------------------
  private static function onUnpowered(unit ownerUnit)
    let comp = ownerUnit.getEnableAttackWhenPoweredComponent()
    if (comp != null)
      comp.onUnpowered()

  // --------------------------------------------------------------------------
  private function onUnpowered()
    getOwnerUnit().setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, false)

// ============================================================================
public function IUnitMetadata.getEnableAttackWhenPoweredComponent() returns EnableAttackWhenPoweredComponent
  return this.getComponent(EnableAttackWhenPoweredComponent.typeId) castTo EnableAttackWhenPoweredComponent

// ============================================================================
public function IUnitMetadata.getOrAddEnableAttackWhenPoweredComponent() returns EnableAttackWhenPoweredComponent
  var component = this.getEnableAttackWhenPoweredComponent()
  if (component == null)
    component = this.addComponent(new EnableAttackWhenPoweredComponent(this)) castTo EnableAttackWhenPoweredComponent
  return component

// ============================================================================
public function unit.getEnableAttackWhenPoweredComponent() returns EnableAttackWhenPoweredComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    return null
  return metadata.getEnableAttackWhenPoweredComponent()

// ============================================================================
public function unit.getOrAddEnableAttackWhenPoweredComponent() returns EnableAttackWhenPoweredComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    return null
  return metadata.getOrAddEnableAttackWhenPoweredComponent()