package StatsComponent
import UnitComponent
import UnitMetadata
import StatisticsCollection
import Type
import Composition
import Statistic
import ClosureTimers
import RegisterEvents
import initlater StatsBoard

// ============================================================================
public class StatsComponent extends UnitComponent
  private StatisticsCollection m_stats
  private StatsBoard m_statsBoard

  // --------------------------------------------------------------------------
  construct(IUnitMetadata owner)
    super(owner)
    
    // m_stats.createIntStatistic(Stats.assists, "Assists", 0)
    // ..setIcon(Icons.bTNImmolationOff)
    // ..setUnits("assists")
    // ..setTooltip("The number of enemies killed with the help of this Survivor")

    // m_stats.createRealStatistic(Stats.damageDealt, "Damage Dealt", 0.0)
    // ..setIcon(Icons.bTNSteelMelee)
    // ..setUnits("damage")
    // ..setTooltip("The total amount of damage dealt")

    // m_stats.createRealStatistic(Stats.healthHealed, "HP Healed", 0.0)
    // ..setIcon(Icons.bTNStatUp)
    // ..setUnits("hp")
    // ..setTooltip("The amount of health healed")

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_stats

  // --------------------------------------------------------------------------
  override function initialize()
    super.initialize()
    m_statsBoard = new StatsBoard(this, "Stats")
    m_statsBoard.updateMultiboardRows()
    
  // --------------------------------------------------------------------------
  function show()
    if (not m_statsBoard.isShowing())
      m_statsBoard.updateMultiboardRows()
      m_statsBoard.update()
      m_statsBoard.show()
    
  // --------------------------------------------------------------------------
  function hide()
    if (m_statsBoard.isShowing())
      m_statsBoard.hide()

  // --------------------------------------------------------------------------
  function getStats() returns StatisticsCollection
    return m_stats

  // --------------------------------------------------------------------------
  function setStats(StatisticsCollection stats)
    m_stats = stats

  // --------------------------------------------------------------------------
  function getStatistic(string key) returns IStatistic
    return m_stats.getStatistic(key)

  // --------------------------------------------------------------------------
  function addStatistic(string key, IStatistic statistic)
    m_stats.addStatistic(key, statistic)

// ============================================================================
public function IUnitMetadata.getStatsComponent() returns StatsComponent
  return this.getComponent(Type(StatsComponent.typeId)) castTo StatsComponent

// ============================================================================
public function IUnitMetadata.getOrAddStatsComponent() returns StatsComponent
  var component = this.getStatsComponent()
  if (component == null)
    component = this.addComponent(new StatsComponent(this)) castTo StatsComponent
  return component

// ============================================================================
function onUnitSelected()
  let u = GetTriggerUnit()
  let metadata = u.getMetadata()
  if (metadata == null)
    return
  let statsComponent = metadata.getStatsComponent()
  if (statsComponent == null)
    return
  statsComponent.show()

// ============================================================================
function onUnitDeselected()
  let u = GetTriggerUnit()
  let metadata = u.getMetadata()
  if (metadata == null)
    return
  let statsComponent = metadata.getStatsComponent()
  if (statsComponent == null)
    return
  statsComponent.hide()

// ============================================================================
function delayedInit()
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELECTED, function onUnitSelected)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DESELECTED, function onUnitDeselected)

// ============================================================================
init
  doAfter(1.0) () ->
    delayedInit()