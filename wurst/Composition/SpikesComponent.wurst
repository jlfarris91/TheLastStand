package SpikesComponent
import TlsUnitIds
import TlsAbilityIds
import RegisterEvents
import TimerUtils
import ClosureTimers
import ObjectIdGenerator
import RealtimeUnitComponent
import DamageEvent
import Damage
import Orders
// import Time
import HashList
import Math
import StunUnit
import PlayerProperties
import UnitIndexer
import RealTime
import TlsBuffIds

constant real SPIKE4_TIMESCALE_ENABLED = 1.0
constant real SPIKE4_TIMESCALE_DISABLED = 0.0
constant real SPIKE4_TIMESCALE_ATTACK = 5.0
constant real SPIKE4_ATTACKTIMER_DURATION = 1.0
constant int SPIKE_DISABLED_ABILITY_ID = compiletime(ABIL_ID_GEN.next())
constant string SPIKE_DISABLED_EFFECT_PATH = "Abilities\\Disarm\\Disarm Red\\Disarm Red.mdx"
constant int SPIKE_REPAIR_ENABLED_TARGETFLAG = 4 // TARGET_FLAG_AIR
constant int SPIKE_REPAIR_DISABLED_TARGETFLAG = 16 // TARGET_FLAG_WARD
HashList<SpikesComponent> g_activeSpikeComponents = new HashList<SpikesComponent>()
constant real STUN_COOLDOWN = 10.0
constant int ENEMY_NEARBY_COOLDOWN = 3

real array g_lastTimeStunned

// ============================================================================
public class SpikesComponent extends RealtimeUnitComponent
  private CallbackManual m_spike4AttackTimerCallback
  private bool m_spikesEnabled
  private effect m_disabledEffect
  private real m_timeSinceLastEnemyNearby = 0

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)
    g_activeSpikeComponents.add(this)

  // --------------------------------------------------------------------------
  ondestroy
    g_activeSpikeComponents.remove(this)
  
    releaseSpike4AttackTimer()

    if (m_disabledEffect != null)
      m_disabledEffect.destr()
      m_disabledEffect = null

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    
    m_timeSinceLastEnemyNearby = 0
    
    this.registerForRealtimeUpdate(RealtimeUpdatePriority.Background)
  
    forceUpdate()
    updateRepairEnabled()

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()

    let ownerUnit = getOwnerUnit()
    ownerUnit.removeAbility(TlsAbilityIds.spikeSlowAura)
    ownerUnit.removeAbility(TlsAbilityIds.spikeDisabledIcon)

    releaseSpike4AttackTimer()
    updateRepairEnabled()

    this.unregisterForRealtimeUpdate()

  // --------------------------------------------------------------------------
  function getSpikesEnabled() returns bool
    return m_spikesEnabled

  // --------------------------------------------------------------------------
  function update()
    updateSpikesEnabled()
    updateRepairEnabled()

  // --------------------------------------------------------------------------
  private function forceUpdate()
    m_spikesEnabled = getOwnerUnit().getHP() > 1
    onSpikesEnabledChanged()

  // --------------------------------------------------------------------------
  private function updateSpikesEnabled()
    let wasEnabled = m_spikesEnabled
    m_spikesEnabled = getOwnerUnit().getHP() > 1
    if (wasEnabled != m_spikesEnabled)
      onSpikesEnabledChanged()

  // --------------------------------------------------------------------------
  private function onSpikesEnabledChanged()
    if (getSpikesEnabled())
      onSpikesEnabled()
    else
      onSpikesDisabled()

  // --------------------------------------------------------------------------
  function onSpikesEnabled()
    let ownerUnit = getOwnerUnit()
    let ownerUnitId = ownerUnit.getTypeId()
    let ownerUnitLvl = getOwnerUnitLevel() + 1

    // Remove abilities for disabled state
    if (ownerUnit.hasAbility(TlsAbilityIds.spikeDisabledIcon))
      ownerUnit.removeAbility(TlsAbilityIds.spikeDisabledIcon)

    // Add abilities for enabled state
    if (not ownerUnit.hasAbility(TlsAbilityIds.spikeSlowAura))
      ownerUnit.addAbility(TlsAbilityIds.spikeSlowAura)

    if (not ownerUnit.hasAbility(TlsAbilityIds.spikeBarrage))
      ownerUnit.addAbility(TlsAbilityIds.spikeBarrage)

    if (not ownerUnit.hasAbility(TlsAbilityIds.spikeEnabledIcon))
      ownerUnit.addAbility(TlsAbilityIds.spikeEnabledIcon)

    ownerUnit.setAbilityLevel(TlsAbilityIds.spikeSlowAura, ownerUnitLvl)
    ownerUnit.setAbilityLevel(TlsAbilityIds.spikeBarrage, ownerUnitLvl)
    ownerUnit.setAbilityLevel(TlsAbilityIds.spikeEnabledIcon, ownerUnitLvl)

    ownerUnit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, true)
    ownerUnit.setVertexColor(colorA(150, 150, 150, 255))
    ownerUnit.setTimeScale(SPIKE4_TIMESCALE_ENABLED)

    if (ownerUnitId == TlsUnitIds.spikes[4])
      resetSpike4Animation()

    if (m_disabledEffect != null)
      m_disabledEffect.destr()
      m_disabledEffect = null

  // --------------------------------------------------------------------------
  function onSpikesDisabled()
    let ownerUnit = getOwnerUnit()
    let ownerUnitLvl = getOwnerUnitLevel() + 1

    // Remove abilities for enabled state
    if (ownerUnit.hasAbility(TlsAbilityIds.spikeSlowAura))
      ownerUnit.removeAbility(TlsAbilityIds.spikeSlowAura)

    if (ownerUnit.hasAbility(TlsAbilityIds.spikeBarrage))
      ownerUnit.removeAbility(TlsAbilityIds.spikeBarrage)

    if (ownerUnit.hasAbility(TlsAbilityIds.spikeEnabledIcon))
      ownerUnit.removeAbility(TlsAbilityIds.spikeEnabledIcon)

    // Add abilities for disabled state
    if (not ownerUnit.hasAbility(TlsAbilityIds.spikeDisabledIcon))
      ownerUnit.addAbility(TlsAbilityIds.spikeDisabledIcon)

    ownerUnit.setAbilityLevel(TlsAbilityIds.spikeDisabledIcon, ownerUnitLvl)
    
    ownerUnit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, false)
    ownerUnit.setVertexColor(colorA(50, 50, 50, 255))
    ownerUnit.setTimeScale(SPIKE4_TIMESCALE_DISABLED)

    if (m_disabledEffect == null)
      let pos = ownerUnit.getPos().withTerrainZ(120.0)
      m_disabledEffect = AddSpecialEffect(SPIKE_DISABLED_EFFECT_PATH, pos.x, pos.y)
      ..setPos(pos)

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real dt)
    update()

  // --------------------------------------------------------------------------
  function onUnitAttackedBySpikes()
    let ownerUnit = getOwnerUnit()
    // Do 1 damage to self every time the spike deals damage
    ownerUnit.setHP(max(ownerUnit.getHP() - 1, 1))
    // Update the enabled/disabled state
    updateSpikesEnabled()

  // --------------------------------------------------------------------------
  function onIssuedAttackOrder()
    if (not getSpikesEnabled())
      return
    if (getOwnerUnit().getTypeId() == TlsUnitIds.spikes[4])
      playSpike4AttackAnimation()
      initializeSpike4AttackTimer()
      m_spike4AttackTimerCallback.restart()

  // --------------------------------------------------------------------------
  function setRepairEnabled(bool enabled)
    let val = (enabled ? SPIKE_REPAIR_ENABLED_TARGETFLAG : SPIKE_REPAIR_DISABLED_TARGETFLAG)
    getOwnerUnit().setField(UNIT_IF_TARGETED_AS, val)

  // --------------------------------------------------------------------------
  function getRepairEnabled() returns bool
    return getOwnerUnit().getField(UNIT_IF_TARGETED_AS) == SPIKE_REPAIR_ENABLED_TARGETFLAG

  // --------------------------------------------------------------------------
  function updateRepairEnabled()
    
    let isRepairable = not getOwnerUnit().hasAbility(TlsBuffIds.enemiesNearby)

    let timeNow = getRealTimeSeconds()
    let timeSinceLastEnemyNearby = timeNow - m_timeSinceLastEnemyNearby

    if (timeSinceLastEnemyNearby <= ENEMY_NEARBY_COOLDOWN)
      return

    m_timeSinceLastEnemyNearby = isRepairable ? 0 : timeNow

    setRepairEnabled(isRepairable)

  // --------------------------------------------------------------------------
  private function playSpike4AttackAnimation()
    if (not getSpikesEnabled())
      return
    getOwnerUnit().setTimeScale(SPIKE4_TIMESCALE_ATTACK)

  // --------------------------------------------------------------------------
  private function resetSpike4Animation()
    if (not getSpikesEnabled())
      return
    let ownerUnit = getOwnerUnit()
    ownerUnit.setTimeScale(getSpikesEnabled() ? SPIKE4_TIMESCALE_ENABLED : SPIKE4_TIMESCALE_DISABLED)

  // --------------------------------------------------------------------------
  private function initializeSpike4AttackTimer()
    if (m_spike4AttackTimerCallback == null)
      m_spike4AttackTimerCallback = getTimer().doManual(SPIKE4_ATTACKTIMER_DURATION, false) -> 
        resetSpike4Animation()

  // --------------------------------------------------------------------------
  private function releaseSpike4AttackTimer()    
    if (m_spike4AttackTimerCallback != null)
      destroy m_spike4AttackTimerCallback
      m_spike4AttackTimerCallback = null

  // --------------------------------------------------------------------------
  function getOwnerUnitLevel() returns int
    let ownerUnitId = getOwnerUnit().getTypeId()
    for i = 0 to 4
      if (ownerUnitId == TlsUnitIds.spikes[i])
        return i
    return 0

  // --------------------------------------------------------------------------
  override protected function onOwnerUpgraded()
    super.onOwnerUpgraded()
    update()

// ============================================================================
public function IUnitMetadata.getSpikesComponent() returns SpikesComponent
  return this.getComponent(SpikesComponent.typeId) castTo SpikesComponent

// ============================================================================
public function IUnitMetadata.getOrAddSpikesComponent() returns SpikesComponent
  var component = this.getSpikesComponent()
  if (component == null)
    component = this.addComponent(new SpikesComponent(this)) castTo SpikesComponent
  return component

// ============================================================================
function onUpgradeStarted()
  let upgradedUnit = GetTriggerUnit()
  if (not upgradedUnit.isSpikes())
    return  
  let metadata = upgradedUnit.getMetadata()
  if (metadata == null)
    return
  let spikesComponent = metadata.getSpikesComponent()
  if (spikesComponent == null)
    return
  spikesComponent.updateRepairEnabled()

// ============================================================================
function onDamageEventShield()
  let target = DamageEvent.getTarget()

  if (not target.isSpikes())
    return

  let metadata = target.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSpikesComponent()
  if (comp == null)
    return

  // Zero-out the damage done to spikes
  DamageEvent.setAmount(0)

// ============================================================================
function onDamageEventFinal()
  let source = DamageEvent.getSource()

  if (not source.isSpikes() or DamageEvent.getAmount() <= 0.0)
    return

  let metadata = source.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSpikesComponent()
  if (comp == null)
    return

  let ownerPlayer = source.getOwner()
  let target = DamageEvent.getTarget()

  let stunDuration = ownerPlayer.getPropertyValue(PlayerProperty.SPIKE_STUN_DURATION)
  let deltaSeconds = getRealTimeSeconds() - g_lastTimeStunned[target.getIndex()]

  if (deltaSeconds < STUN_COOLDOWN)
    return

  let stunChance = ownerPlayer.getPropertyValue(PlayerProperty.SPIKE_STUN_CHANCE_01)
  if (not passesChanceCheck01(stunChance))
    return

  g_lastTimeStunned[target.getIndex()] = getRealTimeSeconds()
  stunUnit(source.getOwner(), target, stunDuration)

// ============================================================================
function onUnitAttacked()
  let attacker = GetAttacker()

  if (not attacker.isSpikes())
    return

  let metadata = attacker.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSpikesComponent()
  if (comp == null)
    return

  comp.onUnitAttackedBySpikes()

// ============================================================================
function onUnitIssuedTargetOrder()
  let orderedUnit = GetOrderedUnit()
  let orderId = GetIssuedOrderId()

  if (orderId != OrderIds.attack or not orderedUnit.isSpikes())
    return

  let metadata = orderedUnit.getMetadata()
  if (metadata == null)
    return

  let comp = metadata.getSpikesComponent()
  if (comp == null)
    return

  comp.onIssuedAttackOrder()

// ============================================================================
function onDayStart()
  for comp in g_activeSpikeComponents
    comp.setRepairEnabled(true)

// ============================================================================
function onNightStart()
  for comp in g_activeSpikeComponents
    comp.setRepairEnabled(false)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_START, function onUpgradeStarted)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_TARGET_ORDER, function onUnitIssuedTargetOrder)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ATTACKED, function onUnitAttacked)
  DamageEvent.addListener(DAMAGE_EVENT_PRIO_SHIELD, () -> onDamageEventShield())
  DamageEvent.addListener(DAMAGE_EVENT_PRIO_FINAL, () -> onDamageEventFinal())
  // registerDayEvent(function onDayStart)
  // registerNightEvent(function onNightStart)