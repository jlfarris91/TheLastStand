package NightWave
import Wave
import ClosureTimers
import LinkedList
import StringExtensions
import DisplayTextToPlayer

// ============================================================================
public class NightWave extends Wave
  private int m_night
  private real m_timeOfDayScalePercent

  // --------------------------------------------------------------------------
  construct(player p, int night)
    super(p)
    m_night = night
    m_timeOfDayScalePercent = 100.0

  // --------------------------------------------------------------------------
  function getNight() returns int
    return m_night

  // --------------------------------------------------------------------------
  function getTimeOfDayScalePercent() returns real
    return m_timeOfDayScalePercent

  // --------------------------------------------------------------------------
  function setTimeOfDayScalePercent(real value)
    m_timeOfDayScalePercent = value

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()

    // Have to wait for some reason
    doAfter(0.1) ->
      SetTimeOfDayScalePercentBJ(m_timeOfDayScalePercent)
      FogMaskEnableOn()

  // --------------------------------------------------------------------------
  override function announceWaveToPlayer(player _player)
    let spawnWaves = getSpawnWaves()
    if (spawnWaves.isEmpty())
      return

    let spawnWavesCloned = spawnWaves.copy()

    // Remove "Zombies" spawn wave that exists for every night after the first
    if (getNight() > 1)
      spawnWavesCloned.removeAt(0)

    let firstSpawnWaveDef = spawnWavesCloned.getFirst().getDefinition()
    let spawnWaveName = firstSpawnWaveDef.getName()
    let spawnWaveTagsStr = firstSpawnWaveDef.getTags().joinBy(", ")

    destroy spawnWavesCloned

    let message = "Night {0} - {1} ({2})".format(
      getNight().toString(),
      spawnWaveName.colorize(COLOR_GOLD),
      spawnWaveTagsStr)
    
    // e.g. "Night 3 - Skeleton Archers"
    displayMessageToPlayer(_player, message)