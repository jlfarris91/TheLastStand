package NightWave
import Wave
import ClosureTimers
import WeightedSet
import Environment

WeightedSet<int> g_weatherEffects

// ============================================================================
public class NightWave extends Wave
  private int m_night
  private real m_timeOfDayScalePercent

  // --------------------------------------------------------------------------
  construct(int night)
    m_night = night
    m_timeOfDayScalePercent = 100.0

  // --------------------------------------------------------------------------
  function getNight() returns int
    return m_night

  // --------------------------------------------------------------------------
  function getTimeOfDayScalePercent() returns real
    return m_timeOfDayScalePercent

  // --------------------------------------------------------------------------
  function setTimeOfDayScalePercent(real value)
    m_timeOfDayScalePercent = value

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()

    // Have to wait for some reason
    doAfter(0.1) ->
      SetTimeOfDayScalePercentBJ(m_timeOfDayScalePercent)
      FogEnableOn()
      FogMaskEnableOn()
      startWeatherEffect()

  // --------------------------------------------------------------------------
  private function startWeatherEffect()

    let weatherEffectIndex = g_weatherEffects.getRandom()

    if (weatherEffectIndex == 1)
      Environment.startRaining()
    else
      Environment.stopRaining()

    if (weatherEffectIndex == 2)
      Environment.startFog()
    else
      Environment.stopFog()
      
    Environment.stopWind()

// ============================================================================
init
  g_weatherEffects = new WeightedSet<int>()
  g_weatherEffects.add(0, 0.7)
  g_weatherEffects.add(1, 0.15)
  g_weatherEffects.add(2, 0.15)