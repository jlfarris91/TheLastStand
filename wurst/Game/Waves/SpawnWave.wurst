package SpawnWave
import Runnable
import SpawnWaveDefinition
import Events
import LinkedList
import WaveActivator
import HumanPlayerMetadata
import UnitMetadata
import GameConstants
import ErrorHandling
import ClosureEvents
import Math

// ============================================================================
public class SpawnWave extends Runnable
  private SpawnWaveDefinition m_definition
  private EventCallback m_onActivatedHandler
  private player m_targetPlayer
  private LinkedList<unit> m_aliveSpawnedUnits
  private int m_numSpawned

  // --------------------------------------------------------------------------
  construct(SpawnWaveDefinition def, player targetPlayer)
    m_definition = def
    m_aliveSpawnedUnits = new LinkedList<unit>()
    setTargetPlayer(targetPlayer)

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToActivatedEvent()
    destroy m_aliveSpawnedUnits
    m_definition = null
    m_targetPlayer = null

  // --------------------------------------------------------------------------
  function getTargetPlayer() returns player
    return m_targetPlayer

  // --------------------------------------------------------------------------
  function setTargetPlayer(player p)
    m_targetPlayer = p

  // --------------------------------------------------------------------------
  function getDefinition() returns SpawnWaveDefinition
    return m_definition

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()
    listenToActivatedEvent()
    m_definition.getActivator().start()
    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

  // --------------------------------------------------------------------------
  override function onPaused()
    super.onPaused()
    m_definition.getActivator().pause()
    unlistenToActivatedEvent()

  // --------------------------------------------------------------------------
  override function onResumed()
    super.onResumed()
    listenToActivatedEvent()
    m_definition.getActivator().resume()

  // --------------------------------------------------------------------------
  override function onCompleted()
    super.onCompleted()
    unlistenToActivatedEvent()
    m_definition.getActivator().complete()

  // --------------------------------------------------------------------------
  override function reset()
    super.reset()
    unlistenToActivatedEvent()
    m_definition.getActivator().reset()
    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

  // --------------------------------------------------------------------------
  function activateOnce()
    onActivated()

  // --------------------------------------------------------------------------
  protected function onActivated()

    let p = getTargetPlayer()
    if (p == null)
      error("[SpawnWave.onActivated] Target player has not been set")
      return

    let playerMetadata = p.getHumanMetadataRequired()
    if (playerMetadata.getIsDead())
      return

    let camp = playerMetadata.getCamp()
    let center = camp.getCenter()

    let waveProgress = getWaveProgress()
    let aliveCountMax = m_definition.getMaxAliveCount(waveProgress)
    let spawnCountMax = m_definition.getMaxSpawnCount(waveProgress)    
    let spawnsPerActivation = m_definition.getSpawnsPerActivation(waveProgress)    
    let spawnGroupingFactor = m_definition.getSpawnGroupingFactor(waveProgress)

    let numSpawnGroups = max(R2I(I2R(spawnsPerActivation) * (1.0 - spawnGroupingFactor)), 1)
    let spawnGroupSize = max(R2I(I2R(spawnsPerActivation) * spawnGroupingFactor), 1)

    let spawnPoints = m_definition.getSpawnPointProvider().getSpawnPoints(center, numSpawnGroups)
    if (spawnPoints.getCount() == 0)
      error("[SpawnWave.onActivated] Found no spawn points!")

    var numSpawnsAvailable = getNumSpawnsAvailable(aliveCountMax, spawnCountMax)

    // For each spawn point
    for sp in spawnPoints
      
      // Until we reach max alive or max spawned
      if (numSpawnsAvailable == 0)
        break

      // Spawn N units to form a group
      for i = 0 to spawnGroupSize - 1

        // Until we reach max alive or max spawned
        if (numSpawnsAvailable == 0)
          break

        let spawnCount = min(numSpawnsAvailable, spawnGroupSize)

        // Sample unit types, one type for each unit in the group
        let unitTypes = m_definition.getUnitTypeProvider().getUnitTypes(spawnCount)
        for unitType in unitTypes
        
          // Until we reach max alive or max spawned
          if (numSpawnsAvailable == 0)
            break

          spawnSingleUnit(unitType, sp)

          numSpawnsAvailable = getNumSpawnsAvailable(aliveCountMax, spawnCountMax)

        // Clean up the unitTypes list
        destroy unitTypes

    // Clean up the spawnPoints list
    destroy spawnPoints

    // Wave has completed
    if (waveProgress == 1.0)
      complete()

  // --------------------------------------------------------------------------
  private function getNumSpawnsAvailable(int aliveCountMax, int spawnCountMax) returns int
    let numSpawnsAvailable = min(aliveCountMax - m_aliveSpawnedUnits.size(), spawnCountMax - m_numSpawned)

    if (m_numSpawned >= spawnCountMax)
      Log.debug("[SpawnWave.onActivated] Reached max number of spawns for wave")
      return 0

    if (m_aliveSpawnedUnits.size() >= aliveCountMax)
      Log.debug("[SpawnWave.onActivated] Reached max number of concurrent alive")
      return 0

    return numSpawnsAvailable

  // --------------------------------------------------------------------------
  private function spawnSingleUnit(int unitTypeId, vec2 pos) returns unit
    let spawnedUnit = createUnitTLS(
      PLAYER_UNDEAD,
      unitTypeId,
      pos.x, pos.y,
      GetRandomDirectionDeg())

    var progress = 0.0
    let waveProgresser = m_definition.getProgress()
    if (waveProgresser != null)
      progress = waveProgresser.getProgress()

    let commonUnitModifier = m_definition.getCommonUnitModifier()
    if (commonUnitModifier != null)
      commonUnitModifier.apply(spawnedUnit, progress)

    let unitModifier = m_definition.getUnitModifier(unitTypeId)
    if (unitModifier != null)
      unitModifier.apply(spawnedUnit, progress)

    m_aliveSpawnedUnits.add(spawnedUnit)
    EventListener.add(spawnedUnit, EVENT_PLAYER_UNIT_DEATH) () ->
      m_aliveSpawnedUnits.remove(spawnedUnit)

    m_numSpawned++

    return spawnedUnit

  // --------------------------------------------------------------------------
  function getSpawnedCount() returns int
    return m_numSpawned

  // --------------------------------------------------------------------------
  function getAliveCount() returns int
    return m_aliveSpawnedUnits.size()

  // --------------------------------------------------------------------------
  function getWaveProgress() returns real
    var waveProgress = -1.0
    let getProgress = m_definition.getProgress()
    if (getProgress != null)
      waveProgress = getProgress.getProgress()
    return clamp01(waveProgress)

  // --------------------------------------------------------------------------
  private function listenToActivatedEvent()
    unlistenToActivatedEvent()

    if (m_onActivatedHandler != null)
      return

    let activator = m_definition.getActivator()
    if (activator == null)
      return
    
    let e = activator.getActivatedEvent()
    if (e == null)
      return

    m_onActivatedHandler = e.register(() -> onActivated())

  // --------------------------------------------------------------------------
  private function unlistenToActivatedEvent()
    if (m_onActivatedHandler != null)
      destroy m_onActivatedHandler
      m_onActivatedHandler = null