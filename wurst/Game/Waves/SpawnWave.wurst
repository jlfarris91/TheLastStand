package SpawnWave
import SpawnWaveDefinition
import Events
import LinkedList
import WaveActivator
import HumanPlayerComponent
import GameConstants
import ErrorHandling
import ClosureEvents
import Math
import IProgress
import HashMap
import SpawnManager
import UnitRecycler
import PlayerSpawnPointProviders
import UnitMetadata
import UndeadTargetingComponent
import Runnable
import ClosureTimers
import CircularBuffer
import TlsItemIds
import ItemSet
import UnitModifiers
import Coins
import DropItemOnDeathComponent

constant real PROCESS_SPAWN_REQUEST_INTERVAL = 0.3
constant int MAX_SPAWNS_PER_PROCESS = 1

constant real GOLD_CHANCE_MIN = 0.01
constant real GOLD_CHANCE_MAX = 1.0

HashMap<unit, SpawnWave> g_unitToSpawnWaveMap
CircularBuffer<SpawnWave> g_spawnRequests = new CircularBuffer<SpawnWave>(512)
int g_lastNumberOfUnitsSpawned = 0

@configurable public bool g_enableSpawnWaveLogging = false

ItemSet g_coinItemSet = new ItemSet("Coins", COLOR_GOLD.withoutAlpha())

// ============================================================================
public class SpawnWave extends Runnable
  private SpawnWaveDefinition m_definition
  private Handle m_onActivatedHandler
  private Handle m_onDefProgressChangedEventHandler
  private LinkedList<unit> m_aliveSpawnedUnits
  private int m_numSpawned
  private string m_id
  private player m_targetPlayer
  private int m_totalGoldAwarded
  private string m_debugState

  // --------------------------------------------------------------------------
  construct(player targetPlayer, SpawnWaveDefinition def)
    if (targetPlayer == null)
      argumentNullError("targetPlayer")
    if (def == null)
      argumentNullError("def")

    m_targetPlayer = targetPlayer
    m_definition = def
    m_aliveSpawnedUnits = new LinkedList<unit>()
    m_numSpawned = 0
    m_totalGoldAwarded = 0
    m_id = def.getName()
    m_debugState = ""

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToActivatedEvent()
    unlistenToDefProgressChangedEvent()
    
    m_aliveSpawnedUnits.clear()
    destroy m_aliveSpawnedUnits
    
    m_definition = null

  // --------------------------------------------------------------------------
  function getDefinition() returns SpawnWaveDefinition
    return m_definition

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // --------------------------------------------------------------------------
  function getDebugState() returns string
    return m_debugState

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()

    listenToActivatedEvent()
    listenToDefProgressChangedEvent()

    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

    // Do this one frame later so that all player spawn waves that share these
    // spawn def services get started
    nullTimer() () ->
    //{
      m_definition.getActivator().start()

      let runnableProgress = (m_definition.getProgress() castTo int) castTo IRunnable
      if (runnableProgress != null)
        runnableProgress.start()
    //}

  // --------------------------------------------------------------------------
  override function onCompleted()
    super.onCompleted()

    unlistenToActivatedEvent()
    unlistenToDefProgressChangedEvent()

    // Do this one frame later so that all player spawn waves that share these
    // spawn def services get complete first
    nullTimer() () ->
    //{
      m_definition.getActivator().complete()

      let runnableProgress = (m_definition.getProgress() castTo int) castTo IRunnable
      if (runnableProgress != null)
        runnableProgress.complete()
    //}

  // --------------------------------------------------------------------------
  override function getProgress() returns real
    return clamp01(m_definition.getProgress().getProgress())

  // --------------------------------------------------------------------------
  function activate() returns bool
    return activate(false)

  // --------------------------------------------------------------------------
  function activate(bool forceActivation) returns bool

    g_lastNumberOfUnitsSpawned = 0
    
    m_debugState = "Spawning"
 
    if (m_targetPlayer == null)
      error("[SpawnWave.onActivated] Target player has not been set")
      return false

    if (not forceActivation and isCompleted())
      log("activateForPlayer", m_targetPlayer.getName() + " : Spawn wave has already completed")
      m_debugState = "Spawn wave has completed"
      return false

    let playerMetadata = m_targetPlayer.getMetadata()
    if (playerMetadata == null)
      m_debugState = "Player metadata is null"
      return false

    if (playerMetadata.getHasLeftGame())
      m_debugState = "Player left"
      return false

    if (playerMetadata.getHasLostGame())
      m_debugState = "Player lost"
      return false

    let playerHumanComp = playerMetadata.getHumanPlayerComponent()
    if (playerHumanComp == null)
      m_debugState = "PlayerHumanComp is null"
      return false

    let waveProgress = getProgress()
    let aliveCountMax = m_definition.getMaxAliveCount(waveProgress)
    let spawnCountMax = m_definition.getMaxSpawnCount(waveProgress)
    let spawnsPerActivation = m_definition.getSpawnsPerActivation(waveProgress)
    let spawnGroupingFactor = m_definition.getSpawnGroupingFactor(waveProgress)
    let waitForFullSpawnGroup = m_definition.getWaitForFullSpawnGroup()

    let numSpawnGroups = max(R2I(I2R(spawnsPerActivation) * (1.0 - spawnGroupingFactor)), 1)
    let spawnGroupSize = max(R2I(I2R(spawnsPerActivation) * spawnGroupingFactor), 1)

    let spawnPointProvider = getHostileSpawnPointProviderForPlayer(m_targetPlayer)

    let spawnAreaCenter = playerHumanComp.getCampCenter()

    let spawnPointsResult = spawnPointProvider.getRandomSpawnPointsInRange(spawnAreaCenter, m_definition.getSpawnRange(), numSpawnGroups)
    if (not spawnPointsResult.succeeded)
      error("[SpawnWave.onActivated] Found no spawn points!")
      m_debugState = "Found no spawn points"
      return false

    var numSpawnsAvailable = getNumSpawnsAvailable(aliveCountMax, spawnCountMax)
    var numberOfUnitsSpawned = 0

    if (forceActivation)
      numSpawnsAvailable = min(numSpawnsAvailable, 1)

    // For each spawn point
    for sp in spawnPointsResult.spawnPoints
      
      // Until we reach max alive or max spawned
      if (numSpawnsAvailable == 0 and not forceActivation)
        break

      // Sometimes we want to spawn the entire group at once
      if (waitForFullSpawnGroup and numSpawnsAvailable < spawnGroupSize and not forceActivation)
        break

      // Spawn N units to form a group
      for i = 0 to spawnGroupSize - 1

        // Until we reach max alive or max spawned
        if (numSpawnsAvailable == 0 and not forceActivation)
          break

        let spawnCount = min(numSpawnsAvailable, spawnGroupSize)

        // Sample unit types, one type for each unit in the group
        let unitTypes = m_definition.getUnitTypeProvider().getUnitTypes(spawnCount)
        for unitType in unitTypes
        
          // Until we reach max alive or max spawned
          if (numSpawnsAvailable == 0 and not forceActivation)
            break

          if (spawnSingleUnit(unitType, sp))
            numberOfUnitsSpawned++

          numSpawnsAvailable = getNumSpawnsAvailable(aliveCountMax, spawnCountMax)

        // Clean up the unitTypes list
        destroy unitTypes

    // Clean up the spawnPoints list
    destroy spawnPointsResult.spawnPoints

    g_lastNumberOfUnitsSpawned = numberOfUnitsSpawned

    return numberOfUnitsSpawned > 0

  // --------------------------------------------------------------------------
  private function getNumSpawnsAvailable(int aliveCountMax, int spawnCountMax) returns int
    let aliveCount = getAliveCount()
    let spawnedCount = getSpawnedCount()
    let remainingAlive = aliveCountMax - aliveCount
    let remainingSpawn = spawnCountMax - spawnedCount
    let numSpawnsAvailable = max(min(remainingAlive, remainingSpawn), 0)

    if (spawnedCount >= spawnCountMax)
      log("getNumSpawnsAvailable", m_targetPlayer.getName() + " : Reached max number of spawns for wave")
      m_debugState = "Reached max spawns"
      return 0

    if (aliveCount >= aliveCountMax)
      log("getNumSpawnsAvailable", m_targetPlayer.getName() + " : Reached max number of concurrent alive")
      m_debugState = "Reached max alive"
      return 0

    return numSpawnsAvailable

  // --------------------------------------------------------------------------
  private function spawnSingleUnit(int unitTypeId, vec2 pos) returns bool
    
    unit spawnedUnit
    
    if (getDefinition().getUseUnitRecycler())
      spawnedUnit = createUnitRecycled(
        PLAYER_UNDEAD,
        unitTypeId,
        pos,
        GetRandomDirectionDeg().asAngleDegrees())
    else
      spawnedUnit = createUnitTLS(
        PLAYER_UNDEAD,
        unitTypeId,
        pos,
        GetRandomDirectionDeg())

    if (spawnedUnit == null)
      log("spawnSingleUnit", "Unable to spawn unit " + UnitId2String(unitTypeId))
      m_debugState = "Spawned unit == null"
      return false

    registerSpawnedUnit(spawnedUnit)

    // Otherwise they may walk back to their spawn point
    // RemoveGuardPosition(spawnedUnit)

    let goldReward = shouldGrantGoldReward()
    if (goldReward != 0)
      let coinTypeId = getCoinItemTypeFromGoldReward(goldReward)
      spawnedUnit.awardItemOnDeath(g_coinItemSet, coinTypeId, 1.0)
  
    let progress = getProgress()

    let commonUnitModifier = m_definition.getCommonUnitModifier()
    if (commonUnitModifier != null)
      commonUnitModifier.call(spawnedUnit, progress)

    let unitModifier = m_definition.getUnitModifier(unitTypeId)
    if (unitModifier != null)
      unitModifier.call(spawnedUnit, progress)

    let unitMetadata = spawnedUnit.getMetadata()
    if (unitMetadata == null)
      Log.error("[SpawnWave.setTargetPlayer] : Unit has no metadata! : {0} ({1} : {2})".format(
        spawnedUnit.getName(),
        spawnedUnit.getTypeId().toString(),
        UnitId2StringBJ(spawnedUnit.getTypeId())))
      m_debugState = "Spawned unit has no metadata"
      return false

    // If the unit is going to drop a coin, track that
    let dropItemOnDeathComp = unitMetadata.getDropItemOnDeathComponent()
    if (dropItemOnDeathComp != null)
    //{
      if (dropItemOnDeathComp.hasItem(TlsItemIds.coinSmall))
        m_totalGoldAwarded += getGoldRewardFromCoinItemType(TlsItemIds.coinSmall)
      if (dropItemOnDeathComp.hasItem(TlsItemIds.coinMedium))
        m_totalGoldAwarded += getGoldRewardFromCoinItemType(TlsItemIds.coinMedium)
      if (dropItemOnDeathComp.hasItem(TlsItemIds.coinLarge))
        m_totalGoldAwarded += getGoldRewardFromCoinItemType(TlsItemIds.coinLarge)
      if (dropItemOnDeathComp.hasItem(TlsItemIds.coinEpic))
        m_totalGoldAwarded += getGoldRewardFromCoinItemType(TlsItemIds.coinEpic)
    //}

    unitMetadata.getOrAddUndeadTargetingComponent()
    ..setTargetPlayer(m_targetPlayer)

    return true

  // --------------------------------------------------------------------------
  function shouldGrantGoldReward() returns int
    let def = getDefinition()
    let goldReward = def.getGoldReward()
    if (m_totalGoldAwarded == goldReward)
      return 0
    let waveProgress = clamp01(def.getProgress().getProgress() * 1.1)
    let chance = lerp(GOLD_CHANCE_MIN, GOLD_CHANCE_MAX, waveProgress)
    if (not passesChanceCheck(chance))
      return 0
    let goldRewardRemaining = goldReward - m_totalGoldAwarded
    let goldToGive = (goldRewardRemaining * waveProgress).floor()
    return max(goldToGive, 0)

  // --------------------------------------------------------------------------
  function registerSpawnedUnit(unit spawnedUnit)

    if (g_unitToSpawnWaveMap.has(spawnedUnit))
      return

    g_unitToSpawnWaveMap.put(spawnedUnit, this)
    m_aliveSpawnedUnits.add(spawnedUnit)
    m_numSpawned++
  
  // --------------------------------------------------------------------------
  function unregisterSpawnedUnit(unit spawnedUnit)
    g_unitToSpawnWaveMap.remove(spawnedUnit)
    m_aliveSpawnedUnits.remove(spawnedUnit)

  // --------------------------------------------------------------------------
  function getSpawnedCount() returns int
    return m_numSpawned

  // --------------------------------------------------------------------------
  function getAliveCount() returns int
    return m_aliveSpawnedUnits.size()

  // --------------------------------------------------------------------------
  function getGoldAwarded() returns int
    return m_totalGoldAwarded

  // --------------------------------------------------------------------------
  private function requestActivation()
    g_spawnRequests.enqueue(this)

  // --------------------------------------------------------------------------
  private function listenToActivatedEvent()
    unlistenToActivatedEvent()

    let activator = m_definition.getActivator()
    if (activator == null)
      return
    
    let e = activator.getActivatedEvent()
    if (e == null)
      return

    if (e.isHandleValid(m_onActivatedHandler))
      return

    m_onActivatedHandler = e.register(() -> requestActivation())

  // --------------------------------------------------------------------------
  private function unlistenToActivatedEvent()
    let activatedEvent = m_definition.getActivator().getActivatedEvent()
    if (activatedEvent != null)
      activatedEvent.unregister(m_onActivatedHandler)
    m_onActivatedHandler = HANDLE_INVALID

  // --------------------------------------------------------------------------
  private function onDefProgressChanged()
    raiseProgressChangedEvent()
    if (getProgress() == 1.0)
      // log("onDefProgressChanged", m_targetPlayer.getName() + " : progress finished!")
      complete()

  // --------------------------------------------------------------------------
  private function listenToDefProgressChangedEvent()
    unlistenToDefProgressChangedEvent()

    let progressChangedEvent = m_definition.getProgress().getProgressChangedEvent()
    if (progressChangedEvent == null)
      return

    if (progressChangedEvent.isHandleValid(m_onDefProgressChangedEventHandler))
      return

    m_onDefProgressChangedEventHandler = progressChangedEvent.register((progress) -> onDefProgressChanged())

  // --------------------------------------------------------------------------
  private function unlistenToDefProgressChangedEvent()
    let progressChangedEvent = m_definition.getProgress().getProgressChangedEvent()
    if (progressChangedEvent != null)
      progressChangedEvent.unregister(m_onDefProgressChangedEventHandler)
    m_onDefProgressChangedEventHandler = HANDLE_INVALID

  // --------------------------------------------------------------------------
  private function log(string funcName, string message)
    if (g_enableSpawnWaveLogging)
      Log.debug("SpawnWave", funcName, getId(), message)

// ============================================================================
function onUnitDeath()
  let dyingUnit = GetDyingUnit()

  if (not g_unitToSpawnWaveMap.has(dyingUnit))
    return

  let spawnWave = g_unitToSpawnWaveMap.get(dyingUnit)
  spawnWave.unregisterSpawnedUnit(dyingUnit)

// ============================================================================
function processSpawnRequests()
  int numberOfUnitsSpawned = 0
  let numSpawnRequests = g_spawnRequests.getCount()
  var count = 0
  while (not g_spawnRequests.isEmpty() and numberOfUnitsSpawned < MAX_SPAWNS_PER_PROCESS)
    let spawnRequest = g_spawnRequests.dequeue()
    count++
    if (spawnRequest != null and spawnRequest.activate())
      numberOfUnitsSpawned += g_lastNumberOfUnitsSpawned
  if (g_enableSpawnWaveLogging)
    Log.debug("Processed spawn requests : {0}/{1} - {2}/{3} units spawned".format(count.toString(), numSpawnRequests.toString(), numberOfUnitsSpawned.toString(), MAX_SPAWNS_PER_PROCESS.toString()))

// ============================================================================
init
  g_unitToSpawnWaveMap = new HashMap<unit, SpawnWave>()
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitDeath)

  doPeriodically(PROCESS_SPAWN_REQUEST_INTERVAL, (CallbackPeriodic cb) -> processSpawnRequests())

  g_coinItemSet.add(TlsItemIds.coinSmall, 1.0)
  g_coinItemSet.add(TlsItemIds.coinMedium, 1.0)
  g_coinItemSet.add(TlsItemIds.coinLarge, 1.0)
  g_coinItemSet.add(TlsItemIds.coinEpic, 1.0)