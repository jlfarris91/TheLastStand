package SpawnWave
import Runnable
import SpawnWaveDefinition
import Events
import LinkedList
import WaveActivator
import HumanPlayerMetadata
import UnitMetadata
import GameConstants
import ErrorHandling
import ClosureEvents
import Math

public constant int UNLIMITED = 99999

// ============================================================================
public class SpawnWave extends Runnable
  private SpawnWaveDefinition m_definition
  private Action1<IWaveActivator> m_onActivatedHandler
  private player m_targetPlayer
  private LinkedList<unit> m_aliveSpawnedUnits
  private GenericArgsEvent<SpawnWave, LinkedList<unit>> m_unitsSpawnedEvent
  private int m_numSpawned
  private string m_name

  // --------------------------------------------------------------------------
  construct(SpawnWaveDefinition def, player targetPlayer)
    m_definition = def
    m_aliveSpawnedUnits = new LinkedList<unit>()
    m_unitsSpawnedEvent = new GenericArgsEvent<SpawnWave, LinkedList<unit>>()
    setTargetPlayer(targetPlayer)

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToActivatedEvent()
    destroy m_aliveSpawnedUnits
    destroy m_unitsSpawnedEvent
    m_definition = null
    m_targetPlayer = null

  // --------------------------------------------------------------------------
  function setName(string name)
    m_name = name

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function getTargetPlayer() returns player
    return m_targetPlayer

  // --------------------------------------------------------------------------
  function setTargetPlayer(player p)
    m_targetPlayer = p

  // --------------------------------------------------------------------------
  function getDefinition() returns SpawnWaveDefinition
    return m_definition

  // --------------------------------------------------------------------------
  function getUnitsSpawnedEvent() returns GenericArgsEvent<SpawnWave, LinkedList<unit>>
    return m_unitsSpawnedEvent

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()
    listenToActivatedEvent()
    m_definition.getActivator().start()
    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

  // --------------------------------------------------------------------------
  override function onStopped()
    super.onStopped()
    m_definition.getActivator().stop()
    unlistenToActivatedEvent()
    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

  // --------------------------------------------------------------------------
  override function onPaused()
    super.onPaused()
    m_definition.getActivator().pause()

  // --------------------------------------------------------------------------
  override function onResumed()
    super.onResumed()
    m_definition.getActivator().resume()

  // --------------------------------------------------------------------------
  protected function onActivated()

    let p = getTargetPlayer()
    if (p == null)
      error("[SpawnWave.onActivated] Target player has not been set")
      return

    let playerMetadata = p.getHumanMetadataRequired()
    if (playerMetadata.getIsDead())
      Log.debug("[SpawnWave.onActivated] SpawnWave was activated for dead player " + playerMetadata.getName())
      return

    let camp = playerMetadata.getCamp()
    let center = camp.getCenter()

    let waveProgress = getWaveProgress()
    let aliveCountMax = getAliveCountMax(waveProgress)
    let spawnCountMax = getSpawnCountMax(waveProgress)    
    let spawnsPerActivation = getSpawnsPerActivation(waveProgress)    
    let spawnGroupingFactor = getSpawnGroupFactor(waveProgress)

    let numSpawnGroups = max(R2I(I2R(spawnsPerActivation) * (1.0 - spawnGroupingFactor)), 1)
    let spawnGroupSize = max(R2I(I2R(spawnsPerActivation) * spawnGroupingFactor), 1)

    let spawnPoints =  m_definition.getSpawnPointProvider().getSpawnPoints(center, numSpawnGroups)

    let spawnedUnits = new LinkedList<unit>()

    var numSpawnsAvailable = min(aliveCountMax - m_aliveSpawnedUnits.size(), spawnCountMax - m_numSpawned)

    // For each spawn point
    for sp in spawnPoints
      
      // Until we reach max alive or max spawned
      if (numSpawnsAvailable == 0)
        break

      // Spawn N units to form a group
      for i = 0 to spawnGroupSize - 1

        // Until we reach max alive or max spawned
        if (numSpawnsAvailable == 0)
          break

        let spawnCount = min(numSpawnsAvailable, spawnGroupSize)

        // Sample unit types, one type for each unit in the group
        let unitTypes = m_definition.getUnitTypeProvider().getUnitTypes(spawnCount)
        for unitType in unitTypes
        
          // Until we reach max alive or max spawned
          if (numSpawnsAvailable == 0)
            break

          let spawnedUnit = spawnSingleUnit(unitType, sp)
          spawnedUnits.add(spawnedUnit)

          numSpawnsAvailable = min(aliveCountMax - m_aliveSpawnedUnits.size(), spawnCountMax - m_numSpawned)

        // Clean up the unitTypes list
        destroy unitTypes

    // Clean up the spawnPoints list
    destroy spawnPoints
    
    m_unitsSpawnedEvent.call(this, spawnedUnits)
    destroy spawnedUnits

  // --------------------------------------------------------------------------
  private function spawnSingleUnit(int unitTypeId, vec2 pos) returns unit
    let spawnedUnit = createUnitTLS(
      PLAYER_UNDEAD,
      unitTypeId,
      pos.x, pos.y,
      GetRandomDirectionDeg())

    var progress = 0.0
    let waveProgresser = m_definition.getProgress()
    if (waveProgresser != null)
      progress = waveProgresser.getProgress()

    let unitModifier = m_definition.getUnitModifier()
    if (unitModifier != null)
      unitModifier.apply(spawnedUnit, progress)

    m_aliveSpawnedUnits.add(spawnedUnit)
    EventListener.add(spawnedUnit, EVENT_PLAYER_UNIT_DEATH) () ->
      m_aliveSpawnedUnits.remove(spawnedUnit)

    m_numSpawned++

    return spawnedUnit

  // --------------------------------------------------------------------------
  function getSpawnedCount() returns int
    return m_numSpawned

  // --------------------------------------------------------------------------
  function getAliveCount() returns int
    return m_aliveSpawnedUnits.size()

  // --------------------------------------------------------------------------
  function getWaveProgress() returns real
    var waveProgress = -1.0
    let getProgress = m_definition.getProgress()
    if (getProgress != null)
      waveProgress = getProgress.getProgress()
    return clamp01(waveProgress)

  // --------------------------------------------------------------------------
  function getAliveCountMax(real waveProgress) returns int
    var aliveCountMax = UNLIMITED
    let getAliveCountMax = m_definition.getMaxAliveCount()
    if (getAliveCountMax != null)
      aliveCountMax = getAliveCountMax.call(waveProgress)
    return clamp(aliveCountMax, 0, UNLIMITED)

  // --------------------------------------------------------------------------
  function getSpawnCountMax(real waveProgress) returns int
    var spawnCountMax = UNLIMITED
    let getSpawnPointMax = m_definition.getMaxSpawnCount()
    if (getSpawnPointMax != null)
      spawnCountMax = getSpawnPointMax.call(waveProgress)
    return clamp(spawnCountMax, 0, UNLIMITED)

  // --------------------------------------------------------------------------
  function getSpawnGroupFactor(real waveProgress) returns real
    var spawnGroupingFactor = 0.0
    let getSpawnGroupingFactor = m_definition.getSpawnGroupingFactor()
    if (getSpawnGroupingFactor != null)
      spawnGroupingFactor = getSpawnGroupingFactor.call(waveProgress)
    return clamp01(spawnGroupingFactor)

  // --------------------------------------------------------------------------
  function getSpawnsPerActivation(real waveProgress) returns int
    var spawnsPerActivation = 1
    let getSpawnsPerActivation = m_definition.getSpawnsPerActivation()
    if (getSpawnsPerActivation != null)
      spawnsPerActivation = getSpawnsPerActivation.call(waveProgress)
    return clamp(spawnsPerActivation, 0, 1000)

  // --------------------------------------------------------------------------
  private function listenToActivatedEvent()
    unlistenToActivatedEvent()
    if (m_onActivatedHandler == null)
      let activator = m_definition.getActivator()
      m_onActivatedHandler = activator.getActivatedEvent().add() (IWaveActivator sender) ->
        onActivated()

  // --------------------------------------------------------------------------
  private function unlistenToActivatedEvent()
    if (m_onActivatedHandler != null)
      if (m_definition != null)
        let activator = m_definition.getActivator()
        if (activator != null)
          activator.getActivatedEvent().remove(m_onActivatedHandler)
      destroy m_onActivatedHandler
      m_onActivatedHandler = null