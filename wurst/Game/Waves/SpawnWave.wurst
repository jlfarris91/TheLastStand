package SpawnWave
import Runnable
import SpawnWaveDefinition
import Events
import LinkedList
import WaveActivator
import HumanPlayerMetadata
import UnitMetadata
import GameConstants
import ErrorHandling
import ClosureEvents
import Math

constant int UNLIMITED = 99999

// ============================================================================
public class SpawnWave extends Runnable
  private SpawnWaveDefinition m_definition
  private GenericEventHandler<IWaveActivator> m_onActivatedHandler
  private player m_targetPlayer
  private LinkedList<unit> m_aliveSpawnedUnits
  private GenericArgsEvent<SpawnWave, LinkedList<unit>> m_unitsSpawnedEvent
  private int m_numSpawned

  // --------------------------------------------------------------------------
  construct(SpawnWaveDefinition def, player targetPlayer)
    m_definition = def
    m_aliveSpawnedUnits = new LinkedList<unit>()
    m_unitsSpawnedEvent = new GenericArgsEvent<SpawnWave, LinkedList<unit>>()
    setTargetPlayer(targetPlayer)

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToActivatedEvent()
    destroy m_aliveSpawnedUnits
    destroy m_unitsSpawnedEvent
    m_definition = null
    m_targetPlayer = null

  // --------------------------------------------------------------------------
  function getTargetPlayer() returns player
    return m_targetPlayer

  // --------------------------------------------------------------------------
  function setTargetPlayer(player p)
    m_targetPlayer = p

  // --------------------------------------------------------------------------
  function getDefinition() returns SpawnWaveDefinition
    return m_definition

  // --------------------------------------------------------------------------
  function getUnitsSpawnedEvent() returns GenericArgsEvent<SpawnWave, LinkedList<unit>>
    return m_unitsSpawnedEvent

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()
    listenToActivatedEvent()
    m_definition.getActivator().start()
    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

  // --------------------------------------------------------------------------
  override function onStopped()
    super.onStopped()
    m_definition.getActivator().stop()
    unlistenToActivatedEvent()
    m_aliveSpawnedUnits.clear()
    m_numSpawned = 0

  // --------------------------------------------------------------------------
  override function onPaused()
    super.onPaused()
    m_definition.getActivator().pause()

  // --------------------------------------------------------------------------
  override function onResumed()
    super.onResumed()
    m_definition.getActivator().resume()

  // --------------------------------------------------------------------------
  protected function onActivated()

    let p = getTargetPlayer()
    if (p == null)
      error("Target player has not been set")
      return

    let playerMetadata = p.getHumanMetadataRequired()
    if (playerMetadata.getIsDead())
      return

    let camp = playerMetadata.getCamp()
    let center = camp.getCenter()

    let waveProgress = getWaveProgress()
    let aliveCountMax = getAliveCountMax(waveProgress)
    let spawnCountMax = getSpawnCountMax(waveProgress)    
    let spawnsPerActivation = getSpawnsPerActivation(waveProgress)    
    let spawnGroupingFactor = getSpawnGroupFactor(waveProgress)

    let numAlive = m_aliveSpawnedUnits.size()
    let numSpawnsAvailable = min(aliveCountMax - numAlive, spawnCountMax - m_numSpawned)

    if (numSpawnsAvailable == 0)
      return

    let numSpawnGroups = max(R2I(I2R(spawnsPerActivation) * (1.0 - spawnGroupingFactor)), 1)
    let spawnGroupSize = max(R2I(I2R(spawnsPerActivation) * spawnGroupingFactor), 1)

    let spawnPoints =  m_definition.getSpawnPointProvider().getSpawnPoints(center, numSpawnGroups)

    let spawnedUnits = new LinkedList<unit>()

    // Log.info("=== SpawnWave Activated ===")
    // Log.info("Progress: " + I2S(R2I(waveProgress * 100.0)) + "%")
    // Log.info("Spawns: " + I2S(m_numSpawned) + "/" + (spawnCountMax == UNLIMITED ? "Unlimited" : I2S(spawnCountMax)))
    // Log.info("Alive: " + I2S(numAlive) + "/" + (aliveCountMax == UNLIMITED ? "Unlimited" : I2S(aliveCountMax)))
    // Log.info("Groups: " + I2S(numSpawnGroups) + " Size: " + I2S(spawnGroupSize))
    // Log.info("Spawn Points Found: " + I2S(spawnPoints.getCount()))

    var numSpawnsRemaining = numSpawnsAvailable
    Log.info("Spawns: " + I2S(m_numSpawned) + "/" + (spawnCountMax == UNLIMITED ? "Unlimited" : I2S(spawnCountMax)))
    Log.info("Alive: " + I2S(numAlive) + "/" + (aliveCountMax == UNLIMITED ? "Unlimited" : I2S(aliveCountMax)))
    Log.info("Number of spawns available: " + I2S(numSpawnsRemaining))

    // For each spawn points
    for sp in spawnPoints
      // Spawn N units
      for i = 0 to spawnGroupSize - 1
        // Until we reach max alive or max spawned
        if (numSpawnsRemaining > 0)
          let spawnCount = min(numSpawnsRemaining, spawnGroupSize)
          let unitTypes = m_definition.getUnitTypeProvider().getUnitTypes(spawnCount)
          for unitType in unitTypes
            let spawnedUnit = spawnSingleUnit(unitType, sp)
            spawnedUnits.add(spawnedUnit)
            numSpawnsRemaining--
          destroy unitTypes

    destroy spawnPoints
    
    m_unitsSpawnedEvent.invoke(this, spawnedUnits)
    destroy spawnedUnits

  // --------------------------------------------------------------------------
  private function spawnSingleUnit(int unitTypeId, vec2 pos) returns unit
    let spawnedUnit = createUnitTLS(
      PLAYER_UNDEAD,
      unitTypeId,
      pos.x, pos.y,
      GetRandomDirectionDeg())

    Log.info("  Spawned 1 " + spawnedUnit.getName())

    var progress = 0.0
    let waveProgresser = m_definition.getProgress()
    if (waveProgresser != null)
      progress = waveProgresser.getProgress()

    let unitModifier = m_definition.getUnitModifier()
    if (unitModifier != null)
      unitModifier.apply(spawnedUnit, progress)

    m_aliveSpawnedUnits.add(spawnedUnit)
    EventListener.add(spawnedUnit, EVENT_PLAYER_UNIT_DEATH) () ->
      m_aliveSpawnedUnits.remove(spawnedUnit)

    m_numSpawned++

    return spawnedUnit

  // --------------------------------------------------------------------------
  private function getWaveProgress() returns real
    var waveProgress = -1.0
    let getProgress = m_definition.getProgress()
    if (getProgress != null)
      waveProgress = getProgress.getProgress()
    return clamp01(waveProgress)

  // --------------------------------------------------------------------------
  private function getAliveCountMax(real waveProgress) returns int
    var aliveCountMax = UNLIMITED
    let getAliveCountMax = m_definition.getMaxAliveCount()
    if (getAliveCountMax != null)
      aliveCountMax = getAliveCountMax.execute(waveProgress)
    return clamp(aliveCountMax, 0, UNLIMITED)

  // --------------------------------------------------------------------------
  private function getSpawnCountMax(real waveProgress) returns int
    var spawnCountMax = UNLIMITED
    let getSpawnPointMax = m_definition.getMaxSpawnCount()
    if (getSpawnPointMax != null)
      spawnCountMax = getSpawnPointMax.execute(waveProgress)
    return clamp(spawnCountMax, 0, UNLIMITED)

  // --------------------------------------------------------------------------
  private function getSpawnGroupFactor(real waveProgress) returns real
    var spawnGroupingFactor = 0.0
    let getSpawnGroupingFactor = m_definition.getSpawnGroupingFactor()
    if (getSpawnGroupingFactor != null)
      spawnGroupingFactor = getSpawnGroupingFactor.execute(waveProgress)
    return clamp01(spawnGroupingFactor)

  // --------------------------------------------------------------------------
  private function getSpawnsPerActivation(real waveProgress) returns int
    var spawnsPerActivation = 1
    let getSpawnsPerActivation = m_definition.getSpawnsPerActivation()
    if (getSpawnsPerActivation != null)
      spawnsPerActivation = getSpawnsPerActivation.execute(waveProgress)
    return clamp(spawnsPerActivation, 0, 1000)

  // --------------------------------------------------------------------------
  private function listenToActivatedEvent()
    let activator = m_definition.getActivator()
    m_onActivatedHandler = activator.getActivatedEvent().addListener() (IWaveActivator sender) ->
      onActivated()

  // --------------------------------------------------------------------------
  private function unlistenToActivatedEvent()
    if (m_onActivatedHandler != null)
      destroy m_onActivatedHandler
      m_onActivatedHandler = null