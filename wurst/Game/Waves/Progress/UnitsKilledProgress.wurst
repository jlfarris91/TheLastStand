package UnitsKilledProgress
import Runnable
import ClosureEvents
import IProgress
import Events

// ============================================================================
public class UnitsKilledProgress extends Runnable implements IProgress
  private int m_kills
  private int m_killsRequired
  private player m_killer
  private player m_target
  private EventListener m_killEventListener
  private Event1<IProgress> m_progressChangedEvent

  // --------------------------------------------------------------------------
  construct(player killer, player target)
    m_killer = killer
    m_target = target
    m_kills = 0
    m_killsRequired = 0

  // --------------------------------------------------------------------------
  ondestroy
    unlistenToKillEvent()

    if (m_progressChangedEvent != null)
      destroy m_progressChangedEvent
      m_progressChangedEvent = null

  // --------------------------------------------------------------------------
  function getKillsRequired() returns int
    return m_killsRequired
  
  // --------------------------------------------------------------------------
  function setKillsRequired(int value)
    m_killsRequired = value

  // --------------------------------------------------------------------------
  override function getProgress() returns real
    return I2R(m_kills) / I2R(m_killsRequired)

  // --------------------------------------------------------------------------
  override function reset()
    super.reset()
    m_kills = 0
    unlistenToKillEvent()

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()
    m_kills = 0
    listenToKillEvent()

  // --------------------------------------------------------------------------
  override function onCompleted()
    super.onCompleted()
    listenToKillEvent()

  // --------------------------------------------------------------------------
  override function onPaused()
    super.onPaused()
    unlistenToKillEvent()

  // --------------------------------------------------------------------------
  override function onResumed()
    super.onResumed()
    listenToKillEvent()

  // --------------------------------------------------------------------------
  private function listenToKillEvent()
    m_killEventListener = EventListener.add(EVENT_PLAYER_UNIT_DEATH) -> 
      let killer = GetOwningPlayer(GetKillingUnit())
      let killed = GetOwningPlayer(GetDyingUnit())
      if (killer == m_killer and killed == m_target)
        onKill()

  // --------------------------------------------------------------------------
  private function unlistenToKillEvent()
    if (m_killEventListener != null)
      destroy m_killEventListener
      m_killEventListener = null

  // --------------------------------------------------------------------------
  private function onKill()
    m_kills++
    raiseProgressChangedEvent()

  // --------------------------------------------------------------------------
  override function getProgressChangedEvent() returns Event1<IProgress>
    if (m_progressChangedEvent == null)
      m_progressChangedEvent = new Event1<IProgress>()
    return m_progressChangedEvent

  // --------------------------------------------------------------------------
  function raiseProgressChangedEvent()
    if (m_progressChangedEvent != null)
      m_progressChangedEvent.call(this)
      

      