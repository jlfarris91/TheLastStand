package PeriodicWaveActivator
import WaveActivator
import ClosureTimers
import Runnable

// ============================================================================
public class PeriodicWaveActivator extends WaveActivatorBase
  private real m_interval
  private CallbackPeriodic m_timerCallback

  // --------------------------------------------------------------------------
  construct(real interval)
    setInterval(interval)

  // --------------------------------------------------------------------------
  ondestroy
    stopSpawning()

  // --------------------------------------------------------------------------
  function getInterval() returns real
    return m_interval

  // --------------------------------------------------------------------------
  function setInterval(real interval)
    m_interval = interval
    if (this.hasStarted())
      restart()

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()
    startSpawning()

  // --------------------------------------------------------------------------
  override function onCompleted()
    super.onCompleted()
    stopSpawning()

  // --------------------------------------------------------------------------
  private function restart()
    stopSpawning()
    startSpawning()

  // --------------------------------------------------------------------------
  private function startSpawning()
    m_timerCallback = doPeriodically(getInterval()) (CallbackPeriodic cb) ->
      raiseActivatedEvent()

  // --------------------------------------------------------------------------
  private function stopSpawning()
    if (m_timerCallback != null)
      destroy m_timerCallback
      m_timerCallback = null

  // --------------------------------------------------------------------------
  override function getState() returns RunnableState
    return super.getState()

  // --------------------------------------------------------------------------
  override function getError() returns string
    return super.getError()

  // --------------------------------------------------------------------------
  override function start()
    super.start()

  // --------------------------------------------------------------------------
  override function pause()
    super.pause()

  // --------------------------------------------------------------------------
  override function resume()
    super.resume()

  // --------------------------------------------------------------------------
  override function complete()
    super.complete()

  // --------------------------------------------------------------------------
  override function fail(string errorMsg)
    super.fail(errorMsg)