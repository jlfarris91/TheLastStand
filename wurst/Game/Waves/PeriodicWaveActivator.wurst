package PeriodicWaveActivator
import WaveActivator
import ClosureTimers
import Runnable

// ============================================================================
public class PeriodicWaveActivator extends WaveActivator
  private real m_interval
  private CallbackPeriodic m_timerCallback

  // --------------------------------------------------------------------------
  construct(real interval)
    m_timerCallback = null
    setInterval(interval)

  // --------------------------------------------------------------------------
  ondestroy
    destroyTimerCallback()

  // --------------------------------------------------------------------------
  function getInterval() returns real
    return m_interval

  // --------------------------------------------------------------------------
  function setInterval(real interval)
    m_interval = interval
    if (this.hasStarted())
      restart()

  // --------------------------------------------------------------------------
  override protected function onStarted()
    super.onStarted()
    startSpawning()

  // --------------------------------------------------------------------------
  override protected function onCompleted()
    super.onCompleted()
    stopSpawning()

  // --------------------------------------------------------------------------
  private function startSpawning()
    if (m_timerCallback != null)
      return

    // Immediately raise the event
    raiseActivatedEvent()

    // Then every N seconds
    m_timerCallback = doPeriodically(getInterval()) (CallbackPeriodic cb) ->
      raiseActivatedEvent()

  // --------------------------------------------------------------------------
  private function stopSpawning()
    destroyTimerCallback()

  // --------------------------------------------------------------------------
  private function destroyTimerCallback()
    if (m_timerCallback != null)
      destroy m_timerCallback
      m_timerCallback = null