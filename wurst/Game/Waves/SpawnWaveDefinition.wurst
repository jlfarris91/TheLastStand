package SpawnWaveDefinition
import ISpawnWave
import IProgress
import Math
import HashMap
import Vector
import Func
import Range
import Spawning
import Action
import SoundUtils

// ============================================================================
public class SpawnWaveDefinition implements ISpawnWaveDefinition
  private string m_name
  private IProgress m_progress
  private ISpawnWaveActivator m_activator
  private SpawnRange m_spawnRange
  private ISpawnWaveUnitTypeProvider m_unitTypeProvider
  private Func1<ISpawnWaveContext, int> m_maxSpawnCount
  private Func1<ISpawnWaveContext, int> m_maxAliveCount
  private Func1<ISpawnWaveContext, int> m_spawnsPerActivation
  private Func1<ISpawnWaveContext, real> m_spawnGroupingFactor
  private Func1<ISpawnWaveContext, int> m_goldReward
  private Action2<unit, ISpawnWaveContext> m_commonUnitModifier
  private IterableMap<int, Action2<unit, ISpawnWaveContext>> m_unitModifiers
  private Vector<string> m_tags
  private bool m_waitForFullSpawnGroup = false
  private bool m_useUnitRecycler = true
  private rangeReal m_facingAngleRange = rangeReal(0.0, 360.0)
  private SpawnPointProviderType m_spawnPointProviderType = SpawnPointProviderType.CACHED_HOSTILE
  private sound m_playSoundOnStart = null
  private sound m_playSoundOnComplete = null
  private SoundDefinition m_playSoundOnGroupSpawn = null
  private string m_minimapIconPath = null
  private color m_minimapIconColor = color(255, 255, 255)
  private bool m_pingOnGroupSpawn = false
  private color m_pingOnGroupSpawnColor = color(255, 255, 255)

  // --------------------------------------------------------------------------
  construct(string name)
    m_name = name
    m_tags = new Vector<string>()

  // --------------------------------------------------------------------------
  ondestroy
    if (m_progress != null)
      destroy m_progress
      m_progress = null

    if (m_activator != null)
      destroy m_activator
      m_activator = null

    if (m_unitTypeProvider != null)
      destroy m_unitTypeProvider
      m_unitTypeProvider = null

    if (m_maxAliveCount != null)
      m_maxAliveCount.release()
      m_maxAliveCount = null

    if (m_maxSpawnCount != null)
      m_maxSpawnCount.release()
      m_maxSpawnCount = null

    if (m_spawnsPerActivation != null)
      m_spawnsPerActivation.release()
      m_spawnsPerActivation = null

    if (m_spawnGroupingFactor != null)
      m_spawnGroupingFactor.release()
      m_spawnGroupingFactor = null

    if (m_commonUnitModifier != null)
      m_commonUnitModifier.release()
      m_commonUnitModifier = null

    if (m_unitModifiers != null)
      for unitTypeId in m_unitModifiers
        m_unitModifiers.get(unitTypeId).release()
      destroy m_unitModifiers
      m_unitModifiers = null

    if (m_goldReward != null)
      m_goldReward.release()
      m_goldReward = null

    destroy m_tags
    m_tags = null

  // --------------------------------------------------------------------------
  override function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  override function setProgress(IProgress progress)
    m_progress = progress

  // --------------------------------------------------------------------------
  override function getProgress() returns IProgress
    return m_progress

  // --------------------------------------------------------------------------
  override function setActivator(ISpawnWaveActivator activator)
    m_activator = activator

  // --------------------------------------------------------------------------
  override function getActivator() returns ISpawnWaveActivator
    return m_activator

  // --------------------------------------------------------------------------
  override function setSpawnRange(SpawnRange spawnRange)
    m_spawnRange = spawnRange

  // --------------------------------------------------------------------------
  override function getSpawnRange() returns SpawnRange
    return m_spawnRange

  // --------------------------------------------------------------------------
  override function setUnitTypeProvider(ISpawnWaveUnitTypeProvider unitTypeProvider)
    m_unitTypeProvider = unitTypeProvider

  // --------------------------------------------------------------------------
  override function getUnitTypeProvider() returns ISpawnWaveUnitTypeProvider
    return m_unitTypeProvider

  // --------------------------------------------------------------------------
  override function setMaxAliveCount(Func1<ISpawnWaveContext, int> value)
    value.acquire()
    if (m_maxAliveCount != null)
      m_maxAliveCount.release()
    m_maxAliveCount = value

  // --------------------------------------------------------------------------
  override function getMaxAliveCount(ISpawnWaveContext context) returns int
    if (m_maxAliveCount == null)
      return UNLIMITED
    return clamp(m_maxAliveCount.call(context), 0, UNLIMITED)

  // --------------------------------------------------------------------------
  override function setMaxSpawnCount(Func1<ISpawnWaveContext, int> value)
    value.acquire()
    if (m_maxSpawnCount != null)
      m_maxSpawnCount.release()
    m_maxSpawnCount = value

  // --------------------------------------------------------------------------
  override function getMaxSpawnCount(ISpawnWaveContext context) returns int
    if (m_maxSpawnCount == null)
      return UNLIMITED
    return clamp(m_maxSpawnCount.call(context), 0, UNLIMITED)

  // --------------------------------------------------------------------------
  override function getSpawnsPerActivation(ISpawnWaveContext context) returns int
    if (m_spawnsPerActivation == null)
      return 1
    return clamp(m_spawnsPerActivation.call(context), 0, 1000)

  // --------------------------------------------------------------------------
  override function setSpawnsPerActivation(Func1<ISpawnWaveContext, int> value)
    value.acquire()
    if (m_spawnsPerActivation != null)
      m_spawnsPerActivation.release()
    m_spawnsPerActivation = value

  // --------------------------------------------------------------------------
  override function getSpawnGroupingFactor(ISpawnWaveContext context) returns real
    if (m_spawnGroupingFactor == null)
      return 0.0
    return clamp01(m_spawnGroupingFactor.call(context))

  // --------------------------------------------------------------------------
  override function setSpawnGroupingFactor(Func1<ISpawnWaveContext, real> value)
    value.acquire()
    if (m_spawnGroupingFactor != null)
      m_spawnGroupingFactor.release()
    m_spawnGroupingFactor = value

  // --------------------------------------------------------------------------
  override function setCommonUnitModifier(Action2<unit, ISpawnWaveContext> action)
    action.acquire()
    if (m_commonUnitModifier != null)
      m_commonUnitModifier.release()
    m_commonUnitModifier = action

  // --------------------------------------------------------------------------
  override function getCommonUnitModifier() returns Action2<unit, ISpawnWaveContext>
    return m_commonUnitModifier

  // --------------------------------------------------------------------------
  override function setUnitModifier(int unitTypeId, Action2<unit, ISpawnWaveContext> action)
    action.acquire()
    if (m_unitModifiers == null)
      m_unitModifiers = new IterableMap<int, Action2<unit, ISpawnWaveContext>>()
    let existing = m_unitModifiers.get(unitTypeId)
    if (existing != null)
      existing.release()
    m_unitModifiers.put(unitTypeId, action)

  // --------------------------------------------------------------------------
  override function getUnitModifier(int unitTypeId) returns Action2<unit, ISpawnWaveContext>
    if (m_unitModifiers == null)
      return null
    return m_unitModifiers.get(unitTypeId)

  // --------------------------------------------------------------------------
  override function setTags(vararg string tags)
    m_tags.clear()
    for tag in tags
      m_tags.add(tag)

  // --------------------------------------------------------------------------
  override function getTags() returns Vector<string>
    return m_tags

  // --------------------------------------------------------------------------
  override function getWaitForFullSpawnGroup() returns bool
    return m_waitForFullSpawnGroup

  // --------------------------------------------------------------------------
  override function setWaitForFullSpawnGroup(bool value)
    m_waitForFullSpawnGroup = value

  // --------------------------------------------------------------------------
  override function getUseUnitRecycler() returns bool
    return m_useUnitRecycler

  // --------------------------------------------------------------------------
  override function setUseUnitRecycler(bool value)
    m_useUnitRecycler = value

  // --------------------------------------------------------------------------
  override function getGoldReward(ISpawnWaveContext context) returns int
    return m_goldReward != null ? m_goldReward.call(context) : 0

  // --------------------------------------------------------------------------
  override function setGoldReward(Func1<ISpawnWaveContext, int> value)
    value.acquire()
    if (m_goldReward != null)
      m_goldReward.release()
    m_goldReward = value

  // --------------------------------------------------------------------------
  override function getFacingAngleRange() returns rangeReal
    return m_facingAngleRange

  // --------------------------------------------------------------------------
  override function setFacingAngleRange(rangeReal range)
    m_facingAngleRange = range
  
  // --------------------------------------------------------------------------
  override function getSpawnPointProviderType() returns SpawnPointProviderType
    return m_spawnPointProviderType
  
  // --------------------------------------------------------------------------
  override function setSpawnPointProviderType(SpawnPointProviderType value)
    m_spawnPointProviderType = value

  // --------------------------------------------------------------------------
  function playSoundOnStart(sound value)
    m_playSoundOnStart = value

  // --------------------------------------------------------------------------
  function getPlaySoundOnStart() returns sound
    return m_playSoundOnStart

  // --------------------------------------------------------------------------
  function playSoundOnComplete(sound value)
    m_playSoundOnComplete = value

  // --------------------------------------------------------------------------
  function getPlaySoundOnComplete() returns sound
    return m_playSoundOnComplete

  // --------------------------------------------------------------------------
  function playSoundOnGroupSpawn(SoundDefinition definition)
    m_playSoundOnGroupSpawn = definition

  // --------------------------------------------------------------------------
  function getPlaySoundOnGroupSpawn() returns SoundDefinition
    return m_playSoundOnGroupSpawn

  // --------------------------------------------------------------------------
  function showMinimapIcon(string iconPath, color color)
    m_minimapIconPath = iconPath
    m_minimapIconColor = color

  // --------------------------------------------------------------------------
  function getMinimapIconPath() returns string
    return m_minimapIconPath

  // --------------------------------------------------------------------------
  function getMinimapIconColor() returns color
    return m_minimapIconColor
  
  // --------------------------------------------------------------------------
  function pingOnGroupSpawn(color color)
    m_pingOnGroupSpawn = true
    m_pingOnGroupSpawnColor = color
  
  // --------------------------------------------------------------------------
  function getPingOnGroupSpawn() returns bool
    return m_pingOnGroupSpawn
  
  // --------------------------------------------------------------------------
  function getPingOnGroupSpawnColor() returns color
    return m_pingOnGroupSpawnColor