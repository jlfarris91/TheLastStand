package WaveCollection
import HashMap
import LinkedList
import ErrorHandling
import Wave

// ============================================================================
public abstract class WaveCollection<TWave>
  protected HashMap<int, TWave> m_waves
  protected LinkedList<int> m_sortedWaveIndices

  // --------------------------------------------------------------------------
  construct()
    m_waves = new HashMap<int, TWave>()
    m_sortedWaveIndices = new LinkedList<int>()

  // --------------------------------------------------------------------------
  function getCount() returns int
    return m_waves.size()

  // --------------------------------------------------------------------------
  // Gets the latest available wave whos index is less than or equal to the given index
  // 
  // Example:
  // If there is only 1 wave registered at index 5, then
  //  - getLatestWave(0) returns null
  //  - getLatestWave(2) returns null
  //  - getLatestWave(5) returns wave(5)
  //  - getLatestWave(8) returns wave(5)
  //  - getLatestWave(999) returns wave(5)
  function getLatestWave(int index) returns TWave
    let minIndex = getMinIndex(index)
    if (m_waves.has(minIndex))
      return m_waves.get(minIndex)
    return null

  // --------------------------------------------------------------------------
  function geteWave(int index) returns TWave
    if (m_waves.has(index))
      return m_waves.get(index)
    return null

  // --------------------------------------------------------------------------
  function getOrCreateWave(int index) returns TWave
    if (m_waves.has(index))
      return m_waves.get(index)
    let wave = createWave(index)
    addWave(index, wave)
    return wave

  // --------------------------------------------------------------------------
  function addWave(int index, TWave wave)
    if (m_waves.has(index))
      error("Waves collection already contains a wave for the given index")
      return
    m_sortedWaveIndices.add(index)
    m_sortedWaveIndices.sort()
    m_waves.put(index, wave)

  // --------------------------------------------------------------------------
  function removeWave(TWave wave) returns bool
    for index in m_sortedWaveIndices
      if (m_waves.get(index) == wave)
        m_waves.remove(index)
        m_sortedWaveIndices.removeAt(index)
        return true
    return false

  // --------------------------------------------------------------------------
  function iterator() returns LLIterator<int>
    return m_sortedWaveIndices.iterator()

  // --------------------------------------------------------------------------
  protected abstract function createWave(int _index) returns TWave
    
  // --------------------------------------------------------------------------
  private function getMinIndex(int index) returns int
    let iterator = m_sortedWaveIndices.iterator()
    while (iterator.hasNext())
      let current = iterator.next()
      let next = iterator.hasNext() ? iterator.lookahead() : -1
      if (index >= current and (next == -1 or index < next))
        iterator.close()
        return current
    iterator.close()
    return -1

// ============================================================================
//  TESTS
// ============================================================================

// ============================================================================
class FakeWave extends Wave
  int m_index

  construct(int index)
    m_index = index

// ============================================================================
class FakeWaveCollection extends WaveCollection<FakeWave>
  
  // --------------------------------------------------------------------------
  protected override function createWave(int index) returns FakeWave
    return new FakeWave(index)

// ============================================================================
//  - getLatestWave(0) returns null
//  - getLatestWave(2) returns null
//  - getLatestWave(5) returns wave(5)
//  - getLatestWave(8) returns wave(5)
//  - getLatestWave(999) returns wave(5)
@test function getLatestWave()
  // arrange

  let waveCollection = new FakeWaveCollection()
  let wave5 = waveCollection.getOrCreateWave(5)

  // act + assert
  assertTrue(waveCollection.getLatestWave(0) == null)
  assertTrue(waveCollection.getLatestWave(2) == null)

  
  let actualWave5 = waveCollection.getLatestWave(5)
  assertTrue(actualWave5 != null)
  assertTrue(actualWave5.m_index == 5)

  // TODO: equality doesn't work?!
  assertTrue((actualWave5 castTo int) == (wave5 castTo int))

  assertTrue((waveCollection.getLatestWave(8) castTo int) == (wave5 castTo int))
  assertTrue((waveCollection.getLatestWave(999) castTo int) == (wave5 castTo int))