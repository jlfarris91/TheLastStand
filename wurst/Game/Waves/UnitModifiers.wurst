package UnitModifiers
import GrantXpOnDeathComponent
import ObjEditingCommons
import ItemSet
import Math
import ErrorHandling
import UnitMetadata
import DropItemOnDeathComponent
import Range
import Unit2
import TlsUnitIds
import UnitExtensions
import TlsAbilityIds
import ObjectIds
import NecromancerComponent
import ArchimondeComponent
import UndeadTargetingComponent
import WaveSpawning

// ============================================================================
public function unit.awardItemOnDeath(ItemSet itemSet, int itemType, real chance)
  
  if (not passesChanceCheck01(chance))
    return

  this.awardItemOnDeath(itemSet, itemType)

// ============================================================================
public function unit.awardItemOnDeath(ItemSet itemSet, int itemType)
  if (itemSet == null)
    error("No item set library assigned for DropItemModifier")
    return

  if (itemSet == null)
    error("No item type assigned for DropItemModifier")
    return

  let metadata = this.getMetadataRequired()
  let comp = metadata.getOrAddDropItemOnDeathComponent()
  comp.addItem(itemType, itemSet)

// ============================================================================
public function unit.awardRandomItemOnDeath(ItemSet itemSet, real chance)
  
  if (not passesChanceCheck01(chance))
    return

  if (itemSet == null)
    error("No item set assigned for DropRandomItemModifier")
    return

  let metadata = this.getMetadataRequired()
  let comp = metadata.getOrAddDropItemOnDeathComponent()
  comp.addRandomItemFromSet(itemSet)

// ============================================================================
public function unit.awardXpOnDeath(int xp)
  this.getMetadata().getOrAddGrantXpOnDeathComponent()..setExpValue(xp)

// ============================================================================
public function unit.awardGoldOnDeath(rangeInt amountRange, real chance)
  if (not passesChanceCheck01(chance))
    return
  this.setGoldAwarded(amountRange)

// ============================================================================
public function unit.awardLumberOnDeath(rangeInt amountRange, real chance)
  if (not passesChanceCheck01(chance))
    return
  this.setLumberAwarded(amountRange)

// ============================================================================
public function unit.setDefenseType(ArmorType armorType)
  this.setField(UNIT_IF_DEFENSE_TYPE, (armorType castTo int))

// ============================================================================
public function unit.setAcquisitionRange(real range)
  this.setField(UNIT_RF_ACQUISITION_RANGE, range)

// ============================================================================
public function unit.setSightRadius(real radius)
  this.setField(UNIT_RF_SIGHT_RADIUS, radius)

// ============================================================================
public function unit.setAttackRange(int weaponIndex, real range)
  this.setFieldWeapon(UNIT_WEAPON_RF_ATTACK_RANGE, weaponIndex, range)

// ============================================================================
public function unit.setMaxHPandHP(int hp)
  this.setMaxHP(hp)
  this.setHP(hp.toReal())

// ============================================================================
public function unit.preferOrganicTargets()
  let metadata = this.getMetadata()
  if (metadata == null)
    return
  metadata.getOrAddUndeadTargetingComponent().setPreferOrganicTargets(true)

// ============================================================================
public function unit.preferStructureTargets()
  let metadata = this.getMetadata()
  if (metadata == null)
    return
  metadata.getOrAddUndeadTargetingComponent().setPreferOrganicTargets(false)

// ============================================================================
public function unit.setupNecromancer(SpawnWaveContext context)

  let metadata = this.getMetadata()
  if (metadata == null)
    Log.error("Unit does not have metadata")
    return

  let necromancerComp = metadata.getOrAddNecromancerComponent()
  necromancerComp.setSpawnedContext(context)

  let abil = this.getAbility(TlsAbilityIds.necromancerRaiseDead)
  abil.setField(ABILITY_RLF_COOLDOWN, 1, 10.0)
  // Level 1
  abil.setField(ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK, 1, 0)
  abil.setField(ABILITY_SLF_UNIT_TYPE_ONE, 1, TlsUnitIds.Undead.skeletonWarrior.toRawCode())
  abil.setField(ABILITY_SLF_UNIT_TYPE_TWO, 1, "")
  abil.setField(ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE, 1, 2)
  abil.setField(ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO, 1, 0)
  // Level 2
  abil.setField(ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK, 1, 0)
  abil.setField(ABILITY_SLF_UNIT_TYPE_ONE, 1, TlsUnitIds.Undead.skeletonWarrior.toRawCode())
  abil.setField(ABILITY_SLF_UNIT_TYPE_TWO, 1, TlsUnitIds.Undead.skeletonMage.toRawCode())
  abil.setField(ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE, 1, 2)
  abil.setField(ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO, 1, 1)
  // Level 3
  abil.setField(ABILITY_ILF_UNIT_TYPE_FOR_LIMIT_CHECK, 1, 0)
  abil.setField(ABILITY_SLF_UNIT_TYPE_ONE, 1, TlsUnitIds.Undead.skeletonMage.toRawCode())
  abil.setField(ABILITY_SLF_UNIT_TYPE_TWO, 1, TlsUnitIds.Undead.skeletonChampion.toRawCode())
  abil.setField(ABILITY_ILF_UNITS_SUMMONED_TYPE_ONE, 1, 2)
  abil.setField(ABILITY_ILF_UNITS_SUMMONED_TYPE_TWO, 1, 1)

// ============================================================================
public function unit.setupInfernal()
  this.setDamageRange(0, rangeInt(160, 280))
  this.setMaxHPandHP(3000)
  this.setArmor(4.0)
  this.setAttackCooldown(3.0, 0)
  this.preferStructureTargets()

// ============================================================================
public function unit.setupArchimonde()

  let metadata = this.getMetadata()
  if (metadata == null)
    Log.error("Unit does not have metadata")
    return

  let archimondComp = metadata.getOrAddArchimondeComponent()

  archimondComp.addSummonedUnitModifier(TlsUnitIds.Undead.infernal, (unit u, real t) -> u.setupInfernal())