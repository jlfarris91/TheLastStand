package DayWaveGenerator
import IWaveGenerator
import DayWave
import GameConstants
import WaveCollection
import SpawnDefinitionTags
import IProgress
import TimeOfDayProgress
import Time
import ISpawnPointProvider
import TlsUnitIds
import WaveGeneratorCommon
import ActionUnitTypeProvider
import SpawnWave
import Math
import SoundUtils
import Elites
import WaveSpawning
import KillWaveProgress

constant timespan WAVE_DAY_LENGTH = DAY_LENGTH * 0.75
constant int MAX_SPAWN_WAVES = 2

// ============================================================================
public class DayWaveGeneratorBase implements IDayWaveGenerator
  private constant int SPAWN_WAVE_DEF_COUNT = (TOTAL_DAYS + 1) * MAX_SPAWN_WAVES
  private SpawnWaveDefinition array[SPAWN_WAVE_DEF_COUNT] m_spawnWaveDefinitions

  // --------------------------------------------------------------------------
  ondestroy
    for i = 0 to SPAWN_WAVE_DEF_COUNT - 1
      if (m_spawnWaveDefinitions[i] != null)
        destroy m_spawnWaveDefinitions[i]
        m_spawnWaveDefinitions[i] = null

  // --------------------------------------------------------------------------
  function setSpawnWaveDef(int night, int spawnWaveIndex, SpawnWaveDefinition def)
    m_spawnWaveDefinitions[night * MAX_SPAWN_WAVES + spawnWaveIndex] = def

  // --------------------------------------------------------------------------
  function getSpawnWaveDef(int night, int spawnWaveIndex) returns SpawnWaveDefinition
    return m_spawnWaveDefinitions[night * MAX_SPAWN_WAVES + spawnWaveIndex]

  // --------------------------------------------------------------------------
  override function generateWavesForPlayer(player targetPlayer, WaveCollection<DayWave> waves)

    for dayIndex = 1 to TOTAL_DAYS
      let wave = waves.getOrCreateWave(dayIndex)
      ..setId("Day:{0}".format(dayIndex.toString()))

      for spawnWaveIndex = 0 to MAX_SPAWN_WAVES - 1
        let def = getSpawnWaveDef(dayIndex, spawnWaveIndex)
        if (def != null)
          wave.addSpawnWave(new SpawnWave(targetPlayer, dayIndex, def))
          wave.setXpReward(50 * dayIndex)

          if (def.getPlaySoundOnStart() != null)
            wave.playSoundOnStart(def.getPlaySoundOnStart())

          if (def.getPlaySoundOnComplete() != null)
            wave.playSoundOnComplete(def.getPlaySoundOnComplete())

// ============================================================================
public class NormalDayWaveGenerator extends DayWaveGeneratorBase

  // --------------------------------------------------------------------------
  construct()

    setSpawnWaveDef(5, 0, createSpawnWave_Raiders(5))
    setSpawnWaveDef(8, 0, createSpawnWave_Raiders(8))

// ============================================================================
public class HardPlusDayWaveGenerator extends DayWaveGeneratorBase

  // --------------------------------------------------------------------------
  construct()

    var dayIndex = GetRandomInt(2, 5)
    setSpawnWaveDef(dayIndex, 0, createSpawnWave_Raiders(dayIndex))

    dayIndex = GetRandomInt(6, 10)
    setSpawnWaveDef(dayIndex, 0, createSpawnWave_Raiders(dayIndex))

    dayIndex = GetRandomInt(11, 15)
    setSpawnWaveDef(dayIndex, 0, createSpawnWave_Raiders(dayIndex))

constant int RAIDER_GROUP_COUNT = 3                                        //              4  6  8                6  8  10                 8  10  12
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenBandit =     [/* Tier I */ 3, 4, 4, /* Tier II */ 3, 4,  4, /* Tier III */ 4,  4,  4]
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenMarksman =   [/* Tier I */ 1, 2, 3, /* Tier II */ 2, 2,  3, /* Tier III */ 2,  3,  4]
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenWizard =     [/* Tier I */ 0, 0, 0, /* Tier II */ 1, 2,  2, /* Tier III */ 2,  3,  3]
constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_fallenBanditLord = [/* Tier I */ 0, 0, 1, /* Tier II */ 0, 0,  1, /* Tier III */ 0,  0,  1]

constant int array[MAX_ELITE_TIER * RAIDER_GROUP_COUNT] s_groupUnitCounts = [
  s_fallenBandit[0] + s_fallenMarksman[0] + s_fallenWizard[0] + s_fallenBanditLord[0],
  s_fallenBandit[1] + s_fallenMarksman[1] + s_fallenWizard[1] + s_fallenBanditLord[1],
  s_fallenBandit[2] + s_fallenMarksman[2] + s_fallenWizard[2] + s_fallenBanditLord[2],
  s_fallenBandit[3] + s_fallenMarksman[3] + s_fallenWizard[3] + s_fallenBanditLord[3],
  s_fallenBandit[4] + s_fallenMarksman[4] + s_fallenWizard[4] + s_fallenBanditLord[4],
  s_fallenBandit[5] + s_fallenMarksman[5] + s_fallenWizard[5] + s_fallenBanditLord[5],
  s_fallenBandit[6] + s_fallenMarksman[6] + s_fallenWizard[6] + s_fallenBanditLord[6],
  s_fallenBandit[7] + s_fallenMarksman[7] + s_fallenWizard[7] + s_fallenBanditLord[7],
  s_fallenBandit[8] + s_fallenMarksman[8] + s_fallenWizard[8] + s_fallenBanditLord[8]
]

constant int array[MAX_ELITE_TIER] s_groupUnitCountTotal = [
  s_groupUnitCounts[0] + s_groupUnitCounts[1] + s_groupUnitCounts[2],
  s_groupUnitCounts[3] + s_groupUnitCounts[4] + s_groupUnitCounts[5],
  s_groupUnitCounts[6] + s_groupUnitCounts[7] + s_groupUnitCounts[8]
]

SoundDefinition s_warHornSoundDef

// ============================================================================
function createSpawnWave_Raiders(int _dayIndex) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Fallen Raiders")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.piercing)
  ..setProgressFactory(context -> new KillWaveProgress(context))
  ..setSpawnRange(SpawnRange.FAR)
  ..setGoldReward(context -> getStandardGoldRewardForWave(context))
  ..playSoundOnGroupSpawn(s_warHornSoundDef)
  ..setSpawnGroupingFactor(context -> 1.0)
  ..setWaitForFullSpawnGroup(true)
  ..setMaxAliveCount(context -> begin
    let tier = clamp(context.waveTier, 0, MAX_ELITE_TIER-1)
    let groupId = clamp(context.groupId, 0, RAIDER_GROUP_COUNT-1)
    return s_groupUnitCounts[tier * MAX_ELITE_TIER + groupId]
  end)
  ..setMaxSpawnCount(context -> begin
    let tier = clamp(context.waveTier, 0, MAX_ELITE_TIER-1)
    return s_groupUnitCountTotal[tier]
  end)
  ..setupForElite()
  ..showMinimapIcon(MINIMAP_ICON_PATH_ELITE, MINIMAP_ICON_COLOR_ELITE)
  ..pingOnGroupSpawn(MINIMAP_ICON_COLOR_ELITE)

  def.setUnitTypeProvider(new ActionUnitTypeProvider((SpawnWaveContext context, int count, SpawnWaveUnitTypeCollection result) -> begin
    let waveTier = clamp(context.waveTier, 0, MAX_ELITE_TIER-1)
    let groupId = clamp(context.groupId, 0, RAIDER_GROUP_COUNT-1)
    var added = 0

    for i = 0 to s_fallenBandit[waveTier * RAIDER_GROUP_COUNT + groupId] - 1
      if (added == count)
        break
      let unitTier = context.getRandomTier()
      result.add(TlsUnitIds.Undead.fallenBandit[unitTier], unitTier)
      added++

    for i = 0 to s_fallenMarksman[waveTier * RAIDER_GROUP_COUNT + groupId] - 1
      if (added == count)
        break
      let unitTier = context.getRandomTier()
      result.add(TlsUnitIds.Undead.fallenMarksman[unitTier], unitTier)
      added++

    for i = 0 to s_fallenWizard[waveTier * RAIDER_GROUP_COUNT + groupId] - 1
      if (added == count)
        break
      let unitTier = context.getRandomTier()
      result.add(TlsUnitIds.Undead.fallenWizard[unitTier], unitTier)
      added++

    for i = 0 to s_fallenBanditLord[waveTier * RAIDER_GROUP_COUNT + groupId] - 1
      if (added == count)
        break
      let unitTier = context.getRandomTier()
      result.add(TlsUnitIds.Undead.fallenBanditLord[unitTier], unitTier)
      added++

  end))

  for tier = 0 to MAX_ELITE_TIER-1
  //{
    def.setUnitModifier(TlsUnitIds.Undead.fallenBandit[tier]) (unit u, SpawnWaveContext context) ->
    //{
      g_eliteMeleeModifiers.apply(context, u, 0.75)
    //}

    def.setUnitModifier(TlsUnitIds.Undead.fallenMarksman[tier]) (unit u, SpawnWaveContext context) ->
    //{
      g_eliteRangedModifiers.apply(context, u, 0.75)
    //}

    def.setUnitModifier(TlsUnitIds.Undead.fallenWizard[tier]) (unit u, SpawnWaveContext context) ->
    //{
      g_eliteRangedModifiers.apply(context, u, 0.75)
    //}

    def.setUnitModifier(TlsUnitIds.Undead.fallenBanditLord[tier]) (unit u, SpawnWaveContext context) ->
    //{
      g_eliteMeleeModifiers.apply(context, u, 0.75)
    //}
  //}

  return def

// ============================================================================
function getProgressForSpawnWave(int index) returns IProgress
  return new TimeOfDayProgress()
    ..setSpecificDay(index)
    ..setStartTime(DAY_TIME)
    ..setDuration(WAVE_DAY_LENGTH)

// ============================================================================
init

  s_warHornSoundDef = new SoundDefinition("Sound\\war-horn.flac", false, false)