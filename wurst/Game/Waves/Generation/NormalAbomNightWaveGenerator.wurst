package NormalAbomNightWaveGenerator
import NightWave
import IWaveGenerator
import WaveCollection
import SpawnWave
import UndeadSpawnManager
import RandomSpawnPointProvider
import TlsUnitIds
import GameConstants
import PeriodicWaveActivator
import TimeOfDayProgress
import Math
import Func
import FunctionalField
import SpawnWaveDefinition
import SingleUnitTypeProvider
import SetTargetPlayerModifier

// ============================================================================
public class NormalAbomNightWaveGenerator implements IWaveGenerator<NightWave>
  private int m_totalNights

  // --------------------------------------------------------------------------
  function setTotalNights(int value)
    m_totalNights = value

  // --------------------------------------------------------------------------
  function getTotalNights() returns int
    return m_totalNights

  // --------------------------------------------------------------------------
  override function generateWavesForPlayer(player p, WaveCollection<NightWave> waves)

    for i=0 to m_totalNights step 3
      let wave = waves.getOrCreateWave(i)
      wave.addSpawnWave(createWave(p, i))

  // --------------------------------------------------------------------------
  private function createWave(player p, int night) returns SpawnWave
  
    // The percentage of the game's progress for the current night
    let currentNightGameProgress = I2R(night) / I2R(m_totalNights)

    // The percentage of the game's progress for the next night
    let nextNightGameProgress = I2R(night + 1) / I2R(m_totalNights)

    let unitTypeProvider = new SingleUnitTypeProvider()
    ..setUnitType(TlsUnitIds.abomination)

    let spawnPointProvider = new RandomSpawnPointProvider(g_undeadSpawnManager)
    ..setMinRange(ABOM_SPAWN_RANGE_MIN)
    ..setMaxRange(ABOM_SPAWN_RANGE_MAX)

    let activator = new PeriodicWaveActivator()
    ..setActivateOnStart(false)
    ..setInterval(ABOM_SPAWN_INTERVAL)

    let progress = new NightProgress()

    // This determines the maximum number of aboms to spawn in a night
    let maxSpawns = lerp(1, 3, currentNightGameProgress).floor()
    Func1<real, int> getMaxSpawnCount = (real _waveProgress) -> 
      return maxSpawns

    // These modifiers will run on each unit spawned in the wave
    // The real value passed in is the wave's current progress
    let ufd = new AggregateUnitModifier()

    // These are some common zombie fields we always set
    ufd.add(new AbominationFields())
    ufd.add(new SetTargetPlayerModifier(p))

    // Each night zombies health will interpolate between the min/max for that night
    let gameStartMaxHp = 400
    let gameEndMaxHp = 6000
    let maxHpMin = lerpInt(gameStartMaxHp, gameEndMaxHp, currentNightGameProgress)
    let maxHpMax = lerpInt(gameStartMaxHp, gameEndMaxHp, nextNightGameProgress)
    let maxHpFunc = new MaxHpUnitField()..setFunc() (real waveProgress) ->
      return lerpInt(maxHpMin, maxHpMax, waveProgress)
    ufd.add(maxHpFunc)

    let moveSpeed = 125.0
    let moveSpeedFunc = new FunctionalUnitRealField(UNIT_RF_SPEED)..setFunc() (real t) ->
      return moveSpeed
    ufd.add(moveSpeedFunc)

    let armorGameStart = 3.0
    let armorGameEnd = 20.0
    let armor = lerp(armorGameStart, armorGameEnd, currentNightGameProgress)
    let armorFunc = new ArmorUnitField()..setValue(armor)
    ufd.add(armorFunc)

    let damageBaseGameStart = 40
    let damageBaseGameEnd = 120
    let damageBase = lerpInt(damageBaseGameStart, damageBaseGameEnd, currentNightGameProgress)
    let damageBaseFunc = new FunctionalUnitWeaponIntegerField(UNIT_WEAPON_IF_ATTACK_DAMAGE_BASE, 1)..setValue(damageBase)
    ufd.add(damageBaseFunc)

    let damageNumberOfDiceGameStart = 4
    let damageNumberOfDiceGameEnd = 12
    let damageNumberOfDice = lerpInt(damageNumberOfDiceGameStart, damageNumberOfDiceGameEnd, currentNightGameProgress)
    let damageNumberOfDiceFunc = new FunctionalUnitWeaponIntegerField(UNIT_WEAPON_IF_ATTACK_DAMAGE_NUMBER_OF_DICE, 1)..setValue(damageNumberOfDice)
    ufd.add(damageNumberOfDiceFunc)

    let damageSidesPerDieGameStart = 3
    let damageSidesPerDieGameEnd = 6
    let damageSidesPerDie = lerpInt(damageSidesPerDieGameStart, damageSidesPerDieGameEnd, currentNightGameProgress)
    let damageSidesPerDieFunc = new FunctionalUnitWeaponIntegerField(UNIT_WEAPON_IF_ATTACK_DAMAGE_SIDES_PER_DIE, 1)..setValue(damageSidesPerDie)
    ufd.add(damageSidesPerDieFunc)

    let def = new SpawnWaveDefinition()
    ..setProgress(progress)
    ..setMaxSpawnCount(getMaxSpawnCount)
    ..setActivator(activator)
    ..setSpawnPointProvider(spawnPointProvider)
    ..setUnitTypeProvider(unitTypeProvider)
    ..setUnitModifier(ufd)

    return new SpawnWave(def, p)..setName("Aboms")


// ============================================================================
public class AbominationFields implements IFunctionalUnitModifier
  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    let scale = GetRandomReal(-0.2, 0.2)

    u.setScale(1.0 + scale)
    u.setTimeScale(1.0 - scale)
    u.setMoveSpeedPercChange(-scale)
    u.setAnimation("birth")

    let w = u.getField(UNIT_RF_SHADOW_IMAGE_WIDTH) * (1.0 + scale)
    let h = u.getField(UNIT_RF_SHADOW_IMAGE_HEIGHT) * (1.0 + scale)
    u.setField(UNIT_RF_SHADOW_IMAGE_WIDTH, w)
    u.setField(UNIT_RF_SHADOW_IMAGE_HEIGHT, h)