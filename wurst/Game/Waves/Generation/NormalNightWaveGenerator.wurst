package NormalNightWaveGenerator
import NightWave
import WaveCollection
import IWaveGenerator
import GameWaveProgress
import SpawnWaveDefinition
import TimeOfDayProgress
import Math
import PeriodicWaveActivator
import GameConstants
import SingleUnitTypeProvider
import TlsUnitIds
import Range
import IGameWaveProgress
import SpawnWave
import RandomUnitTypeProvider
import FixedGroupUnitTypeProvider
import ItemSet
import TlsItemIds
import Func
import ObjEditingCommons
import SpawnDefinitionTags
import UndeadSpawnManager
import Time
import UnitModifiers
import UnitExtensions
import UnitMetadata
import InfectedComponent
import IProgress
import MainItemLibrary
import TlsJobItemIds

Func1<real, real> g_coinSmallWeightTFunc
Func1<real, real> g_coinMediumWeightTFunc
Func1<real, real> g_coinLargeWeightTFunc
Func1<real, real> g_coinEpicWeightTFunc

constant timespan WAVE_NIGHT_LENGTH = NIGHT_LENGTH * 0.75
constant time NIGHT_WAVE_START_TIME = NIGHT_TIME
constant time NIGHT_WAVE_END_TIME = NIGHT_WAVE_START_TIME + WAVE_NIGHT_LENGTH
constant int MAX_SPAWN_WAVES = 2

SpawnWaveDefinition array[TOTAL_NIGHTS * MAX_SPAWN_WAVES] g_spawnWaveDefinitions
ItemSet array[TOTAL_NIGHTS] g_coinItemSets
rangeInt array[TOTAL_NIGHTS] g_goldRange

// ============================================================================
function setSpawnWaveDef(int night, int spawnWaveIndex, SpawnWaveDefinition def)
  g_spawnWaveDefinitions[night * MAX_SPAWN_WAVES + spawnWaveIndex] = def

// ============================================================================
function getSpawnWaveDef(int night, int spawnWaveIndex) returns SpawnWaveDefinition
  return g_spawnWaveDefinitions[night * MAX_SPAWN_WAVES + spawnWaveIndex]

// ============================================================================
function defineSpawnWaves()

  let gameProgress = new GameWaveProgress()
  ..setTotalWaves(TOTAL_NIGHTS)

  // Zombies spawn every night
  for i = 1 to TOTAL_NIGHTS
    gameProgress.setCurrentWaveNumber(i)
    setSpawnWaveDef(i, 0, createSpawnWave_Zombies(gameProgress))
  
  // Just Zombies           (Melee)
  // Poison Zombies         (Melee, Infected)
  // Skeleton Archers       (Ranged)
  // Crows                  (Flying)
  // Aboms                  (Boss)
  // Dark Minions           (Group, Melee)
  // Necromancers           (Summoner, Ranged)
  // Ghouls                 (Melee, Self-Healing)
  // Crypt Fiends           (Invade, Burrow)
  // Boss
  // Mutants                (Puller, Ranged)
  // Ghosts                 (Invade, Ethereal, Melee)
  // Skeleton Marksman      (Ranged)
  // Skeleton Champions     (Leader, Siege, Melee)
  // Archimonde             (Boss, Leader, Ranged, Siege)
  
  // Greater Necromancers   (Summoner)
  // Gargoyles              (Flying)
  // Orc Skeletons          (Group, Melee)
  // Banshees               (Invade, Ethereal, Ranged)
  // Meat Wagons            (Siege, Ranged)
  // Raiders                (Group, Melee, Ranged)
  // Ethereal Necromancers  (Summoner)
  // Shades                 (Flying)
  // Monolith               (Invade, Summoner)
  // Tentacles              (Invade, Melee)
  // Burning Archers        (Ranged)
  // Wraiths                (Invade, Ethereal, Melee)

  // 1 Just Zombies
  gameProgress.setCurrentWaveNumber(1)

  // 2 Poison Zombies         (GrouMelee)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_InfectiousZombies(gameProgress))

  // 3 Skeleton Archers       (Ranged)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_SkeletonArchers(gameProgress))

  // 4 Crows                  (Flying)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Crows(gameProgress))

  // 5 Aboms                  (Boss)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Abominations(gameProgress))

  // 6 Dark Minions           (GrouMelee)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_DarkMinions(gameProgress))

  // 7 Necromancers           (Summoner, Ranged)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Necromancers(gameProgress))

  // 8 Ghouls                 (Melee, Self-Healing)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Ghouls(gameProgress))

  // 9 Burning Archers        (Ranged)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_BurningArchers(gameProgress))

  // 10 Crypt Fiends           (Invade, Burrow)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_CryptFiends(gameProgress))

  // 11 Mutants                (Puller, Ranged)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Mutants(gameProgress))

  // 12 Ghosts                 (Invade, Ethereal, Melee)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Ghosts(gameProgress))

  // 13 Skeleton Marksman      (Ranged)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_SkeletonMarksmen(gameProgress))

  // 14 Skeleton Champions     (Leader, Siege, Melee)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_SkeletonChampions(gameProgress))

  // 15 Archimonde             (Boss, Leader, Ranged, Siege)
  setSpawnWaveDef(gameProgress.nextWave(), 1, createSpawnWave_Archimonde(gameProgress))

  // Generate coin item sets for each wave
  gameProgress.setCurrentWaveNumber(1)
  for i = 1 to TOTAL_NIGHTS
    let gameT = gameProgress.getCurrentGameProgress()
    let coinItemSet = new ItemSet("Coins", COLOR_GOLD.withoutAlpha())
    let weightSmall = g_coinSmallWeightTFunc.call(gameT)
    let weightMedium = g_coinMediumWeightTFunc.call(gameT)
    let weightLarge = g_coinLargeWeightTFunc.call(gameT)
    let weightEpic = g_coinEpicWeightTFunc.call(gameT)
    coinItemSet.add(TlsItemIds.coinSmall, weightSmall)
    coinItemSet.add(TlsItemIds.coinMedium, weightMedium)
    coinItemSet.add(TlsItemIds.coinLarge, weightLarge)
    coinItemSet.add(TlsItemIds.coinEpic, weightEpic)
    g_coinItemSets[i] = coinItemSet
    gameProgress.nextWave()

// ============================================================================
function getStandardGoldRewardForWave(IGameWaveProgress progress) returns int
  return progress.getCurrentWaveNumber()

// ============================================================================
public class NormalNightWaveGenerator implements IWaveGenerator<NightWave>

  // --------------------------------------------------------------------------
  override function generateWavesForPlayer(player targetPlayer, WaveCollection<NightWave> waves)
 
    for nightIndex = 1 to TOTAL_NIGHTS
      let wave = waves.getOrCreateWave(nightIndex)
      ..setId("Normal:Night:{0}".format(nightIndex.toString()))
      ..setXpReward(50 * nightIndex)

      for spawnWaveIndex = 0 to MAX_SPAWN_WAVES - 1
        let def = getSpawnWaveDef(nightIndex, spawnWaveIndex)
        if (def != null)
          wave.addSpawnWave(new SpawnWave(targetPlayer, def))

// ============================================================================
function createSpawnWave_Zombies(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Zombies")
  ..setTags(SpawnDefinitionTags.ground, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(waveT -> 20)
  ..setSpawnsPerActivation(waveT -> 6)
  ..setSpawnGroupingFactor(waveT -> 0.0)
  ..setActivator(new PeriodicWaveActivator(3.0))
  ..setSpawnRange(SpawnRange.NEAR)
  ..setUseUnitRecycler(true)
  ..setUnitTypeProvider(new RandomUnitTypeProvider()
    ..addUnitType(TlsUnitIds.Undead.zombieMale, 1)
    ..addUnitType(TlsUnitIds.Undead.zombieFemale, 1))

  let gameT = gameProgress.getCurrentGameProgress()
  
  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.setMaxHPandHP(lerpInt(120, 2000, gameT))
    u.setArmor(lerp(0.0, 5.0, gameT))
    u.setDamageRange(0, lerp(rangeInt(8, 12), rangeInt(240, 260), gameT))
    u.setMoveSpeed(lerp(80, 250, gameT))
    u.setDefenseType(ArmorType.Unarmored)

  return def

// ============================================================================
function createSpawnWave_InfectiousZombies(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Infectious Zombies")
  ..setTags(SpawnDefinitionTags.ground, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal, SpawnDefinitionTags.poison)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 4)
  ..setSpawnsPerActivation(t -> 4)
  ..setSpawnGroupingFactor(t -> 0.5)
  ..setActivator(new PeriodicWaveActivator(3.0))
  ..setSpawnRange(SpawnRange.NEAR)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.zombieMale))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()
  
  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardEliteMaxHp(gameT)
    u.standardEliteArmor(gameT)
    u.standardEliteAttack1DamageRange(gameT)
    u.standardEliteAttack1Cooldown(gameT)
    u.standardGrantCoinsOnDeath(gameT, 0.5)
    u.setDefenseType(ArmorType.Unarmored)
    u.getMetadata().getOrAddInfectedComponent()

  return def

// ============================================================================
function createSpawnWave_Crows(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Crows")
  ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 2)
  ..setSpawnsPerActivation(t -> 1)
  ..setSpawnGroupingFactor(t -> 0.0)
  ..setActivator(new PeriodicWaveActivator(3.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.crow))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Small)
    u.setArmor(5)
    u.setMoveSpeed(300)

  return def

// ============================================================================
function createSpawnWave_Necromancers(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Necromancers")
  ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 3)
  ..setSpawnsPerActivation(t -> 1)
  ..setSpawnGroupingFactor(t -> 0.0)
  ..setActivator(new PeriodicWaveActivator(10.0)..setActivateOnStart(false))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.necromancer))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)
    u.setupNecromancer(gameT)
    u.setMoveSpeed(250)

  return def

// ============================================================================
function createSpawnWave_GreaterNecromancers(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Greater Necromancers")
  ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 8)
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.greaterNecromancer))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)
    u.setupNecromancer(gameProgress.getCurrentGameProgress())
    u.setMoveSpeed(300)

  return def

// ============================================================================
function createSpawnWave_EtherealNecromancers(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Ethereal Necromancers")
  ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 12)
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.etherealNecromancer))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)
    u.setupNecromancer(gameProgress.getCurrentGameProgress())
    u.setMoveSpeed(300)

  return def

// ============================================================================
function createSpawnWave_Abominations(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Abominations")
  ..setTags(SpawnDefinitionTags.leader, SpawnDefinitionTags.heavy, SpawnDefinitionTags.siege)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 1)
  ..setMaxSpawnCount(t -> 1)
  ..setActivator(new PeriodicWaveActivator(10.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.abomination))

  let gameT = gameProgress.getCurrentGameProgress()
  
  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardEliteMaxHp(gameT, 8.0)
    u.standardEliteArmor(gameT, 3.0)
    u.standardEliteAttack1DamageRange(gameT, 5.0)
    u.standardEliteAttack1Cooldown(gameT)
    u.guaranteeGrantCoinsOnDeath(TlsItemIds.coinEpic, gameT)
    u.awardXpOnDeath(100)
    u.setDefenseType(ArmorType.Large)
    u.setAcquisitionRange(ELITE_SIGHT_RANGE)
    u.setSightRadius(ELITE_SIGHT_RANGE)
    u.setMoveSpeed(125.0)
    u.awardItemOnDeath(g_MainItemLibrary.epicSet, TlsJobItemIds.acolyte1)

  return def

// ============================================================================
function createSpawnWave_SkeletonArchers(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Skeleton Archers")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonArcher))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Medium)

  return def

// ============================================================================
function createSpawnWave_BurningArchers(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Burning Archers")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.burningArcher))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Medium)

  return def

// ============================================================================
function createSpawnWave_SkeletonMarksmen(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Skeleton Marksmen")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonMarksman))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Medium)

  return def

// ============================================================================
function createSpawnWave_DarkMinions(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Dark Minions")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveT) -> lerpInt(6, 12, waveT))
  ..setSpawnsPerActivation(t -> 3)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(12.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new FixedGroupUnitTypeProvider()
    ..addUnitType(TlsUnitIds.Undead.lesserDarkMinion)
    ..addUnitType(TlsUnitIds.Undead.darkMinion)
    ..addUnitType(TlsUnitIds.Undead.greaterDarkMinion))
  ..setWaitForFullSpawnGroup(true)
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setUnitModifier(TlsUnitIds.Undead.lesserDarkMinion) (unit u, real waveT) ->
    u.setMaxHPandHP(lerpInt(60, 600, gameT))
    u.setArmor(lerp(1.0, 5.0, gameT))
    u.setDamageRange(0, lerp(rangeInt(8, 13), rangeInt(300, 330), gameT))
    u.setAttackCooldown(lerp(1.5, 1.0, gameT), 0)
    u.setDefenseType(ArmorType.Medium)
    u.standardGrantCoinsOnDeath(gameT, 0.5)

  def.setUnitModifier(TlsUnitIds.Undead.darkMinion) (unit u, real waveT) ->
    u.setMaxHPandHP(lerpInt(120, 1200, gameT))
    u.setArmor(lerp(5.0, 15.0, gameT))
    u.setDamageRange(0, lerp(rangeInt(8, 13), rangeInt(300, 330), gameT))
    u.setAttackCooldown(lerp(1.5, 1.0, gameT), 0)
    u.setDefenseType(ArmorType.Medium)
    u.standardGrantCoinsOnDeath(gameT, 0.75)

  def.setUnitModifier(TlsUnitIds.Undead.greaterDarkMinion) (unit u, real waveT) ->
    u.setMaxHPandHP(lerpInt(220, 3200, gameT))
    u.setArmor(lerp(5.0, 15.0, gameT))
    u.setDamageRange(0, lerp(rangeInt(8, 13), rangeInt(300, 330), gameT))
    u.setAttackCooldown(lerp(1.5, 1.0, gameT), 0)
    u.setDefenseType(ArmorType.Large)
    u.standardGrantCoinsOnDeath(gameT, 1.0)

  return def

// ============================================================================
function createSpawnWave_Ghosts(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Ghosts")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.melee, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.ghost))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Medium)
    u.standardEliteMaxHp(gameT, 0.5)

  return def

// ============================================================================
function createSpawnWave_Wraiths(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Wraiths")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.melee, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(waveT -> lerpInt(2, 8, waveT))
  ..setSpawnsPerActivation(waveT -> 2)
  ..setSpawnGroupingFactor(waveT -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.wraith))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)

  return def

// ============================================================================
function createSpawnWave_Banshees(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Banshees")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.banshee))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)

  return def

// ============================================================================
function createSpawnWave_Ghouls(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Ghouls")
  ..setTags(SpawnDefinitionTags.melee, SpawnDefinitionTags.healing, SpawnDefinitionTags.poison, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(4, 12, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.ghoul))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardElite(gameT)
    u.setDefenseType(ArmorType.Large)

  return def

// ============================================================================
// function createSpawnWave_ForgottenOne(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
//   let def = new SpawnWaveDefinition("Forgotten One")
//   ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
//   ..setProgress(getProgressForSpawnWave(gameProgress))
//   ..setMaxAliveCount(FunctionalT.fromValue(1))
//   ..setMaxSpawnCount(FunctionalT.fromValue(1))
//   ..setSpawnsPerActivation(FunctionalT.fromValue(1))
//   ..setSpawnGroupingFactor(FunctionalT.fromValue(0.0))
//   ..setActivator(new PeriodicWaveActivator(5.0))
//   ..setSpawnPointProvider(SpawnRange.MID)
//   ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.forgottenOne))
//  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

//   def.getUnitModifier(TlsUnitIds.Undead.forgottenOne)
//     ..setTargetPlayer(p)
//     ..standardEliteMaxHp(gameProgress)
//     ..standardEliteArmor(gameProgress)
//     ..standardEliteAttack1DamageRange(gameProgress)
//     ..standardEliteAttack1Cooldown(gameProgress)
//     ..guaranteeGrantCoinsOnDeath(gameProgress)
//     ..standardEliteGrantLumberOnDeath(rangeInt(10,10))
//     ..setDefenseType(ArmorType.Hero)

//   return def

// ============================================================================
function createSpawnWave_SkeletonChampions(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Skeleton Champions")
  ..setTags(SpawnDefinitionTags.leader, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonOrcChampion))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardElite(gameT)
    u.setDefenseType(ArmorType.Large)

  return def

// ============================================================================
function createSpawnWave_Gargoyles(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Gargoyles")
  ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.fortified, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.gargoyle))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Small)

  return def

// ============================================================================
function createSpawnWave_OrcSkeletons(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Orc Skeletons")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.heavy, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonOrc))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardElite(gameT)
    u.setDefenseType(ArmorType.Large)

  return def

// ============================================================================
// function createSpawnWave_Monolith(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
//   let def = new SpawnWaveDefinition("Monolith")
//   ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ranged, SpawnDefinitionTags.fortified, SpawnDefinitionTags.magic)
//   ..setProgress(getProgressForSpawnWave(gameProgress))
//   ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
//   ..setSpawnsPerActivation(FunctionalT.fromValue(2))
//   ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
//   ..setActivator(new PeriodicWaveActivator(5.0))
//   ..setSpawnPointProvider(SpawnRange.CLOSE)
//   ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.monolith))
//  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

//   def.getUnitModifier(TlsUnitIds.Undead.monolith)
//     ..setTargetPlayer(p)
//     ..standardEliteMaxHp(gameProgress)
//     ..standardEliteArmor(gameProgress)
//     ..standardEliteAttack1DamageRange(gameProgress)
//     ..standardEliteAttack1Cooldown(gameProgress)
//     ..guaranteeGrantCoinsOnDeath(gameProgress)
//     ..standardEliteGrantLumberOnDeath(rangeInt(500,500))
//     ..setDefenseType(ArmorType.Fortified)

//   return def

// ============================================================================
function createSpawnWave_MeatWagons(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Meat Wagons")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.siege)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.meatWagon))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Large)

  return def

// ============================================================================
function createSpawnWave_Mutants(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Mutants")
  ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.puller, SpawnDefinitionTags.chaos)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.mutant))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)

  return def

// ============================================================================
function createSpawnWave_CryptFiends(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Crypt Fiends")
  ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(t -> 2)
  ..setSpawnsPerActivation(t -> 1)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(10.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.cryptFiend))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Medium)
    u.standardEliteMaxHp(gameT, 0.5)
    u.standardEliteAttack1DamageRange(gameT, 2.0)

  return def

// ============================================================================
function createSpawnWave_Raiders(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Raiders")
  ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.greaterDarkMinion))
  ..setWaitForFullSpawnGroup(true)
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardElite(gameT)
    u.setDefenseType(ArmorType.Large)

  return def

// ============================================================================
function createSpawnWave_Shades(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Shades")
  ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.chaos)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount((real waveProgress) -> lerpInt(2, 8, waveProgress))
  ..setSpawnsPerActivation(t -> 2)
  ..setSpawnGroupingFactor(t -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.shade))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardRangedElite(gameT)
    u.setDefenseType(ArmorType.Unarmored)

  return def

// ============================================================================
function createSpawnWave_Archimonde(IGameWaveProgress gameProgress) returns SpawnWaveDefinition
  let def = new SpawnWaveDefinition("Archimonde")
  ..setTags(SpawnDefinitionTags.boss, SpawnDefinitionTags.ranged, SpawnDefinitionTags.chaos, SpawnDefinitionTags.hero, SpawnDefinitionTags.summoner)
  ..setProgress(getProgressForSpawnWave(gameProgress))
  ..setMaxAliveCount(waveT -> 1)
  ..setMaxSpawnCount(waveT -> 1)
  ..setSpawnsPerActivation(waveT -> 1)
  ..setSpawnGroupingFactor(waveT -> 1.0)
  ..setActivator(new PeriodicWaveActivator(5.0))
  ..setSpawnRange(SpawnRange.MID)
  ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.archimonde))
  ..setGoldReward(getStandardGoldRewardForWave(gameProgress))

  let gameT = gameProgress.getCurrentGameProgress()

  def.setCommonUnitModifier() (unit u, real waveT) ->
    u.standardEliteMaxHp(gameT, 4.0)
    u.standardEliteArmor(gameT)
    u.standardEliteAttack1Cooldown(gameT, 1.5)

    u.setDamageRange(0, rangeInt(200, 220))

    u.setAttackRange(0, RANGED_UNIT_ATTACK_RANGE.toReal())
    u.setAcquisitionRange(ELITE_SIGHT_RANGE)
    u.setSightRadius(ELITE_SIGHT_RANGE)

    u.setupArchimonde()

  return def

// ============================================================================
function getProgressForSpawnWave(IGameWaveProgress gameProgress) returns IProgress
  return new TimeOfDayProgress()
    ..setSpecificDay(gameProgress.getCurrentWaveNumber())
    ..setStartTime(NIGHT_TIME)
    ..setDuration(WAVE_NIGHT_LENGTH)

// ============================================================================
function getCoinItemSetForWave(int waveIndex) returns ItemSet
  return g_coinItemSets[waveIndex]

// ============================================================================
function unit.standardEliteMaxHp(real gameT)
  this.standardEliteMaxHp(gameT, 1.0)

// ============================================================================
function unit.standardEliteMaxHp(real gameT, real scale)
  let t2 = gameT * gameT
  let maxHp = R2I(I2R(lerpInt(480, 8000, t2)) * scale)
  this.setMaxHPandHP(maxHp)

// ============================================================================
function unit.standardEliteArmor(real gameT)
  this.standardEliteArmor(gameT, 1.0)

// ============================================================================
function unit.standardEliteArmor(real gameT, real scale)
  let t2 = gameT * gameT
  this.setArmor(lerp(2.0, 6.0, t2) * scale)

// ============================================================================
function unit.standardEliteAttack1DamageRange(real gameT)
  this.standardEliteAttack1DamageRange(gameT, 1.0)

// ============================================================================
function unit.standardEliteAttack1DamageRange(real gameT, real scale)
  let t2 = gameT * gameT
  var range = lerp(rangeInt(16, 24), rangeInt(280, 300), t2)
  range.min = R2I(I2R(range.min) * scale)
  range.max = R2I(I2R(range.max) * scale)
  this.setDamageRange(0, range)

// ============================================================================
function unit.standardEliteAttack1Cooldown(real gameT)
  this.standardEliteAttack1Cooldown(gameT, 1.0)

// ============================================================================
function unit.standardEliteAttack1Cooldown(real gameT, real scale)
  let t2 = gameT * gameT
  this.setAttackCooldown(lerp(2.0, 0.5, t2) * scale, 0)

// ============================================================================
function unit.standardElite(real gameT)
  this.standardEliteMaxHp(gameT)
  this.standardEliteArmor(gameT)
  this.standardEliteAttack1DamageRange(gameT)
  this.standardEliteAttack1Cooldown(gameT)
  this.standardGrantCoinsOnDeath(gameT)
  this.setAcquisitionRange(ELITE_SIGHT_RANGE)
  this.setSightRadius(ELITE_SIGHT_RANGE)

// ============================================================================
function unit.standardRangedElite(real gameT)
  this.standardEliteMaxHp(gameT)
  this.standardEliteArmor(gameT, 0.5)
  this.standardEliteAttack1DamageRange(gameT)
  this.standardEliteAttack1Cooldown(gameT)
  this.standardGrantCoinsOnDeath(gameT)

  let t2 = gameT * gameT
  this.setDamageRange(0, lerp(rangeInt(16, 32), rangeInt(128, 140), t2))

  this.setAttackRange(0, RANGED_UNIT_ATTACK_RANGE.toReal())
  this.setAcquisitionRange(ELITE_SIGHT_RANGE)
  this.setSightRadius(ELITE_SIGHT_RANGE)

// ============================================================================
function unit.standardGrantCoinsOnDeath(real gameT)
  this.standardGrantCoinsOnDeath(gameT, 1.0)

// ============================================================================
function unit.standardGrantCoinsOnDeath(real gameT, real chanceScale)
  let waveNumber = (TOTAL_NIGHTS * gameT).floor()
  let coinItemSet = getCoinItemSetForWave(waveNumber)
  let chance = lerp(COIN_CHANCE_RANGE.min, COIN_CHANCE_RANGE.max, gameT) * chanceScale
  if (passesChanceCheck(chance))
    let itemType = coinItemSet.getRandomItemTypeId()
    this.awardItemOnDeath(coinItemSet, itemType)

// ============================================================================
function unit.guaranteeGrantCoinsOnDeath(real gameT)
  this.standardGrantCoinsOnDeath(gameT, 1.0)

// ============================================================================
function unit.guaranteeGrantCoinsOnDeath(int coinItemTypeId, real gameT)
  let waveNumber = (TOTAL_NIGHTS * gameT).floor()
  let coinItemSet = getCoinItemSetForWave(waveNumber)
  this.awardItemOnDeath(coinItemSet, coinItemTypeId)

// ============================================================================
init
  g_coinSmallWeightTFunc = (real t) -> clamp01(Pow(1 - t, 8))
  g_coinMediumWeightTFunc = (real t) -> clamp01((Sin(clamp(t, 0.0, 0.666) * 3 * PI - PIHALF)) / 2.0 + 0.5)
  g_coinLargeWeightTFunc = (real t) -> clamp((Sin(clamp(t, 0.333, 1.0) * 3 * PI + PIHALF)) / 2.0 + 0.5, 0.001, 1.0)
  g_coinEpicWeightTFunc = (real t) -> clamp(Pow(t, 8), 0.001, 1.0)

  defineSpawnWaves()