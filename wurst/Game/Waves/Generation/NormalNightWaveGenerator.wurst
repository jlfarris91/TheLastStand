package NormalNightWaveGenerator
import NightWave
import WaveCollection
import IWaveGenerator
import GameWaveProgress
import PoisonZombieUnitModifier
import SpawnWaveDefinition
import TimeOfDayProgress
import Functional
import Math
import PeriodicWaveActivator
import GameConstants
import SingleUnitTypeProvider
import TlsUnitIds
import Range
import RandomSpawnPointProvider
import UnitModifier
import IGameWaveProgress
import SpawnWave
import CrowUnitModifier
import NecromancerUnitModifier
import AbominationUnitModifier
import SpawnWaveDefinitionExtensions
import ZombieUnitModifier
import RandomUnitTypeProvider
import FixedGroupUnitTypeProvider
import ItemSet
import TlsItemIds
import Func
import ObjEditingCommons
import SpawnDefinitionTags
import ISpawnPointProvider
import UndeadSpawnManager
import HostileCircularCachedSpawnManager

Func1<real, real> g_coinSmallWeightTFunc
Func1<real, real> g_coinMediumWeightTFunc
Func1<real, real> g_coinLargeWeightTFunc
Func1<real, real> g_coinEpicWeightTFunc

// ============================================================================
public class NormalNightWaveGenerator implements IWaveGenerator<NightWave>

  private constant int TOTAL_NUM_NIGHTS = 30
  private ISpawnPointProvider array[4] m_randomSpawnPointProviders

  // --------------------------------------------------------------------------
  override function generateWavesForPlayer(player p, WaveCollection<NightWave> waves)
    
    let gameProgress = new GameWaveProgress()
    ..setTotalWaves(TOTAL_NUM_NIGHTS)

    let currentSpawnManager = getPlayerCachedHostileSpawnManager(p)
    let fallbackSpawnManager = getPlayerUndeadSpawnManager(p)
    m_randomSpawnPointProviders[SpawnRange.CLOSE castTo int] = new RandomSpawnPointProvider(currentSpawnManager, fallbackSpawnManager, SpawnRange.CLOSE)
    m_randomSpawnPointProviders[SpawnRange.NEAR castTo int] = new RandomSpawnPointProvider(currentSpawnManager, fallbackSpawnManager, SpawnRange.NEAR)
    m_randomSpawnPointProviders[SpawnRange.MID castTo int] = new RandomSpawnPointProvider(currentSpawnManager, fallbackSpawnManager, SpawnRange.MID)
    m_randomSpawnPointProviders[SpawnRange.FAR castTo int] = new RandomSpawnPointProvider(currentSpawnManager, fallbackSpawnManager, SpawnRange.FAR)

    // Zombies spawn every night
    for i = 1 to TOTAL_NUM_NIGHTS
      gameProgress.setCurrentWaveNumber(i)
      waves.getOrCreateWave(i)
      ..setId("P{0}:Night:{1}".format(p.getId().toString(), i.toString()))
      ..addSpawnWave(createSpawnWave_Zombies(p, gameProgress))
      ..setXpReward(100)

    gameProgress.setCurrentWaveNumber(1)

    // Poison Zombies         (Group, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_InfectiousZombies(p, gameProgress))

    // Skeleton Archers       (Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_SkeletonArchers(p, gameProgress))

    // Crows                  (Flying)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Crows(p, gameProgress))

    // Aboms                  (Boss)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Abominations(p, gameProgress))

    // Dark Minions           (Group, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_DarkMinions(p, gameProgress))

    // Necromancers           (Summoner, Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Necromancers(p, gameProgress))

    // Ghouls                 (Melee, Self-Healing)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Ghouls(p, gameProgress))

    // Burning Archers        (Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_BurningArchers(p, gameProgress))

    // Crypt Fiends           (Invade, Burrow)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_CryptFiends(p, gameProgress))

    // Mutants                (Puller, Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Mutants(p, gameProgress))

    // Ghosts                 (Invade, Ethereal, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Ghosts(p, gameProgress))

    // Tentacles              (Invade, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_ForgottenOne(p, gameProgress))

    // Skeleton Marksman      (Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_SkeletonMarksmen(p, gameProgress))

    // Skeleton Champions     (Leader, Siege, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_SkeletonChampions(p, gameProgress))

    // Wraiths                (Invade, Ethereal, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Wraiths(p, gameProgress))

    // Greater Necromancers   (Summoner)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_GreaterNecromancers(p, gameProgress))

    // Gargoyles              (Flying)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Gargoyles(p, gameProgress))

    // Orc Skeletons          (Group, Melee)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_OrcSkeletons(p, gameProgress))

    // Banshees               (Invade, Ethereal, Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Banshees(p, gameProgress))

    // Meat Wagons            (Siege, Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_MeatWagons(p, gameProgress))

    // Raiders                (Group, Melee, Ranged)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Raiders(p, gameProgress))

    // Ethereal Necromancers  (Summoner)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_EtherealNecromancers(p, gameProgress))

    // Shades                 (Flying)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Shades(p, gameProgress))

    // Monolith               (Invade, Summoner)
    waves.getOrCreateWave(gameProgress.nextWave())
    ..addSpawnWave(createSpawnWave_Monolith(p, gameProgress))
  
  // --------------------------------------------------------------------------
  function getRandomSpawnPointProvider(SpawnRange range) returns ISpawnPointProvider
    return m_randomSpawnPointProviders[range castTo int]

  // --------------------------------------------------------------------------
  private function createSpawnWave_Zombies(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Zombies")
    ..setTags(SpawnDefinitionTags.ground, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromValue(20))
    ..setSpawnsPerActivation(FunctionalT.fromValue(12))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(0.25))
    ..setActivator(new PeriodicWaveActivator(3.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.NEAR))
    ..setUnitTypeProvider(new RandomUnitTypeProvider()
      ..addUnitType(TlsUnitIds.Undead.zombieMale, 1)
      ..addUnitType(TlsUnitIds.Undead.zombieFemale, 1))
    
    def.getCommonUnitModifier()
      ..setTargetPlayer(p)
      ..setMaxHp(lerpInt(120, 2000, gameProgress.getCurrentGameProgress()))
      ..setArmor(lerp(0.0, 5.0, gameProgress.getCurrentGameProgress()))
      ..setDamageRange(0, lerp(rangeInt(8, 12), rangeInt(240, 260), gameProgress.getCurrentGameProgress()))
      ..setMovementSpeed(lerp(100, 250, gameProgress.getCurrentGameProgress()))
      ..setDefenseType(ArmorType.Unarmored)
      ..add(new ZombieUnitModifier())

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_InfectiousZombies(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Infectious Zombies")
    ..setTags(SpawnDefinitionTags.ground, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal, SpawnDefinitionTags.poison)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromValue(10))
    ..setSpawnsPerActivation(FunctionalT.fromValue(10))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(3.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.NEAR))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.zombieMale))
    
    def.getUnitModifier(TlsUnitIds.Undead.zombieMale)
      ..setTargetPlayer(p)
      ..standardEliteMaxHp(gameProgress)
      ..standardEliteArmor(gameProgress)
      ..standardEliteAttack1DamageRange(gameProgress)
      ..standardEliteAttack1Cooldown(gameProgress)
      ..standardGrantCoinsOnDeath(gameProgress, 0.5)
      ..setDefenseType(ArmorType.Unarmored)
      ..add(new PoisonZombieUnitModifier())

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Crows(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Crows")
    ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real _waveProgress) -> lerpInt(1, 4, gameProgress.getCurrentGameProgress())))
    ..setSpawnsPerActivation(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 4, waveProgress)))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(0.0))
    ..setActivator(new PeriodicWaveActivator(10.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.crow))

    def.getUnitModifier(TlsUnitIds.Undead.crow)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Small)
      ..add(new CrowUnitModifier())
      ..setMovementSpeed(300)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Necromancers(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Necromancers")
    ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real _waveProgress) -> lerpInt(2, 8, gameProgress.getCurrentGameProgress())))
    ..setSpawnsPerActivation(FunctionalT.fromValue(1))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(0.0))
    ..setActivator(new PeriodicWaveActivator(10.0)..setActivateOnStart(false))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.necromancer))

    def.getUnitModifier(TlsUnitIds.Undead.necromancer)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)
      ..add(new NecromancerUnitModifier(gameProgress.getCurrentGameProgress()))
      ..add(new RaiseDeadAbilityModifier())

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_GreaterNecromancers(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Greater Necromancers")
    ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.greaterNecromancer))

    def.getUnitModifier(TlsUnitIds.Undead.greaterNecromancer)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)
      ..add(new NecromancerUnitModifier(gameProgress.getCurrentGameProgress()))
      ..add(new RaiseDeadAbilityModifier())

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_EtherealNecromancers(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Ethereal Necromancers")
    ..setTags(SpawnDefinitionTags.summoner, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.etherealNecromancer))

    def.getUnitModifier(TlsUnitIds.Undead.etherealNecromancer)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)
      ..add(new NecromancerUnitModifier(gameProgress.getCurrentGameProgress()))
      ..add(new RaiseDeadAbilityModifier())

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Abominations(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Abominations")
    ..setTags(SpawnDefinitionTags.leader, SpawnDefinitionTags.heavy, SpawnDefinitionTags.siege)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromValue(1))
    ..setActivator(new PeriodicWaveActivator(10.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.abomination))
    
    def.getUnitModifier(TlsUnitIds.Undead.abomination)
      ..setTargetPlayer(p)
      ..standardEliteMaxHp(gameProgress, 10.0)
      ..standardEliteArmor(gameProgress, 4.0)
      ..standardEliteAttack1DamageRange(gameProgress, 4.0)
      ..standardEliteAttack1Cooldown(gameProgress)
      ..guaranteeGrantCoinsOnDeath(gameProgress)
      ..setDefenseType(ArmorType.Large)
      ..add(new AbominationUnitModifier())
      ..setMovementSpeed(125.0)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_SkeletonArchers(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Skeleton Archers")
    ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonArcher))

    def.getUnitModifier(TlsUnitIds.Undead.skeletonArcher)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Medium)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_BurningArchers(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Burning Archers")
    ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.burningArcher))

    def.getUnitModifier(TlsUnitIds.Undead.burningArcher)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Medium)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_SkeletonMarksmen(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Skeleton Marksmen")
    ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonMarksman))

    def.getUnitModifier(TlsUnitIds.Undead.skeletonMarksman)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Medium)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_DarkMinions(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Dark Minions")
    ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(6, 12, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(3))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(12.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new FixedGroupUnitTypeProvider()
      ..addUnitType(TlsUnitIds.Undead.lesserDarkMinion)
      ..addUnitType(TlsUnitIds.Undead.darkMinion)
      ..addUnitType(TlsUnitIds.Undead.greaterDarkMinion))
    ..setWaitForFullSpawnGroup(true)

    def.getUnitModifier(TlsUnitIds.Undead.lesserDarkMinion)
      ..setTargetPlayer(p)
      ..setMaxHp(lerpInt(60, 600, gameProgress.getCurrentGameProgress()))
      ..setArmor(lerp(1.0, 5.0, gameProgress.getCurrentGameProgress()))
      ..setDamageRange(0, lerp(rangeInt(8, 13), rangeInt(300, 330), gameProgress.getCurrentGameProgress()))
      ..setAttackCooldown(0, lerp(1.5, 1.0, gameProgress.getCurrentGameProgress()))
      ..setDefenseType(ArmorType.Medium)
      ..standardGrantCoinsOnDeath(gameProgress, 0.5)

    def.getUnitModifier(TlsUnitIds.Undead.darkMinion)
      ..setTargetPlayer(p)
      ..setMaxHp(lerpInt(120, 1200, gameProgress.getCurrentGameProgress()))
      ..setArmor(lerp(5.0, 15.0, gameProgress.getCurrentGameProgress()))
      ..setDamageRange(0, lerp(rangeInt(8, 13), rangeInt(300, 330), gameProgress.getCurrentGameProgress()))
      ..setAttackCooldown(0, lerp(1.5, 1.0, gameProgress.getCurrentGameProgress()))
      ..setDefenseType(ArmorType.Medium)
      ..standardGrantCoinsOnDeath(gameProgress, 0.75)

    def.getUnitModifier(TlsUnitIds.Undead.greaterDarkMinion)
      ..setTargetPlayer(p)
      ..setMaxHp(lerpInt(220, 3200, gameProgress.getCurrentGameProgress()))
      ..setArmor(lerp(5.0, 15.0, gameProgress.getCurrentGameProgress()))
      ..setDamageRange(0, lerp(rangeInt(8, 13), rangeInt(300, 330), gameProgress.getCurrentGameProgress()))
      ..setAttackCooldown(0, lerp(1.5, 1.0, gameProgress.getCurrentGameProgress()))
      ..setDefenseType(ArmorType.Large)
      ..standardGrantCoinsOnDeath(gameProgress, 1.0)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Ghosts(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Ghosts")
    ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.melee, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.ghost))

    def.getUnitModifier(TlsUnitIds.Undead.ghost)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Wraiths(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Wraiths")
    ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.melee, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.wraith))

    def.getUnitModifier(TlsUnitIds.Undead.wraith)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Banshees(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Banshees")
    ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ethereal, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.banshee))

    def.getUnitModifier(TlsUnitIds.Undead.banshee)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Ghouls(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Ghouls")
    ..setTags(SpawnDefinitionTags.melee, SpawnDefinitionTags.healing, SpawnDefinitionTags.poison, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.ghoul))

    def.getUnitModifier(TlsUnitIds.Undead.ghoul)
      ..standardElite(p, gameProgress)
      ..setDefenseType(ArmorType.Large)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_ForgottenOne(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Forgotten One")
    ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromValue(1))
    ..setMaxSpawnCount(FunctionalT.fromValue(1))
    ..setSpawnsPerActivation(FunctionalT.fromValue(1))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(0.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.forgottenOne))

    def.getUnitModifier(TlsUnitIds.Undead.forgottenOne)
      ..setTargetPlayer(p)
      ..standardEliteMaxHp(gameProgress)
      ..standardEliteArmor(gameProgress)
      ..standardEliteAttack1DamageRange(gameProgress)
      ..standardEliteAttack1Cooldown(gameProgress)
      ..guaranteeGrantCoinsOnDeath(gameProgress)
      ..setDefenseType(ArmorType.Hero)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_SkeletonChampions(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Skeleton Champions")
    ..setTags(SpawnDefinitionTags.leader, SpawnDefinitionTags.melee, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonChampion))

    def.getUnitModifier(TlsUnitIds.Undead.skeletonChampion)
      ..standardElite(p, gameProgress)
      ..setDefenseType(ArmorType.Large)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Gargoyles(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Gargoyles")
    ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.fortified, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.gargoyle))

    def.getUnitModifier(TlsUnitIds.Undead.gargoyle)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Small)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_OrcSkeletons(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Orc Skeletons")
    ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.heavy, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.skeletonOrc))

    def.getUnitModifier(TlsUnitIds.Undead.skeletonOrc)
      ..standardElite(p, gameProgress)
      ..setDefenseType(ArmorType.Large)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Monolith(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Monolith")
    ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ranged, SpawnDefinitionTags.fortified, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.CLOSE))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.monolith))

    def.getUnitModifier(TlsUnitIds.Undead.monolith)
      ..setTargetPlayer(p)
      ..standardEliteMaxHp(gameProgress)
      ..standardEliteArmor(gameProgress)
      ..standardEliteAttack1DamageRange(gameProgress)
      ..standardEliteAttack1Cooldown(gameProgress)
      ..guaranteeGrantCoinsOnDeath(gameProgress)
      ..setDefenseType(ArmorType.Fortified)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_MeatWagons(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Meat Wagons")
    ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.siege)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.meatWagon))

    def.getUnitModifier(TlsUnitIds.Undead.meatWagon)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Large)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Mutants(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Mutants")
    ..setTags(SpawnDefinitionTags.ranged, SpawnDefinitionTags.puller, SpawnDefinitionTags.chaos)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.mutant))

    def.getUnitModifier(TlsUnitIds.Undead.mutant)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_CryptFiends(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Crypt Fiends")
    ..setTags(SpawnDefinitionTags.invade, SpawnDefinitionTags.ranged, SpawnDefinitionTags.magic)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.cryptFiend))

    def.getUnitModifier(TlsUnitIds.Undead.cryptFiend)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Medium)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Raiders(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Raiders")
    ..setTags(SpawnDefinitionTags.grouped, SpawnDefinitionTags.melee, SpawnDefinitionTags.ranged, SpawnDefinitionTags.normal)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.greaterDarkMinion))
    ..setWaitForFullSpawnGroup(true)

    def.getUnitModifier(TlsUnitIds.Undead.greaterDarkMinion)
      ..standardElite(p, gameProgress)
      ..setDefenseType(ArmorType.Large)

    return new SpawnWave(def, p)

  // --------------------------------------------------------------------------
  private function createSpawnWave_Shades(player p, IGameWaveProgress gameProgress) returns SpawnWave
    let def = new SpawnWaveDefinition("Shades")
    ..setTags(SpawnDefinitionTags.flying, SpawnDefinitionTags.ranged, SpawnDefinitionTags.chaos)
    ..setProgress(g_nightProgress)
    ..setMaxAliveCount(FunctionalT.fromFunc((real waveProgress) -> lerpInt(2, 8, waveProgress)))
    ..setSpawnsPerActivation(FunctionalT.fromValue(2))
    ..setSpawnGroupingFactor(FunctionalT.fromValue(1.0))
    ..setActivator(new PeriodicWaveActivator(5.0))
    ..setSpawnPointProvider(getRandomSpawnPointProvider(SpawnRange.MID))
    ..setUnitTypeProvider(new SingleUnitTypeProvider(TlsUnitIds.Undead.shade))

    def.getUnitModifier(TlsUnitIds.Undead.shade)
      ..standardRangedElite(p, gameProgress)
      ..setDefenseType(ArmorType.Unarmored)

    return new SpawnWave(def, p)

// ============================================================================
function getCoinItemSetForWave(IGameWaveProgress gameProgress) returns ItemSet
  let itemSet = new ItemSet("Coins", COLOR_GOLD.withoutAlpha())

  let t = gameProgress.getCurrentGameProgress()

  let weightSmall = g_coinSmallWeightTFunc.call(t)
  let weightMedium = g_coinMediumWeightTFunc.call(t)
  let weightLarge = g_coinLargeWeightTFunc.call(t)
  let weightEpic = g_coinEpicWeightTFunc.call(t)

  itemSet.add(TlsItemIds.coinSmall, weightSmall)
  itemSet.add(TlsItemIds.coinMedium, weightMedium)
  itemSet.add(TlsItemIds.coinLarge, weightLarge)
  itemSet.add(TlsItemIds.coinEpic, weightEpic)

  return itemSet

// ============================================================================
function AggregateUnitModifier.standardEliteMaxHp(IGameWaveProgress gameProgress)
  this.standardEliteMaxHp(gameProgress, 1.0)

// ============================================================================
function AggregateUnitModifier.standardEliteMaxHp(IGameWaveProgress gameProgress, real scale)
  let maxHp = R2I(I2R(lerpInt(240, 3000, gameProgress.getCurrentGameProgress())) * scale)
  this.setMaxHp(maxHp)

// ============================================================================
function AggregateUnitModifier.standardEliteArmor(IGameWaveProgress gameProgress)
  this.standardEliteArmor(gameProgress, 1.0)

// ============================================================================
function AggregateUnitModifier.standardEliteArmor(IGameWaveProgress gameProgress, real scale)
  this.setArmor(lerp(0.0, 10.0, gameProgress.getCurrentGameProgress()) * scale)

// ============================================================================
function AggregateUnitModifier.standardEliteAttack1DamageRange(IGameWaveProgress gameProgress)
  this.standardEliteAttack1DamageRange(gameProgress, 1.0)

// ============================================================================
function AggregateUnitModifier.standardEliteAttack1DamageRange(IGameWaveProgress gameProgress, real scale)
  var range = lerp(rangeInt(16, 32), rangeInt(160, 180), gameProgress.getCurrentGameProgress())
  range.min = R2I(I2R(range.min) * scale)
  range.max = R2I(I2R(range.max) * scale)
  this.setDamageRange(0, range)

// ============================================================================
function AggregateUnitModifier.standardEliteAttack1Cooldown(IGameWaveProgress gameProgress)
  this.standardEliteAttack1Cooldown(gameProgress, 1.0)

// ============================================================================
function AggregateUnitModifier.standardEliteAttack1Cooldown(IGameWaveProgress gameProgress, real scale)
  this.setAttackCooldown(0, lerp(2.0, 1.0, gameProgress.getCurrentGameProgress() * scale))

// ============================================================================
function AggregateUnitModifier.standardElite(player p, IGameWaveProgress gameProgress)
  this.setTargetPlayer(p)
  this.standardEliteMaxHp(gameProgress)
  this.standardEliteArmor(gameProgress)
  this.standardEliteAttack1DamageRange(gameProgress)
  this.standardEliteAttack1Cooldown(gameProgress)
  this.standardGrantCoinsOnDeath(gameProgress)
  this.setAcquisitionRange(ELITE_SIGHT_RANGE)
  this.setSightRadius(ELITE_SIGHT_RANGE)

// ============================================================================
function AggregateUnitModifier.standardRangedElite(player p, IGameWaveProgress gameProgress)
  this.setTargetPlayer(p)
  this.standardEliteMaxHp(gameProgress)
  this.standardEliteArmor(gameProgress)
  this.standardEliteAttack1DamageRange(gameProgress)
  this.standardEliteAttack1Cooldown(gameProgress)
  this.standardGrantCoinsOnDeath(gameProgress)

  this.setDamageRange(0, lerp(rangeInt(16, 32), rangeInt(64, 80), gameProgress.getCurrentGameProgress()))
  this.setAttackRange(0, ELITE_RANGED_ATTACK_RANGE)
  this.setAcquisitionRange(ELITE_SIGHT_RANGE)
  this.setSightRadius(ELITE_SIGHT_RANGE)

// ============================================================================
function AggregateUnitModifier.standardGrantCoinsOnDeath(IGameWaveProgress gameProgress)
  this.standardGrantCoinsOnDeath(gameProgress, 1.0)

// ============================================================================
function AggregateUnitModifier.standardGrantCoinsOnDeath(IGameWaveProgress gameProgress, real chanceScale)
  let chance = lerp(COIN_CHANCE_RANGE.min, COIN_CHANCE_RANGE.max, gameProgress.getCurrentGameProgress()) * chanceScale
  let itemSet = getCoinItemSetForWave(gameProgress)
  this.dropItemOnDeath(chance, itemSet)

// ============================================================================
function AggregateUnitModifier.guaranteeGrantCoinsOnDeath(IGameWaveProgress gameProgress)
  this.dropItemOnDeath(1.0, getCoinItemSetForWave(gameProgress))

// ============================================================================
init

  g_coinSmallWeightTFunc = (real t) -> clamp01(Pow(1 - t, 8))
  g_coinMediumWeightTFunc = (real t) -> clamp01((Sin(clamp(t, 0.0, 0.666) * 3 * PI - PIHALF)) / 2.0 + 0.5)
  g_coinLargeWeightTFunc = (real t) -> clamp((Sin(clamp(t, 0.333, 1.0) * 3 * PI + PIHALF)) / 2.0 + 0.5, 0.001, 1.0)
  g_coinEpicWeightTFunc = (real t) -> clamp(Pow(t, 8), 0.001, 1.0)