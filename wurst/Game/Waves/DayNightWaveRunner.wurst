package DayNightWaveRunner
import Runnable
import Wave
import DayWaveCollection
import NightWaveCollection
import DayWave
import NightWave

// ============================================================================
public class DayNightWaveRunner
  private player m_targetPlayer
  private NightWaveCollection m_nightWaves
  private DayWaveCollection m_dayWaves
  private Wave m_currentWave
  private bool m_day

  // --------------------------------------------------------------------------
  construct(player targetPlayer, NightWaveCollection nightWaves, DayWaveCollection dayWaves)
    m_targetPlayer = targetPlayer
    m_nightWaves = nightWaves
    m_dayWaves = dayWaves

  // --------------------------------------------------------------------------
  ondestroy
    cancelCurrentWave()

  // --------------------------------------------------------------------------
  function getCurrentWave() returns Wave
    return m_currentWave
  
  // --------------------------------------------------------------------------
  function startNightWave(int night)
    Log.debug("Start night wave " + I2S(night))
    cancelCurrentWave()
    m_currentWave = m_nightWaves.getLatestWave(night)
    if (m_currentWave != null)
      m_currentWave.start()
      m_day = false
      Log.debug("Night wave {0} started.".format(m_currentWave.getId()))
      m_currentWave.announceWaveToPlayer(m_targetPlayer)
    else
      Log.debug("No night wave found for night " + I2S(night))

  // --------------------------------------------------------------------------
  function startDayWave(int day)
    Log.debug("Starting day wave {0}...".format(day.toString()))
    cancelCurrentWave()
    m_currentWave = m_dayWaves.getLatestWave(day)
    if (m_currentWave != null)
      m_day = true
      m_currentWave.start()
      Log.debug("Day wave {0} started.".format(m_currentWave.getId()))
      m_currentWave.announceWaveToPlayer(m_targetPlayer)
    else
      Log.debug("No day wave found for day " + I2S(day))

  // --------------------------------------------------------------------------
  function cancelCurrentWave()
    if (m_currentWave == null or m_currentWave.isCompleted())
      return

    Log.debug("Wave {0} canceled by runner. State: {1}".format(m_currentWave.getId(), m_currentWave.getStatusString()))
    m_currentWave.cancel()
