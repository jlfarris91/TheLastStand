package DayNightWaveRunner
import Runnable
import Wave
import DayWaveCollection
import NightWaveCollection
import DayWave
import NightWave

// ============================================================================
public class DayNightWaveRunner extends Runnable
  private NightWaveCollection m_nightWaves
  private DayWaveCollection m_dayWaves
  private Wave m_currentWave
  private bool m_day

  // --------------------------------------------------------------------------
  construct(NightWaveCollection nightWaves, DayWaveCollection dayWaves)
    m_nightWaves = nightWaves
    m_dayWaves = dayWaves

  // --------------------------------------------------------------------------
  ondestroy
    stopCurrentlyRunningWave()
  
  // --------------------------------------------------------------------------
  function startNightWave(int night)
    Log.debug("Start night wave " + I2S(night))
    stopCurrentlyRunningWave()
    m_currentWave = m_nightWaves.getLatestWave(night)
    if (m_currentWave != null)
      m_currentWave.start()
      m_day = false
    else
      Log.debug("No night wave found for night " + I2S(night))

  // --------------------------------------------------------------------------
  function startDayWave(int day)
    Log.debug("Start day wave " + I2S(day))
    stopCurrentlyRunningWave()
    m_currentWave = m_dayWaves.getLatestWave(day)
    if (m_currentWave != null)
      m_currentWave.start()
      m_day = true
    else
      Log.debug("No day wave found for day " + I2S(day))

  // --------------------------------------------------------------------------
  function stopCurrentlyRunningWave()
    if (m_currentWave == null)
      return

    if (m_day)
      let dayWave = m_currentWave castTo DayWave
      Log.debug("Stopping day wave " + I2S(dayWave.getDay()))
    else
      let nightWave = m_currentWave castTo NightWave
      Log.debug("Stopping night wave " + I2S(nightWave.getNight()))

    m_currentWave.stop()