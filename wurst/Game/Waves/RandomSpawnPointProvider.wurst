package RandomSpawnPointProvider
import Spawning
import ISpawnPointProvider

constant int RETRY_COUNT = 10

// ============================================================================
public class RandomSpawnPointProvider implements ISpawnPointProvider
  private ISpawnManager m_spawnPointManager
  private ISpawnManager m_fallback
  private SpawnRange m_range

  // --------------------------------------------------------------------------
  construct(ISpawnManager spawnPointManager, ISpawnManager fallback, SpawnRange range)
    m_spawnPointManager = spawnPointManager
    m_range = range
    m_fallback = fallback

  // --------------------------------------------------------------------------
  function getRange() returns SpawnRange
    return m_range

  // --------------------------------------------------------------------------
  function setRange(SpawnRange range)
    m_range = range

  // --------------------------------------------------------------------------
  private function growRange()
    switch (m_range)
      case SpawnRange.CLOSE
        m_range = SpawnRange.NEAR
      case SpawnRange.NEAR
        m_range = SpawnRange.MID
      case SpawnRange.MID
        m_range = SpawnRange.FAR
      case SpawnRange.FAR
        return
    Log.debug("Grew spawn point provider range!")

  // --------------------------------------------------------------------------
  override function getSpawnPoints(int count) returns spawnPointsResult
    
    let spawnPoints = new SpawnPointCollection()

    for i = 0 to RETRY_COUNT - 1
      let remainingCount = max(count - spawnPoints.getCount(), 0)
      if (remainingCount == 0)
        break

      let result = m_spawnPointManager.getRandomSpawnPointsInRange(m_range, remainingCount)
      if (result.succeeded)
        for sp in result.spawnPoints
          spawnPoints.pushPoint(sp)
        destroy result.spawnPoints

      if (spawnPoints.getCount() == count)
        break

      // Could not find a spawn point within the range, grow the range and try again
      growRange()

    if (spawnPoints.getCount() != count)
      if (m_fallback != null)
        Log.warn("Using fallback spawn manager after " + RETRY_COUNT.toString() + " attempts")
        return m_fallback.getRandomSpawnPointsInRange(m_range, count)
      return spawnPointsResult(false, null)

    return spawnPointsResult(true, spawnPoints)