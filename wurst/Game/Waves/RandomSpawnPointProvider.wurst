package RandomSpawnPointProvider
import Spawning
import ISpawnPointProvider
import ErrorHandling
import Range

constant int RETRY_COUNT = 10

// ============================================================================
public class RandomSpawnPointProvider implements ISpawnPointProvider
  private ISpawnManager m_spawnPointManager
  private rangeReal m_range
  private rangeReal m_resizeFactor

  // --------------------------------------------------------------------------
  construct(ISpawnManager spawnPointManager, rangeReal range)
    m_spawnPointManager = spawnPointManager
    m_range = range
    m_resizeFactor = rangeReal(1.1, 1.2)

  // --------------------------------------------------------------------------
  function getRange() returns rangeReal
    return m_range

  // --------------------------------------------------------------------------
  function setRange(rangeReal range)
    m_range = range

  // --------------------------------------------------------------------------
  private function growRange()
    m_range = rangeReal(m_range.min * m_resizeFactor.min, m_range.max * m_resizeFactor.max)
    Log.debug("Grew spawn point provider range!")

  // --------------------------------------------------------------------------
  override function getSpawnPoint(vec2 center) returns vec2
    vec2 spawnPoint = ZERO2

    for i = 0 to RETRY_COUNT - 1
      spawnPoint = m_spawnPointManager.getRandomSpawnPointInRange(center, m_range)
      
      // Found a point no need to resize range
      if (spawnPoint != INVALID_SPAWN_POINT)
        break
      
      // Could not find a spawn point within the range, grow the range and try again
      growRange()

    if (spawnPoint == INVALID_SPAWN_POINT)
      error("Resized range " + RETRY_COUNT.toString() + " times and still could not find a spawn point")

    return spawnPoint

  // --------------------------------------------------------------------------
  override function getSpawnPoints(vec2 center, int count) returns SpawnPointCollection
    
    let result = new SpawnPointCollection()

    for i = 0 to RETRY_COUNT - 1
      let remainingCount = max(count - result.getCount(), 0)
      if (remainingCount == 0)
        break

      let spawnPoints = m_spawnPointManager.getRandomSpawnPointsInRange(center, m_range, remainingCount)
      for sp in spawnPoints
        result.pushPoint(sp)
      destroy spawnPoints

      if (result.getCount() == count)
        break
      
      // Could not find enough spawn points within the range, grow the range and try again
      growRange()

    if (result.getCount() != count)
      error("Resized range " + RETRY_COUNT.toString() + " times and still could not find enough spawn points")

    return result