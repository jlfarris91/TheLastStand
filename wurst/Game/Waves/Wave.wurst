package Wave
import Runnable
import LinkedList
import SpawnWave
import IProgress

// ============================================================================
public class Wave extends Runnable implements IProgress
  protected LinkedList<SpawnWave> m_spawnWaves

  // --------------------------------------------------------------------------
  construct()
    m_spawnWaves = new LinkedList<SpawnWave>()

  // --------------------------------------------------------------------------
  ondestroy
    for sw in m_spawnWaves
      destroy sw
    destroy m_spawnWaves
    m_spawnWaves = null

  // --------------------------------------------------------------------------
  function addSpawnWave(SpawnWave wave)
    m_spawnWaves.add(wave)

  // --------------------------------------------------------------------------
  function removeSpawnWave(SpawnWave wave) returns bool
    return m_spawnWaves.remove(wave)

  // --------------------------------------------------------------------------
  function getSpawnWaves() returns LinkedList<SpawnWave>
    return m_spawnWaves

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()
    for wave in m_spawnWaves
      wave.start()

  // --------------------------------------------------------------------------
  override function onStopped()
    super.onStopped()
    for wave in m_spawnWaves
      wave.stop()

  // --------------------------------------------------------------------------
  override function onPaused()
    super.onPaused()
    for wave in m_spawnWaves
      wave.pause()

  // --------------------------------------------------------------------------
  override function onResumed()
    super.onResumed()
    for wave in m_spawnWaves
      wave.resume()

  // --------------------------------------------------------------------------
  override function getProgress() returns real
    var numProgress = 0.0
    var totalProgress = 0.0
    for wave in m_spawnWaves
      let progressReporter = wave.getDefinition().getProgress()
      if (progressReporter != null)
        numProgress += 1.0
        totalProgress += progressReporter.getProgress()
    return totalProgress / numProgress
