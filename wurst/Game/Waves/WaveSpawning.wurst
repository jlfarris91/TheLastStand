package WaveSpawning
import Events
import Vector
import Runnable
import Func
import GameConstants
import GameInstance
import Action
import Spawning
import HashMap
import Range
import SoundUtils
import Math

public tuple tierChances(real tier1, real tier2, real tier3)

public tuple spawnWaveUnitType(int id, int tier)

// ============================================================================
public class SpawnWaveUnitTypeCollection
  private spawnWaveUnitType array[12] m_unitTypes
  private int m_size = 0

  // --------------------------------------------------------------------------
  function clear()
    m_size = 0

  // --------------------------------------------------------------------------
  function add(spawnWaveUnitType unitType)
    m_unitTypes[m_size] = unitType
    m_size++

  // --------------------------------------------------------------------------
  function add(int unitTypeId, int tier)
    m_unitTypes[m_size].id = unitTypeId
    m_unitTypes[m_size].tier = tier
    m_size++

  // --------------------------------------------------------------------------
  function get(int index) returns spawnWaveUnitType
    return m_unitTypes[index]

  // --------------------------------------------------------------------------
  function size() returns int
    return m_size
    

// ============================================================================
public interface ISpawnWaveUnitTypeProvider
  function getUnitTypes(SpawnWaveContext context, int count, SpawnWaveUnitTypeCollection output)

// ============================================================================
public interface ISpawnWaveActivator extends IRunnable
  function getActivatedEvent() returns Event
  function getTimesActivated() returns int
  function getActivateOnStart() returns bool
  function setActivateOnStart(bool value)

// ============================================================================
public class SpawnWaveDefinition
  private string m_name
  private Func1<SpawnWaveContext, Runnable> m_progressFactory
  private ISpawnWaveActivator m_activator
  private SpawnRange m_spawnRange
  private ISpawnWaveUnitTypeProvider m_unitTypeProvider
  private Func1<SpawnWaveContext, int> m_maxSpawnCount
  private Func1<SpawnWaveContext, int> m_maxAliveCount
  private Func1<SpawnWaveContext, real> m_spawnGroupingFactor
  private Func1<SpawnWaveContext, int> m_goldReward
  private Action2<unit, SpawnWaveContext> m_commonUnitModifier
  private IterableMap<int, Action2<unit, SpawnWaveContext>> m_unitModifiers
  private Vector<string> m_tags
  private bool m_waitForFullSpawnGroup = false
  private bool m_useUnitRecycler = false
  private rangeReal m_facingAngleRange = REAL_RANGE_ZERO
  private SpawnPointProviderType m_spawnPointProviderType = SpawnPointProviderType.CACHED_HOSTILE
  private sound m_playSoundOnStart = null
  private sound m_playSoundOnComplete = null
  private SoundDefinition m_playSoundOnGroupSpawn = null
  private string m_minimapIconPath = null
  private color m_minimapIconColor = color(255, 255, 255)
  private bool m_pingOnGroupSpawn = false
  private color m_pingOnGroupSpawnColor = color(255, 255, 255)

  // --------------------------------------------------------------------------
  construct(string name)
    m_name = name
    m_tags = new Vector<string>()

  // --------------------------------------------------------------------------
  ondestroy
    if (m_progressFactory != null)
      m_progressFactory.release()
      m_progressFactory = null

    if (m_activator != null)
      destroy m_activator
      m_activator = null

    if (m_unitTypeProvider != null)
      destroy m_unitTypeProvider
      m_unitTypeProvider = null

    if (m_maxAliveCount != null)
      m_maxAliveCount.release()
      m_maxAliveCount = null

    if (m_maxSpawnCount != null)
      m_maxSpawnCount.release()
      m_maxSpawnCount = null

    if (m_spawnGroupingFactor != null)
      m_spawnGroupingFactor.release()
      m_spawnGroupingFactor = null

    if (m_commonUnitModifier != null)
      m_commonUnitModifier.release()
      m_commonUnitModifier = null

    if (m_unitModifiers != null)
      for unitTypeId in m_unitModifiers
        m_unitModifiers.get(unitTypeId).release()
      destroy m_unitModifiers
      m_unitModifiers = null

    if (m_goldReward != null)
      m_goldReward.release()
      m_goldReward = null

    destroy m_tags
    m_tags = null

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  function setProgressFactory(Func1<SpawnWaveContext, Runnable> progressFactory)
    if (progressFactory != null)
      progressFactory.acquire()
    if (m_progressFactory != null)
      m_progressFactory.release()
    m_progressFactory = progressFactory

  // --------------------------------------------------------------------------
  function getProgress(SpawnWaveContext context) returns Runnable
    return m_progressFactory == null ? null : m_progressFactory.call(context)

  // --------------------------------------------------------------------------
  function setSpawnRange(SpawnRange spawnRange)
    m_spawnRange = spawnRange

  // --------------------------------------------------------------------------
  function getSpawnRange() returns SpawnRange
    return m_spawnRange

  // --------------------------------------------------------------------------
  function setUnitTypeProvider(ISpawnWaveUnitTypeProvider unitTypeProvider)
    m_unitTypeProvider = unitTypeProvider

  // --------------------------------------------------------------------------
  function getUnitTypeProvider() returns ISpawnWaveUnitTypeProvider
    return m_unitTypeProvider

  // --------------------------------------------------------------------------
  function setMaxAliveCount(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_maxAliveCount != null)
      m_maxAliveCount.release()
    m_maxAliveCount = value

  // --------------------------------------------------------------------------
  function getMaxAliveCount(SpawnWaveContext context) returns int
    if (m_maxAliveCount == null)
      return UNLIMITED
    return clamp(m_maxAliveCount.call(context), 0, UNLIMITED)

  // --------------------------------------------------------------------------
  function setMaxSpawnCount(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_maxSpawnCount != null)
      m_maxSpawnCount.release()
    m_maxSpawnCount = value

  // --------------------------------------------------------------------------
  function getMaxSpawnCount(SpawnWaveContext context) returns int
    if (m_maxSpawnCount == null)
      return UNLIMITED
    return clamp(m_maxSpawnCount.call(context), 0, UNLIMITED)

  // --------------------------------------------------------------------------
  function getSpawnGroupingFactor(SpawnWaveContext context) returns real
    if (m_spawnGroupingFactor == null)
      return 0.0
    return clamp01(m_spawnGroupingFactor.call(context))

  // --------------------------------------------------------------------------
  function setSpawnGroupingFactor(Func1<SpawnWaveContext, real> value)
    value.acquire()
    if (m_spawnGroupingFactor != null)
      m_spawnGroupingFactor.release()
    m_spawnGroupingFactor = value

  // --------------------------------------------------------------------------
  function setCommonUnitModifier(Action2<unit, SpawnWaveContext> action)
    action.acquire()
    if (m_commonUnitModifier != null)
      m_commonUnitModifier.release()
    m_commonUnitModifier = action

  // --------------------------------------------------------------------------
  function getCommonUnitModifier() returns Action2<unit, SpawnWaveContext>
    return m_commonUnitModifier

  // --------------------------------------------------------------------------
  function setUnitModifier(int unitTypeId, Action2<unit, SpawnWaveContext> action)
    action.acquire()
    if (m_unitModifiers == null)
      m_unitModifiers = new IterableMap<int, Action2<unit, SpawnWaveContext>>()
    let existing = m_unitModifiers.get(unitTypeId)
    if (existing != null)
      existing.release()
    m_unitModifiers.put(unitTypeId, action)

  // --------------------------------------------------------------------------
  function getUnitModifier(int unitTypeId) returns Action2<unit, SpawnWaveContext>
    if (m_unitModifiers == null)
      return null
    return m_unitModifiers.get(unitTypeId)

  // --------------------------------------------------------------------------
  function setTags(vararg string tags)
    m_tags.clear()
    for tag in tags
      m_tags.add(tag)

  // --------------------------------------------------------------------------
  function getTags() returns Vector<string>
    return m_tags

  // --------------------------------------------------------------------------
  function getWaitForFullSpawnGroup() returns bool
    return m_waitForFullSpawnGroup

  // --------------------------------------------------------------------------
  function setWaitForFullSpawnGroup(bool value)
    m_waitForFullSpawnGroup = value

  // --------------------------------------------------------------------------
  function getUseUnitRecycler() returns bool
    return m_useUnitRecycler

  // --------------------------------------------------------------------------
  function setUseUnitRecycler(bool value)
    m_useUnitRecycler = value

  // --------------------------------------------------------------------------
  function getGoldReward(SpawnWaveContext context) returns int
    return m_goldReward != null ? m_goldReward.call(context) : 0

  // --------------------------------------------------------------------------
  function setGoldReward(Func1<SpawnWaveContext, int> value)
    value.acquire()
    if (m_goldReward != null)
      m_goldReward.release()
    m_goldReward = value

  // --------------------------------------------------------------------------
  function getFacingAngleRange() returns rangeReal
    return m_facingAngleRange

  // --------------------------------------------------------------------------
  function setFacingAngleRange(rangeReal range)
    m_facingAngleRange = range
  
  // --------------------------------------------------------------------------
  function getSpawnPointProviderType() returns SpawnPointProviderType
    return m_spawnPointProviderType
  
  // --------------------------------------------------------------------------
  function setSpawnPointProviderType(SpawnPointProviderType value)
    m_spawnPointProviderType = value

  // --------------------------------------------------------------------------
  function playSoundOnStart(sound value)
    m_playSoundOnStart = value

  // --------------------------------------------------------------------------
  function getPlaySoundOnStart() returns sound
    return m_playSoundOnStart

  // --------------------------------------------------------------------------
  function playSoundOnComplete(sound value)
    m_playSoundOnComplete = value

  // --------------------------------------------------------------------------
  function getPlaySoundOnComplete() returns sound
    return m_playSoundOnComplete

  // --------------------------------------------------------------------------
  function playSoundOnGroupSpawn(SoundDefinition definition)
    m_playSoundOnGroupSpawn = definition

  // --------------------------------------------------------------------------
  function getPlaySoundOnGroupSpawn() returns SoundDefinition
    return m_playSoundOnGroupSpawn

  // --------------------------------------------------------------------------
  function showMinimapIcon(string iconPath, color color)
    m_minimapIconPath = iconPath
    m_minimapIconColor = color

  // --------------------------------------------------------------------------
  function getMinimapIconPath() returns string
    return m_minimapIconPath

  // --------------------------------------------------------------------------
  function getMinimapIconColor() returns color
    return m_minimapIconColor
  
  // --------------------------------------------------------------------------
  function pingOnGroupSpawn(color color)
    m_pingOnGroupSpawn = true
    m_pingOnGroupSpawnColor = color
  
  // --------------------------------------------------------------------------
  function getPingOnGroupSpawn() returns bool
    return m_pingOnGroupSpawn
  
  // --------------------------------------------------------------------------
  function getPingOnGroupSpawnColor() returns color
    return m_pingOnGroupSpawnColor

// ============================================================================
public class SpawnWaveContext
  SpawnWaveDefinition definition = null
  int waveNumber = 0
  real waveProgress = 0.0
  real playerDifficulty = 1.0
  real array[MAX_ELITE_TIER] tierChances = [ 1.0, 0.0, 0.0]
  int unitTier = 0
  int waveTier = 0
  int groupId = 0

  private Event m_onUnitKilled
  private int m_killCount = 0

  // --------------------------------------------------------------------------
  ondestroy
    if (m_onUnitKilled != null)
      destroy m_onUnitKilled
      m_onUnitKilled = null

  // --------------------------------------------------------------------------
  function getGameProgress01() returns real
    return ((waveNumber - 1).toReal() + waveProgress) / TOTAL_NIGHTS

  // --------------------------------------------------------------------------
  function getGameDifficulty01() returns real
    return g_GameInstance.getGameDifficulty01()

  // --------------------------------------------------------------------------
  function getUnitModifierGameProgress01() returns real
    return getGameProgress01()

  // --------------------------------------------------------------------------
  function getUnitModifierDifficultyScalar01() returns real
    return (playerDifficulty + unitTier + 4.0) / 5.0

  // --------------------------------------------------------------------------
  function onUnitKilled() returns IEvent
    if (m_onUnitKilled == null)
      m_onUnitKilled = new Event()
    return m_onUnitKilled

  // --------------------------------------------------------------------------
  function getKillCount() returns int
    return m_killCount

  // --------------------------------------------------------------------------
  function incKillCount()
    m_killCount++
    if (m_onUnitKilled != null)
      m_onUnitKilled.call()

  // --------------------------------------------------------------------------
  function clone() returns SpawnWaveContext
    let clone = new SpawnWaveContext()
    clone.definition = definition
    clone.waveNumber = waveNumber
    clone.waveProgress = waveProgress
    clone.playerDifficulty = playerDifficulty
    clone.waveTier = waveTier
    clone.unitTier = unitTier
    clone.groupId = groupId
    for i = 0 to MAX_ELITE_TIER-1
      clone.tierChances[i] = tierChances[i]
    return clone

  // --------------------------------------------------------------------------
  function getRandomTier() returns int
    var roll01 = GetRandomReal(0, 1)
    var tier = 0
    for i = 0 to MAX_ELITE_TIER - 1
      let tierChance = tierChances[i]
      if (roll01 < tierChance)
        tier = i
        break
      roll01 -= tierChance
    return tier

// ============================================================================
public class UnitSpawnContext
  UnitSpawnContext prev = null
  UnitSpawnContext next = null
  int unitTypeId = -1
  int tier = -1