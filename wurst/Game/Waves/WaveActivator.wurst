package WaveActivator
import Events
import Runnable
import ISpawnWave

// ============================================================================
public abstract class WaveActivator extends Runnable implements ISpawnWaveActivator
  private int m_numTimesActivated
  private bool m_activateOnStart = true
  private Event m_activated

  // --------------------------------------------------------------------------
  construct()
    m_activated = new Event()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_activated

  // --------------------------------------------------------------------------
  override function getActivatedEvent() returns Event
    return m_activated

  // --------------------------------------------------------------------------
  override function getTimesActivated() returns int
    return m_numTimesActivated

  // --------------------------------------------------------------------------
  override function getActivateOnStart() returns bool
    return m_activateOnStart

  // --------------------------------------------------------------------------
  override function setActivateOnStart(bool value)
    m_activateOnStart = value

  // --------------------------------------------------------------------------
  override protected function reset()
    super.reset()
    m_numTimesActivated = 0

  // --------------------------------------------------------------------------
  override protected function onStarted()
    super.onStarted()
    if (m_activateOnStart)
      raiseActivatedEvent()

  // --------------------------------------------------------------------------
  protected function raiseActivatedEvent()
    m_numTimesActivated++
    m_activated.call()

  // --------------------------------------------------------------------------
  override function getState() returns RunnableState
    return super.getState()

  // --------------------------------------------------------------------------
  override function getError() returns string
    return super.getError()

  // --------------------------------------------------------------------------
  override function start()
    super.start()

  // --------------------------------------------------------------------------
  override function pause()
    super.pause()

  // --------------------------------------------------------------------------
  override function resume()
    super.resume()

  // --------------------------------------------------------------------------
  override function fail(string error)
    super.fail(error)

  // --------------------------------------------------------------------------
  override function complete()
    super.complete()

  // --------------------------------------------------------------------------
  override function cancel()
    super.cancel()

  // --------------------------------------------------------------------------
  override function getStatusString() returns string
    return super.getStatusString()

  // --------------------------------------------------------------------------
  override function getStateChangedEvent() returns Event1<IRunnable>
    return super.getStateChangedEvent()