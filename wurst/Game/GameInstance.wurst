package GameInstance
import GameSettings
import Survivors
import GameConstants
import HumanPlayers
import HumanPlayerMetadata
import Heroes
import ClosureTimers
import TlsSounds
import PlayerWaves
import IWaveGenerator
import DayWave
import NightWave
import Runnable
import NormalNightWaveGenerator
import NormalDayWaveGenerator
import WaveMultiboard
import Events
import BaseUnitsRectProvider

public GameInstance g_GameInstance

constant real TIME_OF_DAY_INITIAL = 6.0
constant real GAME_SPEED_INITIAL = 100.0

// ============================================================================
public class GameInstance extends Runnable
  private int m_day
  private int m_night
  private Action m_dayEventHandler
  private Action m_nightEventHandler
  private PlayerWavesMap m_playerWaves
  private IWaveGenerator<DayWave> m_dayWaveGenerator
  private IWaveGenerator<NightWave> m_nightWaveGenerator
  private WaveMultiboard m_waveMultiboard

  // --------------------------------------------------------------------------
  ondestroy
    stop()

  // --------------------------------------------------------------------------
  function getIsDay() returns bool
    return GetTimeOfDay() >= TIME_OF_DAY and GetTimeOfDay() < TIME_OF_NIGHT

  // --------------------------------------------------------------------------
  function getIsNight() returns bool
    return GetTimeOfDay() >= TIME_OF_NIGHT or GetTimeOfDay() < TIME_OF_DAY

  // --------------------------------------------------------------------------
  function getDay() returns int
    return m_day

  // --------------------------------------------------------------------------
  function getNight() returns int
    return m_night

  // --------------------------------------------------------------------------
  function getDaysSurvived() returns int
    return max(m_night - 1, 0)

  // --------------------------------------------------------------------------
  function getNightsSurvived() returns int
    return max(m_day - 1, 0)

  // --------------------------------------------------------------------------
  function getWaves() returns PlayerWavesMap
    return m_playerWaves

  // --------------------------------------------------------------------------
  function startNextDay()
    SetTimeOfDay(TIME_OF_DAY)

  // --------------------------------------------------------------------------
  function startNextNight()
    SetTimeOfDay(TIME_OF_NIGHT)

  // --------------------------------------------------------------------------
  function getWaveMultiboard() returns WaveMultiboard
    return m_waveMultiboard

  // --------------------------------------------------------------------------
  function skipToDay(int day)
    if (day > getDay())
      if (getIsDay())
        startNextNight()
      else
        startNextDay()
      doAfter(0.2) ->
        skipToDay(day)

  // --------------------------------------------------------------------------
  function skipToNight(int night)
    if (night > getNight())
      if (getIsDay())
        startNextNight()
      else
        startNextDay()
      doAfter(0.2) ->  
        skipToNight(night)

  // --------------------------------------------------------------------------
  function reset()
    stop()
    
    m_day = 0
    m_night = 0
    SetTimeOfDay(TIME_OF_DAY_INITIAL)
    SetTimeOfDayScalePercentBJ(GAME_SPEED_INITIAL)

    start()

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()

    // These should move to a place that sets up the GameInstance
    m_dayWaveGenerator = new NormalDayWaveGenerator()
    m_nightWaveGenerator = new NormalNightWaveGenerator()

    m_waveMultiboard = new WaveMultiboard()

    initializeGeneral()
    initializeAlliances()
    initializeWaves()

    listenForDayEvent()
    listenForNightEvent()

    nullTimer() ->
      postStart()

  // --------------------------------------------------------------------------
  override function onStopped()
    super.onStopped()    

    unlistenForDayEvent()
    unlistenForNightEvent()

    destroy m_playerWaves
    m_playerWaves = null

    if (m_nightWaveGenerator != null)
      destroy m_nightWaveGenerator
      m_nightWaveGenerator = null

    if (m_dayWaveGenerator != null)
      destroy m_dayWaveGenerator
      m_dayWaveGenerator = null

    if (m_waveMultiboard != null)
      destroy m_waveMultiboard
      m_waveMultiboard = null

  // --------------------------------------------------------------------------
  private function postStart()
    for p in g_PlayingHumanPlayers
      initializePlayer(p)

  // --------------------------------------------------------------------------
  private function initializePlayer(player p)
    
    spawnInitialPlayerUnitsAtRandomPoint(p)

    // Create a visible region around the base units
    createVision(p, getBaseUnitsRect(), false)

    p.setGold(GameSettings.startingGold)
    p.setLumber(GameSettings.startingMaterials)

  // --------------------------------------------------------------------------
  private function onDayStart()
    m_day++

    Log.debug("Started day " + I2S(m_day))

    PlaySoundBJ(TlsSounds.questCompleted)

    if (GameSettings.allowRespawn)
      respawnDeadPlayers()

    // Start day waves for players
    for p in g_PlayingHumanPlayers
      let waves = m_playerWaves.getOrCreatePlayerWaves(p)
      waves.getRunner().startDayWave(m_day)

    spawnUnrescuedSurvivorsNearPlayers()

  // --------------------------------------------------------------------------
  private function onNightStart()
    m_night++

    Log.debug("Started night " + I2S(m_night))

    removeUnrescuedSurvivors()

    // Start night waves for players
    for p in g_PlayingHumanPlayers
      let waves = m_playerWaves.getOrCreatePlayerWaves(p)
      waves.getRunner().startNightWave(m_night)

  // --------------------------------------------------------------------------
  private function respawnDeadPlayers()
    g_PlayingHumanPlayers.forEach() (player p) ->
      if (p.getHumanMetadata().getIsDead())
        spawnInitialPlayerUnitsAtRandomPoint(p)  

  // --------------------------------------------------------------------------
  private function initializeGeneral()
    EnableMinimapFilterButtons(true, false)
    SetPlayerFlagBJ(PLAYER_STATE_GIVES_BOUNTY, true, PLAYER_UNDEAD)
    CameraSetSmoothingFactor(5.0)
    SetCreepCampFilterState(false)
    SetTimeOfDayScalePercentBJ(GAME_SPEED_INITIAL)
    SetTimeOfDay(TIME_OF_DAY_INITIAL)
    FogEnableOn()

  // --------------------------------------------------------------------------
  private function initializeWaves()
    m_playerWaves = new PlayerWavesMap()

    Log.debug("Generating waves...")

    for p in g_PlayingHumanPlayers
      let playerWaves = m_playerWaves.getOrCreatePlayerWaves(p)

      let nightWaves = playerWaves.getNightWaves()
      if (m_nightWaveGenerator != null)
        m_nightWaveGenerator.generateWavesForPlayer(p, nightWaves)

      let dayWaves = playerWaves.getDayWaves()
      if (m_dayWaveGenerator != null)
        m_dayWaveGenerator.generateWavesForPlayer(p, dayWaves)

    Log.debug("Done generating waves.")

  // --------------------------------------------------------------------------
  private function initializeAlliances()  
    SetPlayerAllianceStateBJ(PLAYER_RAIDERS, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
    SetPlayerAllianceStateBJ(PLAYER_UNDEAD, PLAYER_RAIDERS, bj_ALLIANCE_UNALLIED)
    for p in g_HumanPlayers
      // Make player treat undead as an enemy
      SetPlayerAllianceStateBJ(p, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
      // Make undead treat player as an enemy
      SetPlayerAllianceStateBJ(PLAYER_UNDEAD, p, bj_ALLIANCE_UNALLIED )
      // Make player treat villagers as nuetral
      SetPlayerAllianceStateBJ(p, PLAYER_VILLAGERS, bj_ALLIANCE_NEUTRAL )
      // Make villagers treat player as nuetral
      SetPlayerAllianceStateBJ(PLAYER_VILLAGERS, p, bj_ALLIANCE_NEUTRAL )
      // Make player treat raiders as an enemy
      SetPlayerAllianceStateBJ(p, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
      // Make raiders treat player as an enemy
      SetPlayerAllianceStateBJ(PLAYER_UNDEAD, p, bj_ALLIANCE_UNALLIED)

  // --------------------------------------------------------------------------
  private function listenForDayEvent()
    unlistenForDayEvent()

    if (m_dayEventHandler == null)
      m_dayEventHandler = GameEvents.dayStartEvent.add() () ->
        onDayStart()

  // --------------------------------------------------------------------------
  private function unlistenForDayEvent()
    if (m_dayEventHandler != null)
      GameEvents.dayStartEvent.remove(m_dayEventHandler)
      destroy m_dayEventHandler
      m_dayEventHandler = null

  // --------------------------------------------------------------------------
  private function listenForNightEvent()
    unlistenForNightEvent()

    if (m_nightEventHandler == null)
      m_nightEventHandler = GameEvents.nightStartEvent.add() () ->
        onNightStart()

  // --------------------------------------------------------------------------
  private function unlistenForNightEvent()
    if (m_nightEventHandler != null)
      GameEvents.nightStartEvent.remove(m_nightEventHandler)
      destroy m_nightEventHandler
      m_nightEventHandler = null

// ============================================================================
init
  g_GameInstance = new GameInstance()

  doAfter(0.1) ->
    g_GameInstance.start()