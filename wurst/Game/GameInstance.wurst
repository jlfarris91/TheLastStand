package GameInstance
import TimeOfDayEvents
// import Zombies
import Items
import GameSettings
import Survivors
import GameConstants
import HumanPlayers
import HumanPlayerMetadata
import Heroes
import AnonymousEvent
import ClosureTimers
import TlsSounds
import PlayerWaves
import IWaveGenerator
import NormalNightWaveGenerator
import DayWave
import NightWave
import Runnable

public GameInstance g_GameInstance

constant real TIME_OF_DAY_INITIAL = 5.0
constant real GAME_SPEED_INITIAL = 50.0

// ============================================================================
public class GameInstance extends Runnable
  private int m_day
  private int m_night
  private AnonymousEventHandler m_dayEventHandler
  private AnonymousEventHandler m_nightEventHandler
  private PlayerWavesMap m_playerWaves
  private IWaveGenerator<DayWave> m_dayWaveGenerator
  private IWaveGenerator<NightWave> m_nightWaveGenerator

  // --------------------------------------------------------------------------
  ondestroy
    stop()

  // --------------------------------------------------------------------------
  function getDaysSurvived() returns int
    return max(m_night - 1, 0)

  // --------------------------------------------------------------------------
  function getNightsSurvived() returns int
    return max(m_day - 1, 0)

  // --------------------------------------------------------------------------
  function reset()
    stop()
    
    m_day = 0
    m_night = 0
    SetTimeOfDay(0.0)
    SetTimeOfDayScalePercentBJ(100.0)

    start()

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()

    // These should move to a place that sets up the GameInstance
    m_dayWaveGenerator = null
    m_nightWaveGenerator = new NormalNightWaveGenerator()..setTotalNights(28)

    initializeGeneral()
    initializeAlliances()
    initializeWaves()

    listenForDayEvent()
    listenForNightEvent()

    nullTimer() ->
      postStart()

  // --------------------------------------------------------------------------
  override function onStopped()
    super.onStopped()    

    unlistenForDayEvent()
    unlistenForNightEvent()

    destroy m_playerWaves
    m_playerWaves = null

  // --------------------------------------------------------------------------
  private function postStart()
    spawnHeroesForPlayers()
    
    for p in g_PlayingHumanPlayers
      // Create a visible region around the base units
      createVision(p, gg_rct_BaseUnits, false)

  // --------------------------------------------------------------------------
  private function onDayStart()
    m_day++

    Log.info("Started day " + I2S(m_day))

    PlaySoundBJ(TlsSounds.questCompleted)

    if (GameSettings.allowRespawn)
      respawnDeadPlayers()

    // Start day waves for players
    for p in g_PlayingHumanPlayers
      let waves = m_playerWaves.getOrCreatePlayerWaves(p)
      waves.getRunner().startDayWave(m_day)

    //Zombies.stopSpawning()
    //Zombies.killAllUndead()
    //Zombies.spawnDayZombiesNearPlayers()

    Items.spawnItemsNearPlayers()

    spawnUnrescuedSurvivorsNearPlayers()

    // TODO: update player stats multiboard

  // --------------------------------------------------------------------------
  private function onNightStart()
    m_night++

    Log.info("Started night " + I2S(m_night))

    removeUnrescuedSurvivors()
    Items.removeAllItemsNotNearHumanUnits()

    // Start night waves for players
    for p in g_PlayingHumanPlayers
      let waves = m_playerWaves.getOrCreatePlayerWaves(p)
      waves.getRunner().startNightWave(m_night)

    //Zombies.killAllUndead()
    //Zombies.startSpawning()

  // --------------------------------------------------------------------------
  private function respawnDeadPlayers()
    g_PlayingHumanPlayers.forEach() (player p) ->
      if (p.getHumanMetadata().getIsDead())
        spawnInitialPlayerUnitsAtRandomPoint(p)  

  // --------------------------------------------------------------------------
  private function initializeGeneral()
    EnableMinimapFilterButtons(true, false)
    SetPlayerFlagBJ(PLAYER_STATE_GIVES_BOUNTY, true, PLAYER_UNDEAD)
    CameraSetSmoothingFactor(5.0)
    SetCreepCampFilterState(false)
    SetTimeOfDayScalePercentBJ(GAME_SPEED_INITIAL)
    SetTimeOfDay(TIME_OF_DAY_INITIAL)
    FogEnableOn()

  // --------------------------------------------------------------------------
  private function initializeWaves()
    m_playerWaves = new PlayerWavesMap()

    Log.info("Generating waves...")

    for p in g_PlayingHumanPlayers
      let playerWaves = m_playerWaves.getOrCreatePlayerWaves(p)

      if (m_nightWaveGenerator != null)
        m_nightWaveGenerator.generateWavesForPlayer(p, playerWaves.getNightWaves())

      if (m_dayWaveGenerator != null)
        m_dayWaveGenerator.generateWavesForPlayer(p, playerWaves.getDayWaves())

    Log.info("Done generating waves.")

  // --------------------------------------------------------------------------
  private function initializeAlliances()  
    SetPlayerAllianceStateBJ(PLAYER_RAIDERS, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
    SetPlayerAllianceStateBJ(PLAYER_UNDEAD, PLAYER_RAIDERS, bj_ALLIANCE_UNALLIED)
    for p in g_HumanPlayers
      // Make player treat undead as an enemy
      SetPlayerAllianceStateBJ(p, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
      // Make undead treat player as an enemy
      SetPlayerAllianceStateBJ(PLAYER_UNDEAD, p, bj_ALLIANCE_UNALLIED )
      // Make player treat villagers as nuetral
      SetPlayerAllianceStateBJ(p, PLAYER_VILLAGERS, bj_ALLIANCE_NEUTRAL )
      // Make villagers treat player as nuetral
      SetPlayerAllianceStateBJ(PLAYER_VILLAGERS, p, bj_ALLIANCE_NEUTRAL )
      // Make player treat raiders as an enemy
      SetPlayerAllianceStateBJ(p, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
      // Make raiders treat player as an enemy
      SetPlayerAllianceStateBJ(PLAYER_UNDEAD, p, bj_ALLIANCE_UNALLIED)
      // Turn off undead shared vision with player (probably unnecessary)
      SetPlayerAllianceBJ(PLAYER_UNDEAD, ALLIANCE_SHARED_VISION, false, p)

  // --------------------------------------------------------------------------
  private function listenForDayEvent()
    m_dayEventHandler = g_DayEvent.addListener() () ->
      onDayStart()

  // --------------------------------------------------------------------------
  private function unlistenForDayEvent()
    if (m_dayEventHandler != null)
      m_dayEventHandler = g_DayEvent.removeListener(m_dayEventHandler)

  // --------------------------------------------------------------------------
  private function listenForNightEvent()
    m_nightEventHandler = g_NightEvent.addListener() () ->
      onNightStart()

  // --------------------------------------------------------------------------
  private function unlistenForNightEvent()
    if (m_nightEventHandler != null)
      m_nightEventHandler = g_NightEvent.removeListener(m_nightEventHandler)

// ============================================================================
init
  g_GameInstance = new GameInstance()

  doAfter(0.1) ->
    g_GameInstance.start()