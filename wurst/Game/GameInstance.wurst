package GameInstance
import GameSettings
import GameConstants
import HumanPlayers
import HumanPlayerMetadata
import Heroes
import ClosureTimers
import TlsSounds
import PlayerWaves
import IWaveGenerator
import DayWave
import NightWave
import Runnable
import NormalNightWaveGenerator
import NormalDayWaveGenerator
import WaveMultiboard
import BaseUnitsRectProvider
import Time
import RandomWeatherPlayer
import DisplayTextToPlayer
import StringExtensions
import initlater GameStatsMultiboard
import Headquarters

public GameInstance g_GameInstance

constant real TIME_OF_DAY_INITIAL = 5.5
constant real GAME_SPEED_INITIAL = 100.0

// ============================================================================
public class GameInstance extends Runnable
  private bool m_gracePeriod
  private bool m_updateGracePeriod
  private int m_day
  private int m_night
  private PlayerWavesMap m_playerWaves
  private IWaveGenerator<DayWave> m_dayWaveGenerator
  private IWaveGenerator<NightWave> m_nightWaveGenerator
  private WaveMultiboard m_waveMultiboard
  private RandomWeatherPlayer m_weatherPlayer

  // --------------------------------------------------------------------------
  ondestroy
    if (not this.isCompleted())
      this.cancel()
    destroy m_weatherPlayer

  // --------------------------------------------------------------------------
  function getDay() returns int
    return m_day

  // --------------------------------------------------------------------------
  function getNight() returns int
    return m_night

  // --------------------------------------------------------------------------
  function getDaysSurvived() returns int
    return max(m_night - 1, 0)

  // --------------------------------------------------------------------------
  function getNightsSurvived() returns int
    return max(m_day - 1, 0)

  // --------------------------------------------------------------------------
  function isGracePeriodActive() returns bool
    return m_gracePeriod

  // --------------------------------------------------------------------------
  function setGracePeriodActive(bool value)
    m_gracePeriod = value

  // --------------------------------------------------------------------------
  function setUpdateGracePeriod(bool value)
    m_updateGracePeriod = value

  // --------------------------------------------------------------------------
  function getWaves() returns PlayerWavesMap
    return m_playerWaves

  // --------------------------------------------------------------------------
  function getPlayerWaves(player p) returns PlayerWaves
    return m_playerWaves.getOrCreatePlayerWaves(p)

  // --------------------------------------------------------------------------
  function startNextDay()
    SetTimeOfDay(TIME_OF_DAY)

  // --------------------------------------------------------------------------
  function startNextNight()
    SetTimeOfDay(TIME_OF_NIGHT)

  // --------------------------------------------------------------------------
  function getWaveMultiboard() returns WaveMultiboard
    return m_waveMultiboard

  // --------------------------------------------------------------------------
  function skipToDay(int day)
    m_day = day - 1
    startNextDay()

  // --------------------------------------------------------------------------
  function skipToNight(int night)
    m_night = night - 1
    startNextNight()

  // --------------------------------------------------------------------------
  override function reset()
    super.reset()
    
    m_day = 0
    m_night = 0
    SetTimeOfDay(TIME_OF_DAY_INITIAL)
    SetTimeOfDayScalePercentBJ(GAME_SPEED_INITIAL)

  // --------------------------------------------------------------------------
  override function onStarted()
    super.onStarted()

    m_updateGracePeriod = true

    // These should move to a place that sets up the GameInstance
    m_dayWaveGenerator = new NormalDayWaveGenerator()
    m_nightWaveGenerator = new NormalNightWaveGenerator()
    m_waveMultiboard = new WaveMultiboard()
    m_weatherPlayer = new RandomWeatherPlayer()

    m_weatherPlayer.start()

    initializeGeneral()
    initializeAlliances()
    initializeWaves()

    doAfter(1.0) ->
      postStart()

  // --------------------------------------------------------------------------
  override function onCompleted()
    super.onCompleted()

    m_weatherPlayer.stop()

    destroy m_playerWaves
    m_playerWaves = null

    if (m_nightWaveGenerator != null)
      destroy m_nightWaveGenerator
      m_nightWaveGenerator = null

    if (m_dayWaveGenerator != null)
      destroy m_dayWaveGenerator
      m_dayWaveGenerator = null

    if (m_waveMultiboard != null)
      destroy m_waveMultiboard
      m_waveMultiboard = null

  // --------------------------------------------------------------------------
  private function postStart()
    for p in g_PlayingHumanPlayers
      initializePlayer(p)

  // --------------------------------------------------------------------------
  private function initializePlayer(player p)
    
    spawnInitialPlayerUnitsAtRandomPoint(p, true)

    // Create a visible region around the base units
    createVision(p, getBaseUnitsRect(), false)

    p.setGold(GameSettings.startingGold)
    p.setLumber(GameSettings.startingMaterials)

    updateNoHeadquartersUpgrade(p)

    doAfter(1.0) () ->
      new GameStatsMultiboard(p).show()

  // --------------------------------------------------------------------------
  function updateGracePeriod()
    let wasGracePeriod = m_gracePeriod
    m_gracePeriod = m_day <= GRACE_PERIOD_END_DAY
    if (wasGracePeriod and not m_gracePeriod)
      displayMessageToPlayers("Grace period has ended. Hero death is now permanent.".colorize(COLOR_GOLD))

  // --------------------------------------------------------------------------
  function startDay()
    m_day++

    if (m_updateGracePeriod)
      updateGracePeriod()

    Log.debug("Starting day {0}...".format(m_day.toString()))

    PlaySoundBJ(TlsSounds.questCompleted)

    if (GameSettings.allowRespawn)
      respawnDeadPlayers()

    // Start day waves for players
    for p in g_PlayingHumanPlayers
      let waves = m_playerWaves.getOrCreatePlayerWaves(p)
      Log.debug("Starting day wave {0} for player {1}".format(m_day.toString(), p.getName()))
      waves.getRunner().startDayWave(m_day)

    Log.debug("Day {0} started.".format(m_day.toString()))

  // --------------------------------------------------------------------------
  function startNight()
    m_night++

    Log.debug("Starting night {0}...".format(m_night.toString()))

    // Start night waves for players
    for p in g_PlayingHumanPlayers
      let waves = m_playerWaves.getOrCreatePlayerWaves(p)
      Log.debug("Starting night wave {0} for player {1}".format(m_night.toString(), p.getName()))
      waves.getRunner().startNightWave(m_night)

    Log.debug("Night {0} started.".format(m_night.toString()))

  // --------------------------------------------------------------------------
  private function respawnDeadPlayers()
    if (not m_gracePeriod)
      return

    g_PlayingHumanPlayers.forEach() (player p) ->
      if (p.getHumanMetadata().getIsDead())
        spawnInitialPlayerUnitsAtRandomPoint(p, false)  

  // --------------------------------------------------------------------------
  private function initializeGeneral()
    EnableMinimapFilterButtons(true, false)
    SetPlayerFlagBJ(PLAYER_STATE_GIVES_BOUNTY, true, PLAYER_UNDEAD)
    CameraSetSmoothingFactor(5.0)
    SetCreepCampFilterState(false)
    SetTimeOfDayScalePercentBJ(GAME_SPEED_INITIAL)
    SetTimeOfDay(TIME_OF_DAY_INITIAL)
    FogEnableOn()

    // We control experience gain manually
    for p in g_HumanPlayers
      SetPlayerHandicapXPBJ(p, 0.00)

  // --------------------------------------------------------------------------
  private function initializeWaves()
    m_playerWaves = new PlayerWavesMap()

    Log.debug("Generating waves...")

    for p in g_PlayingHumanPlayers
      let playerWaves = m_playerWaves.getOrCreatePlayerWaves(p)

      nullTimer() () ->
        Log.debug("Generating night waves for player " + p.getName() + " ...")
        let nightWaves = playerWaves.getNightWaves()
        if (m_nightWaveGenerator != null)
          m_nightWaveGenerator.generateWavesForPlayer(p, nightWaves)

      nullTimer() () ->
        Log.debug("Generating day waves for player " + p.getName() + " ...")
        let dayWaves = playerWaves.getDayWaves()
        if (m_dayWaveGenerator != null)
          m_dayWaveGenerator.generateWavesForPlayer(p, dayWaves)

    Log.debug("Done generating waves.")

  // --------------------------------------------------------------------------
  private function initializeAlliances()  
    for p in g_HumanPlayers
      // Make player treat undead as an enemy
      SetPlayerAllianceStateBJ(p, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
      // Make undead treat player as an enemy
      SetPlayerAllianceStateBJ(PLAYER_UNDEAD, p, bj_ALLIANCE_UNALLIED )
      // Make player treat villagers as nuetral
      SetPlayerAllianceStateBJ(p, PLAYER_VILLAGERS, bj_ALLIANCE_NEUTRAL )
      // Make villagers treat player as nuetral
      SetPlayerAllianceStateBJ(PLAYER_VILLAGERS, p, bj_ALLIANCE_NEUTRAL )
      // Make player treat raiders as an enemy
      SetPlayerAllianceStateBJ(p, PLAYER_UNDEAD, bj_ALLIANCE_UNALLIED)
      // Make raiders treat player as an enemy
      SetPlayerAllianceStateBJ(PLAYER_UNDEAD, p, bj_ALLIANCE_UNALLIED)

// ============================================================================
function onDayStart()
  // Wait to allow Waves and SpawnWaves to complete
  g_GameInstance.startDay()

// ============================================================================
function onNightStart()
  // Wait to allow Waves and SpawnWaves to complete
  g_GameInstance.startNight()

// ============================================================================
init
  g_GameInstance = new GameInstance()

  registerDayEvent(function onDayStart)
  registerNightEvent(function onNightStart)

  doAfter(0.1) ->
    g_GameInstance.start()