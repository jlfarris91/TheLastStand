package Day
import GameConstants
import GameInstance
import SurvivorSpawnPoints
import Zombies
import HumanPlayers
import PlayerMetadata
import GameSettings
import Camp
import UndeadSpawnPoints
import Heroes
import MainItemLibrary

trigger g_OnDayTrigger

function spawnItemsNearPlayer(player p)
  if (p.getIsDead())
    return
  
  var camp = p.getCamp()
  var center = camp.getCenter()

  for i = 0 to GameSettings.items_DaySpawnCountPerPlayer
    var r = GetRandomDirectionDeg() * DEGTORAD
    var l = GetRandomReal(GameSettings.items_DaySpawnMinRadius, GameSettings.items_DaySpawnMaxRadius)
    var x = center.x + Cos(r) * l
    var y = center.y + Sin(r) * l
    g_MainItemLibrary.createRandomItem(
      vec2(x, y),
      DAY_ITEM_CHANCE_COMMON,
      DAY_ITEM_CHANCE_RARE,
      DAY_ITEM_CHANCE_EPIC,
      DAY_ITEM_CHANCE_LEGENDARY)

function spawnItemsNearPlayers()
  g_PlayingHumanPlayers.forEach() (player p) ->
    spawnItemsNearPlayer(p)

function spawnDayZombiesNearPlayer(player p)
  if (p.getIsDead())
    return
  
  var camp = p.getCamp()
  var center = camp.getCenter()

  var spawnPoints = g_UndeadSpawnPointManager.getRandomSpawnPointsInRange(
    center,
    ZOMBIES_DAY_SPAWN_RANGE,
    GameSettings.zombies_DaySpawnCountPerPlayer)

  var groupSize = GetRandomInt(ZOMBIES_DAY_GROUP_SIZE_MIN, ZOMBIES_DAY_GROUP_SIZE_MAX)

  for sp in spawnPoints
    // TODO: unit recycler
    for i = 0 to groupSize
      CreateUnit(PLAYER_UNDEAD, UNIT_ID_DAY_ZOMBIE, sp.getPos().x, sp.getPos().y, GetRandomDirectionDeg())

  var chance = ZOMBIES_DAY_GROUP_ITEM_CHANCE + (groupSize * ZOMBIES_DAY_GROUP_ITEM_CHANCE)

  if (GetRandomReal(0.0, 1.0) > chance)
    var itm = g_MainItemLibrary.createRandomItem(
      bj_lastCreatedUnit.getPos(),
      ZOMBIES_DAY_GROUP_ITEM_CHANCE_COMMON,
      ZOMBIES_DAY_GROUP_ITEM_CHANCE_RARE,
      ZOMBIES_DAY_GROUP_ITEM_CHANCE_EPIC,
      ZOMBIES_DAY_GROUP_ITEM_CHANCE_LEGENDARY)
    UnitAddItemSwapped(itm, bj_lastCreatedUnit)

  destroy spawnPoints

function spawnDayZombiesNearPlayers()
  g_PlayingHumanPlayers.forEach() (player p) ->
    spawnDayZombiesNearPlayer(p)

function spawnSurvivorsNearPlayer(player p)
  if (p.getIsDead())
    return
  
  var camp = p.getCamp()
  var center = camp.getCenter()

  var spawnPoints = g_SurvivorSpawnPointManager.getRandomSpawnPointsInRange(center, SURVIVORS_SPAWN_RANGE, GameSettings.survivors_SpawnCountPerPlayer)

  for sp in spawnPoints
    CreateUnit(PLAYER_VILLAGERS, UNIT_ID_UNRESCUED_SURVIVOR, sp.getPos().x, sp.getPos().y, GetRandomDirectionDeg())

    // There's a chance to give an unrescued survivor an item
    if (GetRandomReal(0.0, 1.0) > SURVIVORS_ITEM_CHANCE)
      var itm = g_MainItemLibrary.createRandomItem(
        bj_lastCreatedUnit.getPos(),
        SURVIVORS_ITEM_CHANCE_COMMON,
        SURVIVORS_ITEM_CHANCE_RARE,
        SURVIVORS_ITEM_CHANCE_EPIC,
        SURVIVORS_ITEM_CHANCE_LEGENDARY)
      UnitAddItemSwapped(itm, bj_lastCreatedUnit)

function spawnSurvivorsNearPlayers()
  g_PlayingHumanPlayers.forEach() (player p) ->
    spawnSurvivorsNearPlayer(p)

function respawnDeadPlayers()
  g_PlayingHumanPlayers.forEach() (player p) ->
    if (p.getIsDead())
      spawnHeroForPlayerAtRandomPoint(p)

function onDayStart()
  GameInstance.days++

  PlaySoundBJ(gg_snd_QuestCompleted)

  Zombies.stopSpawning()
  Zombies.killAllUndead()

  spawnItemsNearPlayers()
  spawnDayZombiesNearPlayers()

  // Must be called after spawning undead and before spawning survivors
  g_SurvivorSpawnPointManager.updateSpawnPointsNow()

  if (GameSettings.allowRespawn)
    respawnDeadPlayers()

  spawnSurvivorsNearPlayers()
  
  // TODO: g_LootablesManager.updateDaysUntilCanLoot()

  // TODO: update player stats multiboard

  if (GameInstance.days > 1)
    GameInstance.nights++

  // Have to wait for some reason
  TriggerSleepAction(1.0)
  SetTimeOfDayScalePercentBJ(GAME_SPEED_DAY)

init
  g_OnDayTrigger = CreateTrigger()
  g_OnDayTrigger.registerGameStateEvent(GAME_STATE_TIME_OF_DAY, EQUAL, TIME_OF_DAY)
  g_OnDayTrigger.addAction(function onDayStart)