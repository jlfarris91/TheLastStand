package GameSetup
import TimerUtils
import ClosureTimers
import GameInstance
import HumanPlayers
import TlsUnitIds
import DialogBox
import HashMap
import HumanPlayerComponent
import PlayerSaveData
import PlayerSetup
import IProgress
import Preload
import Handle
import Tasks
import ProgressBar
import ColorUtility

public GameSetup g_GameSetup = new GameSetup()
trigger g_buttonPressedTrigger

dialog g_heroSelectionDialog
button g_heroButtonDefault
button g_heroButtonScout
button g_heroButtonSoldier
button g_heroButtonPaladin
button g_heroButtonEngineer

PlayerSetup array g_playerSetups

// ============================================================================
public class GameSetup
  private timer m_timer
  private timerdialog m_timerDialog
  private int m_numPlayersReady
  private IterableMap<player, DialogBox> m_heroDifficultyDialogBoxes = new IterableMap<player, DialogBox>()
  private _handle m_onPlayerLoadCompleteHandler
  private _handle m_onLoadCompleteHandler
  private Progress m_progress
  private ProgressBar m_progressBarFrame
  private Task m_preloaderTask

  // --------------------------------------------------------------------------
  ondestroy
    if (m_timer != null)
      m_timer.release()
      m_timer = null

    if (m_timerDialog != null)
      m_timerDialog.destr()
      m_timerDialog = null

    if (m_heroDifficultyDialogBoxes != null)
      for key in m_heroDifficultyDialogBoxes
        destroy m_heroDifficultyDialogBoxes.get(key)
      destroy m_heroDifficultyDialogBoxes
      m_heroDifficultyDialogBoxes = null

  // --------------------------------------------------------------------------
  function load()

    m_progress = new Progress()

    m_progressBarFrame = new ProgressBar()
    ..setProgress(m_progress)
    ..setBarColor(Colors.cornflowerBlue)
    ..setAbsArea(FRAMEPOINT_CENTER, SCREEN_CENTER, vec2(0.25, 0.025))

    preload()

  // --------------------------------------------------------------------------
  private function preload()

    m_progress.report(0.0, "Preloading assets...")

    m_preloaderTask = Preload.runPreloader(m_progress)
    ..onCompleted(task -> nullTimer(() -> loadPlayerSaveData(m_progress)))
    ..setDestroyOnCompletion(true)

  // --------------------------------------------------------------------------
  private function loadPlayerSaveData(IProgressReporter progress)

    progress.report(0.0, "Loading player save data...")

    let totalSteps = g_PlayingHumanPlayerCount
    var steps = 0

    m_onPlayerLoadCompleteHandler = PlayerSaveData.onPlayerLoadComplete().register() (p) ->
      steps++
      progress.report(steps / totalSteps.toReal())

    m_onLoadCompleteHandler = PlayerSaveData.onLoadComplete().register() -> 
      g_GameSetup.loadPlayerSaveDataComplete()

    PlayerSaveData.load()

  // --------------------------------------------------------------------------
  private function loadPlayerSaveDataComplete()

    PlayerSaveData.onPlayerLoadComplete().unregister(m_onPlayerLoadCompleteHandler)
    m_onPlayerLoadCompleteHandler = INVALID_HANDLE

    PlayerSaveData.onLoadComplete().unregister(m_onLoadCompleteHandler)
    m_onLoadCompleteHandler = INVALID_HANDLE

    m_progress.report(1.0, "Done Loading!")

    doAfter(2.0, () -> loadComplete())

  // --------------------------------------------------------------------------
  private function loadComplete()

    destroy m_progressBarFrame
    destroy m_progress

    start()

  // --------------------------------------------------------------------------
  function start()

    m_timer = getTimer()
    m_timer.doAfter(30) () ->
      onTimerExpired()
      m_timer = null

    m_timerDialog = CreateTimerDialogBJ(m_timer, "Game starts in... ")
    m_timerDialog.display(true)

    for _player in g_PlayingHumanPlayers
      g_playerSetups[_player.getId()] = new PlayerSetup()
      _player.getHumanPlayerComponentRequired().load()
      showDifficultySelectionDialogToPlayer(_player)

  // --------------------------------------------------------------------------
  private function showDifficultySelectionDialogToPlayer(player _player)
    let dialogBox = new DialogBox("Difficulty")
    ..addButton("Normal", () -> onPlayerDifficultyChosen(_player, 1.0))
    ..addButton("Hard", () -> onPlayerDifficultyChosen(_player, 2.0))
    ..addButton("Insane", () -> onPlayerDifficultyChosen(_player, 3.0))
    ..addButton("Apocalypse I", () -> onPlayerDifficultyChosen(_player, 4.0))
    ..addButton("Apocalypse II", () -> onPlayerDifficultyChosen(_player, 5.0))
    ..display(_player, true)
    m_heroDifficultyDialogBoxes.put(_player, dialogBox)

  // --------------------------------------------------------------------------
  function getHasTimerExpired() returns bool
    return m_timer != null and m_timer.getElapsed() >= 30.0

  // --------------------------------------------------------------------------
  private function onTimerExpired()
    done()

  // --------------------------------------------------------------------------
  private function onPlayerDifficultyChosen(player _player, real difficulty)
    if (getHasTimerExpired())
      return
      
    let setup = PlayerSetup.getSetupForPlayer(_player)
    setup.setDifficulty(difficulty)

    destroy m_heroDifficultyDialogBoxes.get(_player)
    m_heroDifficultyDialogBoxes.remove(_player)

    m_numPlayersReady++
    if (m_numPlayersReady >= g_PlayingHumanPlayerUserCount)
      done()

  // --------------------------------------------------------------------------
  private function done()

    m_timerDialog.display(false)
    m_timerDialog.destr()
    m_timerDialog = null

    if (m_timer != null)
      m_timer.release()
      m_timer = null

    // Assign the default hero to any players who still haven't decided
    for _player in g_PlayingHumanPlayers
    //{
      let setup = PlayerSetup.getSetupForPlayer(_player)

      if (setup.getHeroTypeId() == 0)
        setup.setHeroTypeId(TlsUnitIds.heroDefault)

      if (setup.getDifficulty() == 0)
        setup.setDifficulty(1)

      setup.setupPlayer(_player)

      // Close the dialog for any players still looking at it
      if (m_heroDifficultyDialogBoxes.has(_player))
        destroy m_heroDifficultyDialogBoxes.get(_player)
        m_heroDifficultyDialogBoxes.remove(_player)
    //}

    // start the game!
    g_GameInstance.start()

// ============================================================================
init

  doAfter(1.0) () ->
    g_GameSetup.load()