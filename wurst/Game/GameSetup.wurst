package GameSetup
import TimerUtils
import ClosureTimers
import GameInstance
import HumanPlayers
import TlsUnitIds
import DialogBox
import HashMap
import HumanPlayerComponent
import PlayerSaveData

public GameSetup g_GameSetup = new GameSetup()
trigger g_buttonPressedTrigger

dialog g_heroSelectionDialog
button g_heroButtonDefault
button g_heroButtonScout
button g_heroButtonSoldier
button g_heroButtonPaladin
button g_heroButtonEngineer

// ============================================================================
public class GameSetup
  private timer m_timer
  private timerdialog m_timerDialog
  private int m_numPlayersReady
  private IterableMap<player, DialogBox> m_heroDifficultyDialogBoxes = new IterableMap<player, DialogBox>()

  // --------------------------------------------------------------------------
  ondestroy
    if (m_timer != null)
      m_timer.release()
      m_timer = null

    if (m_timerDialog != null)
      m_timerDialog.destr()
      m_timerDialog = null

    if (m_heroDifficultyDialogBoxes != null)
      for key in m_heroDifficultyDialogBoxes
        destroy m_heroDifficultyDialogBoxes.get(key)
      destroy m_heroDifficultyDialogBoxes
      m_heroDifficultyDialogBoxes = null

  // --------------------------------------------------------------------------
  function start()

    m_timer = getTimer()
    m_timer.doAfter(30, () -> onTimerExpired())

    m_timerDialog = CreateTimerDialogBJ(m_timer, "Game starts in... ")
    m_timerDialog.display(true)

    for _player in g_PlayingHumanPlayers
      _player.getHumanPlayerComponentRequired().load()
      showDifficultySelectionDialogToPlayer(_player)

  // --------------------------------------------------------------------------
  private function showDifficultySelectionDialogToPlayer(player _player)
    let dialogBox = new DialogBox("Difficulty")
    ..addButton("Normal", () -> onPlayerDifficultyChosen(_player, 1.0))
    ..addButton("Hard", () -> onPlayerDifficultyChosen(_player, 2.0))
    ..addButton("Insane", () -> onPlayerDifficultyChosen(_player, 3.0))
    ..addButton("Apocalypse I", () -> onPlayerDifficultyChosen(_player, 4.0))
    ..addButton("Apocalypse II", () -> onPlayerDifficultyChosen(_player, 5.0))
    ..display(_player, true)
    m_heroDifficultyDialogBoxes.put(_player, dialogBox)

  // --------------------------------------------------------------------------
  function getHasTimerExpired() returns bool
    return m_timer != null and m_timer.getElapsed() >= 30.0

  // --------------------------------------------------------------------------
  private function onTimerExpired()
    done()

  // --------------------------------------------------------------------------
  private function onPlayerDifficultyChosen(player _player, real difficulty)
    if (getHasTimerExpired())
      return
      
    let metadata = _player.getHumanPlayerComponent()
    metadata.setDifficulty(difficulty)

    destroy m_heroDifficultyDialogBoxes.get(_player)
    m_heroDifficultyDialogBoxes.remove(_player)

    m_numPlayersReady++
    if (m_numPlayersReady >= g_PlayingHumanPlayers.count())
      done()

  // --------------------------------------------------------------------------
  private function done()

    m_timerDialog.display(false)
    m_timerDialog.destr()
    m_timerDialog = null

    m_timer.release()
    m_timer = null

    // Assign the default hero to any players who still haven't decided
    for _player in g_PlayingHumanPlayers
    //{
      let metadata = _player.getHumanPlayerComponentRequired()
      if (metadata.getHeroTypeId() == 0)
        metadata.setHeroTypeId(TlsUnitIds.heroDefault)

      if (metadata.getDifficulty() == 0)
        metadata.setDifficulty(1)

      // Close the dialog for any players still looking at it
      if (m_heroDifficultyDialogBoxes.has(_player))
        destroy m_heroDifficultyDialogBoxes.get(_player)
        m_heroDifficultyDialogBoxes.remove(_player)
    //}

    // start the game!
    g_GameInstance.start()

// ============================================================================
init

  PlayerSaveData.onLoadComplete().register() -> 
    g_GameSetup.start()

  doAfter(1.0) () ->
    PlayerSaveData.load()