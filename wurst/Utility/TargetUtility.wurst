package TargetUtility
import GroupUtils

// --------------------------------------------------------------------------
public function getNearestUnit(vec2 pos, real range, code filterFunc) returns unit
  let filter = Condition(filterFunc)
  let target = getNearestUnit(pos, range, filter)
  DestroyCondition(filter)
  return target

// --------------------------------------------------------------------------
public function getNearestUnit(vec2 pos, real range, conditionfunc filter) returns unit
  let _group = getGroup()
  let target = getNearestUnit(pos, range, filter, _group)
  _group.release()
  return target

// --------------------------------------------------------------------------
public function getNearestUnit(vec2 pos, real range, conditionfunc filter, group _group) returns unit
  var shortestDistance = REAL_MAX
  unit target = null
  _group.enumUnitsInRange(pos, range, filter)
  for _unit in _group
    let distance = _unit.getPos().distanceToSq(pos)
    if (distance < shortestDistance)
      target = _unit
      shortestDistance = distance
  return target