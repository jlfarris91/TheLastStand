package Ids
import Bitwise
import StringUtils

public function int.toIdString() returns string
  var temp = this
  let mask = 0xFF
  var result = ""
  while temp != 0
    let digit = temp.and32(mask)
    result = digit.toChar().toString() + result
    temp = temp.shiftr(8)
  return result

public function string.toId() returns int
  int i = this.charAt(0).toChar().toInt() * 256
  i = (i + this.charAt(1).toChar().toInt()) * 256
  i = (i + this.charAt(2).toChar().toInt()) * 256
  i = i + this.charAt(3).toChar().toInt()
  return i

@test public function intToIdString()
  // arrange
  let i = 'h001'
  // act
  let s = i.toIdString()
  // assert
  assertTrue(s == "h001")

@test public function stringToId()
  // arrange
  let s = "h001"
  // act
  let i = s.toId()
  // assert
  print(I2S('h001') + " != " + I2S(i))
  assertTrue(i == 'h001')