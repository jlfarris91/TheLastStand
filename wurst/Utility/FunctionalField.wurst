package FunctionalField
import Func
import LinkedList

// ============================================================================
public interface IFunctionalUnitModifier
  function apply(unit u, real t)

// ============================================================================
public class AggregateUnitModifier implements IFunctionalUnitModifier
  private LinkedList<IFunctionalUnitModifier> m_actions

  // --------------------------------------------------------------------------
  construct()
    m_actions = new LinkedList<IFunctionalUnitModifier>()

  // --------------------------------------------------------------------------
  ondestroy
    for a in m_actions
      destroy a
    destroy m_actions
    m_actions = null

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    for action in m_actions
      action.apply(u, t)

  // --------------------------------------------------------------------------
  function add(IFunctionalUnitModifier modifier)
    m_actions.add(modifier)

  // --------------------------------------------------------------------------
  function remove(IFunctionalUnitModifier modifier) returns bool
    return m_actions.remove(modifier)
  
// ============================================================================
public abstract class FunctionalFieldBase<T> implements IFunctionalUnitModifier
  protected T m_value
  protected Func1<real, T> m_func
  protected Func1<real, real> m_timeFunc

  // --------------------------------------------------------------------------
  ondestroy
    if (m_func != null)
      destroy m_func
      m_func = null

  // --------------------------------------------------------------------------
  function setFunc(Func1<real, T> func)
    m_func = func

  // --------------------------------------------------------------------------
  function getFunc() returns Func1<real, T>
    return m_func

  // --------------------------------------------------------------------------
  function setTimeFunc(Func1<real, real> func)
    m_timeFunc = func

  // --------------------------------------------------------------------------
  function getTimeFunc() returns Func1<real, real>
    return m_timeFunc

  // --------------------------------------------------------------------------
  function getValue() returns T
    return m_value

  // --------------------------------------------------------------------------
  function setValue(T value)
    m_value = value

  // --------------------------------------------------------------------------
  function getValue(real t) returns T
    let adjustedT = m_timeFunc != null ? m_timeFunc.execute(t) : t
    return m_func != null ? m_func.execute(adjustedT) : m_value

// ============================================================================
public abstract class FunctionalIndexedFieldBase<T> extends FunctionalFieldBase<T>
  protected int m_index

  // --------------------------------------------------------------------------
  construct(int index)
    m_index = index

  // --------------------------------------------------------------------------
  function getIndex() returns int
    return m_index

// ============================================================================
public class FunctionalUnitIntegerField extends FunctionalFieldBase<int>
  private unitintegerfield m_field

  // --------------------------------------------------------------------------
  construct(unitintegerfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitintegerfield field, int value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitintegerfield field, Func1<real, int> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitintegerfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitRealField extends FunctionalFieldBase<real>
  private unitrealfield m_field

  // --------------------------------------------------------------------------
  construct(unitrealfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitrealfield field, real value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitrealfield field, Func1<real, real> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitrealfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitStringField extends FunctionalFieldBase<string>
  private unitstringfield m_field

  // --------------------------------------------------------------------------
  construct(unitstringfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitstringfield field, string value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitstringfield field, Func1<real, string> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitstringfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitBooleanField extends FunctionalFieldBase<bool>
  private unitbooleanfield m_field

  // --------------------------------------------------------------------------
  construct(unitbooleanfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitbooleanfield field, bool value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitbooleanfield field, Func1<real, bool> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitbooleanfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponIntegerField extends FunctionalIndexedFieldBase<int>
  private unitweaponintegerfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponintegerfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponintegerfield field, int index, int value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponintegerfield field, int index, Func1<real, int> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponintegerfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponRealField extends FunctionalIndexedFieldBase<real>
  private unitweaponrealfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponrealfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponrealfield field, int index, real value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponrealfield field, int index, Func1<real, real> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponrealfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponStringField extends FunctionalIndexedFieldBase<string>
  private unitweaponstringfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponstringfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponstringfield field, int index, string value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponstringfield field, int index, Func1<real, string> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponstringfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponBooleanField extends FunctionalIndexedFieldBase<bool>
  private unitweaponbooleanfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponbooleanfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponbooleanfield field, int index, bool value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponbooleanfield field, int index, Func1<real, bool> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponbooleanfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class MaxHpUnitField extends FunctionalFieldBase<int>

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Func1<real, int> func)
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(int value) returns MaxHpUnitField
    return new MaxHpUnitField()..setValue(value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    let hp = getValue(t)
    u.setMaxHP(hp)
    u.setHP(I2R(hp))

// ============================================================================
public class MaxManaUnitField extends FunctionalFieldBase<int>

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Func1<real, int> func)
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(int value) returns MaxManaUnitField
    return new MaxManaUnitField()..setValue(value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setMaxMana(getValue(t))

// ============================================================================
public class ArmorUnitField extends FunctionalFieldBase<real>

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(real value)
    setValue(value)

  // --------------------------------------------------------------------------
  construct(Func1<real, real> func)
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(real value) returns ArmorUnitField
    return new ArmorUnitField()..setValue(value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setArmor(getValue(t))

// // ============================================================================
// public abstract class LerpBase<T> implements Func1<real, T>
//   protected T m_start
//   protected T m_end
//   protected Func1<real, T> m_startFunc
//   protected Func1<real, T> m_endFunc
//   protected Func1<real, real> m_timeFunc

//   // --------------------------------------------------------------------------
//   construct()
//     m_startFunc = null
//     m_endFunc = null
//     m_timeFunc = null

//   // --------------------------------------------------------------------------
//   ondestroy
//     if (m_startFunc != null)
//       destroy m_startFunc
//       m_startFunc = null

//     if (m_endFunc != null)
//       destroy m_endFunc
//       m_endFunc = null

//     if (m_timeFunc != null)
//       destroy m_timeFunc
//       m_timeFunc = null

//   // --------------------------------------------------------------------------
//   function setStart(T value)
//     m_start = value

//   // --------------------------------------------------------------------------
//   function setStart(Func1<real, T> func)
//     m_startFunc = func

//   // --------------------------------------------------------------------------
//   function getStart(real t) returns T
//     return m_startFunc != null ? m_startFunc.execute(t) : m_start

//   // --------------------------------------------------------------------------
//   function setEnd(T value)
//     m_end = value

//   // --------------------------------------------------------------------------
//   function setEnd(Func1<real, T> func)
//     m_endFunc = func

//   // --------------------------------------------------------------------------
//   function getEnd(real t) returns T 
//     return m_endFunc != null ? m_endFunc.execute(t) : m_end

//   // --------------------------------------------------------------------------
//   function setTimeFunc(Func1<real, real> func)
//     m_timeFunc = func

// // ============================================================================
// public class LerpInt extends LerpBase<int>
//   // --------------------------------------------------------------------------
//   construct() 
//     m_start = 0
//     m_end = 0
//     m_startFunc = null
//     m_endFunc = null
  
//   // --------------------------------------------------------------------------
//   construct (int start, int _end)
//     m_start = start
//     m_end = _end
//     m_startFunc = null
//     m_endFunc = null

//   construct (Func1<real, int> start, Func1<real, int> _end)
//     m_start = 0
//     m_end = 0
//     m_startFunc = start
//     m_endFunc = _end

//   // --------------------------------------------------------------------------
//   override function execute(real t) returns int
//     return lerpInt(getStart(t), getEnd(t), t)

// // ============================================================================
// public class LerpReal extends LerpBase<real>
//   // --------------------------------------------------------------------------
//   private construct()
//     m_start = 0.0
//     m_end = 0.0

//   // --------------------------------------------------------------------------
//   override function execute(real t) returns real
//     return lerp(getStart(t), getEnd(t), t)

//   // --------------------------------------------------------------------------
//   static function fromValues(real start, real _end) returns LerpReal
//     return new LerpReal()..setStart(start)..setEnd(_end)

//   // --------------------------------------------------------------------------
//   static function fromFunc(Func1<real, real> start, Func1<real, real> _end) returns LerpReal
//     return new LerpReal()..setStart(start)..setEnd(_end)

// // ============================================================================
// public class Constant<T> implements Func1<real, T>
//   private T m_value

//   // --------------------------------------------------------------------------
//   construct (T value)
//     m_value = value

//   // --------------------------------------------------------------------------
//   override function execute(real _t) returns T
//     return m_value

// // ============================================================================
// public abstract class RandomBase<T> implements Func1<real, T>
//   protected T m_min
//   protected T m_max
//   protected Func1<real, T> m_minFunc
//   protected Func1<real, T> m_maxFunc

//   // --------------------------------------------------------------------------
//   ondestroy
//     if (m_minFunc != null)
//       destroy m_minFunc
//       m_minFunc = null

//     if (m_maxFunc != null)
//       destroy m_maxFunc
//       m_maxFunc = null

//   // --------------------------------------------------------------------------
//   function getMin() returns T
//     return m_min

//   // --------------------------------------------------------------------------
//   function setMin(T value)
//     m_min = value

//   // --------------------------------------------------------------------------
//   function getMax() returns T
//     return m_max

//   // --------------------------------------------------------------------------
//   function setMax(T value)
//     m_max = value

//   // --------------------------------------------------------------------------
//   function getMinFunc() returns Func1<real, T>
//     return m_minFunc

//   // --------------------------------------------------------------------------
//   function setMinFunc(Func1<real, T> value)
//     m_minFunc = value

//   // --------------------------------------------------------------------------
//   function getMaxFunc() returns Func1<real, T>
//     return m_maxFunc

//   // --------------------------------------------------------------------------
//   function setMaxFunc(Func1<real, T> value)
//     m_maxFunc = value

// // ============================================================================
// public class RandomReal extends RandomBase<real>

//   // --------------------------------------------------------------------------
//   construct()
//     m_min = 0
//     m_max = 0
//     m_minFunc = null
//     m_maxFunc = null

//   // --------------------------------------------------------------------------
//   construct(real min, real max)
//     m_min = min
//     m_max = max
//     m_minFunc = null
//     m_maxFunc = null

//   // --------------------------------------------------------------------------
//   construct(Func1<real, real> minFunc, Func1<real, real> maxFunc)
//     m_min = 0
//     m_max = 0
//     m_minFunc = minFunc
//     m_maxFunc = maxFunc

//   // --------------------------------------------------------------------------
//   override function execute(real t) returns real
//     let min = m_minFunc != null ? m_minFunc.execute(t) : m_min
//     let max = m_maxFunc != null ? m_maxFunc.execute(t) : m_max
//     return GetRandomReal(min, max)

// // ============================================================================
// public class RandomInt extends RandomBase<int>

//   // --------------------------------------------------------------------------
//   construct()
//     m_min = 0
//     m_max = 0
//     m_minFunc = null
//     m_maxFunc = null

//   // --------------------------------------------------------------------------
//   construct(int min, int max)
//     m_min = min
//     m_max = max
//     m_minFunc = null
//     m_maxFunc = null

//   // --------------------------------------------------------------------------
//   construct(Func1<real, int> minFunc, Func1<real, int> maxFunc)
//     m_min = 0
//     m_max = 0
//     m_minFunc = minFunc
//     m_maxFunc = maxFunc

//   // --------------------------------------------------------------------------
//   override function execute(real t) returns int
//     let min = m_minFunc != null ? m_minFunc.execute(t) : m_min
//     let max = m_maxFunc != null ? m_maxFunc.execute(t) : m_max
//     return GetRandomInt(min, max)
