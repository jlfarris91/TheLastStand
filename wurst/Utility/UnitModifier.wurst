package UnitModifier
import Func
import LinkedList
import Range
import UnitExtensions

// ============================================================================
public interface IFunctionalUnitModifier
  function apply(unit u, real t)

// ============================================================================
public class AggregateUnitModifier implements IFunctionalUnitModifier
  private LinkedList<IFunctionalUnitModifier> m_actions

  // --------------------------------------------------------------------------
  construct()
    m_actions = new LinkedList<IFunctionalUnitModifier>()

  // --------------------------------------------------------------------------
  ondestroy
    for a in m_actions
      destroy a
    destroy m_actions
    m_actions = null

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    for action in m_actions
      action.apply(u, t)

  // --------------------------------------------------------------------------
  function add(IFunctionalUnitModifier modifier)
    m_actions.add(modifier)

  // --------------------------------------------------------------------------
  function remove(IFunctionalUnitModifier modifier) returns bool
    return m_actions.remove(modifier)
  
// ============================================================================
public abstract class FunctionalFieldBase<T> implements IFunctionalUnitModifier
  protected T m_value
  protected Func1<real, T> m_func
  protected Func1<real, real> m_timeFunc

  // --------------------------------------------------------------------------
  ondestroy
    if (m_func != null)
      destroy m_func
      m_func = null

  // --------------------------------------------------------------------------
  function setFunc(Func1<real, T> func)
    m_func = func

  // --------------------------------------------------------------------------
  function getFunc() returns Func1<real, T>
    return m_func

  // --------------------------------------------------------------------------
  function setTimeFunc(Func1<real, real> func)
    m_timeFunc = func

  // --------------------------------------------------------------------------
  function getTimeFunc() returns Func1<real, real>
    return m_timeFunc

  // --------------------------------------------------------------------------
  function getValue() returns T
    return m_value

  // --------------------------------------------------------------------------
  function setValue(T value)
    m_value = value

  // --------------------------------------------------------------------------
  function getValue(real t) returns T
    let adjustedT = m_timeFunc != null ? m_timeFunc.call(t) : t
    return m_func != null ? m_func.call(adjustedT) : m_value

// ============================================================================
public abstract class FunctionalIndexedFieldBase<T> extends FunctionalFieldBase<T>
  protected int m_index

  // --------------------------------------------------------------------------
  construct(int index)
    m_index = index

  // --------------------------------------------------------------------------
  function getIndex() returns int
    return m_index

// ============================================================================
public class FunctionalUnitIntegerField extends FunctionalFieldBase<int>
  private unitintegerfield m_field

  // --------------------------------------------------------------------------
  construct(unitintegerfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitintegerfield field, int value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitintegerfield field, Func1<real, int> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitintegerfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitRealField extends FunctionalFieldBase<real>
  private unitrealfield m_field

  // --------------------------------------------------------------------------
  construct(unitrealfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitrealfield field, real value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitrealfield field, Func1<real, real> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitrealfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitStringField extends FunctionalFieldBase<string>
  private unitstringfield m_field

  // --------------------------------------------------------------------------
  construct(unitstringfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitstringfield field, string value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitstringfield field, Func1<real, string> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitstringfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitBooleanField extends FunctionalFieldBase<bool>
  private unitbooleanfield m_field

  // --------------------------------------------------------------------------
  construct(unitbooleanfield field)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitbooleanfield field, bool value)
    m_field = field
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitbooleanfield field, Func1<real, bool> func)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitbooleanfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setField(getField(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponIntegerField extends FunctionalIndexedFieldBase<int>
  private unitweaponintegerfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponintegerfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponintegerfield field, int index, int value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponintegerfield field, int index, Func1<real, int> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponintegerfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponRealField extends FunctionalIndexedFieldBase<real>
  private unitweaponrealfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponrealfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponrealfield field, int index, real value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponrealfield field, int index, Func1<real, real> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponrealfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponStringField extends FunctionalIndexedFieldBase<string>
  private unitweaponstringfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponstringfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponstringfield field, int index, string value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponstringfield field, int index, Func1<real, string> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponstringfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class FunctionalUnitWeaponBooleanField extends FunctionalIndexedFieldBase<bool>
  private unitweaponbooleanfield m_field

  // --------------------------------------------------------------------------
  construct(unitweaponbooleanfield field, int index)
    super(index)
    m_field = field

  // --------------------------------------------------------------------------
  construct(unitweaponbooleanfield field, int index, bool value)
    super(index)
    m_field = field    
    setValue(value)

  // --------------------------------------------------------------------------
  construct(unitweaponbooleanfield field, int index, Func1<real, bool> func)
    super(index)
    m_field = field
    setFunc(func)

  // --------------------------------------------------------------------------
  function getField() returns unitweaponbooleanfield
    return m_field

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setFieldWeapon(getField(), getIndex(), getValue(t))

// ============================================================================
public class MaxHpUnitField extends FunctionalFieldBase<int>

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(int value)
    setValue(value)

  // --------------------------------------------------------------------------
  construct(Func1<real, int> func)
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(int value) returns MaxHpUnitField
    return new MaxHpUnitField()..setValue(value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    let hp = getValue(t)
    u.setMaxHP(hp)
    u.setHP(I2R(hp))

// ============================================================================
public class MaxManaUnitField extends FunctionalFieldBase<int>

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(Func1<real, int> func)
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(int value) returns MaxManaUnitField
    return new MaxManaUnitField()..setValue(value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setMaxMana(getValue(t))

// ============================================================================
public class ArmorUnitField extends FunctionalFieldBase<real>

  // --------------------------------------------------------------------------
  construct()
    skip

  // --------------------------------------------------------------------------
  construct(real value)
    setValue(value)

  // --------------------------------------------------------------------------
  construct(Func1<real, real> func)
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(real value) returns ArmorUnitField
    return new ArmorUnitField()..setValue(value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setArmor(getValue(t))

// ============================================================================
public class AttackDamageRangeField implements IFunctionalUnitModifier
  private int weaponIndex
  private RangeIntFunc1<real> damageRangeFunc

  construct(int weaponIndex, rangeInt damageRange)
    this.weaponIndex = weaponIndex
    damageRangeFunc = (real t) -> damageRange

  // --------------------------------------------------------------------------
  construct(int weaponIndex, RangeIntFunc1<real> damageRangeFunc)
    this.weaponIndex = weaponIndex
    this.damageRangeFunc = damageRangeFunc

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setDamageRange(weaponIndex, damageRangeFunc.call(t))

// ============================================================================
public class AttackCooldownField extends FunctionalFieldBase<real>
  private int weaponIndex

  // --------------------------------------------------------------------------
  construct(int weaponIndex)
    this.weaponIndex = weaponIndex

  // --------------------------------------------------------------------------
  construct(int weaponIndex, real value)
    this.weaponIndex = weaponIndex
    setValue(value)

  // --------------------------------------------------------------------------
  construct(int weaponIndex, Func1<real, real> func)
    this.weaponIndex = weaponIndex
    setFunc(func)

  // --------------------------------------------------------------------------
  static function fromValue(int weaponIndex, real value) returns AttackCooldownField
    return new AttackCooldownField(weaponIndex, value)

  // --------------------------------------------------------------------------
  override function apply(unit u, real t)
    u.setAttackCooldown(getValue(t), weaponIndex)