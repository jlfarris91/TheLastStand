package PeriodicTimer
import TimerUtils
import HashMap

public class PeriodicTimer 

	constant loopTimer = getTimer()..setData(this castTo int)
	constant loopTrigger = CreateTrigger()
	int conditionsCount = 0 
	
	real period 

	static constant timerMap = new HashMap<real,thistype>

	construct(real period)
		this.period = period 

	static function get(real period) returns thistype 
		var instance = timerMap.get(period)
		if instance == null 
			instance = new PeriodicTimer(period)
			timerMap.put(period, instance)
		return instance

	function add(conditionfunc condition) returns triggercondition
		let triggerCondition = loopTrigger.addCondition(condition)
		conditionsCount++ 
		if conditionsCount == 1 
			loopTimer.startPeriodic(period, function triggerEval)
		return triggerCondition

	static function triggerEval()
		let instance = GetExpiredTimer().getData() castTo thistype 
		instance.loopTrigger.evaluate()
		if instance.conditionsCount == 0 
			instance.loopTimer.pause()

	function release(triggercondition condition) 
		loopTrigger.removeCondition(condition)
		conditionsCount--