package DestructableUtility
import Action

rect g_enumRect = Rect(0,0,0,0)
vec2 g_enumPos = ZERO2
destructable array g_enumDestructables
int g_enumDestructablesCount
code g_enumDestructablesFunc = function enumDestructablesInCircleFunc
boolexpr g_enumDestructablesFilter = Filter(function enumDestructablesInCircleFilter)

// ============================================================================
public function enumDestructablesInCircle(vec2 pos, real radius, Action1<destructable> callback)
  populateDestructablesInCircle(pos, radius)
  callback.acquire()
  for i = 0 to g_enumDestructablesCount - 1
    callback.call(g_enumDestructables[i])
  callback.release()

// ============================================================================
function enumDestructablesInCircleFunc()
  let enumDest = GetEnumDestructable()
  if (enumDest.isAliveTrick())
    g_enumDestructables[g_enumDestructablesCount] = enumDest
    g_enumDestructablesCount++

// ============================================================================
function enumDestructablesInCircleFilter() returns boolean
  return GetFilterDestructable().getPos().distanceToSq(g_enumPos) <= bj_enumDestructableRadius

// ============================================================================
function populateDestructablesInCircle(vec2 pos, real radius)
  g_enumDestructablesCount = 0
  g_enumRect.resize(vec2(pos.x - radius, pos.y - radius), vec2(pos.x + radius, pos.y + radius))
  g_enumPos = pos
  bj_enumDestructableRadius = radius*radius
  EnumDestructablesInRect(g_enumRect, g_enumDestructablesFilter, g_enumDestructablesFunc)