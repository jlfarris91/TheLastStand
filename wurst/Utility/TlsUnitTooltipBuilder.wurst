package TlsUnitTooltipBuilder
import public TooltipBuilder
import TlsUnitDefinition
import HashList
import ColorUtility
import HashListExtensions
import TlsUnitDefinitionExtensions
import Range

// ============================================================================
public class TlsUnitTooltipBuilder extends TooltipBuilder

  // --------------------------------------------------------------------------
  static function createDefault(ITlsUnitDefinition unitDef, string unitDescription) returns TooltipBuilder
    let builder = new TooltipBuilder()

    builder.setDescription(unitDescription)

    let attacksEnabled = unitDef.getAttacksEnabled()
    let allTargetsAllowed = new HashList<string>()
    if (attacksEnabled.bitAnd(0x1) != 0)
      allTargetsAllowed.addAll(unitDef.getAttack1Targets())
    if (attacksEnabled.bitAnd(0x2) != 0)
      allTargetsAllowed.addAll(unitDef.getAttack2Targets())

    if (attacksEnabled == 0)
      builder.addItem("Does not attack!".colorize(Colors.red))
    else if (not allTargetsAllowed.has("Air"))
      builder.addItem("Attacks ground only!".colorize(Colors.red))

    builder.addItem("Health: ", unitDef.calculateHealthMaximum(1).toString())

    if (attacksEnabled != 0)
    //{
      let attackRange = unitDef.getAttack1Range()
      // 150 is an arbitrary minimum distance to be considered "melee"
      if (unitDef.getAttack1Range() < 150)
        builder.addItem("Range: ", "Melee")
      else
        builder.addItem("Range: ", attackRange.toString())

      builder.addItem("Damage: ", "{0} ({1})".format(
        unitDef.calculateDamageRange(0, 1).toDamageRangeString(),
        unitDef.calculateApproximateDPS(0, 1).toApproxDPSString()))
      
      builder.addItem("Attack: ", unitDef.getAttack1AttackType().toString())

      if (not allTargetsAllowed.isEmpty())
        builder.addItem("Targets: ", allTargetsAllowed.joinBy(", "))
      destroy allTargetsAllowed
    //}
    
    builder.addItem("Armor: ", unitDef.getArmorType().toString())

    return builder