package TlsUnitTooltipBuilder
import public TooltipBuilder
import TlsUnitDefinition
import HashList
import ColorUtility
import HashListExtensions

// ============================================================================
public class TlsUnitTooltipBuilder extends TooltipBuilder

  // --------------------------------------------------------------------------
  static function createDefault(ITlsUnitDefinition unitDef, string unitDescription) returns TooltipBuilder
    let builder = new TooltipBuilder()

    builder.setDescription(unitDescription)

    let attacksEnabled = unitDef.getAttacksEnabled()
    let allTargetsAllowed = new HashList<string>()
    if (attacksEnabled.bitAnd(0x1) != 0)
      allTargetsAllowed.addAll(unitDef.getAttack1Targets())
    if (attacksEnabled.bitAnd(0x2) != 0)
      allTargetsAllowed.addAll(unitDef.getAttack2Targets())

    if (not allTargetsAllowed.has("Air"))
      builder.addItem("Attacks ground only!".colorize(Colors.red))

    builder.addItem("Health: ", unitDef.getHitPointsMaximumBase().toString())

    if (attacksEnabled != 0)
    //{
      builder.addItem("Range: ", unitDef.getAttack1Range().toString())
      builder.addItem("Damage: ", "{0} ({1})".format(unitDef.getAttack1DamageRangeString(), unitDef.getApproxAttack1DPSString()))
      builder.addItem("Attack: ", unitDef.getAttack1AttackType().toString())

      if (not allTargetsAllowed.isEmpty())
        builder.addItem("Targets: ", allTargetsAllowed.joinBy(", "))
      destroy allTargetsAllowed
    //}
    else
    //{
      builder.addItem("Attack: ", "Does not attack")
    //}
    
    builder.addItem("Armor: ", unitDef.getArmorType().toString())

    return builder