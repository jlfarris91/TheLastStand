package Math

rect g_WorldBounds
constant real BOUNDARY_OFFSET = 512.0

public function clamp(int value, int min, int max) returns int
  return IMaxBJ(IMinBJ(value, max), min)

public function clamp(real value, real min, real max) returns real
  return RMaxBJ(RMinBJ(value, max), min)

public function clampToWorldBounds(vec2 pos, real radius) returns vec2
  var x = clamp(
    pos.x,
    g_WorldBounds.getMinX() + radius + BOUNDARY_OFFSET,
    (g_WorldBounds.getMaxX() - radius) - BOUNDARY_OFFSET)
  var y = clamp(
    pos.y,
    g_WorldBounds.getMinY() + radius + BOUNDARY_OFFSET,
    (g_WorldBounds.getMaxY() - radius) - BOUNDARY_OFFSET)
  return vec2(x, y)

public function wrap(int value, int min, int max) returns int
  var result = value
  let d = max - min
  if (result < min)
    result = (max + 1) - ModuloInteger(IAbsBJ(min - result), d + 1)
  if (result > max)
    result = min + ModuloInteger(IAbsBJ((max + 1) - result), d + 1)
  return result

public function passesChanceCheck(real chance) returns bool
  return GetRandomReal(0.0, 1.0) < chance

init
  g_WorldBounds = GetPlayableMapRect()

@test public function wrap1()
  print("wrap(-5, 0, 3) == {0} -> 3".format(I2S(wrap(-5, 0, 3))))
  print("wrap(-4, 0, 3) == {0} -> 0".format(I2S(wrap(-4, 0, 3))))
  print("wrap(-3, 0, 3) == {0} -> 1".format(I2S(wrap(-3, 0, 3))))
  print("wrap(-2, 0, 3) == {0} -> 2".format(I2S(wrap(-2, 0, 3))))
  print("wrap(-1, 0, 3) == {0} -> 3".format(I2S(wrap(-1, 0, 3))))
  print("wrap( 0, 0, 3) == {0} -> 0".format(I2S(wrap( 0, 0, 3))))
  print("wrap( 1, 0, 3) == {0} -> 1".format(I2S(wrap( 1, 0, 3))))
  print("wrap( 2, 0, 3) == {0} -> 2".format(I2S(wrap( 2, 0, 3))))
  print("wrap( 3, 0, 3) == {0} -> 3".format(I2S(wrap( 3, 0, 3))))
  print("wrap( 4, 0, 3) == {0} -> 0".format(I2S(wrap( 4, 0, 3))))
  print("wrap( 5, 0, 3) == {0} -> 1".format(I2S(wrap( 5, 0, 3))))
  print("wrap( 6, 0, 3) == {0} -> 2".format(I2S(wrap( 6, 0, 3))))
  print("wrap( 7, 0, 3) == {0} -> 3".format(I2S(wrap( 7, 0, 3))))

@test public function wrap2()
  print("wrap(-5, 2, 5) == {0} -> 3".format(I2S(wrap(-5, 2, 5))))
  print("wrap(-4, 2, 5) == {0} -> 4".format(I2S(wrap(-4, 2, 5))))
  print("wrap(-3, 2, 5) == {0} -> 5".format(I2S(wrap(-3, 2, 5))))
  print("wrap(-2, 2, 5) == {0} -> 2".format(I2S(wrap(-2, 2, 5))))
  print("wrap(-1, 2, 5) == {0} -> 3".format(I2S(wrap(-1, 2, 5))))
  print("wrap( 0, 2, 5) == {0} -> 4".format(I2S(wrap( 0, 2, 5))))
  print("wrap( 1, 2, 5) == {0} -> 5".format(I2S(wrap( 1, 2, 5))))
  print("wrap( 2, 2, 5) == {0} -> 2".format(I2S(wrap( 2, 2, 5))))
  print("wrap( 3, 2, 5) == {0} -> 3".format(I2S(wrap( 3, 2, 5))))
  print("wrap( 4, 2, 5) == {0} -> 4".format(I2S(wrap( 4, 2, 5))))
  print("wrap( 5, 2, 5) == {0} -> 5".format(I2S(wrap( 5, 2, 5))))
  print("wrap( 6, 2, 5) == {0} -> 2".format(I2S(wrap( 6, 2, 5))))
  print("wrap( 7, 2, 5) == {0} -> 3".format(I2S(wrap( 7, 2, 5))))