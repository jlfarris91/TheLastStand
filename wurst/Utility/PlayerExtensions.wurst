package PlayerExtensions
import GroupUtils
import Func
import Action
import LinkedList

// ============================================================================
public function player.isPlaying() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_PLAYING

// ============================================================================
public function player.hasLeft() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_LEFT

// ============================================================================
public function player.isPlayerSlotEmpty() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_EMPTY

// ============================================================================
public function player.isControlledByUser() returns bool
  return this.getController() == MAP_CONTROL_USER

// ============================================================================
public function player.isControlledByComputer() returns bool
  return this.getController() == MAP_CONTROL_COMPUTER

// ============================================================================
public function player.getSelectedUnits() returns LinkedList<unit>
  let selectedUnits = new LinkedList<unit>()
  let tempGroup = getGroup()
  tempGroup.enumUnitsSelected(this, null)
  for u in tempGroup
    selectedUnits.add(u)
  tempGroup.release()
  return selectedUnits

// ============================================================================
public function player.forEachSelectedUnit(Action1<unit> callback)
  let tempGroup = getGroup()
  tempGroup.enumUnitsSelected(this, null)
  if (tempGroup.hasNext())
    callback.call(tempGroup.next())    
  tempGroup.release()
  if (callback.getDestroyAfterUse())
    destroy callback

// ============================================================================
public function player.getFirstSelectedUnit() returns unit
  return this.getFirstSelectedUnitMatching(null)

// ============================================================================
public function player.getFirstSelectedUnitMatching(Func1<unit, bool> predicate) returns unit
  unit selectedUnit = null
  let tempGroup = getGroup()
  tempGroup.enumUnitsSelected(this, null)
  if (tempGroup.hasNext())
    let nextUnit = tempGroup.next()
    if (predicate == null or predicate.call(nextUnit))
      selectedUnit = nextUnit
  tempGroup.release()
  if (predicate != null and predicate.getDestroyAfterUse())
    destroy predicate
  return selectedUnit

// ============================================================================
public function player.foreachSelectedUnit(Action1<unit> callback)
  this.foreachSelectedUnitWhere(callback, null)

// ============================================================================
public function player.foreachSelectedUnitWhere(Action1<unit> callback, Func1<unit, bool> predicate)
  let tempGroup = getGroup()
  tempGroup.enumUnitsSelected(this, null)
  if (tempGroup.hasNext())
    let nextUnit = tempGroup.next()
    if (predicate == null or predicate.call(nextUnit))
      callback.call(nextUnit)
  tempGroup.release()
  if (predicate != null and predicate.getDestroyAfterUse())
    destroy predicate
  if (callback.getDestroyAfterUse())
    destroy callback

// ============================================================================
public function player.controlsUnit(unit targetUnit) returns bool
  let targetUnitOwner = targetUnit.getOwner()
  return this == targetUnitOwner or
         GetPlayerAlliance(this, targetUnitOwner, ALLIANCE_SHARED_ADVANCED_CONTROL)