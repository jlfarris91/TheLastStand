package PlayerExtensions
import GroupUtils
import Func

// ============================================================================
public function player.isPlaying() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_PLAYING

// ============================================================================
public function player.hasLeft() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_LEFT

// ============================================================================
public function player.isPlayerSlotEmpty() returns bool
  return this.getSlotState() == PLAYER_SLOT_STATE_EMPTY

// ============================================================================
public function player.isControlledByUser() returns bool
  return this.getController() == MAP_CONTROL_USER

// ============================================================================
public function player.isControlledByComputer() returns bool
  return this.getController() == MAP_CONTROL_COMPUTER

// ============================================================================
public function player.getFirstSelectedUnit() returns unit
  return this.getFirstSelectedUnitMatching(null)

// ============================================================================
public function player.getFirstSelectedUnitMatching(Func1<unit, bool> predicate) returns unit
  unit selectedUnit = null
  let tempGroup = getGroup()
  tempGroup.enumUnitsSelected(this, null)
  if (tempGroup.hasNext())
    let nextUnit = tempGroup.next()
    if (predicate == null or predicate.call(nextUnit))
      selectedUnit = nextUnit
  tempGroup.release()
  if (predicate != null)
    destroy predicate
  return selectedUnit