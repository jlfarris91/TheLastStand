package LinqSelect
import Enumerable
import ErrorIf
import Func

// ============================================================================
public function IEnumerable<TSource>.select<TSource, TResult>(Func1<TSource, TResult> selector) returns IEnumerable<TResult>
  return new TransformEnumerable(this, selector)

// ============================================================================
class TransformEnumerable<TSource, TResult> implements IEnumerable<TResult>
  protected IEnumerable<TSource> _child
  private Func1<TSource, TResult> _transform

  // --------------------------------------------------------------------------
  construct(IEnumerable<TSource> child, Func1<TSource, TResult> transform)
    ErrorIf.argumentIsNull(child, "child")
    ErrorIf.argumentIsNull(transform, "transform")
    _child = child
    _transform = transform

  // --------------------------------------------------------------------------
  ondestroy
    destroy _child
    _child = null
    destroy _transform
    _transform = null

  // --------------------------------------------------------------------------
  override function iterator() returns IEnumerator<TResult>
    return new TransformEnumerator(_child.iterator(), _transform)
    
// ============================================================================
class TransformEnumerator<TSource, TResult> implements IEnumerator<TResult>
  protected IEnumerator<TSource> _child
  private Func1<TSource, TResult> _transform

  // --------------------------------------------------------------------------
  construct(IEnumerator<TSource> child, Func1<TSource, TResult> transform)
    ErrorIf.argumentIsNull(child, "child")
    ErrorIf.argumentIsNull(transform, "transform")
    _child = child
    _transform = transform

  // --------------------------------------------------------------------------
  ondestroy
    destroy _child
    _child = null
    _transform = null

  // --------------------------------------------------------------------------
  override function hasNext() returns bool
    return _child.hasNext()

  // --------------------------------------------------------------------------
  override function next() returns TResult
    return _transform.execute(_child.next())
