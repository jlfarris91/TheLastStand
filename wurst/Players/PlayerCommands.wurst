package PlayerCommands
import ChatCommands
import Bases
import GameConstants
import ClosureTimers
import RegisterEvents
import PlayerExtensions
import MainItemLibrary
import HumanPlayers
import ColorUtility
import HumanPlayerComponent

constant string COMMAND_BASE = "base"
constant string COMMAND_BASES = "bases"
constant string COMMAND_CLEAR = "clear"
constant string COMMAND_ZOOM = "zoom"
constant string COMMAND_CAMERA = "camera"
constant string COMMAND_CAM = "cam"
constant string COMMAND_SPLIT = "split"
constant string COMMAND_GIVEGOLD = "givegold"
constant string COMMAND_GIVEGOLD_ALIAS = "giveg"
constant string COMMAND_GIVEGOLD_ALIAS2 = "gg"
constant string COMMAND_GIVELUMB = "givelumber"
constant string COMMAND_GIVELUMB_ALIAS = "givel"
constant string COMMAND_GIVELUMB_ALIAS2 = "gl"
constant string COMMAND_SAVE = "save"

public quest g_playerCommandsQuest
ChatCommandHandler g_playerChatCommandHandler

// ============================================================================
function showPlayerBasesCommand()

  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  var difficultyStr = "all"
  BaseDifficulty difficulty = BaseDifficulty.ALL
  let difficultyArg = command.getArgument(0)
  if (difficultyArg != null)
    difficultyStr = difficultyArg.getString()
    if (difficultyStr == "easy")
      difficulty = BaseDifficulty.EASY
    if (difficultyStr == "medium")
      difficulty = BaseDifficulty.MEDIUM
    if (difficultyStr == "hard")
      difficulty = BaseDifficulty.HARD

  showPlayerBases(commandPlayer, difficulty, 30.0)
  chatCommandPrintToPlayer(commandPlayer, "Showing {0} bases for 15 seconds".format(difficultyStr))

// ============================================================================
function clearText()
  let commandPlayer = getChatCommandPlayer()
  let playerForce = CreateForce()..addPlayer(commandPlayer)
  ClearTextMessagesBJ(playerForce)
  playerForce.destr()

// ============================================================================
function setCameraDistance()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let distanceArg = command.getArgument(0)
  var distance = CAMERA_DISTANCE_DEFAULT

  if (distanceArg != null)
    distance = distanceArg.getReal()

  SetCameraFieldForPlayer(commandPlayer, CAMERA_FIELD_TARGET_DISTANCE, distance, CAMERA_DISTANCE_SMOOTH)

  commandPlayer.getHumanPlayerComponentRequired().setCameraDistance(distance)

// ============================================================================
function splitItemStack()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let index = command.getArgument(0).getInt()
  commandPlayer.forEachSelectedUnit() (_unit) ->
    if (_unit.getOwner() == commandPlayer) 
      splitItemsInSlot(_unit, index)

// ============================================================================
function splitItemsInSlot(unit _unit, int index) returns bool
  let _item = _unit.itemInSlot(index)
  if (_item == null)
    return false
  let charges = _item.getCharges()
  if (charges <= 1)
    return false
  let itemId = _item.getTypeId()
  let itemSet = g_MainItemLibrary.getOwningSet(itemId)
  if (itemSet == null)
    return false
  bool successfullySplit = false
  for i = 0 to charges - 1
    let splitItem = itemSet.createItem(itemId, _unit.getPos())
    if (splitItem != null)
      successfullySplit = true
  if (successfullySplit)
    _item.remove()
  return successfullySplit

// ============================================================================
function getPlayerFromPartialNameColorOrId(string playerPartialNameColorOrId, player ignore) returns player  
  // Check for an ID match first since toInt() will return -1 when parsing an int fails
  let playerId = playerPartialNameColorOrId.toInt()
  if (playerId != -1)
    let p = players[playerId]
    if (p != ignore and p != null)
      return p
  // Then check for exact player name match
  for p in g_PlayingHumanPlayers
    if (p != ignore and p.getName() == playerPartialNameColorOrId)
      return p
  // Then, partial player name match
  for p in g_PlayingHumanPlayers
    if (p != ignore and p.getName().startsWith(playerPartialNameColorOrId))
      return p
  // Then player color
  let playerColor  = playerPartialNameColorOrId.toPlayerColor()
  for p in g_PlayingHumanPlayers
    if (p != ignore and p.getColor() == playerColor)
      return p
  return null

// ============================================================================
function giveGold()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let playerPartialNameColorOrId = command.getArgument(0).getString()
  var goldToGive = command.getArgument(1).getInt()
  if (goldToGive <= 0)
    return

  let targetPlayer = getPlayerFromPartialNameColorOrId(playerPartialNameColorOrId, commandPlayer)
  if (targetPlayer == null)
    chatCommandPrintToPlayer(commandPlayer, "Could not find player " + playerPartialNameColorOrId)
    return

  if (not targetPlayer.isHumanPlayer())
    chatCommandPrintToPlayer(commandPlayer, "Player {0} is not a playing human player".format(targetPlayer.getName()))
    return

  goldToGive = min(commandPlayer.getGold(), goldToGive)

  commandPlayer.subGold(goldToGive)
  targetPlayer.addGold(goldToGive)

  chatCommandPrintToPlayer(commandPlayer, "Gave {0} gold to {1}".format(goldToGive.toString(), targetPlayer.getName()).colorize(Colors.gold))
  chatCommandPrintToPlayer(targetPlayer, "{0} gave you {1} gold".format(commandPlayer.getName(), goldToGive.toString()).colorize(Colors.gold))

// ============================================================================
function giveLumber()
  let command = getChatCommand()
  let commandPlayer = getChatCommandPlayer()

  let playerPartialNameColorOrId = command.getArgument(0).getString()
  var lumberToGive = command.getArgument(1).getInt()
  if (lumberToGive <= 0)
    return

  let targetPlayer = getPlayerFromPartialNameColorOrId(playerPartialNameColorOrId, commandPlayer)
  if (targetPlayer == null)
    chatCommandPrintToPlayer(commandPlayer, "Could not find player " + playerPartialNameColorOrId)
    return

  if (not targetPlayer.isHumanPlayer())
    chatCommandPrintToPlayer(commandPlayer, "Player {0} is not a playing human player".format(targetPlayer.getName()))
    return

  lumberToGive = min(commandPlayer.getLumber(), lumberToGive)

  commandPlayer.subLumber(lumberToGive)
  targetPlayer.addLumber(lumberToGive)

  chatCommandPrintToPlayer(commandPlayer, "Gave {0} lumber to {1}".format(lumberToGive.toString(), targetPlayer.getName()).colorize(Colors.gold))
  chatCommandPrintToPlayer(targetPlayer, "{0} gave you {1} lumber".format(commandPlayer.getName(), lumberToGive.toString()).colorize(Colors.gold))

// ============================================================================
function savePlayerData()
  getChatCommandPlayer().getHumanPlayerComponentRequired().save()

// ============================================================================
function setupPlayerCommandsQuest()
  g_playerCommandsQuest = CreateQuest()
  QuestSetIconPath(g_playerCommandsQuest, "ReplaceableTextures\\WorldEditUI\\DoodadPlaceholder.blp")
  QuestSetTitle(g_playerCommandsQuest, "Player Commands")
  QuestSetRequired(g_playerCommandsQuest, false)

// ============================================================================
function registerDebugCommands()

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_BASES, function showPlayerBasesCommand)
    ..addAlias(COMMAND_BASE)
    ..setDescription("Shows the player available bases and their difficulties.")
    ..addArgument(new ChatCommandArgument("DIFFICULTY", ChatCommandArgumentType.STRING, true)
      ..setStringOptions("easy", "medium", "hard")
      ..setDescription("Only show 'easy', 'medium' or 'hard' bases."))

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_CLEAR, function clearText)
    ..setDescription("Clears the screen of all text. Pressing the 'Escape' key also clears the screen.")

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_ZOOM, function setCameraDistance)
    ..addAlias(COMMAND_CAMERA)
    ..addAlias(COMMAND_CAM)
    ..addRealArgument("DISTANCE", true)
    ..setDescription("Sets the camera zoom. Reset to default if no number is provided.")

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_SPLIT, function splitItemStack)
    ..setDescription("Splits an item stack in the inventory slot index provided")
    ..addArgument(new ChatCommandArgument("INVENTORY_SLOT", ChatCommandArgumentType.INT, false)
      ..setIntOptions(0, 1, 2, 3, 4, 5)
      ..setDescription("The number of the inventory slot to split (0=TL, 5=BR)"))

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_GIVEGOLD, function giveGold)
    ..setDescription("Gives the target player a specific amount of gold.")
    ..addStringArgument("PLAYER_NAME_PARTIAL_OR_ID", false)
    ..addIntegerArgument("GOLD_AMOUNT", false)
    ..addAlias(COMMAND_GIVEGOLD_ALIAS)
    ..addAlias(COMMAND_GIVEGOLD_ALIAS2)

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_GIVELUMB, function giveLumber)
    ..setDescription("Gives the target player a specific amount of lumber.")
    ..addStringArgument("PLAYER_NAME_PARTIAL_OR_ID", false)
    ..addIntegerArgument("LUMBER_AMOUNT", false)
    ..addAlias(COMMAND_GIVELUMB_ALIAS)
    ..addAlias(COMMAND_GIVELUMB_ALIAS2)

  g_playerChatCommandHandler.registerCommandDefinition(COMMAND_SAVE, function savePlayerData)
    ..setDescription("Saves data for the player to a file on the disk")

  g_playerChatCommandHandler.addQuestItems()

// ============================================================================
function onPlayerEndCinematic()
  let triggerPlayer = GetTriggerPlayer()
  let playerForce = CreateForce()..addPlayer(triggerPlayer)
  ClearTextMessagesBJ(playerForce)
  playerForce.destr()

// ============================================================================
init
  setupPlayerCommandsQuest()

  g_playerChatCommandHandler = new ChatCommandHandler("Player", g_playerCommandsQuest)
  registerChatCommandHandler(g_playerChatCommandHandler, 1)
  
  nullTimer(() -> registerDebugCommands())

  // A special chat command handler that prints helpful information about registered commands
  // HACK: This is initialized here instead of in ChatCommands so that we can access the g_playerCommandsQuest
  let helpCommandHandler = new ChatCommandHandler("HELP", g_playerCommandsQuest)
  helpCommandHandler.registerCommandDefinition(COMMAND_HELP_STR, function printHelp)
    ..addStringArgument("COMMAND_NAME", true)

  registerChatCommandHandler(helpCommandHandler, COMMAND_HELP_PRIORITY)
  
  registerPlayerEvent(EVENT_PLAYER_END_CINEMATIC, function onPlayerEndCinematic)