package PlayerProperties
import Func
import RealExtensions
import SmartValue
import PlayerExtensions
import TlsUpgradeIds
import DefenseUpgrades
import RegisterEvents
import TlsUpgradeDefinition
import Action

// ============================================================================
public enum PlayerProperty
  LUMBER_REFUND_PERC_01
  SPIKE_STUN_CHANCE_01
  SPIKE_STUN_DURATION
  SCOUT_TOWER_TARGETS
  SCOUT_TOWER_TARGET_DAMAGE_SCALAR_01
  SURVIVOR_HP_BONUS
  ITEM_FIND_QUALITY
  LUMBERMILL_GATHER_COOLDOWN
  LUMBERMILL_GATHER_AMOUNT
  HERO_XP_PER_LOOT
  HERO_XP_PER_KILL
  HERO_XP_PER_KILL_ELITE
  HERO_XP_PER_KILL_BOSS
  RECYCLE_REFUND_SCALE_01
  GOLD_DROP_AMOUNT
  __COUNT

// Must match number of items in PlayerProperties enum
public constant int PLAYER_PROPERTY_COUNT = 15

// ============================================================================
tuple propertyMetadata(real defaultValue, bool triggersUpdate, string friendlyName, string shortName, Func1<real, string> stringifier)
Func1<real, string> g_toString = (real v) -> v.toString()
Func1<real, string> g_toIntString = (real v) -> v.toInt().toString()
Func1<real, string> g_toScalarString = (real v) -> v.toString() + "x"
Func1<real, string> g_toPercentageString01 = (real v) -> v.toPercentageString01()
Func1<real, string> g_toSecondsString = (real v) -> v.toString() + "s"
    
// ============================================================================
SmartValue array[24 * PLAYER_PROPERTY_COUNT] g_smartValues

// ============================================================================
public class PlayerProperties

  static constant int count = PLAYER_PROPERTY_COUNT

  protected static constant propertyMetadata array[count] PROPERTY_METADATA = [
    /* LUMBER_REFUND_PERC               */  propertyMetadata(0.0,   false,  "Lumber Refund",                          "lumber_refund",                    g_toPercentageString01.acquire()),
    /* SPIKE_STUN_CHANCE                */  propertyMetadata(0.0,   false,  "Spike Stun Chance",                      "spike_stun_chance",                g_toPercentageString01.acquire()),
    /* SPIKE_STUN_DURATION              */  propertyMetadata(0.0,   false,  "Spike Stun Duration",                    "spike_stun_dur",                   g_toString.acquire()),
    /* SCOUT_TOWER_TARGETS              */  propertyMetadata(0.0,   false,  "Scout Tower Targets",                    "scout_tower_targets",              g_toIntString.acquire()),
    /* SCOUT_TOWER_TARGET_DAMAGE_SCALAR */  propertyMetadata(0.0,   false,  "Scout Tower Target Bonus Damage Scale",  "scout_tower_target_damage_scalar", g_toPercentageString01.acquire()),
    /* SURVIVOR_HP_BONUS                */  propertyMetadata(0.0,   true,   "Survivor HP Bonus",                      "survivor_hp_bonus",                g_toIntString.acquire()),
    /* ITEM_FIND_QUALITY                */  propertyMetadata(1.0,   false,  "Item Find Quality",                      "item_find_quality",                g_toPercentageString01.acquire()),
    /* LUMBERMILL_GATHER_COOLDOWN       */  propertyMetadata(5.0,   false,  "Lumber Gather Cooldown",                 "lumber_gather_cooldown",           g_toSecondsString.acquire()),
    /* LUMBERMILL_GATHER_AMOUNT         */  propertyMetadata(5.0,   false,  "Lumber Gather Amount",                   "lumber_gather_amount",             g_toIntString.acquire()),
    /* HERO_XP_PER_LOOT                 */  propertyMetadata(5.0,   false,  "Hero XP Per Loot",                       "hero_xp_kill_loot",                g_toIntString.acquire()),
    /* HERO_XP_PER_KILL                 */  propertyMetadata(4.0,   false,  "Hero XP Per Kill",                       "hero_xp_kill",                     g_toIntString.acquire()),
    /* HERO_XP_PER_KILL_ELITE           */  propertyMetadata(10.0,  false,  "Hero XP Per Kill Elite",                 "hero_xp_kill_elite",               g_toIntString.acquire()),
    /* HERO_XP_PER_KILL_BOSS            */  propertyMetadata(50.0,  false,  "Hero XP Per Kill Boss",                  "hero_xp_kill_boss",                g_toIntString.acquire()),
    /* RECYCLE_REFUND_SCALE_01          */  propertyMetadata(1.0,   false,  "Recycle Refund Scale",                   "recycle_refund_scale",             g_toPercentageString01.acquire()),
    /* GOLD_DROP_AMOUNT                 */  propertyMetadata(0.0,   false,  "Gold Drop Amount",                       "gold_drop_amount",                 g_toIntString.acquire())
  ]

  // --------------------------------------------------------------------------
  static function getPropertyDefaultValue(PlayerProperty property) returns real
    return PROPERTY_METADATA[property castTo int].defaultValue

  // --------------------------------------------------------------------------
  static function getPropertyFriendlyName(PlayerProperty property) returns string
    return PROPERTY_METADATA[property castTo int].friendlyName

  // --------------------------------------------------------------------------
  static function getPropertyShortName(PlayerProperty property) returns string
    return PROPERTY_METADATA[property castTo int].shortName

  // --------------------------------------------------------------------------
  static function formatPropertyValue(PlayerProperty property, real value) returns string
    let stringifier = PROPERTY_METADATA[property castTo int].stringifier
    return stringifier != null ? stringifier.call(value) : value.toString()

  // --------------------------------------------------------------------------
  /**Returns PlayerProperty.__COUNT if no matching property could be found */
  static function getPropertyByShortName(string shortName) returns PlayerProperty
    for i = 0 to count - 1
      if (PROPERTY_METADATA[i].shortName == shortName)
        return i castTo PlayerProperty
    return PlayerProperty.__COUNT

  // --------------------------------------------------------------------------
  static function printDebug(player p, Action1<string> print)
    print.acquire()
    print.call("===== Player Properties for {0}: =====".format(p.getName()))
    for i = 0 to PlayerProperties.count - 1
      print.call("{0} : {1}".format(PlayerProperties.getPropertyFriendlyName(i castTo PlayerProperty), p.getPropertyValueAsString(i castTo PlayerProperty)))
    print.release()

// ============================================================================
public function player.hasProperty(PlayerProperty property) returns bool
  let propId = this.getId() * PLAYER_PROPERTY_COUNT + property castTo int
  return g_smartValues[propId] != null

// ============================================================================
public function player.getProperty(PlayerProperty property) returns SmartValue
  let propIndex = property castTo int
  let propId = this.getId() * PLAYER_PROPERTY_COUNT + propIndex
  if (g_smartValues[propId] == null)
    g_smartValues[propId] = new SmartValue(PlayerProperties.getPropertyDefaultValue(property))
    if (PlayerProperties.PROPERTY_METADATA[propIndex].triggersUpdate)
      g_smartValues[propId].onValueChanged().register(() -> update(this, property))
      update(this, property)
  return g_smartValues[propId]

// ============================================================================
public function player.getPropertyValue(PlayerProperty property) returns real
  return this.hasProperty(property) ? this.getProperty(property).getValue() : PlayerProperties.getPropertyDefaultValue(property)

// ============================================================================
public function player.getPropertyIntValue(PlayerProperty property) returns int
  return this.getPropertyValue(property).toInt()

// ============================================================================
public function player.getPropertyValueAsString(PlayerProperty property) returns string
  return PlayerProperties.formatPropertyValue(property, this.getPropertyValue(property))
  
// ============================================================================
function update(player p, PlayerProperty property)
  
  if (property == PlayerProperty.SURVIVOR_HP_BONUS)
    p.setTechResearchLevel(TlsUpgradeIds.survivorHpBonus, getSurvivorHPBonusResearchLevel(p))

// ============================================================================
function getSurvivorHPBonusResearchLevel(player p) returns int
  // This should match the increments defined in the TlsUpgradeIds.survivorHpBonus definition below
  return (p.getPropertyIntValue(PlayerProperty.SURVIVOR_HP_BONUS) / 50).floor()

// ============================================================================
function onResearchFinished()
  let researchingUnit = GetResearchingUnit()
  let ownerPlayer = researchingUnit.getOwner()
  let research = GetResearched()
  let researchLevel = ownerPlayer.getTechResearchLevel(research)

  if (research == TlsUpgradeIds.lumberRefund)
    ownerPlayer.getProperty(PlayerProperty.LUMBER_REFUND_PERC_01).setBase(getLumberRefundPerc01(researchLevel))

  if (research == TlsUpgradeIds.spikeStunChance)
    ownerPlayer.getProperty(PlayerProperty.SPIKE_STUN_CHANCE_01).setBase(getSpikeStunChance01(researchLevel))
    ownerPlayer.getProperty(PlayerProperty.SPIKE_STUN_DURATION).setBase(getSpikeStunDuration(researchLevel))

  if (research == TlsUpgradeIds.scoutTowerMarkTargets)
    ownerPlayer.getProperty(PlayerProperty.SCOUT_TOWER_TARGET_DAMAGE_SCALAR_01).setBase(getMarkedTargetDamageScalePerc01(researchLevel))
    ownerPlayer.getProperty(PlayerProperty.SCOUT_TOWER_TARGETS).setBase(getMarkedTargetMaxTargets(researchLevel).toReal())

// ============================================================================
@compiletime function createObjects()

  new TlsUpgradeDefinition(TlsUpgradeIds.survivorHpBonus, 100)
    ..addEffectHitPointBonus(50, 50)
    ..setGoldCostBase(0)
    ..setGoldCostIncrement(0)
    ..setLumberCostBase(0)
    ..setLumberCostIncrement(0)
    ..presetRequirements(lvl -> "")
    ..presetName(lvl -> "Survivor HP Bonus " + lvl.toString())
    ..presetTooltip(lvl -> "")
    ..presetTooltipExtended(lvl -> "")    

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_RESEARCH_FINISH, function onResearchFinished)