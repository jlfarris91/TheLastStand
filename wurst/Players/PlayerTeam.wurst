package PlayerTeam
import Bases
import HumanPlayers
import HumanPlayerComponent
import RefObject
import Observable
import Events
import LinkedList
import ProjectConstants
import DebuggerDialog
import Host
import PlayerExtensions
import GameConstants
import HashMap
import RegisterEvents

PlayerTeam array g_playerTeamsByPlayerId
LinkedList<PlayerTeam> g_playerTeams = new LinkedList<PlayerTeam>()
HashMap<Base, PlayerTeam> g_playerTeamsByBase = new HashMap<Base, PlayerTeam>()
int g_teamId = 1

// ============================================================================
public class PlayerTeam
  
  static private Event2<PlayerTeam, player> s_teamPlayerAdded
  static private Event2<PlayerTeam, player> s_teamPlayerRemoved
  
  private int m_id = 0
  private Base m_base = null
  private force m_players = CreateForce()

  use RefObject
  use Observable

  // --------------------------------------------------------------------------
  public static class Properties
    static constant string preferOrganicTargets = "preferOrganicTargets"

  // --------------------------------------------------------------------------
  construct(Base _base)
    
    m_base = _base

    if (m_base != null)
      g_playerTeamsByBase.put(m_base, this)

    m_id = g_teamId
    g_teamId++

    Log.info("Created team {0}".format(m_id.toString()))

    g_playerTeams.add(this)

  // --------------------------------------------------------------------------
  ondestroy
    g_playerTeams.remove(this)

    if (m_base != null and g_playerTeamsByBase.get(m_base) == this)
      g_playerTeamsByBase.remove(m_base)

    m_players.destr()
    m_players = null

    Log.info("Destroyed team {0}".format(m_id.toString()))

  // --------------------------------------------------------------------------
  static function getTeams() returns LinkedList<PlayerTeam>
    return g_playerTeams

  // --------------------------------------------------------------------------
  static function getPlayerTeam(player p) returns PlayerTeam
    return g_playerTeamsByPlayerId[p.getId()]

  // --------------------------------------------------------------------------
  static function getPlayerTeam(Base b) returns PlayerTeam
    return g_playerTeamsByBase.get(b)

  // --------------------------------------------------------------------------
  static function getOrCreatePlayerTeam(player p) returns PlayerTeam
    var team = getPlayerTeam(p)
    if (team == null)
      team = new PlayerTeam(null)..acquire()
      Log.info("Created new player team {0} for {1}".format(team.getId().toString(), p.getName()))
    return team

  // --------------------------------------------------------------------------
  static function getOrCreatePlayerTeam(Base b) returns PlayerTeam
    var team = getPlayerTeam(b)
    if (team == null)
      team = new PlayerTeam(b)..acquire()
      Log.info("Created new base team {0} for {1}".format(team.getId().toString(), b.getId()))
    return team

  // --------------------------------------------------------------------------
  static function onTeamPlayerAdded() returns IEvent2<PlayerTeam, player>
    if (s_teamPlayerAdded == null)
      s_teamPlayerAdded = new Event2<PlayerTeam, player>()
    return s_teamPlayerAdded

  // --------------------------------------------------------------------------
  static function onTeamPlayerRemoved() returns IEvent2<PlayerTeam, player>
    if (s_teamPlayerRemoved == null)
      s_teamPlayerRemoved = new Event2<PlayerTeam, player>()
    return s_teamPlayerRemoved

  // --------------------------------------------------------------------------
  function getId() returns int
    return m_id

  // --------------------------------------------------------------------------
  function getPlayers() returns force
    return m_players

  // --------------------------------------------------------------------------
  function getBase() returns Base
    return m_base

  // --------------------------------------------------------------------------
  function addPlayer(player p)
    m_players.addPlayer(p)
    g_playerTeamsByPlayerId[p.getId()] = this

    Log.info("Added player {0} to base team {1}".format(p.getName(), m_id.toString()))

    if (s_teamPlayerAdded != null)
      s_teamPlayerAdded.call(this, p)

  // --------------------------------------------------------------------------
  function removePlayer(player p)
    m_players.removePlayer(p)

    Log.info("Removed player {0} from team {1}".format(p.getName(), m_id.toString()))

    if (g_playerTeamsByPlayerId[p.getId()] == this)
      g_playerTeamsByPlayerId[p.getId()] = null

    if (s_teamPlayerRemoved != null)
      s_teamPlayerRemoved.call(this, p)

    if (m_players.count() == 0)
      release()
      return

// ============================================================================
class PlayerTeamDebugger extends DebuggerRealtimeUpdateFrame

  // --------------------------------------------------------------------------
  construct()
    super(createFrame("TEXTAREA", "TEAM", GAME_UI, "", 0))

  // --------------------------------------------------------------------------
  override function realtimeUpdate(real _)

    let frameHandle = getFrameHandle()

    let selectedUnit = g_HostPlayer.getFirstSelectedUnit()

    if (selectedUnit == null)
      BlzFrameSetText(frameHandle, "Select a unit")
      return

    let selectedPlayer = selectedUnit.getOwner()

    let team = PlayerTeam.getPlayerTeam(selectedPlayer)
    if (team == null)
      BlzFrameSetText(frameHandle, "No player team found for " + selectedPlayer.getName())
      return
      
    BlzFrameSetText(frameHandle, "===== Team: {0} =====".format(team.getId().toString()))

    let b = team.getBase()
    if (b != null)
      let baseName = b.getName()
      BlzFrameAddText(frameHandle, "Base: {0} ({1})".format(
        (baseName.isNotBlank() ? baseName : b.getId()),
        b.getDifficulty().toString()))
    else
      BlzFrameAddText(frameHandle, "No base")

    BlzFrameAddText(frameHandle, "Players: ")

    for p in team.getPlayers()
      let comp = p.getMetadata().getHumanPlayerComponent()
      BlzFrameAddText(frameHandle, " Â· {0} ({1})".format(p.getName(), DIFFICULTY_NAMES[comp.getDifficulty().floor()]))

// ============================================================================
function onHumanPlayerComponentPropertyChanged(HumanPlayerComponent sender, string propertyName)
      
  if (propertyName == HumanPlayerComponent.Properties.base)
  //{
    let p = sender.getOwnerPlayer()
    let prevTeam = PlayerTeam.getPlayerTeam(p)
    PlayerTeam nextTeam = null

    let b = sender.getBase()
    if (b != null)
      nextTeam = PlayerTeam.getOrCreatePlayerTeam(b)

    if (nextTeam == null)
      nextTeam = PlayerTeam.getOrCreatePlayerTeam(p)

    if (nextTeam != prevTeam)
    //{
      if (prevTeam != null)
        prevTeam.removePlayer(p)

      if (nextTeam != null)
        nextTeam.addPlayer(p)
    //}
  //}

// ============================================================================
function onPlayerLeave()
  let p = GetTriggerPlayer()
  let team = PlayerTeam.getPlayerTeam(p)
  if (team != null)
    team.removePlayer(p)

// ============================================================================
init
  
  if (DEV_ENVIRONMENT)
    DebuggerDialog.registerFrame("TEAM", () -> new PlayerTeamDebugger())

  registerPlayerEvent(EVENT_PLAYER_LEAVE, function onPlayerLeave)

  for p in g_PlayingHumanPlayers
  //{
    // Everyone starts in their own team
    PlayerTeam.getOrCreatePlayerTeam(p)..addPlayer(p)

    // Listen for changes to the base property to move players to different teams
    let comp = p.getMetadata().getOrAddHumanPlayerComponent()
    comp.onPropertyChanged().register() (HumanPlayerComponent sender, string propertyName) ->
      onHumanPlayerComponentPropertyChanged(sender, propertyName)
  //}