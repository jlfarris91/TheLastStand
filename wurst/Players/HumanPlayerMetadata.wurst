package HumanPlayerMetadata
import public PlayerMetadata
import UnitMetadata
import HumanPlayers
import ErrorHandling
import GameConstants
import RegisterEvents
import LinkedList
import HostileCircularCachedSpawnManager
import FriendlyCircularCachedSpawnManager

// ============================================================================
public class HumanPlayerMetadata extends PlayerMetadata
  private int m_kills
  private int m_score
  private IUnitMetadata m_hero
  private LinkedList<unit> m_campCenterContributors

  // --------------------------------------------------------------------------
  construct(player p)
    super(p)
    m_campCenterContributors = new LinkedList<unit>()

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_campCenterContributors

  // --------------------------------------------------------------------------
  function getKills() returns int
    return m_kills

  // --------------------------------------------------------------------------
  function incrementKills()
    m_kills++

  // --------------------------------------------------------------------------
  function getScore() returns int
    return m_score

  // --------------------------------------------------------------------------
  function incrementScore(int value)
    m_score += value

  // --------------------------------------------------------------------------
  function getMaterials() returns int
    return GetPlayerState(getPlayer(), PLAYER_STATE_RESOURCE_LUMBER)

  // --------------------------------------------------------------------------
  function setMaterials(int value)
    SetPlayerState(getPlayer(), PLAYER_STATE_RESOURCE_LUMBER, value)
  
  // --------------------------------------------------------------------------
  function giveMaterials(int value)
    setMaterials(this.getMaterials() + value)

  // --------------------------------------------------------------------------
  function removeMaterials(int value)
    setMaterials(IMaxBJ(this.getMaterials() - value, 0))

  // --------------------------------------------------------------------------
  function getGold() returns int
    return GetPlayerState(getPlayer(), PLAYER_STATE_RESOURCE_GOLD)

  // --------------------------------------------------------------------------
  function setGold(int value)
    SetPlayerState(getPlayer(), PLAYER_STATE_RESOURCE_GOLD, value)
  
  // --------------------------------------------------------------------------
  function giveGold(int value)
    setGold(getGold() + value)

  // --------------------------------------------------------------------------
  function removeGold(int value)
    setMaterials(IMaxBJ(this.getGold() - value, 0))

  // --------------------------------------------------------------------------
  function getIsDead() returns bool
    if (m_hero == null)
      Log.debug("hero is null")
      return true
    let heroUnit = m_hero.getUnit()
    if (heroUnit == null)
      Log.debug("hero unit is null")
      return true
    return heroUnit.isAlive() == false

  // --------------------------------------------------------------------------
  function getHero() returns IUnitMetadata
    return m_hero

  // --------------------------------------------------------------------------
  function setHero(IUnitMetadata hero)
    m_hero = hero
    Log.debug("Hero assigned to player: " + (hero != null).toString())

  // --------------------------------------------------------------------------
  function addCampCenter(unit centerContributor)
    m_campCenterContributors.add(centerContributor)
    onCampCenterChanged()

  // --------------------------------------------------------------------------
  function removeCampCenter(unit centerContributor)
    m_campCenterContributors.remove(centerContributor)
    onCampCenterChanged()

  // --------------------------------------------------------------------------
  function getCampCenter() returns vec2
    if (m_campCenterContributors.isEmpty() and m_hero != null)
      return m_hero.getUnit().getPos()
    var center = ZERO2
    for centerContributor in m_campCenterContributors
      center += centerContributor.getPos()
    center /= m_campCenterContributors.size().toReal()
    return center

  // --------------------------------------------------------------------------
  private function onCampCenterChanged()
    let center = getCampCenter()
    let hostileSpawnManager = getPlayerCachedHostileSpawnManager(getPlayer())
    if (hostileSpawnManager != null)
      hostileSpawnManager.setCenter(center)
      hostileSpawnManager.setIsEnabled(not m_campCenterContributors.isEmpty())
    let friendlySpawnManager = getPlayerCachedFriendlySpawnManager(getPlayer())
    if (friendlySpawnManager != null)
      friendlySpawnManager.setCenter(center)
      friendlySpawnManager.setIsEnabled(not m_campCenterContributors.isEmpty())
    Log.info("Camp center for player " + getPlayer().getName() + " : " + center.toString())

// ============================================================================
public function player.getHumanMetadata() returns HumanPlayerMetadata
  return this.getMetadata() castTo HumanPlayerMetadata

// ============================================================================
public function player.getHumanMetadataRequired() returns HumanPlayerMetadata
  let metadata = this.getMetadata() castTo HumanPlayerMetadata
  if (metadata == null)
    error("Player \"{0}\" does not have required metadata".format(this.getName()))
  return metadata

// ============================================================================
public function unit.getOwnerHumanMetadata() returns HumanPlayerMetadata
  return this.getOwnerMetadata() castTo HumanPlayerMetadata

// ============================================================================
function initializePlayerMetadata(player p)
  let metadata = new HumanPlayerMetadata(p)
  registerPlayerMetadata(metadata)

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()
  let killingUnit = GetKillingUnit()
  let dyingPlayer = dyingUnit.getOwner()
  let killingPlayer = killingUnit.getOwner()

  if (not dyingPlayer.isEnemyOf(killingPlayer))
    return

  let playerMetadata = killingPlayer.getHumanMetadata()
  if (playerMetadata == null)
    return

  playerMetadata.incrementKills()

// ============================================================================
init
  for p in g_PlayingHumanPlayers
    initializePlayerMetadata(p)

  initializePlayerMetadata(PLAYER_VILLAGERS)

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)