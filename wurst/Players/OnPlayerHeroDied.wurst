package OnPlayerHeroDied
import GameSettings
import DisplayTextToPlayer
import GameConstants
import HumanPlayerMetadata
import UnitMetadata
import GroupUtils
import UnitExtensions
import Survivors
import HumanPlayers
import ClosureEvents
import GameInstance
import ColorUtility
import ProjectConstants
import TlsUnitIds

// ============================================================================
function disableFogOfWarForPlayer(player p)
  createVision(p, GetPlayableMapRect(), false).start()

// ============================================================================
function onPlayerHeroDied(HumanPlayerMetadata playerMetadata)
  playerMetadata.setDisplayName("<Deceased>")

  let _player = playerMetadata.getPlayer()

  if (GameSettings.allowRespawn and g_GameInstance.isGracePeriodActive())
    displayMessageToPlayer(_player, "Grace Period".colorize(Colors.gold) + " Your hero will be respawned at the start of the next day")
  else
    onPlayerLostGame(_player)

  giveAllUnitsToVillagersPlayer(_player)

// ============================================================================
function onPlayerUnitDied()
  let dyingUnit = GetDyingUnit()
  let owner = dyingUnit.getOwner()
  let playerMetadata = owner.getMetadata() castTo HumanPlayerMetadata

  if (playerMetadata == null)
    return

  let hero = playerMetadata.getHero()
  if (hero == null)
    return

  let heroUnit = hero.getUnit()
  if (heroUnit == null)
    return

  if (dyingUnit == heroUnit)
    onPlayerHeroDied(playerMetadata)

// ============================================================================
function onPlayerLostGame(player _player)
  
  disableFogOfWarForPlayer(_player)

  displayMessageToPlayer(_player, "Your hero has died. The game is over for you.".colorize(Colors.red))
  displayMessageToPlayer(_player, "If you have any feedback or would like to be alerted when new versions are released please join the Last Stand Discord server!")
  displayMessageToPlayer(_player, DISCORD_LINK.colorize(Colors.gold))

// ============================================================================
function onPlayerLeftGame()
  let leavingPlayer = GetTriggerPlayer()
  
  let metadata = leavingPlayer.getHumanMetadata()
  if (metadata != null)
  
    metadata.setHasLeftGame(true)

    // Remove their hero
    let hero = metadata.getHero()
    if (hero != null)
      let heroUnit = hero.getUnit()
      if (heroUnit != null)
        heroUnit.remove()

  g_PlayingHumanPlayers.remove(leavingPlayer)
  leavingPlayer.setDisplayName("<Left>")
  
  giveAllUnitsToVillagersPlayer(leavingPlayer)

// ============================================================================
function giveAllUnitsToVillagersPlayer(player _player)
  
  unit playerHeroUnit = null
  let playerMetadata = _player.getHumanMetadata()
  if (playerMetadata != null)
    let playerHero = playerMetadata.getHero()
    if (playerHero != null)
      playerHeroUnit = playerHero.getUnit()

  let tempGroup = getGroup()
  tempGroup.enumUnitsOfPlayer(_player, null)
  for u from tempGroup
    // We always destroy the camp headquarters
    if (u.isCampHeadquarters())
      u.kill()
    // If it's a structure give it to the Villagers player so they can be reclaimed
    else if (u.isStructure())
      u.setOwner(PLAYER_VILLAGERS, true)
    // If it's a unit that's not the hero, banish them
    else if (u != playerHeroUnit)
      banishSurvivor(u)
  tempGroup.release()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onPlayerUnitDied)
  EventListener.add(EVENT_PLAYER_LEAVE, () -> onPlayerLeftGame())