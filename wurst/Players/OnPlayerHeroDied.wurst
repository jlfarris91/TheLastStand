package OnPlayerHeroDied
import GameSettings
import DisplayTextToPlayer
import GameConstants
import HumanPlayerComponent
import GroupUtils
import Survivors
import HumanPlayers
import ClosureEvents
import GameInstance
import ColorUtility
import ProjectConstants
import TlsUnitIds
import Unit_Walls
import Unit_Gates
import Notifications
import Unit_Barricades

// ============================================================================
function onPlayerHeroDiedDuringGracePeriod(player _player)
  displayMessageToPlayer(_player, "Grace Period".colorize(Colors.gold) + " Your hero will be respawned at the start of the next day")

// ============================================================================
function onPlayerHeroDiedAfterGracePeriod(player _player)
  displayMessageToPlayer(_player, "Your hero can be revived at your Headquarters.")

// ============================================================================
function onPlayerHeroDied(player _player)
  if (GameSettings.allowRespawn and g_GameInstance.isGracePeriodActive())
    onPlayerHeroDiedDuringGracePeriod(_player)
  else
    onPlayerHeroDiedAfterGracePeriod(_player)

// ============================================================================
function onPlayerCampDied(player _player)
  onPlayerLostGame(_player)
  processRemainingPlayerUnits(_player)

// ============================================================================
function onPlayerUnitDied()
  let dyingUnit = GetDyingUnit()
  let owner = dyingUnit.getOwner()
  let playerMetadata = owner.getHumanPlayerComponent()

  // If the killing unit is null then I must have destroyed the unit through the magic of programming
  let killingUnit = GetKillingUnit()
  if (killingUnit == null)
    return

  if (playerMetadata == null)
    return

  let hero = playerMetadata.getHero()
  if (hero != null and dyingUnit == hero)
    onPlayerHeroDied(owner)

  if (dyingUnit.isHeadquarters())
    onPlayerCampDied(owner)

// ============================================================================
function onPlayerLostGame(player losingPlayer)
  
  let metadata = losingPlayer.getMetadata()
  if (metadata != null)
    metadata.setVictoryState(VictoryState.Lost)
    metadata.setDisplayName(metadata.getName() + " <Lost>")

  displayMessageToPlayer(losingPlayer, "Your camp tent has been destroyed. The game is over for you.".colorize(Colors.red))
  displayMessageToPlayer(losingPlayer, "If you have any feedback or would like to be alerted when new versions are released please join the Last Stand Discord server!")
  displayMessageToPlayer(losingPlayer, DISCORD_LINK.colorize(Colors.gold))

  for p in g_PlayingHumanPlayers
    if (p != losingPlayer)
      notifyPlayer(p, "{0} lost the game".format(losingPlayer.getNameColored()), "ui\\player-lost.dds")

  g_GameInstance.updateWorldDifficulty()

// ============================================================================
function onPlayerLeftGame()
  let leavingPlayer = GetTriggerPlayer()
  
  let metadata = leavingPlayer.getMetadata()
  if (metadata != null)
  //{
    metadata.setDisplayName(metadata.getName() + " <Left>")

    let humanPlayerComponent = metadata.getHumanPlayerComponent()
    if (humanPlayerComponent != null)
      // Remove their hero
      let hero = humanPlayerComponent.getHero()
      if (hero != null)
        hero.remove()
  //}

  g_PlayingHumanPlayers.removePlayer(leavingPlayer)
  
  processRemainingPlayerUnits(leavingPlayer)

  for p in g_PlayingHumanPlayers
    if (p != leavingPlayer)
      notifyPlayer(p, "{0} left the game".format(leavingPlayer.getNameColored()), "ui\\player-left.dds")
  
  g_GameInstance.updateWorldDifficulty()

// ============================================================================
function shouldBeDestroyed(unit _unit) returns bool
  return _unit.isHeadquarters() or _unit.isShelter()

// ============================================================================
// Typically only defensive structures
function shouldBeGivenToVillagersPlayer(unit _unit) returns bool
  return _unit.isSpikes() or
         _unit.isWall() or
         _unit.isGate() or
         _unit.isBarricade() or
         _unit.isLampPost() or
         _unit.isChest()

// ============================================================================
function shouldBanishUnit(unit _unit) returns bool
  return _unit.isSurvivor()

// ============================================================================
function processRemainingPlayerUnits(player _player)

  let tempGroup = getGroup()
  tempGroup.enumUnitsOfPlayer(_player, null)
  for u from tempGroup
  //{
    if (u.isAlive())
      // We always destroy the camp headquarters and shelters
      if (shouldBeDestroyed(u))
        u.kill()
      // If it's a structure give it to the Villagers player so they can be reclaimed
      else if (shouldBeGivenToVillagersPlayer(u))
        u.setOwner(PLAYER_VILLAGERS, true)
      // If it's a unit that's not the hero, banish them
      else if (shouldBanishUnit(u))
        SurvivorUtility.banishSurvivor(u)
      // Finally, just remove the unit from the game
      else if (not u.isTlsHero())
        u.remove()
  //}

  tempGroup.release()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onPlayerUnitDied)
  EventListener.add(EVENT_PLAYER_LEAVE, () -> onPlayerLeftGame())