package OnPlayerHeroDied
import GameSettings
import DisplayTextToPlayer
import GameConstants
import HumanPlayerMetadata
import UnitMetadata
import GroupUtils
import Survivors
import HumanPlayers
import ClosureEvents
import GameInstance
import ColorUtility
import ProjectConstants
import TlsUnitIds
import Unit_WoodFence
import Unit_StoneWall
import Unit_MetalWall
import Unit_GateCommon
import Unit_BrickWall

// ============================================================================
function disableFogOfWarForPlayer(player p)
  createVision(p, GetPlayableMapRect(), false).start()

// ============================================================================
function onPlayerHeroDied(HumanPlayerMetadata playerMetadata)
  playerMetadata.setDisplayName("<Deceased>")

  let _player = playerMetadata.getPlayer()

  if (GameSettings.allowRespawn and g_GameInstance.isGracePeriodActive())
    displayMessageToPlayer(_player, "Grace Period".colorize(Colors.gold) + " Your hero will be respawned at the start of the next day")
  else
    onPlayerLostGame(_player)

  processRemainingPlayerUnits(_player)

// ============================================================================
function onPlayerUnitDied()
  let dyingUnit = GetDyingUnit()
  let owner = dyingUnit.getOwner()
  let playerMetadata = owner.getMetadata() castTo HumanPlayerMetadata

  if (playerMetadata == null)
    return

  let hero = playerMetadata.getHero()
  if (hero == null)
    return

  let heroUnit = hero.getUnit()
  if (heroUnit == null)
    return

  if (dyingUnit == heroUnit)
    onPlayerHeroDied(playerMetadata)

// ============================================================================
function onPlayerLostGame(player _player)
  
  disableFogOfWarForPlayer(_player)

  displayMessageToPlayer(_player, "Your hero has died. The game is over for you.".colorize(Colors.red))
  displayMessageToPlayer(_player, "If you have any feedback or would like to be alerted when new versions are released please join the Last Stand Discord server!")
  displayMessageToPlayer(_player, DISCORD_LINK.colorize(Colors.gold))

// ============================================================================
function onPlayerLeftGame()
  let leavingPlayer = GetTriggerPlayer()
  
  let metadata = leavingPlayer.getHumanMetadata()
  if (metadata != null)
  
    metadata.setHasLeftGame(true)

    // Remove their hero
    let hero = metadata.getHero()
    if (hero != null)
      let heroUnit = hero.getUnit()
      if (heroUnit != null)
        heroUnit.remove()

  g_PlayingHumanPlayers.removePlayer(leavingPlayer)
  leavingPlayer.setDisplayName("<Left>")
  
  processRemainingPlayerUnits(leavingPlayer)

// ============================================================================
function shouldBeDestroyed(unit _unit) returns bool
  return _unit.isCampHeadquarters() or _unit.isShelter()

// ============================================================================
// Typically only defensive structures
function shouldBeGivenToVillagersPlayer(unit _unit) returns bool
  let unitTypeId = _unit.getTypeId()
  return _unit.isSpikes() or
         g_woodFenceIds.has(unitTypeId) or
         g_stoneWallIds.has(unitTypeId) or
         g_brickWallIds.has(unitTypeId) or
         g_metalWallIds.has(unitTypeId) or
         _unit.isGate() or
         _unit.isBarricade() or
         _unit.isLampPost() or
         _unit.isChest() or
         _unit.isRangedTarget()

// ============================================================================
function shouldBanishUnit(unit _unit) returns bool
  return _unit.isSurvivor()

// ============================================================================
function processRemainingPlayerUnits(player _player)
  
  unit playerHeroUnit = null
  let playerMetadata = _player.getHumanMetadata()
  if (playerMetadata != null)
    let playerHero = playerMetadata.getHero()
    if (playerHero != null)
      playerHeroUnit = playerHero.getUnit()

  let tempGroup = getGroup()
  tempGroup.enumUnitsOfPlayer(_player, null)
  for u from tempGroup
    if (u.isAlive())
      // We always destroy the camp headquarters and shelters
      if (shouldBeDestroyed(u))
        u.kill()
      // If it's a structure give it to the Villagers player so they can be reclaimed
      else if (shouldBeGivenToVillagersPlayer(u))
        u.setOwner(PLAYER_VILLAGERS, true)
      // If it's a unit that's not the hero, banish them
      else if (shouldBanishUnit(u))
        banishSurvivor(u)
      // Finally, just remove the unit from the game
      else if (u != playerHeroUnit)
        u.remove()

  tempGroup.release()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onPlayerUnitDied)
  EventListener.add(EVENT_PLAYER_LEAVE, () -> onPlayerLeftGame())