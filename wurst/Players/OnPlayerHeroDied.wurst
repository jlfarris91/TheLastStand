package OnPlayerHeroDied
import GameSettings
import DisplayTextToPlayer
import GameConstants
import HumanPlayerMetadata
import UnitMetadata
import GroupUtils
import Survivors
import HumanPlayers
import ClosureEvents
import GameInstance
import ColorUtility
import ProjectConstants
import TlsUnitIds
import Unit_WoodFence
import Unit_StoneWall
import Unit_MetalWall
import Unit_GateCommon
import Unit_BrickWall
import HeroHeart

// ============================================================================
function disableFogOfWarForPlayer(player p)
  createVision(p, GetPlayableMapRect(), false).start()

// ============================================================================
function onPlayerHeroDiedDuringGracePeriod(player _player)
  displayMessageToPlayer(_player, "Grace Period".colorize(Colors.gold) + " Your hero will be respawned at the start of the next day")

// ============================================================================
function onPlayerHeroDiedAfterGracePeriod(player _player, unit hero)
  displayMessageToPlayer(_player, "Heart of a Hero".colorize(Colors.gold) + " Bring your hero's heart item back to your camp to revive them for a price.")
  createHeartItemForHero(hero)

// ============================================================================
function onPlayerHeroDied(player _player, unit hero)
  if (GameSettings.allowRespawn and g_GameInstance.isGracePeriodActive())
    onPlayerHeroDiedDuringGracePeriod(_player)
  else
    onPlayerHeroDiedAfterGracePeriod(_player, hero)

// ============================================================================
function onPlayerCampDied(player _player)
  onPlayerLostGame(_player)
  processRemainingPlayerUnits(_player)

// ============================================================================
function onPlayerUnitDied()
  let dyingUnit = GetDyingUnit()
  let owner = dyingUnit.getOwner()
  let playerMetadata = owner.getMetadata() castTo HumanPlayerMetadata

  // If the killing unit is null then I must have destroyed the unit through the magic of programming
  let killingUnit = GetKillingUnit()
  if (killingUnit == null)
    return

  if (playerMetadata == null)
    return

  let _player = playerMetadata.getPlayer()

  let hero = playerMetadata.getHero()
  if (hero != null)
    let heroUnit = hero.getUnit()
    if (heroUnit != null and dyingUnit == heroUnit)
      onPlayerHeroDied(_player, heroUnit)

  if (dyingUnit.isCampHeadquarters())
    onPlayerCampDied(_player)

// ============================================================================
function onPlayerLostGame(player _player)
  
  let metadata = _player.getHumanMetadata()
  if (metadata != null)
    metadata.setHasLostGame(true)
    metadata.setDisplayName(metadata.getName() + " <Lost>")

  disableFogOfWarForPlayer(_player)
  displayMessageToPlayer(_player, "Your camp tent has been destroyed. The game is over for you.".colorize(Colors.red))
  displayMessageToPlayer(_player, "If you have any feedback or would like to be alerted when new versions are released please join the Last Stand Discord server!")
  displayMessageToPlayer(_player, DISCORD_LINK.colorize(Colors.gold))

  displayMessageToAllExceptPlayer(_player, "{0} has lost the game".format(_player.getNameColored()))

// ============================================================================
function onPlayerLeftGame()
  let leavingPlayer = GetTriggerPlayer()
  
  let metadata = leavingPlayer.getHumanMetadata()
  if (metadata != null)
    metadata.setHasLeftGame(true)
    metadata.setDisplayName(metadata.getName() + " <Left>")

    // Remove their hero
    let hero = metadata.getHero()
    if (hero != null)
      let heroUnit = hero.getUnit()
      if (heroUnit != null)
        heroUnit.remove()

  g_PlayingHumanPlayers.removePlayer(leavingPlayer)
  
  processRemainingPlayerUnits(leavingPlayer)

  displayMessageToAllExceptPlayer(leavingPlayer, "{0} has left the game".format(leavingPlayer.getNameColored()))

// ============================================================================
function shouldBeDestroyed(unit _unit) returns bool
  return _unit.isCampHeadquarters() or _unit.isShelter()

// ============================================================================
// Typically only defensive structures
function shouldBeGivenToVillagersPlayer(unit _unit) returns bool
  let unitTypeId = _unit.getTypeId()
  return _unit.isSpikes() or
         g_woodFenceIds.has(unitTypeId) or
         g_stoneWallIds.has(unitTypeId) or
         g_brickWallIds.has(unitTypeId) or
         g_metalWallIds.has(unitTypeId) or
         _unit.isGate() or
         _unit.isBarricade() or
         _unit.isLampPost() or
         _unit.isChest() or
         _unit.isRangedTarget()

// ============================================================================
function shouldBanishUnit(unit _unit) returns bool
  return _unit.isSurvivor()

// ============================================================================
function processRemainingPlayerUnits(player _player)

  let tempGroup = getGroup()
  tempGroup.enumUnitsOfPlayer(_player, null)
  for u from tempGroup
    if (u.isAlive())
      // We always destroy the camp headquarters and shelters
      if (shouldBeDestroyed(u))
        u.kill()
      // If it's a structure give it to the Villagers player so they can be reclaimed
      else if (shouldBeGivenToVillagersPlayer(u))
        u.setOwner(PLAYER_VILLAGERS, true)
      // If it's a unit that's not the hero, banish them
      else if (shouldBanishUnit(u))
        SurvivorUtility.banishSurvivor(u)
      // Finally, just remove the unit from the game
      else
        u.remove()

  tempGroup.release()

  let heroItem = getHeartItem(_player)
  if (heroItem != null)
    destroyHeroHeartItem(heroItem)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onPlayerUnitDied)
  EventListener.add(EVENT_PLAYER_LEAVE, () -> onPlayerLeftGame())