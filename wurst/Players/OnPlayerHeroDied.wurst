package OnPlayerHeroDied
import GameSettings
import DisplayTextToPlayer
import GameConstants
import HumanPlayerMetadata
import UnitMetadata
import GroupUtils
import UnitExtensions
import Survivors
import HumanPlayers
import ClosureEvents
import GameInstance
import ColorUtility
import ProjectConstants
import TlsUnitIds

// ============================================================================
function disableFogOfWarForPlayer(player p)
  createVision(p, GetPlayableMapRect(), false).start()

// ============================================================================
function onPlayerHeroDied(HumanPlayerMetadata playerMetadata)
  playerMetadata.setDisplayName("<Deceased>")

  let _player = playerMetadata.getPlayer()

  if (GameSettings.allowRespawn and g_GameInstance.isGracePeriodActive())
    displayMessageToPlayer(_player, "Grace Period".colorize(Colors.gold) + " Your hero will be respawned at the start of the next day")
  else
    onPlayerLostGame(_player)

  giveAllUnitsToVillagersPlayer(_player)

  playerMetadata.reset()

// ============================================================================
function onPlayerUnitDied()
  let dyingUnit = GetDyingUnit()
  let owner = dyingUnit.getOwner()
  let playerMetadata = owner.getMetadata() castTo HumanPlayerMetadata

  if (playerMetadata == null)
    return

  let hero = playerMetadata.getHero()
  if (hero == null)
    return

  let heroUnit = hero.getUnit()
  if (heroUnit == null)
    return

  if (dyingUnit == heroUnit)
    onPlayerHeroDied(playerMetadata)

// ============================================================================
function onPlayerLostGame(player _player)
  
  disableFogOfWarForPlayer(_player)

  displayMessageToPlayer(_player, "Your hero has died. The game is over for you.".colorize(Colors.red))
  displayMessageToPlayer(_player, "If you have any feedback or would like to be alerted when new versions are released please join the Last Stand Discord server!")
  displayMessageToPlayer(_player, DISCORD_LINK.colorize(Colors.gold))

// ============================================================================
function onPlayerLeftGame()
  let leavingPlayer = GetTriggerPlayer()
  let metadata = leavingPlayer.getHumanMetadata()
  if (metadata == null)
    return

  g_PlayingHumanPlayers.remove(leavingPlayer)
  metadata.setHasLeftGame(true)
  leavingPlayer.setDisplayName("<Left>")
  
  // Give the rest of their units to the villagers player
  giveAllUnitsToVillagersPlayer(PLAYER_VILLAGERS)

  // Remove their hero
  let hero = metadata.getHero()
  if (hero != null)
    let heroUnit = hero.getUnit()
    if (heroUnit != null)
      heroUnit.remove()

  // Remove their camp tent
  let temp = getGroup()
  for _unit in temp
    if (_unit.isCampHeadquarters())
      _unit.kill()
  temp.release()

// ============================================================================
function giveAllUnitsToVillagersPlayer(player p)
  
  unit playerHeroUnit = null
  let playerMetadata = p.getHumanMetadataRequired()
  if (playerMetadata != null)
    let playerHero = playerMetadata.getHero()
    if (playerHero != null)
      playerHeroUnit = playerHero.getUnit()

  let tempGroup = getGroup()
  tempGroup.enumUnitsOfPlayer(p, null)
  for u from tempGroup
    if (u.isStructure())
      u.setOwner(PLAYER_VILLAGERS, true)
    else if (u != playerHeroUnit)
      banishSurvivor(u)
  tempGroup.release()

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onPlayerUnitDied)
  EventListener.add(EVENT_PLAYER_LEAVE, () -> onPlayerLeftGame())