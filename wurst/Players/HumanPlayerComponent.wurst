package HumanPlayerComponent
import public PlayerMetadata
import PlayerComponent
import UnitMetadata
import HumanPlayers
import ErrorHandling
import GameConstants
import RegisterEvents
import HostileCircularCachedSpawnManager
import FriendlyCircularCachedSpawnManager
import GroupUtils
import TlsUnitIds

// ============================================================================
public class HumanPlayerComponent extends PlayerComponent
  private int m_kills
  private int m_score
  private IUnitMetadata m_hero
  private group m_campCenterContributors
  private bool m_canPathToHeadquartersOrHero

  // --------------------------------------------------------------------------
  construct(IPlayerMetadata owner)
    super(owner)
    m_campCenterContributors = CreateGroup()
    m_canPathToHeadquartersOrHero = false

  // --------------------------------------------------------------------------
  ondestroy
    m_campCenterContributors.destr()

  // --------------------------------------------------------------------------
  function getKills() returns int
    return m_kills

  // --------------------------------------------------------------------------
  function incrementKills()
    m_kills++

  // --------------------------------------------------------------------------
  function getScore() returns int
    return m_score

  // --------------------------------------------------------------------------
  function incrementScore(int value)
    m_score += value

  // --------------------------------------------------------------------------
  function getCanPathToHeadquartersOrHero() returns bool
    return m_canPathToHeadquartersOrHero

  // --------------------------------------------------------------------------
  function setCanPathToHeadquartersOrHero(bool value)
    m_canPathToHeadquartersOrHero = value

  // --------------------------------------------------------------------------
  function getIsHeroDead() returns bool
    if (m_hero == null)
      Log.debug("hero is null")
      return true
    let heroUnit = m_hero.getUnit()
    if (heroUnit == null)
      Log.debug("hero unit is null")
      return true
    return heroUnit.isAlive() == false

  // --------------------------------------------------------------------------
  function getHero() returns IUnitMetadata
    return m_hero

  // --------------------------------------------------------------------------
  function setHero(IUnitMetadata hero)
    m_hero = hero
    Log.debug("Hero assigned to player: " + (hero != null).toString())

  // --------------------------------------------------------------------------
  function getHQOrHero() returns unit
    unit hqOrHero = null
    let temp = getGroup()
    temp.enumUnitsOfPlayer(getOwnerPlayer(), null)
    for u in temp
    //{
      if (u.isAlive())
      //{
        if (u.isCampHeadquarters())
          hqOrHero = u
          break
        else if (u.getTypeId() == TlsUnitIds.hero)
          hqOrHero = u
      //}
    //}
    temp.release()
    return hqOrHero

  // --------------------------------------------------------------------------
  function addCampCenter(unit centerContributor)
    if (centerContributor == null)
      argumentNullError("centerContributor")
    m_campCenterContributors.addUnit(centerContributor)
    Log.debug("HumanPlayerComponent", "addCampCenter", "", "Added camp center contributor ({0} total)".format(m_campCenterContributors.size().toString()))
    onCampCenterChanged()

  // --------------------------------------------------------------------------
  function removeCampCenter(unit centerContributor)
    if (centerContributor == null)
      argumentNullError("centerContributor")
    m_campCenterContributors.removeUnit(centerContributor)
    Log.debug("HumanPlayerComponent", "removeCampCenter", "", "Removed camp center contributor ({0} total)".format(m_campCenterContributors.size().toString()))
    onCampCenterChanged()

  // --------------------------------------------------------------------------
  function getCampCenter() returns vec2
    if (m_campCenterContributors.isEmpty())
      if (m_hero != null)
        return m_hero.getUnit().getPos()
      Log.warn("HumanPlayerComponent", "getCampCenter", "", "Player {0} has no valid camp center".format(getOwnerPlayer().getName()))
      return ZERO2
    var center = ZERO2
    for centerContributor in m_campCenterContributors
      center += centerContributor.getPos()
    center /= m_campCenterContributors.size().toReal()
    return center

  // --------------------------------------------------------------------------
  private function onCampCenterChanged()
    let center = getCampCenter()
    let hasCenterContributors = not m_campCenterContributors.isEmpty()

    let hostileSpawnManager = getPlayerCachedHostileSpawnManager(getOwnerPlayer())
    if (hostileSpawnManager != null)
      hostileSpawnManager.setCenter(center)
      hostileSpawnManager.setIsEnabled(hasCenterContributors)
    else
      Log.warn("HumanPlayerComponent", "onCampCenterChanged", "", "Player {0} has no hostile spawn manager".format(getOwnerPlayer().getName()))

    let friendlySpawnManager = getPlayerCachedFriendlySpawnManager(getOwnerPlayer())
    if (friendlySpawnManager != null)
      friendlySpawnManager.setCenter(center)
      friendlySpawnManager.setIsEnabled(hasCenterContributors)
    else
      Log.warn("HumanPlayerComponent", "onCampCenterChanged", "", "Player {0} has no friendly spawn manager".format(getOwnerPlayer().getName()))

    Log.debug("Camp center for player " + getOwnerPlayer().getName() + " : " + center.toString())

// ============================================================================
public function IPlayerMetadata.getHumanPlayerComponent() returns HumanPlayerComponent
  return this.getComponent(HumanPlayerComponent.typeId) castTo HumanPlayerComponent

// ============================================================================
public function IPlayerMetadata.getOrAddHumanPlayerComponent() returns HumanPlayerComponent
  var component = this.getHumanPlayerComponent()
  if (component == null)
    component = this.addComponent(new HumanPlayerComponent(this)) castTo HumanPlayerComponent
  return component

// ============================================================================
public function player.getHumanPlayerComponent() returns HumanPlayerComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getHumanPlayerComponent() : null

// ============================================================================
public function player.getHumanPlayerComponentRequired() returns HumanPlayerComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    error("Player \"{0}\" does not have required metadata".format(this.getName()))
  let comp = metadata.getHumanPlayerComponent()
  if (comp == null)
    error("Player \"{0}\" does not have required component".format(this.getName()))
  return metadata != null ? metadata.getHumanPlayerComponent() : null

// ============================================================================
public function unit.getOwnerHumanPlayerComponent() returns HumanPlayerComponent
  return this.getOwner().getHumanPlayerComponent()

// ============================================================================
function initializePlayerMetadata(player p)
  let metadata = new PlayerMetadata(p)
  metadata.addComponent(new HumanPlayerComponent(metadata))
  registerPlayerMetadata(metadata)

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()
  let killingUnit = GetKillingUnit()
  let dyingPlayer = dyingUnit.getOwner()
  let killingPlayer = killingUnit.getOwner()

  if (not dyingPlayer.isEnemyOf(killingPlayer))
    return

  let comp = killingPlayer.getHumanPlayerComponent()
  if (comp == null)
    return

  comp.incrementKills()

// ============================================================================
init
  for p in g_PlayingHumanPlayers
    initializePlayerMetadata(p)

  initializePlayerMetadata(PLAYER_VILLAGERS)

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)