package HumanPlayerComponent
import public PlayerMetadata
import PlayerComponent
import UnitMetadata
import HumanPlayers
import ErrorHandling
import GameConstants
import RegisterEvents
import GroupUtils
import TlsUnitDefinition
import FX
import PlayerSaveData
import Math
import Observable
import ClosureTimers
import PlayerProperties
import UndeadTargetService

// ============================================================================
public class HumanPlayerComponent extends PlayerComponent
  private int m_kills
  private int m_score
  private unit m_hero
  private int m_heroTypeId
  private group m_campCenterContributors
  private bool m_canPathToHeadquartersOrHero
  private real m_difficulty
  private real array[MAX_ELITE_TIER] m_tierWeights
  private real m_totalTierWeight = 0
  private real m_cameraDistance = CAMERA_DISTANCE_DEFAULT

  use Observable

  // --------------------------------------------------------------------------
  public static class Properties
    static constant string cameraDistance = "cameraDistance"

  // --------------------------------------------------------------------------
  construct(IPlayerMetadata owner)
    super(owner)
    m_campCenterContributors = CreateGroup()
    m_canPathToHeadquartersOrHero = false
    m_hero = null
    m_heroTypeId = 0
    m_difficulty = 1.0

  // --------------------------------------------------------------------------
  ondestroy
    m_campCenterContributors.destr()

  // --------------------------------------------------------------------------
  function getKills() returns int
    return m_kills

  // --------------------------------------------------------------------------
  function incrementKills()
    m_kills++

  // --------------------------------------------------------------------------
  function getScore() returns int
    return m_score

  // --------------------------------------------------------------------------
  function incrementScore(int value)
    m_score += value

  // --------------------------------------------------------------------------
  function getCanPathToHeadquartersOrHero() returns bool
    return m_canPathToHeadquartersOrHero

  // --------------------------------------------------------------------------
  function setCanPathToHeadquartersOrHero(bool value)
    m_canPathToHeadquartersOrHero = value
    
    let uts = getUndeadTargetProviderForPlayer(getOwnerPlayer())
    if (uts != null)
      uts.setPreferOrganicTargets(value)

  // --------------------------------------------------------------------------
  function getDifficulty() returns real
    return m_difficulty

  // --------------------------------------------------------------------------
  function setDifficulty(real difficulty)
    m_difficulty = difficulty

  // --------------------------------------------------------------------------
  function getTierChance(int tier) returns real
    if (m_totalTierWeight == 0)
      return 0.0
    return m_tierWeights[tier] / m_totalTierWeight

  // --------------------------------------------------------------------------
  function setTierWeight(int tier, real weight)
    m_totalTierWeight -= m_tierWeights[tier]
    m_tierWeights[tier] = weight
    m_totalTierWeight += m_tierWeights[tier]

  // --------------------------------------------------------------------------
  function getIsHeroDead() returns bool
    if (m_hero == null)
      Log.debug("hero is null")
      return true
    let heroUnit = m_hero
    if (heroUnit == null)
      Log.debug("hero unit is null")
      return true
    return heroUnit.isAlive() == false

  // --------------------------------------------------------------------------
  function getHeroTypeId() returns int
    return m_heroTypeId

  // --------------------------------------------------------------------------
  function setHeroTypeId(int heroTypeId)
    m_heroTypeId = heroTypeId

  // --------------------------------------------------------------------------
  function getHero() returns unit
    return m_hero

  // --------------------------------------------------------------------------
  function setHero(unit hero)
    m_hero = hero
    Log.debug("Hero assigned to player: " + (hero != null).toString())

  // --------------------------------------------------------------------------
  function getHQOrHero() returns unit
    unit hqOrHero = null
    let temp = getGroup()
    temp.enumUnitsOfPlayer(getOwnerPlayer(), null)
    for u in temp
    //{
      if (u.isAlive())
      //{
        if (u.isCampHeadquarters())
          hqOrHero = u
          break
        else if (u.isTlsHero())
          hqOrHero = u
      //}
    //}
    temp.release()
    return hqOrHero

  // --------------------------------------------------------------------------
  function addCampCenter(unit centerContributor)
    if (centerContributor == null)
      argumentNullError("centerContributor")
    m_campCenterContributors.addUnit(centerContributor)
    Log.debug("HumanPlayerComponent", "addCampCenter", "", "Added camp center contributor ({0} total)".format(m_campCenterContributors.size().toString()))

  // --------------------------------------------------------------------------
  function removeCampCenter(unit centerContributor)
    if (centerContributor == null)
      argumentNullError("centerContributor")
    m_campCenterContributors.removeUnit(centerContributor)
    Log.debug("HumanPlayerComponent", "removeCampCenter", "", "Removed camp center contributor ({0} total)".format(m_campCenterContributors.size().toString()))

  // --------------------------------------------------------------------------
  function getCampCenter() returns vec2
    if (m_campCenterContributors.isEmpty())
      if (m_hero != null)
        return m_hero.getPos()
      Log.debug("HumanPlayerComponent", "getCampCenter", "", "Player {0} has no valid camp center".format(getOwnerPlayer().getName()))
      return ZERO2
    var center = ZERO2
    for centerContributor in m_campCenterContributors
      center += centerContributor.getPos()
    center /= m_campCenterContributors.size().toReal()
    return center

  // --------------------------------------------------------------------------
  function getCameraDistance() returns real
    return m_cameraDistance

  // --------------------------------------------------------------------------
  function setCameraDistance(real value)
    let clampedValue = clamp(value, CAMERA_DISTANCE_MIN, CAMERA_DISTANCE_MAX)
    if (m_cameraDistance != clampedValue)
      m_cameraDistance = clampedValue
      updateCamera()
      raisePropertyChangedEvent(Properties.cameraDistance)

  // --------------------------------------------------------------------------
  function load()
    load(PlayerSaveData.getPlayerSaveData(getOwnerPlayer()))

  // --------------------------------------------------------------------------
  function load(IPlayerSaveData saveData)
    let saveDataVersioned = saveData castTo PlayerSaveData_v800
    setCameraDistance(saveDataVersioned.cameraDistance)

  // --------------------------------------------------------------------------
  function save(IPlayerSaveData saveData)
    let saveDataVersioned = saveData castTo PlayerSaveData_v800
    saveDataVersioned.cameraDistance = getCameraDistance()

  // --------------------------------------------------------------------------
  function save()
    let ownerPlayer = getOwnerPlayer()
    let playerSaveData = PlayerSaveData.getPlayerSaveData(ownerPlayer)
    save(playerSaveData)
    PlayerSaveData.save(ownerPlayer)
    
  // --------------------------------------------------------------------------
  override protected function onEnabled()
    super.onEnabled()
    updateCamera()

  // --------------------------------------------------------------------------
  private function updateCamera()
    nullTimer() () ->
      let ownerPlayer = getOwnerPlayer()
      SetCameraFieldForPlayer(ownerPlayer, CAMERA_FIELD_TARGET_DISTANCE, m_cameraDistance, CAMERA_DISTANCE_SMOOTH)
      SetCameraFieldForPlayer(ownerPlayer, CAMERA_FIELD_FARZ, CAMERA_FARZ, 0)

  // --------------------------------------------------------------------------
  protected function tryRefundLumber(unit structure)
    let refundPerc01 = getOwnerPlayer().getPropertyValue(PlayerProperty.LUMBER_REFUND_PERC_01)
    if (refundPerc01 == 0.0)
      return
    let unitDef = getUnitDefinition(structure.getTypeId())
    if (unitDef == null)
      Log.debug("No unit def found for unit {0} ({1})".format(structure.getTypeId().toString(), UnitId2String(structure.getTypeId())))
      return
    let lumberCost = unitDef.getLumberCost()
    let lumberRefunded = (lumberCost * refundPerc01).toInt()
    if (lumberRefunded == 0)
      return
    let owningPlayer = getOwnerPlayer()
    owningPlayer.addLumber(lumberRefunded)
    FX.createFoundMaterialsTag(structure.getPos(), lumberRefunded, owningPlayer)

// ============================================================================
public function IPlayerMetadata.getHumanPlayerComponent() returns HumanPlayerComponent
  return this.getComponent(HumanPlayerComponent.typeId) castTo HumanPlayerComponent

// ============================================================================
public function IPlayerMetadata.getOrAddHumanPlayerComponent() returns HumanPlayerComponent
  var component = this.getHumanPlayerComponent()
  if (component == null)
    component = this.addComponent(new HumanPlayerComponent(this)) castTo HumanPlayerComponent
  return component

// ============================================================================
public function player.getHumanPlayerComponent() returns HumanPlayerComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getHumanPlayerComponent() : null

// ============================================================================
public function player.getHumanPlayerComponentRequired() returns HumanPlayerComponent
  let metadata = this.getMetadata()
  if (metadata == null)
    error("Player \"{0}\" does not have required metadata".format(this.getName()))
  let comp = metadata.getHumanPlayerComponent()
  if (comp == null)
    error("Player \"{0}\" does not have required component".format(this.getName()))
  return metadata != null ? metadata.getHumanPlayerComponent() : null

// ============================================================================
public function unit.getOwnerHumanPlayerComponent() returns HumanPlayerComponent
  return this.getOwner().getHumanPlayerComponent()

// ============================================================================
function initializePlayerMetadata(player p)
  let metadata = new PlayerMetadata(p)
  metadata.addComponent(new HumanPlayerComponent(metadata))
  registerPlayerMetadata(metadata)

// ============================================================================
function onUnitKilled()
  let dyingUnit = GetDyingUnit()
  let killingUnit = GetKillingUnit()
  let dyingPlayer = dyingUnit.getOwner()
  let killingPlayer = killingUnit.getOwner()

  if (not dyingPlayer.isEnemyOf(killingPlayer))
    return

  let comp = killingPlayer.getHumanPlayerComponent()
  if (comp == null)
    return

  comp.incrementKills()

// ============================================================================
function onConstructionFinished()
  let constructedUnit = GetConstructedStructure()
  let comp = constructedUnit.getOwnerHumanPlayerComponent()
  if (comp != null)
    comp.tryRefundLumber(constructedUnit)

// ============================================================================
function onUpgradeFinished()
  let upgradedUnit = GetTriggerUnit()
  let comp = upgradedUnit.getOwnerHumanPlayerComponent()
  if (comp != null)
    comp.tryRefundLumber(upgradedUnit)

// ============================================================================
init
  for p in g_PlayingHumanPlayers
    initializePlayerMetadata(p)

  initializePlayerMetadata(PLAYER_VILLAGERS)

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function onUnitKilled)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function onConstructionFinished)
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onUpgradeFinished)