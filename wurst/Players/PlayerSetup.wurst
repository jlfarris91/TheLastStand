package PlayerSetup
import TechAvailabilityGroup
import HeroAbilities
import HumanPlayerComponent
import TlsUnitIds
import PlayerProperties
import Difficulties
import PlayerSaveData
import HelpMenu
import Tips

PlayerSetup array g_playerSetups

// ============================================================================
public class PlayerSetup
  private TechAvailabilityGroup m_enabledHeroAbilities = new TechAvailabilityGroup()
  private real m_difficulty = 1.0
  private int m_heroTypeId = TlsUnitIds.heroScout

  // --------------------------------------------------------------------------
  construct()
    m_enabledHeroAbilities.add(HeroAbilities.scout.getHeroAbilityGroupDefault(HeroAbilityGroup.Q))
    m_enabledHeroAbilities.add(HeroAbilities.scout.getHeroAbilityGroupDefault(HeroAbilityGroup.W))
    m_enabledHeroAbilities.add(HeroAbilities.scout.getHeroAbilityGroupDefault(HeroAbilityGroup.E))
    m_enabledHeroAbilities.add(HeroAbilities.scout.getHeroAbilityGroupDefault(HeroAbilityGroup.R))

    m_enabledHeroAbilities.add(HeroAbilities.mountaineer.getHeroAbilityGroupDefault(HeroAbilityGroup.Q))
    m_enabledHeroAbilities.add(HeroAbilities.mountaineer.getHeroAbilityGroupDefault(HeroAbilityGroup.W))
    m_enabledHeroAbilities.add(HeroAbilities.mountaineer.getHeroAbilityGroupDefault(HeroAbilityGroup.E))
    m_enabledHeroAbilities.add(HeroAbilities.mountaineer.getHeroAbilityGroupDefault(HeroAbilityGroup.R))
  
    m_enabledHeroAbilities.add(HeroAbilities.captain.getHeroAbilityGroupDefault(HeroAbilityGroup.Q))
    m_enabledHeroAbilities.add(HeroAbilities.captain.getHeroAbilityGroupDefault(HeroAbilityGroup.W))
    m_enabledHeroAbilities.add(HeroAbilities.captain.getHeroAbilityGroupDefault(HeroAbilityGroup.E))
    m_enabledHeroAbilities.add(HeroAbilities.captain.getHeroAbilityGroupDefault(HeroAbilityGroup.R))
    
    m_enabledHeroAbilities.add(HeroAbilities.tinkerer.getHeroAbilityGroupDefault(HeroAbilityGroup.Q))
    m_enabledHeroAbilities.add(HeroAbilities.tinkerer.getHeroAbilityGroupDefault(HeroAbilityGroup.W))
    m_enabledHeroAbilities.add(HeroAbilities.tinkerer.getHeroAbilityGroupDefault(HeroAbilityGroup.E))
    m_enabledHeroAbilities.add(HeroAbilities.tinkerer.getHeroAbilityGroupDefault(HeroAbilityGroup.R))

  // --------------------------------------------------------------------------
  static function getSetupForPlayer(player _player) returns PlayerSetup
    if (g_playerSetups[_player.getId()] == null)
      g_playerSetups[_player.getId()] = new PlayerSetup()
    return g_playerSetups[_player.getId()]

  // --------------------------------------------------------------------------
  function setupHero(unit _hero)
    skip

  // --------------------------------------------------------------------------
  function setupPlayer(player _player)

    // Disable all hero abilities by default
    HeroAbilities.scout.disableAllHeroAbilities(_player)
    HeroAbilities.captain.disableAllHeroAbilities(_player)
    HeroAbilities.tinkerer.disableAllHeroAbilities(_player)

    // Enable only the hero abilities
    m_enabledHeroAbilities.enable(_player)

    let comp = _player.getHumanPlayerComponentRequired()

    comp.setDifficulty(m_difficulty)
    comp.setHeroTypeId(m_heroTypeId)

    // let itemFindQualityProp = _player.getProperty(PlayerProperty.ITEM_FIND_QUALITY)
    // if (itemFindQualityProp != null)
    //   itemFindQualityProp.setBase(DifficultyScaling.getItemQualityScalar01(m_difficulty))

    let heroXPProp = _player.getProperty(PlayerProperty.HERO_XP)
    if (heroXPProp != null)
      heroXPProp.affectScale(DifficultyScaling.getHeroXPScalar01(m_difficulty))

    let playerSaveData = PlayerSaveDataVersioned.getPlayerSaveData(_player)
    if (playerSaveData == null)
      Log.error("Player save data is null")
      return

    if (playerSaveData.showTipsOnStartup)
      HelpMenu.show(_player)

    Tips.showTipsForPlayer(_player, playerSaveData.showTipsOnInterval)

  // --------------------------------------------------------------------------
  function setHeroAbilityId(HeroAbilities abilities, HeroAbilityGroup heroAbilityGroup, int abilId)
    let existingGroupAbilId = getHeroAbilityId(abilities, heroAbilityGroup)
    if (existingGroupAbilId == abilId)
      return
    if (existingGroupAbilId != -1)
      m_enabledHeroAbilities.remove(existingGroupAbilId)
    m_enabledHeroAbilities.add(abilId)
  
  // --------------------------------------------------------------------------
  function getHeroAbilityId(HeroAbilities abilities, HeroAbilityGroup heroAbilityGroup) returns int
    for abilId in m_enabledHeroAbilities
      if (abilities.getHeroAbilityGroup(abilId) == heroAbilityGroup)
        return abilId
    return -1

  // --------------------------------------------------------------------------
  function setDifficulty(real difficulty)
    m_difficulty = difficulty

  // --------------------------------------------------------------------------
  function getDifficulty() returns real
    return m_difficulty

  // --------------------------------------------------------------------------
  function setHeroTypeId(int heroTypeId)
    m_heroTypeId = heroTypeId

  // --------------------------------------------------------------------------
  function getHeroTypeId() returns int
    return m_heroTypeId