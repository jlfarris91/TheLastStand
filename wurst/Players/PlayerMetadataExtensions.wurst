package PlayerMetadataExtensions
import PlayerMetadata

public function IPlayerMetadata.setGold(int val)
	this.getPlayer().setState(PLAYER_STATE_RESOURCE_GOLD, val)

public function IPlayerMetadata.addGold(int val)
	this.getPlayer().addState(PLAYER_STATE_RESOURCE_GOLD, val)

public function IPlayerMetadata.setLumber(int val)
	this.getPlayer().setState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function IPlayerMetadata.addLumber(int val)
	this.getPlayer().addState(PLAYER_STATE_RESOURCE_LUMBER, val)

public function IPlayerMetadata.addState(playerstate state, int val)
	SetPlayerState(this.getPlayer(), state, this.getPlayer().getState(state) + val)

/** Clears the selection for the player, deselecting all
	widgets. */
public function IPlayerMetadata.clearSelection()
	if localPlayer == this.getPlayer()
		ClearSelection()

/** Get if Selection is enabled for local IPlayerMetadata. Returns always false for non-local IPlayerMetadata.*/
public function IPlayerMetadata.isSelectionEnabled() returns bool
	if localPlayer == this.getPlayer()
		return BlzIsSelectionEnabled()
	return false

/** Get if Selection Circle is enabled for local IPlayerMetadata. Returns always false for non-local IPlayerMetadata.*/
public function IPlayerMetadata.isSelectionCircleEnabled() returns bool
	if localPlayer == this.getPlayer()
		return BlzIsSelectionCircleEnabled()
	return false

/** Enable or disable player selections.*/
public function IPlayerMetadata.setSelectionsEnabled(bool enableSelection, bool enableSelectionCircle)
	if localPlayer == this.getPlayer()
		BlzEnableSelections(enableSelection, enableSelectionCircle)

/** Disable UI control for the player */
public function IPlayerMetadata.disableUserControl()
	this.getPlayer().setUserControl(false)

/** Enable UI control for the player */
public function IPlayerMetadata.enableUserControl()
	this.getPlayer().setUserControl(true)

public function IPlayerMetadata.getController() returns mapcontrol
	return GetPlayerController(this.getPlayer())

public function IPlayerMetadata.getCurrentSupply() returns int
	return this.getPlayer().getState(PLAYER_STATE_RESOURCE_FOOD_USED)

public function IPlayerMetadata.getGold() returns int
	return this.getPlayer().getState(PLAYER_STATE_RESOURCE_GOLD)

public function IPlayerMetadata.getId() returns int
	return GetPlayerId(this.getPlayer())

public function IPlayerMetadata.getLumber() returns int
	return this.getPlayer().getState(PLAYER_STATE_RESOURCE_LUMBER)

public function IPlayerMetadata.getMaxSupply() returns int
	return this.getPlayer().getState(PLAYER_STATE_RESOURCE_FOOD_CAP)

public function IPlayerMetadata.getName() returns string
	return GetPlayerName(this.getPlayer())

public function IPlayerMetadata.getSlotState() returns playerslotstate
	return GetPlayerSlotState(this.getPlayer())

public function IPlayerMetadata.getStartLocation() returns vec2
	return vec2(GetPlayerStartLocationX(this.getPlayer()), GetPlayerStartLocationY(this.getPlayer()))

public function IPlayerMetadata.getState(playerstate state) returns int
	return GetPlayerState(this.getPlayer(), state)

public function IPlayerMetadata.isAllyOf(player p) returns boolean
	return IsPlayerAlly(this.getPlayer(), p)

public function IPlayerMetadata.isEnemyOf(player p) returns boolean
	return IsPlayerEnemy(this.getPlayer(), p)

public function IPlayerMetadata.panCamToTimed(unit u, real time)
	if localPlayer == this.getPlayer()
		PanCameraToTimed(u.getX(), u.getY(), time)

public function IPlayerMetadata.select(unit u)
	if localPlayer == this.getPlayer()
		SelectUnit(u, true)

public function IPlayerMetadata.selectSingle(unit u)
	if localPlayer == this.getPlayer()
		ClearSelection()
		SelectUnit(u, true)

public function IPlayerMetadata.setAbilityAvailable(int abilityId, boolean avail)
	SetPlayerAbilityAvailable(this.getPlayer(), abilityId, avail)

public function IPlayerMetadata.setName(string name)
	SetPlayerName(this.getPlayer(), name)

public function IPlayerMetadata.setState(playerstate state, int val)
	SetPlayerState(this.getPlayer(), state, val)

public function IPlayerMetadata.subGold(int val)
	this.getPlayer().subState(PLAYER_STATE_RESOURCE_GOLD, val)

public function IPlayerMetadata.subState(playerstate state, int val)
	SetPlayerState(this.getPlayer(), state, this.getPlayer().getState(state) - val)

/** Enables / disables user UI control for the player */
public function IPlayerMetadata.setUserControl(boolean enable)
	if localPlayer == this.getPlayer()
		EnableUserControl(enable)

public function IPlayerMetadata.unselect(unit u)
	if localPlayer == this.getPlayer()
		SelectUnit(u, false)

public function IPlayerMetadata.isIngame() returns boolean
	return this.getPlayer().getSlotState() == PLAYER_SLOT_STATE_PLAYING and this.getPlayer().getController() == MAP_CONTROL_USER

public function IPlayerMetadata.decTechResearched(int techId, int levels)
	BlzDecPlayerTechResearched(this.getPlayer(), techId, levels)

public function IPlayerMetadata.forceStartLocation(int index)
	ForcePlayerStartLocation(this.getPlayer(), index)

public function IPlayerMetadata.setPlayerAlliance(player otherPlayer, alliancetype whichAllianceSetting, boolean value)
	SetPlayerAlliance(this.getPlayer(), otherPlayer, whichAllianceSetting, value)

public function IPlayerMetadata.setTaxRate(player otherPlayer, playerstate whichResource, integer rate)
	SetPlayerTaxRate(this.getPlayer(), otherPlayer, whichResource, rate)

public function IPlayerMetadata.setRacePreference(racepreference whichRacePreference)
	SetPlayerRacePreference(this.getPlayer(), whichRacePreference)

public function IPlayerMetadata.setRaceSelectable(boolean value)
	SetPlayerRaceSelectable(this.getPlayer(), value)

public function IPlayerMetadata.getTeam() returns int
	return GetPlayerTeam(this.getPlayer())

public function IPlayerMetadata.isSelectable() returns bool
	return GetPlayerSelectable(this.getPlayer())

public function IPlayerMetadata.getTaxRate(player otherPlayer, playerstate whichResource) returns int
	return GetPlayerTaxRate(this.getPlayer(), otherPlayer, whichResource)

public function IPlayerMetadata.isRacePrefSet(racepreference preference) returns bool
	return IsPlayerRacePrefSet(this.getPlayer(), preference)

/** Get width and height of current Warcraft 3 client window. Returns vec2(0,0) for non-local IPlayerMetadata.*/
public function IPlayerMetadata.getScreenSize() returns vec2
	return localPlayer == this.getPlayer() ? vec2(I2R(BlzGetLocalClientWidth()), I2R(BlzGetLocalClientHeight())) : vec2(0,0)

/** Check if client window is active. Will return false always for non-local IPlayerMetadata.*/
public function IPlayerMetadata.isScreenActive() returns bool
	return localPlayer == this.getPlayer() ? BlzIsLocalClientActive() : false

/** Return language locale for local IPlayerMetadata. Returns null for non-local IPlayerMetadata.*/
public function IPlayerMetadata.getLocale() returns string
	return localPlayer == this.getPlayer() ? BlzGetLocale() : null

/** Return if Target Indicator is enabled for local IPlayerMetadata. Returns false for non-local IPlayerMetadata.*/
public function IPlayerMetadata.isTargetIndicatorEnabled() returns bool
	return localPlayer == this.getPlayer() ? BlzIsTargetIndicatorEnabled() : false

/** Set if Target Indicator is enabled for local IPlayerMetadata.*/
public function IPlayerMetadata.setTargetIndicator(bool enableTargetIndicator)
	if localPlayer == this.getPlayer()
		BlzEnableTargetIndicator(enableTargetIndicator)

/** Enable or disable mouse cursor..*/
public function IPlayerMetadata.setCursorEnabled(bool enableCursor)
	if localPlayer == this.getPlayer()
		BlzEnableCursor(enableCursor)

/** Set cursor position on screen. Uses int values internally.*/
public function IPlayerMetadata.setPosCursor(vec2 pos) 
	if localPlayer == this.getPlayer()
		BlzSetMousePos(R2I(pos.x), R2I(pos.y))

/** Get unit focused by mouse cursor.*/
public function IPlayerMetadata.getCursorFocus() returns unit 
	return localPlayer == this.getPlayer() ? BlzGetMouseFocusUnit() : null

public function IPlayerMetadata.setMinimapTerrainTex(string texFile) returns bool
	return localPlayer == this.getPlayer() ? BlzChangeMinimapTerrainTex(texFile) : false

public function IPlayerMetadata.sendSyncData(string prefix, string data) returns bool
	return BlzSendSyncData(prefix, data)

public function IPlayerMetadata.showChatMessage(int recipient, string message)
	BlzDisplayChatMessage(this.getPlayer(), recipient, message)

/** Sets the maximum allowed hero amount for a player */
public function IPlayerMetadata.setHeroMaxAllowed(int amount)
	SetPlayerTechMaxAllowed(this.getPlayer(), 'HERO', amount)