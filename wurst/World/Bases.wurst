package Bases
import TlsUnitIds
import ClosureTimers
import TimerUtils
import UnitIndexer
import Optional
import Vector
import Transform
import Quaternion
import MapEvents
import Preload

import initlater BasesInit
import Spawning
import HumanPlayers

constant color BASE_EASY_COLOR = color(0, 255, 0)
constant color BASE_MEDIUM_COLOR = color(255, 255, 0)
constant color BASE_HARD_COLOR = color(255, 0, 0)
constant string BASE_MODEL_PATH = "UI\\Minimap\\MiniMap-CreepLoc-Small.mdl"
constant fogstate BASE_FOG_STATE = FOG_OF_WAR_FOGGED
  
group g_invalidatingUnits = CreateGroup()

Vector<Base> g_bases = new Vector<Base>()
Vector<Base> g_basesClosest = new Vector<Base>()
Vector<Base> g_basesFurthest = new Vector<Base>()

vec2 array g_easyBasePos
minimapicon array g_easyBaseIcons
int g_easyBaseCount

vec2 array g_mediumBasePos
minimapicon array g_mediumBaseIcons
int g_mediumBaseCount

vec2 array g_hardBasePos
minimapicon array g_hardBaseIcons
int g_hardBaseCount

int g_showBaseDebug = 0
CallbackManual array g_playerShowBasesTimers

rect g_tempRect = Rect(0,0,0,0)

// ============================================================================
public enum BaseDifficulty
  EASY
  MEDIUM
  HARD
  ALL

// ============================================================================
public class Base
  protected Transform m_transform = new Transform()
  protected BaseDifficulty m_difficulty
  protected real m_dd = REAL_MAX
  protected minimapicon m_icon = null
  private string m_id = ""
  private string m_name = ""
  private Vector<UnitSpawner> m_unitSpawners
  private region m_region

  // ----------------------------------------------------------------------------
  construct(string id)
    m_id = id
    m_unitSpawners = new Vector<UnitSpawner>()
    m_region = CreateRegion()

  // ----------------------------------------------------------------------------
  ondestroy

    for spawner in m_unitSpawners
      destroy spawner

    destroy m_unitSpawners
    m_unitSpawners = null

    destroy m_transform
    m_transform = null

    m_region.destr()
    m_region = null

  // ----------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // ----------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // ----------------------------------------------------------------------------
  function setName(string value)
    m_name = value

  // ----------------------------------------------------------------------------
  function getDifficulty() returns BaseDifficulty
    return m_difficulty

  // ----------------------------------------------------------------------------
  function getTransform() returns Transform
    return m_transform

  // ----------------------------------------------------------------------------
  function getMinimapIcon() returns minimapicon
    return m_icon

  // --------------------------------------------------------------------------
  function registerUnitSpawner(int unitTypeId, vec2 localPos, angle localYaw) returns UnitSpawner

    let unitSpawner = new UnitSpawner(unitTypeId)
    unitSpawner.getTransform()
      ..setLocalTransform(localPos, eulerToQuat(localYaw.radians(), 0.0, 0.0))
    
    m_unitSpawners.add(unitSpawner)

    // Add to preloader so we don't get a hitch when spawning the map event
    Preload.registerUnitTypeId(unitTypeId)

    return unitSpawner

  // --------------------------------------------------------------------------
  function getUnitSpawnerCount() returns int
    return m_unitSpawners.size()

  // --------------------------------------------------------------------------
  function getUnitSpawner(int index) returns UnitSpawner
    return m_unitSpawners.get(index)

  // ----------------------------------------------------------------------------
  function addRect(rect value)
    m_region.addRect(value)

  // ----------------------------------------------------------------------------
  function addRect(real left, real bottom, real right, real top)
    g_tempRect.resize(vec2(left, bottom), vec2(right, top))
    addRect(g_tempRect)

  // --------------------------------------------------------------------------
  function getDistanceToClosestPlayerBase() returns real
    return m_dd

// ============================================================================
public abstract class Bases

  // --------------------------------------------------------------------------
  static function getEasyBaseCount() returns int
    return g_easyBaseCount

  // --------------------------------------------------------------------------
  static function getEasyBasePos(int index) returns vec2
    return g_easyBasePos[index]

  // --------------------------------------------------------------------------
  static function getMediumBaseCount() returns int
    return g_mediumBaseCount

  // --------------------------------------------------------------------------
  static function getMediumBasePos(int index) returns vec2
    return g_mediumBasePos[index]

  // --------------------------------------------------------------------------
  static function getHardBaseCount() returns int
    return g_hardBaseCount

  // --------------------------------------------------------------------------
  static function getHardBasePos(int index) returns vec2
    return g_hardBasePos[index]

  // --------------------------------------------------------------------------
  static function getBase(int index) returns Base
    return g_bases.get(index)

  // --------------------------------------------------------------------------
  static function getBaseCount() returns int
    return g_bases.size()

  // ----------------------------------------------------------------------------
  static function registerBase(string id, BaseDifficulty diff, vec2 pos, angle yaw, string displayName) returns Base
    let _base = new Base(id)
    ..setName(displayName)

    // Align to grid
    var alignedPos = pos
    alignedPos.x = (alignedPos.x / 128.0).floor() * 128.0
    alignedPos.y = (alignedPos.y / 128.0).floor() * 128.0

    _base.m_difficulty = diff
    _base.m_transform = new Transform(alignedPos, eulerToQuat(yaw.radians(), 0, 0))
  
    if (diff == BaseDifficulty.EASY)
      _base.m_icon = CreateMinimapIcon(alignedPos.x, alignedPos.y, BASE_EASY_COLOR.red, BASE_EASY_COLOR.green, BASE_EASY_COLOR.blue, BASE_MODEL_PATH, BASE_FOG_STATE)
      g_easyBaseIcons[g_easyBaseCount] = _base.m_icon
      g_easyBaseCount++
    
    if (diff == BaseDifficulty.MEDIUM)
      _base.m_icon = CreateMinimapIcon(alignedPos.x, alignedPos.y, BASE_MEDIUM_COLOR.red, BASE_MEDIUM_COLOR.green, BASE_MEDIUM_COLOR.blue, BASE_MODEL_PATH, BASE_FOG_STATE)
      g_mediumBaseIcons[g_mediumBaseCount] = _base.m_icon
      g_mediumBaseCount++
    
    if (diff == BaseDifficulty.HARD)
      _base.m_icon = CreateMinimapIcon(alignedPos.x, alignedPos.y, BASE_HARD_COLOR.red, BASE_HARD_COLOR.green, BASE_HARD_COLOR.blue, BASE_MODEL_PATH, BASE_FOG_STATE)
      g_hardBaseIcons[g_hardBaseCount] = _base.m_icon
      g_hardBaseCount++

    SetMinimapIconVisible(_base.m_icon, false)

    g_bases.add(_base)
    g_basesClosest.add(_base)
    g_basesFurthest.add(_base)

    return _base

  // --------------------------------------------------------------------------
  /** Gets the base closest to any invalidating units */
  static function getClosestSpawnPoint() returns optionalVec2
    var result = optionalVec2(false, ZERO2, "")
    real closestDD = REAL_MAX
    for b in g_bases
      if (b.m_dd < closestDD)
        closestDD = b.m_dd
        result.hasValue = true
        result.value = b.getTransform().getWorldPosition().toVec2()
    return result

  // --------------------------------------------------------------------------
  /** Gets a maximum of N bases sorted in descending order by distance to the nearest invalidating unit where N is the size of the CircularBuffer. */
  static function getClosestSpawnPoints(int count, SpawnPointCollection outSpawnPoints) returns int
    var n = 0
    while (n < count and n < g_basesClosest.size())
      outSpawnPoints.pushPoint(g_basesClosest.get(n).getTransform().getWorldPosition().toVec2())
      n++
    return n

  // --------------------------------------------------------------------------
  /** Gets the base furthest away from any invalidating units */
  static function getFurthestSpawnPoint() returns optionalVec2
    var result = optionalVec2(false, ZERO2, "")
    real furthestDD = REAL_MIN
    for b in g_bases
      if (b.m_dd > furthestDD)
        furthestDD = b.m_dd
        result.hasValue = true
        result.value = b.getTransform().getWorldPosition().toVec2()
    return result

  // --------------------------------------------------------------------------
  /** Gets a maximum of N bases sorted in descending order by distance to the nearest invalidating unit where N is the size of the CircularBuffer. */
  static function getFurthestSpawnPoints(int count, SpawnPointCollection outSpawnPoints) returns int
    var n = 0
    while (n < count and n < g_basesFurthest.size())
      outSpawnPoints.pushPoint(g_basesFurthest.get(n).getTransform().getWorldPosition().toVec2())
      n++
    return n

// ============================================================================
public function showPlayerBases(player _player, real duration)
  showPlayerBases(_player, BaseDifficulty.ALL, duration)

// ============================================================================
public function showPlayerBases(player _player, BaseDifficulty difficulty, real duration)

  let playerId =_player.getId()

  // Hide all currently visible bases
  showPlayerBases(_player, false)

  // Show only the ones the player wanted to see
  showPlayerBases(_player, difficulty, true)

  var showTimerCallback = g_playerShowBasesTimers[playerId]
  if (showTimerCallback == null)
    let showTimer = getTimer()
    showTimerCallback = showTimer.doManual(duration, true) -> 
      g_playerShowBasesTimers[playerId] = null
      showPlayerBases(_player, false)
    g_playerShowBasesTimers[playerId] = showTimerCallback
  else
    showTimerCallback.restart(duration)

// ============================================================================
public function showPlayerBases(player _player, bool visible)
  showPlayerBases(_player, BaseDifficulty.ALL, visible)

// ============================================================================
public function showPlayerBases(player _player, BaseDifficulty difficulty, bool visible)

  if (difficulty == BaseDifficulty.EASY or difficulty == BaseDifficulty.ALL)
    for i = 0 to g_easyBaseCount - 1
      if (GetLocalPlayer() == _player)
        SetMinimapIconVisible(g_easyBaseIcons[i], visible)

  if (difficulty == BaseDifficulty.MEDIUM or difficulty == BaseDifficulty.ALL)
    for i = 0 to g_mediumBaseCount - 1
      if (GetLocalPlayer() == _player)
        SetMinimapIconVisible(g_mediumBaseIcons[i], visible)

  if (difficulty == BaseDifficulty.HARD or difficulty == BaseDifficulty.ALL)
    for i = 0 to g_hardBaseCount - 1
      if (GetLocalPlayer() == _player)
        SetMinimapIconVisible(g_hardBaseIcons[i], visible)

// ============================================================================
function unit.isBaseUnit() returns bool
  return this.getTypeId() == TlsUnitIds.baseEasy or
         this.getTypeId() == TlsUnitIds.baseMedium or
         this.getTypeId() == TlsUnitIds.baseHard

// ============================================================================
function update(Base b)
  let basePos = b.getTransform().getWorldPosition().toVec2()
  var closestDD = REAL_MAX
  for invalidatingUnit in g_invalidatingUnits
    let dd = invalidatingUnit.getPos().distanceToSq(basePos)
    if (dd < closestDD)
      closestDD = dd
  b.m_dd = closestDD

// ============================================================================
function updateAll()
  if (g_invalidatingUnits.isEmpty())
    for b in g_bases
      b.m_dd = REAL_MAX
  else
    for b in g_bases
      update(b)
    sort()

// ============================================================================
function updateNearby(vec2 pos)
  var updated = 0
  for b in g_bases
    let dd = pos.distanceToSq(b.getTransform().getWorldPosition().toVec2())
    if (b.m_dd == REAL_MAX or dd < b.m_dd)
      b.m_dd = dd
      updated++
  if (updated > 0)
    sort()

// ============================================================================
function sort()
  g_basesClosest.sort((a, b) -> a.m_dd < b.m_dd)
  g_basesFurthest.sort((a, b) -> a.m_dd > b.m_dd)

// ============================================================================
function registerInvalidatingUnit(unit invalidatingUnit)
  g_invalidatingUnits.addUnit(invalidatingUnit)
  updateNearby(invalidatingUnit.getPos())

// ============================================================================
function unregisterInvalidatingUnit(unit invalidatingUnit)
  g_invalidatingUnits.removeUnit(invalidatingUnit)
  updateNearby(invalidatingUnit.getPos())

// ============================================================================
function initialize()
  registerBases()
  sort()

  for p in g_PlayingHumanPlayers
    showPlayerBases(p, 60.0)

// ============================================================================
init

  onUnitIndex() () ->
    let indexingUnit = getIndexingUnit()
    if (indexingUnit.isHeadquarters())
      registerInvalidatingUnit(indexingUnit)

  onUnitDeindex() () ->
    let indexingUnit = getIndexingUnit()
    if (indexingUnit.isHeadquarters())
      unregisterInvalidatingUnit(indexingUnit)

  nullTimer(() -> initialize())