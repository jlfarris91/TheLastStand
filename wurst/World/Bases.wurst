package Bases
import TlsUnitIds
import ClosureTimers
import TimerUtils
import GroupUtils
import UnitIndexer
import Optional
import Vector
import SpawnPointCollection
import Transform

constant color BASE_EASY_COLOR = color(0, 255, 0)
constant color BASE_MEDIUM_COLOR = color(255, 255, 0)
constant color BASE_HARD_COLOR = color(255, 0, 0)
constant string BASE_MODEL_PATH = "UI\\Minimap\\MiniMap-CreepLoc-Small.mdl"
constant fogstate BASE_FOG_STATE = FOG_OF_WAR_FOGGED
  
group g_invalidatingUnits = CreateGroup()

Vector<Base> g_bases = new Vector<Base>()
Vector<Base> g_basesClosest = new Vector<Base>()
Vector<Base> g_basesFurthest = new Vector<Base>()

vec2 array g_easyBasePos
minimapicon array g_easyBaseIcons
int g_easyBaseCount

vec2 array g_mediumBasePos
minimapicon array g_mediumBaseIcons
int g_mediumBaseCount

vec2 array g_hardBasePos
minimapicon array g_hardBaseIcons
int g_hardBaseCount

int g_showBaseDebug = 0
CallbackManual array g_playerShowBasesTimers

// ============================================================================
public enum BaseDifficulty
  EASY
  MEDIUM
  HARD
  ALL

// ============================================================================
public class Base
  transform transform = IDENTITYT
  BaseDifficulty difficulty
  real dd = REAL_MAX
  minimapicon icon = null
  string name = ""

// ============================================================================
public abstract class Bases

  // --------------------------------------------------------------------------
  static function getEasyBaseCount() returns int
    return g_easyBaseCount

  // --------------------------------------------------------------------------
  static function getEasyBasePos(int index) returns vec2
    return g_easyBasePos[index]

  // --------------------------------------------------------------------------
  static function getMediumBaseCount() returns int
    return g_mediumBaseCount

  // --------------------------------------------------------------------------
  static function getMediumBasePos(int index) returns vec2
    return g_mediumBasePos[index]

  // --------------------------------------------------------------------------
  static function getHardBaseCount() returns int
    return g_hardBaseCount

  // --------------------------------------------------------------------------
  static function getHardBasePos(int index) returns vec2
    return g_hardBasePos[index]

  // --------------------------------------------------------------------------
  static function getBasePosition(int index) returns vec2
    return g_bases.get(index).transform.pos.toVec2()
  
  // --------------------------------------------------------------------------
  static function getBaseDifficulty(int index) returns BaseDifficulty
    return g_bases.get(index).difficulty

  // --------------------------------------------------------------------------
  /** Gets the base closest to any invalidating units */
  static function getClosestSpawnPoint() returns optionalVec2
    var result = optionalVec2(false, ZERO2, "")
    real closestDD = REAL_MAX
    for b in g_bases
      if (b.dd < closestDD)
        closestDD = b.dd
        result.hasValue = true
        result.value = b.transform.pos.toVec2()
    return result

  // --------------------------------------------------------------------------
  /** Gets a maximum of N bases sorted in descending order by distance to the nearest invalidating unit where N is the size of the CircularBuffer. */
  static function getClosestSpawnPoints(int count, SpawnPointCollection outSpawnPoints) returns int
    var n = 0
    while (n < count and n < g_basesClosest.size())
      outSpawnPoints.pushPoint(g_basesClosest.get(n).transform.pos.toVec2())
      n++
    return n

  // --------------------------------------------------------------------------
  /** Gets the base furthest away from any invalidating units */
  static function getFurthestSpawnPoint() returns optionalVec2
    var result = optionalVec2(false, ZERO2, "")
    real furthestDD = REAL_MIN
    for b in g_bases
      if (b.dd > furthestDD)
        furthestDD = b.dd
        result.hasValue = true
        result.value = b.transform.pos.toVec2()
    return result

  // --------------------------------------------------------------------------
  /** Gets a maximum of N bases sorted in descending order by distance to the nearest invalidating unit where N is the size of the CircularBuffer. */
  static function getFurthestSpawnPoints(int count, SpawnPointCollection outSpawnPoints) returns int
    var n = 0
    while (n < count and n < g_basesFurthest.size())
      outSpawnPoints.pushPoint(g_basesFurthest.get(n).transform.pos.toVec2())
      n++
    return n

// ============================================================================
public function showPlayerBases(player _player, real duration)
  showPlayerBases(_player, BaseDifficulty.ALL, duration)

// ============================================================================
public function showPlayerBases(player _player, BaseDifficulty difficulty, real duration)

  let playerId =_player.getId()

  // Hide all currently visible bases
  showPlayerBases(_player, false)

  // Show only the ones the player wanted to see
  showPlayerBases(_player, difficulty, true)

  var showTimerCallback = g_playerShowBasesTimers[playerId]
  if (showTimerCallback == null)
    let showTimer = getTimer()
    showTimerCallback = showTimer.doManual(duration, true) -> 
      g_playerShowBasesTimers[playerId] = null
      showPlayerBases(_player, false)
    g_playerShowBasesTimers[playerId] = showTimerCallback
  else
    showTimerCallback.restart(duration)

// ============================================================================
public function showPlayerBases(player _player, bool visible)
  showPlayerBases(_player, BaseDifficulty.ALL, visible)

// ============================================================================
public function showPlayerBases(player _player, BaseDifficulty difficulty, bool visible)

  if (difficulty == BaseDifficulty.EASY or difficulty == BaseDifficulty.ALL)
    for i = 0 to g_easyBaseCount - 1
      if (GetLocalPlayer() == _player)
        SetMinimapIconVisible(g_easyBaseIcons[i], visible)

  if (difficulty == BaseDifficulty.MEDIUM or difficulty == BaseDifficulty.ALL)
    for i = 0 to g_mediumBaseCount - 1
      if (GetLocalPlayer() == _player)
        SetMinimapIconVisible(g_mediumBaseIcons[i], visible)

  if (difficulty == BaseDifficulty.HARD or difficulty == BaseDifficulty.ALL)
    for i = 0 to g_hardBaseCount - 1
      if (GetLocalPlayer() == _player)
        SetMinimapIconVisible(g_hardBaseIcons[i], visible)

// ============================================================================
function unit.isBaseUnit() returns bool
  return this.getTypeId() == TlsUnitIds.baseEasy or
         this.getTypeId() == TlsUnitIds.baseMedium or
         this.getTypeId() == TlsUnitIds.baseHard

// ============================================================================
function indexBaseUnit(unit baseUnit)

  let baseUnitId = baseUnit.getTypeId()
  let unitPos = baseUnit.getPos()

  var b = new Base()
  b.transform = baseUnit.getTransform()
  
  if (baseUnitId == TlsUnitIds.baseEasy)
    b.difficulty = BaseDifficulty.EASY
    b.icon = CreateMinimapIcon(unitPos.x, unitPos.y, BASE_EASY_COLOR.red, BASE_EASY_COLOR.green, BASE_EASY_COLOR.blue, BASE_MODEL_PATH, BASE_FOG_STATE)
    g_easyBaseIcons[g_easyBaseCount] = b.icon
    g_easyBaseCount++
  
  if (baseUnitId == TlsUnitIds.baseMedium)
    b.difficulty = BaseDifficulty.MEDIUM
    b.icon = CreateMinimapIcon(unitPos.x, unitPos.y, BASE_MEDIUM_COLOR.red, BASE_MEDIUM_COLOR.green, BASE_MEDIUM_COLOR.blue, BASE_MODEL_PATH, BASE_FOG_STATE)
    g_mediumBaseIcons[g_mediumBaseCount] = b.icon
    g_mediumBaseCount++
  
  if (baseUnitId == TlsUnitIds.baseHard)
    b.difficulty = BaseDifficulty.HARD
    b.icon = CreateMinimapIcon(unitPos.x, unitPos.y, BASE_HARD_COLOR.red, BASE_HARD_COLOR.green, BASE_HARD_COLOR.blue, BASE_MODEL_PATH, BASE_FOG_STATE)
    g_hardBaseIcons[g_hardBaseCount] = b.icon
    g_hardBaseCount++

  g_bases.add(b)
  g_basesClosest.add(b)
  g_basesFurthest.add(b)

  if (b.icon != null)
    baseUnit.remove()
    SetMinimapIconVisible(b.icon, false)

// ============================================================================
function indexAllBaseUnits()
  let temp = getGroup()
  temp.enumUnitsAll(null)
  for _unit in temp
    if (_unit.isBaseUnit())
      indexBaseUnit(_unit)
  temp.release()

// ============================================================================
function update(Base b)
  let basePos = b.transform.pos.toVec2()
  var closestDD = REAL_MAX
  for invalidatingUnit in g_invalidatingUnits
    let dd = invalidatingUnit.getPos().distanceToSq(basePos)
    if (dd < closestDD)
      closestDD = dd
  b.dd = closestDD

// ============================================================================
function updateAll()
  if (g_invalidatingUnits.isEmpty())
    for b in g_bases
      b.dd = REAL_MAX
  else
    for b in g_bases
      update(b)
    sort()

// ============================================================================
function updateNearby(vec2 pos)
  var updated = 0
  for b in g_bases
    let dd = pos.distanceToSq(b.transform.pos.toVec2())
    if (b.dd == REAL_MAX or dd < b.dd)
      b.dd = dd
      updated++
  if (updated > 0)
    sort()

// ============================================================================
function sort()
  g_basesClosest.sort((a, b) -> a.dd < b.dd)
  g_basesFurthest.sort((a, b) -> a.dd > b.dd)

// ============================================================================
function registerInvalidatingUnit(unit invalidatingUnit)
  g_invalidatingUnits.addUnit(invalidatingUnit)
  updateNearby(invalidatingUnit.getPos())

// ============================================================================
function unregisterInvalidatingUnit(unit invalidatingUnit)
  g_invalidatingUnits.removeUnit(invalidatingUnit)
  updateNearby(invalidatingUnit.getPos())

// ============================================================================
function initialize()
  indexAllBaseUnits()
  sort()

// ============================================================================
function updateBaseDebug()

// ============================================================================
init

  onUnitIndex() () ->
    let indexingUnit = getIndexingUnit()
    if (indexingUnit.isCampHeadquarters())
      registerInvalidatingUnit(indexingUnit)

  onUnitDeindex() () ->
    let indexingUnit = getIndexingUnit()
    if (indexingUnit.isCampHeadquarters())
      unregisterInvalidatingUnit(indexingUnit)

  nullTimer(() -> initialize())