package MapEvents
import Transform
import HashMap
import Quaternion
import TerrainUtils
import Vector
import Preload
import GroupExtensions
import GroupUtils
import LinkedList
import initlater MapEventsInit
import TlsUnitIds
import LootableTypes

LinkedList<MapEventTemplate> g_mapEventTemplates = new LinkedList<MapEventTemplate>()
location g_tempLoc = Location(0, 0)
destructable array g_enumDestructables
int g_enumDestructablesCount
boolexpr g_filterUnitIsLootable = Condition(function filterUnitIsLootable)

// ============================================================================
public class MapEventTemplate

  private string m_id
  private IterableMap<int, Vector<MapEventUnitSpawner>> m_unitSpawnersByTypeId = new IterableMap<int, Vector<MapEventUnitSpawner>>()
  private Vector<MapEventUnitSpawner> m_unitSpawners
  private Vector<MapEventDestructableSpawner> m_destructableSpawners
  private Vector<MapEventAreaCleaner> m_areaCleaners
  private Vector<MapEventTileSpawner> m_tileSpawners

  // --------------------------------------------------------------------------
  construct(string id, int unitSpawnerCapacity, int destructableSpawnerCapacity, int tileSpawnerCapacity)
    m_id = id
    m_unitSpawners = new Vector<MapEventUnitSpawner>(unitSpawnerCapacity)
    m_destructableSpawners = new Vector<MapEventDestructableSpawner>(destructableSpawnerCapacity)
    m_areaCleaners = new Vector<MapEventAreaCleaner>()
    m_tileSpawners = new Vector<MapEventTileSpawner>(tileSpawnerCapacity)

    g_mapEventTemplates.add(this)

  // --------------------------------------------------------------------------
  ondestroy

    g_mapEventTemplates.remove(this)
    
    for spawner in m_unitSpawners
      destroy spawner
    destroy m_unitSpawners
    m_unitSpawners = null
    
    for spawner in m_destructableSpawners
      destroy spawner
    destroy m_destructableSpawners
    m_destructableSpawners = null
    
    for spawner in m_tileSpawners
      destroy spawner
    destroy m_tileSpawners
    m_tileSpawners = null

    for key in m_unitSpawnersByTypeId
      destroy m_unitSpawnersByTypeId.get(key)
    destroy m_unitSpawnersByTypeId
    m_unitSpawnersByTypeId = null

  // --------------------------------------------------------------------------
  static function getTemplate(string id) returns MapEventTemplate
    for met in g_mapEventTemplates
      if (met.m_id == id)
        return met
    return null

  // --------------------------------------------------------------------------
  function getId() returns string
    return m_id

  // --------------------------------------------------------------------------
  function registerUnitSpawner(int unitTypeId, vec3 localPos, angle localYaw)
    let localTransform = transform(localPos, ZERO3, eulerToQuat(localYaw.radians(), 0.0, 0.0), 1.0)
    registerUnitSpawner(unitTypeId, localTransform)

  // --------------------------------------------------------------------------
  function registerUnitSpawner(int unitTypeId, transform localTransform)

    if (unitTypeId == TlsUnitIds.mapEventDestRemover128)
      registerAreaCleaner(128.0, localTransform)
      return

    if (unitTypeId == TlsUnitIds.mapEventDestRemover256)
      registerAreaCleaner(256.0, localTransform)
      return

    var spawnOnCreate = true

    if (unitTypeId == TlsUnitIds.mapEventUnitSpawner1 or
        unitTypeId == TlsUnitIds.mapEventUnitSpawner2)
      spawnOnCreate = false

    let unitSpawner = new MapEventUnitSpawner(unitTypeId, spawnOnCreate, localTransform)

    var unitSpawners = m_unitSpawnersByTypeId.get(unitTypeId)
    if (unitSpawners == null)
      unitSpawners = new Vector<MapEventUnitSpawner>()
      m_unitSpawnersByTypeId.put(unitTypeId, unitSpawners)

    unitSpawners.add(unitSpawner)

    m_unitSpawners.add(unitSpawner)

    // Add to preloader so we don't get a hitch when spawning the map event
    Preload.registerUnitTypeId(unitTypeId)

  // --------------------------------------------------------------------------
  function registerDestSpawner(int destructableTypeId, int variation, vec3 localPos, angle localYaw, real localScale)
    let localTransform = transform(localPos, ZERO3, eulerToQuat(localYaw.radians(), 0.0, 0.0), localScale)
    registerDestSpawner(destructableTypeId, variation, localTransform)

  // --------------------------------------------------------------------------
  function registerDestSpawner(int destructableTypeId, int variation, transform localTransform)
    m_destructableSpawners.add(new MapEventDestructableSpawner(destructableTypeId, variation, true, localTransform))
    
    // Add to preloader so we don't get a hitch when spawning the map event
    Preload.registerDestructableTypeId(destructableTypeId, variation)

  // --------------------------------------------------------------------------
  function registerAreaCleaner(real radius, vec2 localPos)
    let localTransform = transform(localPos.toVec3(), ZERO3, IDENTITYQ, 1.0)
    registerAreaCleaner(radius, localTransform)

  // --------------------------------------------------------------------------
  function registerAreaCleaner(real radius, transform localTransform)
    m_areaCleaners.add(new MapEventAreaCleaner(radius, localTransform))

  // --------------------------------------------------------------------------
  function registerTileSpawner(int tilesetId, int variation, int localTileCornerX, int localTileCornerY)
    let localPos = vec3(localTileCornerX * 128.0, localTileCornerY * 128.0, 0.0)
    let localTransform = transform(localPos, ZERO3, IDENTITYQ, 1.0)
    registerTileSpawner(tilesetId, variation, localTransform)

  // --------------------------------------------------------------------------
  function registerTileSpawner(int tilesetId, int variation, transform localTransform)
    m_tileSpawners.add(new MapEventTileSpawner(tilesetId, variation, localTransform))

  // --------------------------------------------------------------------------
  function getUnitSpawnerCount() returns int
    return m_unitSpawners.size()

  // --------------------------------------------------------------------------
  function getUnitSpawner(int index) returns MapEventUnitSpawner
    return m_unitSpawners.get(index)

  // --------------------------------------------------------------------------
  function getUnitSpawnerByTypeIdCount(int unitTypeId) returns int
    let unitSpawners = m_unitSpawnersByTypeId.get(unitTypeId)
    return unitSpawners != null ? unitSpawners.size() : 0

  // --------------------------------------------------------------------------
  function getUnitSpawnerByTypeId(int unitTypeId, int index) returns MapEventUnitSpawner
    let unitSpawners = m_unitSpawnersByTypeId.get(unitTypeId)
    return unitSpawners != null ? unitSpawners.get(index) : null

  // --------------------------------------------------------------------------
  function getDestSpawnerCount() returns int
    return m_destructableSpawners.size()

  // --------------------------------------------------------------------------
  function getDestSpawner(int index) returns MapEventDestructableSpawner
    return m_destructableSpawners.get(index)

  // --------------------------------------------------------------------------
  function getDestRemoverCount() returns int
    return m_areaCleaners.size()

  // --------------------------------------------------------------------------
  function getDestRemover(int index) returns MapEventAreaCleaner
    return m_areaCleaners.get(index)

  // --------------------------------------------------------------------------
  function getTileSpawnerCount() returns int
    return m_tileSpawners.size()

  // --------------------------------------------------------------------------
  function getTileSpawner(int index) returns MapEventTileSpawner
    return m_tileSpawners.get(index)

  // --------------------------------------------------------------------------
  function create(player owner, transform worldTransform) returns MapEventInstance
    var gridAlignedWorldTransform = worldTransform
    gridAlignedWorldTransform.pos.x = (gridAlignedWorldTransform.pos.x / 128.0).floor() * 128.0
    gridAlignedWorldTransform.pos.y = (gridAlignedWorldTransform.pos.y / 128.0).floor() * 128.0
    let instance = new MapEventInstance(this, gridAlignedWorldTransform)
    instance.spawn(owner)
    return instance

// ============================================================================
public class MapEventInstance
  private transform m_worldTransform
  private MapEventTemplate m_template
  private group m_spawnedUnits
  private Vector<destructable> m_spawnedDestructables
  private Vector<MapEventAreaCleanerInstance> m_spawnedRemovers
  private Vector<MapEventTileInstance> m_spawnedTiles

  // --------------------------------------------------------------------------
  construct(MapEventTemplate template, transform worldTransform)
    m_template = template
    m_worldTransform = worldTransform

  // --------------------------------------------------------------------------
  ondestroy
    cleanup()

  // --------------------------------------------------------------------------
  function getTemplate() returns MapEventTemplate
    return m_template

  // --------------------------------------------------------------------------
  function getWorldTransform() returns transform
    return m_worldTransform

  // --------------------------------------------------------------------------
  function spawn(player owner)

    cleanup()

    let destRemoverCount = m_template.getDestRemoverCount()
    m_spawnedRemovers = new Vector<MapEventAreaCleanerInstance>(destRemoverCount)
    for i = 0 to destRemoverCount - 1
      let destRemover = m_template.getDestRemover(i)
      let instance = destRemover.spawn(m_worldTransform)
      if (instance != null)
        m_spawnedRemovers.add(instance)

    let destSpawnerCount = m_template.getDestSpawnerCount()
    m_spawnedDestructables = new Vector<destructable>(destSpawnerCount)
    for i = 0 to destSpawnerCount - 1
      let destSpawner = m_template.getDestSpawner(i)
      let spawnedDest = destSpawner.spawn(m_worldTransform)
      if (spawnedDest != null)
        m_spawnedDestructables.add(spawnedDest)

    let tileSpawnerCount = m_template.getTileSpawnerCount()
    m_spawnedTiles = new Vector<MapEventTileInstance>(tileSpawnerCount)
    for i = 0 to tileSpawnerCount - 1
      let tileSpawner = m_template.getTileSpawner(i)
      m_spawnedTiles.add(tileSpawner.spawn(m_worldTransform))

    let unitSpawnerCount = m_template.getUnitSpawnerCount()
    m_spawnedUnits = getGroup()
    for i = 0 to unitSpawnerCount - 1
      let unitSpawner = m_template.getUnitSpawner(i)
      if (unitSpawner.getSpawnOnCreate())
        let spawnedUnit = unitSpawner.spawn(owner, m_worldTransform)
        if (spawnedUnit != null)
          m_spawnedUnits.addUnit(spawnedUnit)

  // --------------------------------------------------------------------------
  function cleanup()

    if (m_spawnedDestructables != null)
      for dest in m_spawnedDestructables
        dest.remove()
      destroy m_spawnedDestructables
      m_spawnedDestructables = null

    if (m_spawnedTiles != null)
      for tile in m_spawnedTiles
        destroy tile
      destroy m_spawnedTiles
      m_spawnedTiles = null

    if (m_spawnedUnits != null)
      m_spawnedUnits.refresh()
      for u in m_spawnedUnits
        u.remove()
      m_spawnedUnits.release()
      m_spawnedUnits = null

    if (m_spawnedRemovers != null)
      for remover in m_spawnedRemovers
        destroy remover
      destroy m_spawnedRemovers
      m_spawnedRemovers = null

// ============================================================================
public class MapEventUnitSpawner
  private int m_unitTypeId
  private transform m_localTransform
  private bool m_spawnOnCreate

  // --------------------------------------------------------------------------
  construct(int unitTypeId, bool spawnOnCreate, transform localTransform)
    m_unitTypeId = unitTypeId
    m_spawnOnCreate = spawnOnCreate
    m_localTransform = localTransform
  
  // --------------------------------------------------------------------------
  function getSpawnOnCreate() returns bool
    return m_spawnOnCreate

  // --------------------------------------------------------------------------
  function spawn(player owner, transform parentTransform) returns unit
    let worldTransform = parentTransform.concat(m_localTransform)
    let worldRotEuler = worldTransform.rot.toEuler()
    return createUnit(
      owner,
      m_unitTypeId,
      worldTransform.pos,
      worldRotEuler.z.asAngleRadians())

// ============================================================================
class MapEventDestructableSpawner
  private int m_destructableTypeId
  private int m_variation
  private transform m_localTransform
  private bool m_spawnOnCreate

  // --------------------------------------------------------------------------
  construct(int destructableTypeId, int variation, bool spawnOnCreate, transform localTransform)
    m_destructableTypeId = destructableTypeId
    m_variation = variation
    m_spawnOnCreate = spawnOnCreate
    m_localTransform = localTransform
  
  // --------------------------------------------------------------------------
  function getSpawnOnCreate() returns bool
    return m_spawnOnCreate

  // --------------------------------------------------------------------------
  function spawn(transform parentTransform) returns destructable
    let worldTransform = parentTransform.concat(m_localTransform)
    let worldRotEuler = worldTransform.rot.toEuler()
    return createDestructable(
      m_destructableTypeId,
      worldTransform.pos,
      worldRotEuler.z.asAngleRadians(),
      worldTransform.scale,
      m_variation)

// ============================================================================
function enumDestructablesInCircle()
  let enumDest = GetEnumDestructable()
  if (enumDest.isAliveTrick())
    g_enumDestructables[g_enumDestructablesCount] = enumDest
    g_enumDestructablesCount++

// ============================================================================
function filterUnitIsLootable() returns bool
  let filterUnit = GetFilterUnit()
  return filterUnit.isLootable()

// ============================================================================
class MapEventAreaCleaner
  private real m_radius
  private transform m_localTransform

  // --------------------------------------------------------------------------
  construct(real radius, transform localTransform)
    m_radius = radius
    m_localTransform = localTransform

  // --------------------------------------------------------------------------
  function spawn(transform parentTransform) returns MapEventAreaCleanerInstance
    let worldTransform = parentTransform.concat(m_localTransform)
    let instance =  new MapEventAreaCleanerInstance(m_radius, worldTransform)
    instance.redo()
    return instance

// ============================================================================
class MapEventAreaCleanerInstance
  private real m_radius
  private transform m_worldTransform
  private LinkedList<destructable> m_destructables
  private group m_units

  // --------------------------------------------------------------------------
  construct(real radius, transform worldTransform)
    m_radius = radius
    m_worldTransform = worldTransform

  // --------------------------------------------------------------------------
  ondestroy
    undo()

  // --------------------------------------------------------------------------
  function redo()

    // Enum destructables in radius
    MoveLocation(g_tempLoc, m_worldTransform.pos.x, m_worldTransform.pos.y)
    g_enumDestructablesCount = 0
    EnumDestructablesInCircleBJ(m_radius, g_tempLoc, function enumDestructablesInCircle)

    if (g_enumDestructablesCount > 0)
    //{
      m_destructables = new LinkedList<destructable>()

      for i = 0 to g_enumDestructablesCount - 1
        let dest = g_enumDestructables[i]
        dest.show(false)
        m_destructables.add(dest)
    //}

    m_units = getGroup()
    m_units.enumUnitsInRange(m_worldTransform.pos.toVec2(), m_radius, g_filterUnitIsLootable)
    for u in m_units
      u.hide()

  // --------------------------------------------------------------------------
  function undo()
    if (m_destructables != null)
      for dest in m_destructables
        dest.show(true)
      destroy m_destructables
      m_destructables = null

    if (m_units != null)
      for u in m_units
        u.show()
      m_units.release()
      m_units = null

// ============================================================================
class MapEventTileSpawner
  private int m_tilesetId
  private int m_variation
  private transform m_localTransform

  // --------------------------------------------------------------------------
  construct(int tilesetId, int variation, transform localTransform)
    m_tilesetId = tilesetId
    m_variation = variation
    m_localTransform = localTransform

  // --------------------------------------------------------------------------
  function spawn(transform parentTransform) returns MapEventTileInstance
    let worldTransform = parentTransform.concat(m_localTransform)
    let tile = worldTransform.pos.toVec2().getTile()
    let tileInstance = new MapEventTileInstance(tile, m_tilesetId, m_variation)
    tileInstance.redo()
    return tileInstance

// ============================================================================
public class MapEventTileInstance
  private tile m_tile
  private int m_tilesetId
  private int m_variation
  private int m_prevTilesetId
  private int m_prevVariation

  // --------------------------------------------------------------------------
  construct(tile tile, int tilesetId, int variation)
    m_tile = tile
    m_tilesetId = tilesetId
    m_variation = variation

  // --------------------------------------------------------------------------
  ondestroy
    undo()

  // --------------------------------------------------------------------------
  function redo()
    m_prevTilesetId = m_tile.getType()
    m_prevVariation = m_tile.getVariance()
    m_tile.setType(m_tilesetId, m_variation)

  // --------------------------------------------------------------------------
  function undo()
    m_tile.setType(m_prevTilesetId, m_prevVariation)

// ============================================================================
init

  // This comes from the generated MapEventsInit.wurst file
  registerMapEventTemplates()