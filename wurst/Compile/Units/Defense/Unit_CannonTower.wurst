package Unit_CannonTower
import TlsBuildingDefinition
import BuildingUndeadTarget
import GameConstants
import TlsUpgradeIds
import TlsUnitDefinitionBuilder
import Range
import Dice
import Math
import UnitMetadata
import Events
import WorkstationComponent
import ObjectIdGenerator
import AbilityObjEditing
import UnitPropertiesComponent
import TlsUpgradeDefinition
import Icons
import RealExtensions
import Combat

public TlsBuildingDefinition array[3] g_cannonTowerDefinition

constant real array[3]          CANNON_TOWER_ATTACK_COOLDOWN               = [2.5, 2.0, 1.5]
constant int                    CANNON_TOWER_UPGRADE_LEVELS                = 6

constant stdDmgInputs           CANNON_TOWER_STD_DMG_INPUTS                = stdDmgInputs(
  /* Levels               */    3,
  /* DPS Scalar Base      */    0.3,
  /* DPS Scalar Inc       */    0.05,
  /* Game Progress Start  */    0.2,
  /* Operator Levels      */    10,
  /* Operator Weight      */    1,
  /* Upgrade Levels       */    CANNON_TOWER_UPGRADE_LEVELS,
  /* Upgrade Weight       */    2,
  /* Follow Through       */    1,
  /* Attack Damage Scalar */    getDamageScalar(ZOMBIE_TIER1_ARMOR_TYPE, AttackType.Siege)
)
constant stdDmgOutputs array[3] CANNON_TOWER_STD_DMG_OUTPUTS               = [
  compiletime(calculateStandardDamageValues(CANNON_TOWER_STD_DMG_INPUTS, 0, CANNON_TOWER_ATTACK_COOLDOWN[0])),
  compiletime(calculateStandardDamageValues(CANNON_TOWER_STD_DMG_INPUTS, 1, CANNON_TOWER_ATTACK_COOLDOWN[1])),
  compiletime(calculateStandardDamageValues(CANNON_TOWER_STD_DMG_INPUTS, 2, CANNON_TOWER_ATTACK_COOLDOWN[2]))
]

constant string array[3]        CANNON_TOWER_NAME                          = ["Cannon Tower I", "Cannon Tower II", "Cannon Tower III"]
constant int                    ACTIVE_SIGHT_ABILITY_ID                    = compiletime(ABIL_ID_GEN.next())
constant int array[3]           CANNON_TOWER_ACTIVE_ICON_ABILITY_ID        = [compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next())]
constant int array[3]           CANNON_TOWER_INACTIVE_ICON_ABILITY_ID      = [compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next()), compiletime(ABIL_ID_GEN.next())]


// ============================================================================
public class CannonTowerDefinition extends TlsBuildingDefinition
  construct(int newId)
    super(newId, UnitIds.cannontower)
    addUndeadTargetBuildingDefinition(newId, false)
    setName("Cannon Tower")
    setButtonPositionX(2)
    setButtonPositionY(0)
    setDeathTimeseconds(1.0)
    //setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNWorkbench.dds")
    //setModelFile("Units\\Workbench\\Workbench.mdx")
    setScalingValue(1.0)
    setSelectionScale(3.0)
    setTintingColorRed(200)
    setTintingColorBlue(200)
    setTintingColorGreen(200)
    setPathingMap(BUILDING_TOWER_PATH_MAP)
    setPlacementRequires("unbuildable,unwalkable")
    setHideMinimapDisplay(true)
    setBuildTime(BUILD_TIME_BUILDING_MEDIUM)
    setRepairTime(REPAIR_TIME_BUILDING_MEDIUM)
    setSightRadiusDay(STRUCTURE_LARGE_SIGHT_RANGE_DAY)
    setSightRadiusNight(STRUCTURE_LARGE_SIGHT_RANGE_NIGHT)
    setRequirements("")
    setUpgradesUsed(commaList(TlsUpgradeIds.campDefense, TlsUpgradeIds.cannonTowerAttackDamage))
    setNormalAbilities(commaList(
      TlsAbilityIds.recycle,
      TlsAbilityIds.blightDispelSmall,
      TlsAbilityIds.workstationLoadUnit,
      TlsAbilityIds.workstationUnloadUnit,
      TlsAbilityIds.inventory2Slots))
    setUnitsTrained("")
    setUpgradesTo("")

    setAttack1TargetsAllowed("ground,structure")
    setAttack1AreaofEffectTargets("ground,structure,enemy")
    setAttack1AttackType(AttackType.Siege)
    setAttacksEnabled(1)
    
    setHitPointsMaximumBase(500)
    setArmorType(ArmorType.Fortified)
    setDefenseBase(0)

    setGoldCost(2)
    setLumberCost(600)
    this.setCommonBuildingProperties()

    setHotkey("C")
    setTooltipBasic("Build Cannon Tower")

  // --------------------------------------------------------------------------
  static function getAttack1Dps(int towerLevel, int upgradeLevel, int operatorLevel) returns rangeReal
    let baseDmg = CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].dice.base
    let finalDmg = baseDmg
      + upgradeLevel * CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].damageDelta * CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].upScalar
      + operatorLevel * CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].damageDelta * CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].opScalar
    let cooldown = getAttack1CooldownTime(towerLevel)
    return rangeReal(baseDmg.toReal(), finalDmg) * cooldown

  // --------------------------------------------------------------------------
  static function getUpgradeBonusDamageScalar(int towerLevel, int upgradeLevel) returns real
    return upgradeLevel * CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].upScalar / CANNON_TOWER_STD_DMG_INPUTS.upLevels

  // --------------------------------------------------------------------------
  static function getOperatorBonusDamageScalar(int towerLevel, int operatorLevel) returns real
    return operatorLevel * CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].opScalar / CANNON_TOWER_STD_DMG_INPUTS.opLevels

  // --------------------------------------------------------------------------
  static function getAttack1DamageDice(int towerLevel) returns dice
    return CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].dice

  // --------------------------------------------------------------------------
  static function getAttack1CooldownTime(int towerLevel) returns real
    return CANNON_TOWER_ATTACK_COOLDOWN[clamp(towerLevel, 0, 2)]

  // --------------------------------------------------------------------------
  static function getAttack1OperatorAttackBonus(int towerLevel, int operatorLevel) returns int
    return (CANNON_TOWER_STD_DMG_OUTPUTS[towerLevel].damageDelta * getOperatorBonusDamageScalar(towerLevel, operatorLevel)).floor()

// ============================================================================
@compiletime function createObjectDefinitions()

  g_cannonTowerDefinition[0] = new CannonTowerDefinition(TlsUnitIds.cannonTowers[0])
    ..setName(CANNON_TOWER_NAME[0])
    ..setTooltipBasic("Build " + CANNON_TOWER_NAME[0])
    ..setScalingValue(1.0)
    ..addUnitClass(TlsUnitClassification.BUILDING)
    ..addUnitClass(TlsUnitClassification.RANGED)
    ..addUnitClass(TlsUnitClassification.WORKSTATION)
    ..setAttack1CooldownTime(CannonTowerDefinition.getAttack1CooldownTime(0))
    ..setAttack1DamageDice(CannonTowerDefinition.getAttack1DamageDice(0))
    ..setAcquisitionRange(800)
    ..setAttack1Range(800)
    ..setHitPointsMaximumBase(2000)
    ..setUpgradesTo(commaList(TlsUnitIds.cannonTowers[1]))
    ..setGoldCost(2)
    ..setLumberCost(600)
    ..build("A tall tower fitted with a cannon that can fire a variable distance when operated by a survivor.",
      tooltipBuilder -> begin
        let workstationItem = new WorkstationOperatorBonusesTooltipItem()
        ..addValue("Increased attack damage")
        tooltipBuilder.addItem(workstationItem)
      end)

  g_cannonTowerDefinition[1] = new CannonTowerDefinition(TlsUnitIds.cannonTowers[1])
    ..setName(CANNON_TOWER_NAME[1])
    ..setTooltipBasic("Upgrade to " + CANNON_TOWER_NAME[1])
    ..setScalingValue(1.1)
    ..addUnitClass(TlsUnitClassification.BUILDING)
    ..addUnitClass(TlsUnitClassification.RANGED)
    ..addUnitClass(TlsUnitClassification.WORKSTATION)
    ..setAttack1CooldownTime(CannonTowerDefinition.getAttack1CooldownTime(1))
    ..setAttack1DamageDice(CannonTowerDefinition.getAttack1DamageDice(1))
    ..setAcquisitionRange(1000)
    ..setAttack1Range(1000)
    ..setHitPointsMaximumBase(3000)
    ..setUpgradesTo(commaList(TlsUnitIds.cannonTowers[2]))
    ..setRequirements(commaList(TlsUnitIds.workshop))
    ..setButtonPositionX(0)
    ..setButtonPositionY(1)
    ..setGoldCost(4)
    ..setLumberCost(1200)
    ..build("A slightly taller tower fitted with a cannon that can fire a variable distance when operated by a survivor.",
      tooltipBuilder -> begin
        let workstationItem = new WorkstationOperatorBonusesTooltipItem()
        ..addValue("Increased attack damage")
        tooltipBuilder.addItem(workstationItem)
      end)

  g_cannonTowerDefinition[2] = new CannonTowerDefinition(TlsUnitIds.cannonTowers[2])
    ..setName(CANNON_TOWER_NAME[2])
    ..setTooltipBasic("Upgrade to " + CANNON_TOWER_NAME[2])
    ..setScalingValue(1.2)
    ..addUnitClass(TlsUnitClassification.BUILDING)
    ..addUnitClass(TlsUnitClassification.RANGED)
    ..addUnitClass(TlsUnitClassification.WORKSTATION)
    ..setAttack1CooldownTime(CannonTowerDefinition.getAttack1CooldownTime(2))
    ..setAttack1DamageDice(CannonTowerDefinition.getAttack1DamageDice(2))
    ..setAcquisitionRange(1200)
    ..setAttack1Range(1200)
    ..setHitPointsMaximumBase(4000)
    ..setRequirements(commaList(TlsUnitIds.workshop))
    ..setButtonPositionX(0)
    ..setButtonPositionY(1)
    ..setGoldCost(8)
    ..setLumberCost(2400)
    ..build("A slightly taller tower fitted with a cannon that can fire a variable distance when operated by a survivor.",
      tooltipBuilder -> begin
        let workstationItem = new WorkstationOperatorBonusesTooltipItem()
        ..addValue("Increased attack damage")
        tooltipBuilder.addItem(workstationItem)
      end)

  new AbilityDefinitionSightBonus(ACTIVE_SIGHT_ABILITY_ID)
  ..setSightRangeBonus(1, 800)

  for i = 0 to 2
    createWorkstationAbilities(i)

  new TlsUpgradeDefinition(TlsUpgradeIds.cannonTowerAttackDamage, CANNON_TOWER_UPGRADE_LEVELS)
    ..setButtonPositionX(2)
    ..setButtonPositionY(1)
    ..addEffectAttackDiceBonus(1, 1)
    ..setClass(UpgradeClass.Artillery)
    ..setGoldCostBase(0)
    ..setGoldCostIncrement(1)
    ..setLumberCostBase(300)
    ..setLumberCostIncrement(300)
    ..setRace(Race.Human)
    ..setTimeBase(30)
    ..setTimeIncrement(5)
    ..presetIcon(lvl -> Icons.bTNCannonTower)
    ..setRequirements(1, "")
    ..setRequirements(2, "")
    ..setRequirements(3, "")
    ..setRequirements(4, "")
    ..setRequirements(5, "")
    ..presetName(lvl -> "Cannon Tower Attack Damage")
    ..presetTooltip(lvl -> "Upgrade Cannon Tower Attack Damage")
    ..setTooltipExtended(1, "Increases the attack damage of Cannon Towers.")
    ..setTooltipExtended(2, "Further increases the attack damage of Cannon Towers.")
    ..setTooltipExtended(3, "Further increases the attack damage of Cannon Towers.")
    ..setTooltipExtended(4, "Further increases the attack damage of Cannon Towers.")
    ..setTooltipExtended(5, "Further increases the attack damage of Cannon Towers.")
    ..setTooltipExtended(6, "Further increases the attack damage of Cannon Towers.")

// ============================================================================
function createWorkstationAbilities(int towerLevel)
  let activeWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(true)..setDescription(g_cannonTowerDefinition[towerLevel].getTooltipExtended())
  let inactiveWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(false)..setDescription(g_cannonTowerDefinition[towerLevel].getTooltipExtended())

  let properties = new WorkstationOperatorLevelBonusesTooltipItem()
  ..addValue(lvl -> "Damage increased by {0}".format(CannonTowerDefinition.getOperatorBonusDamageScalar(towerLevel, lvl).toPercentageString01()))
  activeWorkstationIconTooltipBuilder.addItem(properties)

  new AbilityActiveWorkstationIconDefinition(CANNON_TOWER_ACTIVE_ICON_ABILITY_ID[towerLevel])
    ..setName(CANNON_TOWER_NAME[towerLevel])
    ..presetTooltipNormalExtended(lvl -> activeWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  new AbilityInactiveWorkstationIconDefinition(CANNON_TOWER_INACTIVE_ICON_ABILITY_ID[towerLevel])
    ..setName(CANNON_TOWER_NAME[towerLevel])
    ..presetTooltipNormalExtended(lvl -> inactiveWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  destroy activeWorkstationIconTooltipBuilder
  destroy inactiveWorkstationIconTooltipBuilder

// ============================================================================
public class CannonTowerComponent extends WorkstationAbilityComponent
  private _handle m_attackBonusAffector = INVALID_HANDLE

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  override protected function updateState()
    super.updateState()

    let ownerUnit = getOwnerUnit()
    let activated = isWorkstationActive()

    if (activated)
      ownerUnit.addAbility(ACTIVE_SIGHT_ABILITY_ID)
    else
      ownerUnit.removeAbility(ACTIVE_SIGHT_ABILITY_ID)

    ownerUnit.setFieldWeapon(UNIT_WEAPON_BF_ATTACKS_ENABLED, 0, activated)

    var towerLevel = 0

    switch (ownerUnit.getTypeId())
      case TlsUnitIds.cannonTowers[1]
        towerLevel = 1
      case TlsUnitIds.cannonTowers[2]
        towerLevel = 2

    var operatorLevel = 1

    if (activated)
      let workstationComponent = getOwner().getWorkstationComponent()
      if (workstationComponent != null)
        operatorLevel = workstationComponent.getMaxOperatorLevel()

    let attackBonusProp = ownerUnit.getProperty(UnitProperty.ATTACK_BONUS)

    if (attackBonusProp != null and m_attackBonusAffector != INVALID_HANDLE)
      attackBonusProp.removeAffector(m_attackBonusAffector)
      m_attackBonusAffector = INVALID_HANDLE

    if (activated)
    //{
      if (attackBonusProp != null)
        m_attackBonusAffector = attackBonusProp.affectAdd(
          CannonTowerDefinition.getAttack1OperatorAttackBonus(towerLevel, operatorLevel).toReal())

      for i = 0 to 2
        ownerUnit.removeAbility(CANNON_TOWER_INACTIVE_ICON_ABILITY_ID[i])
      ownerUnit.addAbility(CANNON_TOWER_ACTIVE_ICON_ABILITY_ID[towerLevel])
      ownerUnit.setAbilityLevel(CANNON_TOWER_ACTIVE_ICON_ABILITY_ID[towerLevel], operatorLevel)
    //}
    else
      for i = 0 to 2
        ownerUnit.removeAbility(CANNON_TOWER_ACTIVE_ICON_ABILITY_ID[i])
      ownerUnit.addAbility(CANNON_TOWER_INACTIVE_ICON_ABILITY_ID[towerLevel])

// ============================================================================
public function IUnitMetadata.getCannonTowerComponent() returns CannonTowerComponent
  return this.getComponent(CannonTowerComponent.typeId) castTo CannonTowerComponent

// ============================================================================
public function IUnitMetadata.getOrAddCannonTowerComponent() returns CannonTowerComponent
  var component = this.getCannonTowerComponent()
  if (component == null)
    component = this.addComponent(new CannonTowerComponent(this)) castTo CannonTowerComponent
  return component

// ============================================================================
init
  createObjectDefinitions()

// ============================================================================
@test function asdf()

  let inputs = CANNON_TOWER_STD_DMG_INPUTS

  var cooldown = CANNON_TOWER_ATTACK_COOLDOWN[0]
  var outputs = CANNON_TOWER_STD_DMG_OUTPUTS[0]
  Log.info("dice: " + outputs.dice.toString())
  Log.info("upScalar: " + outputs.upScalar.toString() + " = " + (outputs.damageDelta * (outputs.upScalar / inputs.upLevels)).toString())
  Log.info("opScalar: " + outputs.opScalar.toString() + " = " + (outputs.damageDelta * (outputs.opScalar / inputs.opLevels)).toString())
  var final = (outputs.dice.base + outputs.damageDelta * outputs.upScalar + outputs.damageDelta * outputs.opScalar)
  Log.info("final: " + final.toString())
  Log.info("dps: " + (outputs.dice.base / cooldown).toString() + " -> " + (final / cooldown).toString())

  cooldown = CANNON_TOWER_ATTACK_COOLDOWN[1]
  outputs = CANNON_TOWER_STD_DMG_OUTPUTS[1]
  Log.info("")
  Log.info("dice: " + outputs.dice.toString())
  Log.info("upScalar: " + outputs.upScalar.toString() + " = " + (outputs.damageDelta * (outputs.upScalar / inputs.upLevels)).toString())
  Log.info("opScalar: " + outputs.opScalar.toString() + " = " + (outputs.damageDelta * (outputs.opScalar / inputs.opLevels)).toString())
  final = (outputs.dice.base + outputs.damageDelta * outputs.upScalar + outputs.damageDelta * outputs.opScalar)
  Log.info("final: " + final.toString())
  Log.info("dps: " + (outputs.dice.base / cooldown).toString() + " -> " + (final / cooldown).toString())

  cooldown = CANNON_TOWER_ATTACK_COOLDOWN[2]
  outputs = CANNON_TOWER_STD_DMG_OUTPUTS[2]
  Log.info("")
  Log.info("dice: " + outputs.dice.toString())
  Log.info("upScalar: " + outputs.upScalar.toString() + " = " + (outputs.damageDelta * (outputs.upScalar / inputs.upLevels)).toString())
  Log.info("opScalar: " + outputs.opScalar.toString() + " = " + (outputs.damageDelta * (outputs.opScalar / inputs.opLevels)).toString())
  final = (outputs.dice.base + outputs.damageDelta * outputs.upScalar + outputs.damageDelta * outputs.opScalar)
  Log.info("final: " + final.toString())
  Log.info("dps: " + (outputs.dice.base / cooldown).toString() + " -> " + (final / cooldown).toString())

  Log.info("")
  for i = 1 to 10
    Log.info("damage bonus " + i.toString() + ": " + CannonTowerDefinition.getAttack1OperatorAttackBonus(0, i).toString())

// ============================================================================
@test function asdfasdf()
  
  if (g_cannonTowerDefinition[0] == null)
    createObjectDefinitions()

  let activeWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(true)..setDescription(g_cannonTowerDefinition[0].getTooltipExtended())

  let properties = new WorkstationOperatorLevelBonusesTooltipItem()
  ..addValue(lvl -> "Damage increased by {0}".format(CannonTowerDefinition.getOperatorBonusDamageScalar(0, lvl).toPercentageString01(0)))
  activeWorkstationIconTooltipBuilder.addItem(properties)

  Log.info(g_cannonTowerDefinition[0].getTooltipExtended())

  for i = 1 to 10
    Log.info(activeWorkstationIconTooltipBuilder.getTooltipExtended(i))