package Unit_Gate
import UnitIds
import Math
import RegisterEvents
import Icons
import TlsAbilityIds
import TlsUnitIds
import UnitMetadata
import ObjectIdGenerator
import UnitObjEditing
import ObjectIds

// If there are any moveable units in the way when a gate rotates using the old
// rotate ability (which used ReplaceUnitTLS) the gate had a chance of
// literally jumping to a new position. This method uses upgrades instead
// which avoids the jumping bug but adds a ton of complexity as you can see.
// We create 1 gate unit for each permutation of open/closed and a unit
// for "rotate" open/closed which is so that the open/closed gate can upgradeT
// to the rotated equivalent and avoid using replace. After the gate succesfully
// upgrades to its "rotate" counterpart it is replaced with the regular unit.

// We need one unit each for the open and closed variations since the pathing maps change
// The gate_build unit is the one the builder can actually build

public class GateIds
  static constant int gate_build = compiletime(UNIT_ID_GEN.next())
  static constant int gate_0_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_0_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_45_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_45_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_90_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_90_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_135_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_135_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_180_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_180_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_225_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_225_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_270_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_270_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_315_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_315_closed = compiletime(UNIT_ID_GEN.next())

public function unit.isGate() returns bool
  return this.isOpenGate() or
        this.isOpenGate_Rotate() or
        this.isClosedGate() or
        this.isClosedGate_Rotate()

public function unit.isOpenGate() returns bool
  let unitId = this.getTypeId()
  return unitId == GateIds.gate_0_open or
        unitId == GateIds.gate_45_open or
        unitId == GateIds.gate_90_open or
        unitId == GateIds.gate_135_open or
        unitId == GateIds.gate_180_open or
        unitId == GateIds.gate_225_open or
        unitId == GateIds.gate_270_open or
        unitId == GateIds.gate_315_open

public function unit.isClosedGate() returns bool
  let unitId = this.getTypeId()
  return unitId == GateIds.gate_0_closed or
        unitId == GateIds.gate_45_closed or
        unitId == GateIds.gate_90_closed or
        unitId == GateIds.gate_135_closed or
        unitId == GateIds.gate_180_closed or
        unitId == GateIds.gate_225_closed or
        unitId == GateIds.gate_270_closed or
        unitId == GateIds.gate_315_closed

//=============================================================================
//
// Unit generation
//
//=============================================================================

abstract class BaseGateDefinition extends BuildingDefinition
  construct(int newId)
    super(newId, UnitIds.scouttower)
    this.setName("Gate")
    this.setTintingColorRed(150)
    this.setTintingColorGreen(150)
    this.setTintingColorBlue(150)
    this.setShadowTextureBuilding("")
    this.setButtonPositionX(0)
    this.setButtonPositionY(0)
    this.setDeathTimeseconds(0.83)
    this.setGroundTexture("")
    this.setSelectionScale(4.0)
    this.setScalingValue(0.4)
    this.setDeathType(0)
    this.setCollisionSize(0.0)
    this.setPlacementRequires("unwalkable")
    this.setBuildTime(1)
    this.setCanFlee(false)
    this.setGoldCost(0)
    this.setHideMinimapDisplay(true)
    this.setHitPointsMaximumBase(1000)
    this.setLumberCost(0)
    this.setRepairGoldCost(20)
    this.setRepairLumberCost(0)
    this.setRepairTime(10)
    this.setSightRadiusDay(400)
    this.setSightRadiusNight(200)
    this.setHotkey("G")
    this.setBuildTime(1) // Most gate variations are only buildable via upgrades
    this.setNormalAbilities(commaList(TlsAbilityIds.recycle))

class OpenGateDefinition extends BaseGateDefinition
  construct(int id, int angle)
    super(id)
    this.setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGate_Open.BLP")
    this.setModelFile("Units\\Gate3\\Gate_" + I2S(angle) + ".mdx")
    this.setPathingMap(getOpenGatePathMap(angle))

    let rotateGateId = getOpenGateId_Rotate(wrapMaxEx(angle + 45, 0, 360))
    let closedGateId = getClosedGateId(angle)
    this.setUpgradesTo(commaList(closedGateId, rotateGateId))

    this.setName("Gate Open " + I2S(angle))
    this.setTooltipBasic("Open |cffffcc00G|rate " + I2S(angle))
    this.setTooltipExtended("Open this gate")

class ClosedGateDefinition extends BaseGateDefinition
  construct(int id, int angle)
    super(id)
    this.setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGate.BLP")
    this.setModelFile("Units\\Gate3\\Gate_" + I2S(angle) + ".mdx")
    this.setPathingMap(getClosedGatePathMap(angle))
    
    let rotateGateId = getClosedGateId_Rotate(wrapMaxEx(angle + 45, 0, 360))
    let openGateId = getOpenGateId(angle)
    this.setUpgradesTo(commaList(openGateId, rotateGateId))

    this.setName("Gate Closed " + I2S(angle))
    this.setTooltipBasic("Close |cffffcc00G|rate " + I2S(angle))
    this.setTooltipExtended("Close this gate")

// This is the gate that is actually built by the builder
// Which is why it has a gold cost and a build time
class BuildGateDefinition extends ClosedGateDefinition
  construct()
    super(GateIds.gate_build, 0)
    this.setGoldCost(42)
    this.setBuildTime(1) // 25
    this.setName("Gate (Build)")
    this.setTooltipBasic("Build |cffffcc00G|rate")
    this.setTooltipExtended("Build a gate that can be opened and closed to allow or prevent access to your camp. The gate can be rotated.")

@compiletime
function createGateUnitVariations()
  new BuildGateDefinition()
  for angle = 0 to 315 step 45
    new OpenGateDefinition(getOpenGateId(angle), angle)
    new ClosedGateDefinition(getClosedGateId(angle), angle)
    new RotateOpenGateDefinition(getOpenGateId_Rotate(angle), angle)
    new RotateClosedGateDefinition(getClosedGateId_Rotate(angle), angle)

// TODO: delete this once gates are integrated with the regular builder unit
@compiletime
function createGateTestBuilder()
  new UnitDefinition('h999', UnitIds.peasant)
    ..setStructuresBuilt(commaList(GateIds.gate_build, TlsUnitIds.barricade))
    ..setNormalAbilities(commaList('Ahrp'))

//=============================================================================
//
// Internal
//
//=============================================================================

// This is only used internally and typically code will be dealing with
// non-rotated gates since the rotate gates only exist until the upgrade
// is finished
class RotateGateIds
  static constant int gate_build = compiletime(UNIT_ID_GEN.next())
  static constant int gate_0_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_0_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_45_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_45_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_90_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_90_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_135_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_135_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_180_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_180_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_225_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_225_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_270_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_270_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_315_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_315_closed = compiletime(UNIT_ID_GEN.next())

class RotateOpenGateDefinition extends OpenGateDefinition
  construct(int id, int angle)
    super(id, angle)
    this.setIconGameInterface(Icons.bTNStun)
    this.setTooltipBasic("Rotate Gate - [|cffffcc00Q|r]")
    this.setTooltipExtended("Rotates the gate counter-clockwise")
    this.setHotkey("Q")

class RotateClosedGateDefinition extends ClosedGateDefinition
  construct(int id, int angle)
    super(id, angle)
    this.setIconGameInterface(Icons.bTNStun)
    this.setTooltipBasic("Rotate Gate - [|cffffcc00Q|r]")
    this.setTooltipExtended("Rotates the gate counter-clockwise")
    this.setHotkey("Q")

function getOpenGateId(int angle) returns int
  switch (angle)
    case 0
      return GateIds.gate_0_open
    case 45
      return GateIds.gate_45_open
    case 90
      return GateIds.gate_90_open
    case 135
      return GateIds.gate_135_open
    case 180
      return GateIds.gate_180_open
    case 225
      return GateIds.gate_225_open
    case 270
      return GateIds.gate_270_open
    case 315
      return GateIds.gate_315_open
  return -1

function getClosedGateId(int angle) returns int
  switch (angle)
    case 0
      return GateIds.gate_0_closed
    case 45
      return GateIds.gate_45_closed
    case 90
      return GateIds.gate_90_closed
    case 135
      return GateIds.gate_135_closed
    case 180
      return GateIds.gate_180_closed
    case 225
      return GateIds.gate_225_closed
    case 270
      return GateIds.gate_270_closed
    case 315
      return GateIds.gate_315_closed
  return -1

function getOpenGateId_Rotate(int angle) returns int
  switch (angle)
    case 0
      return RotateGateIds.gate_0_open
    case 45
      return RotateGateIds.gate_45_open
    case 90
      return RotateGateIds.gate_90_open
    case 135
      return RotateGateIds.gate_135_open
    case 180
      return RotateGateIds.gate_180_open
    case 225
      return RotateGateIds.gate_225_open
    case 270
      return RotateGateIds.gate_270_open
    case 315
      return RotateGateIds.gate_315_open
  return -1

function getClosedGateId_Rotate(int angle) returns int
  switch (angle)
    case 0
      return RotateGateIds.gate_0_closed
    case 45
      return RotateGateIds.gate_45_closed
    case 90
      return RotateGateIds.gate_90_closed
    case 135
      return RotateGateIds.gate_135_closed
    case 180
      return RotateGateIds.gate_180_closed
    case 225
      return RotateGateIds.gate_225_closed
    case 270
      return RotateGateIds.gate_270_closed
    case 315
      return RotateGateIds.gate_315_closed
  return -1

function getGateAngle(int unitId) returns int
  switch (unitId)
    case GateIds.gate_0_open | GateIds.gate_0_closed | RotateGateIds.gate_0_open | RotateGateIds.gate_0_closed
      return 0
    case GateIds.gate_45_open | GateIds.gate_45_closed | RotateGateIds.gate_45_open | RotateGateIds.gate_45_closed
      return 45
    case GateIds.gate_90_open | GateIds.gate_90_closed | RotateGateIds.gate_90_open | RotateGateIds.gate_90_closed
      return 90
    case GateIds.gate_135_open | GateIds.gate_135_closed | RotateGateIds.gate_135_open | RotateGateIds.gate_135_closed
      return 135
    case GateIds.gate_180_open | GateIds.gate_180_closed | RotateGateIds.gate_180_open | RotateGateIds.gate_180_closed
      return 180
    case GateIds.gate_225_open | GateIds.gate_225_closed | RotateGateIds.gate_225_open | RotateGateIds.gate_225_closed
      return 225
    case GateIds.gate_270_open | GateIds.gate_270_closed | RotateGateIds.gate_270_open | RotateGateIds.gate_270_closed
      return 270
    case GateIds.gate_315_open | GateIds.gate_315_closed | RotateGateIds.gate_315_open | RotateGateIds.gate_315_closed
      return 315
  return -1

function unit.isOpenGate_Rotate() returns bool
  let unitId = this.getTypeId()
  return unitId == RotateGateIds.gate_0_open or
          unitId == RotateGateIds.gate_45_open or
          unitId == RotateGateIds.gate_90_open or
          unitId == RotateGateIds.gate_135_open or
          unitId == RotateGateIds.gate_180_open or
          unitId == RotateGateIds.gate_225_open or
          unitId == RotateGateIds.gate_270_open or
          unitId == RotateGateIds.gate_315_open

function unit.isClosedGate_Rotate() returns bool
  let unitId = this.getTypeId()
  return unitId == RotateGateIds.gate_0_closed or
        unitId == RotateGateIds.gate_45_closed or
        unitId == RotateGateIds.gate_90_closed or
        unitId == RotateGateIds.gate_135_closed or
        unitId == RotateGateIds.gate_180_closed or
        unitId == RotateGateIds.gate_225_closed or
        unitId == RotateGateIds.gate_270_closed or
        unitId == RotateGateIds.gate_315_closed

function getOpenGatePathMap(int angle) returns string
  switch (angle)
    case 0 | 180
      return "Units\\Gate3\\Gate_0Dead.tga"
    case 45 | 225
      return "Units\\Gate3\\Gate_45Dead.tga"
    case 90 | 270
      return "Units\\Gate3\\Gate_90Dead.tga"
    case 135 | 315
      return "Units\\Gate3\\Gate_135Dead.tga"
  return ""

function getClosedGatePathMap(int angle) returns string
  switch (angle)
    case 0 | 180
      return "Units\\Gate3\\Gate_0.tga"
    case 45 | 225
      return "Units\\Gate3\\Gate_45.tga"
    case 90 | 270
      return "Units\\Gate3\\Gate_90.tga"
    case 135 | 315
      return "Units\\Gate3\\Gate_135.tga"
  return ""

function onGateUpgradeFinish()
  var u = GetTriggerUnit()
  let angle = getGateAngle(u.getTypeId())
  if (angle == -1)
    return
  var gateId = -1
  if (u.isOpenGate_Rotate())
    gateId = getOpenGateId(angle)
  if (u.isClosedGate_Rotate())
    gateId = getClosedGateId(angle)
  if (gateId != -1)
    u = replaceUnitTLS(u, gateId, bj_UNIT_STATE_METHOD_RELATIVE)
  if (u.isOpenGate())
    u.setAnimation("death alternate")
  else
    u.setAnimation("stand")
  u.getOwner().select(u)

init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_UPGRADE_FINISH, function onGateUpgradeFinish)