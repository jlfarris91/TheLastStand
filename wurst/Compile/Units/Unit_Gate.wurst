package Unit_Gate
import UnitObjEditing
import ObjectIdGenerator
import UnitIds
import ObjectIds
import HashMap
import Math
import RegisterEvents
import Icons
import ChannelAbilityPreset
import TlsAbilityIds
import Orders

public class GateIds
  static constant int gate_build = compiletime(UNIT_ID_GEN.next())
  static constant int gate_0_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_0_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_45_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_45_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_90_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_90_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_135_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_135_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_180_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_180_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_225_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_225_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_270_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_270_closed = compiletime(UNIT_ID_GEN.next())
  static constant int gate_315_open = compiletime(UNIT_ID_GEN.next())
  static constant int gate_315_closed = compiletime(UNIT_ID_GEN.next())

HashMap<int, int> g_angleToOpenGateIdMap = new HashMap<int, int>()
HashMap<int, int> g_angleToClosedGateIdMap = new HashMap<int, int>()

constant int rotateCId = compiletime(ABIL_ID_GEN.next())
constant int rotateCCId = compiletime(ABIL_ID_GEN.next())

abstract class BaseGateDefinition extends BuildingDefinition
  construct(int newId)
    super(newId, UnitIds.scouttower)
    this.setName("Gate")
    this.setTintingColorRed(150)
    this.setTintingColorGreen(150)
    this.setTintingColorBlue(150)
    this.setShadowTextureBuilding("")
    this.setButtonPositionX(0)
    this.setButtonPositionY(0)
    this.setDeathTimeseconds(0.83)
    this.setGroundTexture("")
    this.setSelectionScale(4.0)
    this.setScalingValue(0.4)
    this.setDeathType(0)
    this.setCollisionSize(0.0)
    this.setPlacementRequires("unwalkable")
    this.setBuildTime(1)
    this.setCanFlee(false)
    this.setGoldCost(0)
    this.setHideMinimapDisplay(true)
    this.setHitPointsMaximumBase(1000)
    this.setLumberCost(0)
    this.setRepairGoldCost(20)
    this.setRepairLumberCost(0)
    this.setRepairTime(10)
    this.setSightRadiusDay(400)
    this.setSightRadiusNight(200)
    this.setHotkey("G")
    this.setNormalAbilities(commaList(TlsAbilityIds.recycle))

class OpenGateDefinition extends BaseGateDefinition
  construct(int id, int angle)
    super(id)
    this.setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGate_Open.BLP")
    this.setModelFile("Units\\Gate3\\Gate_" + I2S(angle) + ".mdx")
    this.setPathingMap(getOpenGatePathMap(angle))

    let rotateGateId = getOpenGateId(wrapMaxEx(angle + 45, 0, 360))
    let closedGateId = getClosedGateId(angle)
    this.setUpgradesTo(commaList(closedGateId, rotateGateId))

    this.setName("Gate Open " + I2S(angle))
    this.setTooltipBasic("Open |cffffcc00G|rate " + I2S(angle))
    this.setTooltipExtended("Open this gate")

class ClosedGateDefinition extends BaseGateDefinition
  construct(int id, int angle)
    super(id)
    this.setIconGameInterface("ReplaceableTextures\\CommandButtons\\BTNGate.BLP")
    this.setModelFile("Units\\Gate3\\Gate_" + I2S(angle) + ".mdx")
    this.setPathingMap(getClosedGatePathMap(angle))
    
    let rotateGateId = getClosedGateId(wrapMaxEx(angle + 45, 0, 360))
    let openGateId = getOpenGateId(angle)
    this.setUpgradesTo(commaList(openGateId, rotateGateId))

    this.setName("Gate Closed " + I2S(angle))
    this.setTooltipBasic("Close |cffffcc00G|rate " + I2S(angle))
    this.setTooltipExtended("Close this gate")

/*
  The gate that is actually built by the builder
  This is why it has a gold cost and a build time
*/
class BuildGateDefinition extends ClosedGateDefinition
  construct()
    super(GateIds.gate_build, 0)
    this.setGoldCost(42)
    this.setBuildTime(1) // 25
    this.setName("Gate (Build)")
    this.setTooltipBasic("Build |cffffcc00G|rate")
    this.setTooltipExtended("Build a gate that can be opened and closed to allow or prevent access to your camp. The gate can be rotated.")

@compiletime function createGateUnits()
  new BuildGateDefinition()
  for angle = 0 to 315 step 45
    new OpenGateDefinition(getOpenGateId(angle), angle)
    new ClosedGateDefinition(getClosedGateId(angle), angle)

@compiletime
function createGateTestBuilder()
  new UnitDefinition('h999', UnitIds.peasant)
    ..setStructuresBuilt(commaList(GateIds.gate_build))
    ..setNormalAbilities(commaList('Ahrp'))

class RotateGateAbilityDefinition extends ChannelAbilityPreset
  construct(int id)
    super(id, 1, true)
    this.setHeroAbility(false)
    this.presetButtonPosNormal(0, 2)
    this.presetTargetTypes(Targettype.NONE)
    this.presetOption(Option.VISIBLE, true)
    this.setName("Rotate Gate")
    this.presetIcon(Icons.bTNStun)
    this.presetCooldown(lvl -> 0.0)
    this.presetManaCost(lvl -> 0)
    this.presetCastRange(lvl -> 0.0)
    this.setLevelSkipRequirement(0)
    this.setAnimationNames("")
    this.setArtCaster("")
    this.setAreaofEffect(1, 0.0)
    this.setDurationHero(1, 0.0)
    this.setDurationNormal(1, 0.0)

@compiletime
function createRotateAbilities()
  new RotateGateAbilityDefinition(rotateCId)
    ..setTooltipNormal(1, "Rotate Clockwise - [|cffffcc00Q|r]")
    ..setTooltipNormalExtended(1, "Rotate the gate clockwise.")
    ..presetHotkey("Q")
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(0)
    ..setBaseOrderID(1, "ensnareon")
    ..setOrderStringUseTurnOn("ensnareon")
  new RotateGateAbilityDefinition(rotateCCId)
    ..setTooltipNormal(1, "Rotate Counter-Clockwise - [|cffffcc00E|r]")
    ..setTooltipNormalExtended(1, "Rotate the gate counter-clockwise.")
    ..presetHotkey("E")
    ..setButtonPositionNormalX(2)
    ..setButtonPositionNormalY(0)
    ..setBaseOrderID(1, "ensnareoff")
    ..setOrderStringUseTurnOn("ensnareoff")

function getOpenGateId(int angle) returns int
  switch (angle)
    case 0
      return GateIds.gate_0_open
    case 45
      return GateIds.gate_45_open
    case 90
      return GateIds.gate_90_open
    case 135
      return GateIds.gate_135_open
    case 180
      return GateIds.gate_180_open
    case 225
      return GateIds.gate_225_open
    case 270
      return GateIds.gate_270_open
    case 315
      return GateIds.gate_315_open
  return -1

function getClosedGateId(int angle) returns int
  switch (angle)
    case 0
      return GateIds.gate_0_closed
    case 45
      return GateIds.gate_45_closed
    case 90
      return GateIds.gate_90_closed
    case 135
      return GateIds.gate_135_closed
    case 180
      return GateIds.gate_180_closed
    case 225
      return GateIds.gate_225_closed
    case 270
      return GateIds.gate_270_closed
    case 315
      return GateIds.gate_315_closed
  return -1

function getGateAngle(int unitId) returns int
  switch (unitId)
    case GateIds.gate_0_open | GateIds.gate_0_closed
      return 0
    case GateIds.gate_45_open | GateIds.gate_45_closed
      return 45
    case GateIds.gate_90_open | GateIds.gate_90_closed
      return 90
    case GateIds.gate_135_open | GateIds.gate_135_closed
      return 135
    case GateIds.gate_180_open | GateIds.gate_180_closed
      return 180
    case GateIds.gate_225_open | GateIds.gate_225_closed
      return 225
    case GateIds.gate_270_open | GateIds.gate_270_closed
      return 270
    case GateIds.gate_315_open | GateIds.gate_315_closed
      return 315
  return -1

function unit.isOpenGate() returns bool
  let unitId = this.getTypeId()
  return unitId == GateIds.gate_0_open or
         unitId == GateIds.gate_45_open or
         unitId == GateIds.gate_90_open or
         unitId == GateIds.gate_135_open or
         unitId == GateIds.gate_180_open or
         unitId == GateIds.gate_225_open or
         unitId == GateIds.gate_270_open or
         unitId == GateIds.gate_315_open

function unit.isClosedGate() returns bool
  let unitId = this.getTypeId()
  return unitId == GateIds.gate_0_closed or
        unitId == GateIds.gate_45_closed or
        unitId == GateIds.gate_90_closed or
        unitId == GateIds.gate_135_closed or
        unitId == GateIds.gate_180_closed or
        unitId == GateIds.gate_225_closed or
        unitId == GateIds.gate_270_closed or
        unitId == GateIds.gate_315_closed

function getOpenGatePathMap(int angle) returns string
  switch (angle)
    case 0 | 180
      return "Units\\Gate3\\Gate_0Dead.tga"
    case 45 | 225
      return "Units\\Gate3\\Gate_45Dead.tga"
    case 90 | 270
      return "Units\\Gate3\\Gate_90Dead.tga"
    case 135 | 315
      return "Units\\Gate3\\Gate_135Dead.tga"
  return ""

function getClosedGatePathMap(int angle) returns string
  switch (angle)
    case 0 | 180
      return "Units\\Gate3\\Gate_0.tga"
    case 45 | 225
      return "Units\\Gate3\\Gate_45.tga"
    case 90 | 270
      return "Units\\Gate3\\Gate_90.tga"
    case 135 | 315
      return "Units\\Gate3\\Gate_135.tga"
  return ""

function onRotateClockwiseCast()
  var caster = GetSpellAbilityUnit()
  rotateGate(caster, -1)

function onRotateCounterClockwiseCast()
  var caster = GetSpellAbilityUnit()
  rotateGate(caster, 1)

function rotateGate(unit gate, int dir)
  var angle = getGateAngle(gate.getTypeId())
  var newAngle = wrapMaxEx(angle + 45 * dir, 0, 360)
  var newUnitId = gate.isOpenGate() ? getOpenGateId(newAngle) : getClosedGateId(newAngle)
  ReplaceUnitBJ(gate, newUnitId, bj_UNIT_STATE_METHOD_RELATIVE)

init
  g_angleToOpenGateIdMap.put(0,   GateIds.gate_0_open)
  g_angleToOpenGateIdMap.put(45,  GateIds.gate_45_open)
  g_angleToOpenGateIdMap.put(90,  GateIds.gate_90_open)
  g_angleToOpenGateIdMap.put(135, GateIds.gate_135_open)
  g_angleToOpenGateIdMap.put(180, GateIds.gate_180_open)
  g_angleToOpenGateIdMap.put(225, GateIds.gate_225_open)
  g_angleToOpenGateIdMap.put(270, GateIds.gate_270_open)
  g_angleToOpenGateIdMap.put(315, GateIds.gate_315_open)
  
  g_angleToClosedGateIdMap.put(0,   GateIds.gate_0_closed)
  g_angleToClosedGateIdMap.put(45,  GateIds.gate_45_closed)
  g_angleToClosedGateIdMap.put(90,  GateIds.gate_90_closed)
  g_angleToClosedGateIdMap.put(135, GateIds.gate_135_closed)
  g_angleToClosedGateIdMap.put(180, GateIds.gate_180_closed)
  g_angleToClosedGateIdMap.put(225, GateIds.gate_225_closed)
  g_angleToClosedGateIdMap.put(270, GateIds.gate_270_closed)
  g_angleToClosedGateIdMap.put(315, GateIds.gate_315_closed)

  registerSpellEffectEvent(rotateCId, function onRotateClockwiseCast)
  registerSpellEffectEvent(rotateCCId, function onRotateCounterClockwiseCast)