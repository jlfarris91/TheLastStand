package Unit_Builder
import TlsUnitDefinition
import SurvivorUnitDefinition
import TlsUnitDefinitionBuilder
import TlsUpgradeIds
import TlsUpgradeDefinition
import Icons
import Math
import ColorUtility
import RealExtensions
import UnitPropertiesComponent
import SmartValue
import Handle
import PlayerExtensions
import RepairTracking
import Ability_Repair
import BuffObjEditing
import Result
import ChannelAbilityPreset
import RegisterEvents
import HumanPlayers
import DamageEvent
import Damage

public SurvivorUnitDefinition g_builderDefinition

constant int BUILDER_ABILITY_MAX_LEVEL = 10
constant int IMPACT_BRACING_AFFECTOR_ID = 'IMBR'

constant int array[20] THORNS_AURA_BUFF_ID = [
  compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()),
  compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()),
  compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()),
  compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()),
  compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next()), compiletime(BUFF_ID_GEN.next())]

// ============================================================================
function calculateRepairTimeRatio(int level) returns real
  // using hill function that arrives at 316% by lvl 10, 364% by lvl 20
  let x = parameterize01(1, BUILDER_ABILITY_MAX_LEVEL, level)
  return 1.34 - hill01(x, 0.155)

// ============================================================================
function calculateImpactBracingArmorBonus(int level) returns real
  return 10.0 + (level - 1) * 5

// ============================================================================
function calculateImpactBracingDuration(int level) returns real
  return 5.0 + (level - 1)

// ============================================================================
function calculateThornsDamageReturned01(int level) returns real
  return 0.25 * clamp(level, 1, 20)

// ============================================================================
@compiletime function createObjectDefinitions()

  g_builderDefinition = new SurvivorUnitDefinition(TlsUnitIds.Survivors.builder, UnitIds.peasant)
    ..setNormalAbilities(commaList(
      TlsAbilityIds.inventory2Slots,
      TlsAbilityIds.builderRepair,
      TlsAbilityIds.builderImpactBracing,
      TlsAbilityIds.builderThornsAura,
      TlsAbilityIds.harvest,
      TlsAbilityIds.fellTree))
    ..setDefaultActiveAbility(commaList(TlsAbilityIds.builderRepair))
    ..setAcquisitionRange(500.0)
    ..setAttack1AttackType(AttackType.Normal)
    ..setAttack1CooldownTime(1.0)
    ..setAttack1Range(90)
    ..setAttack1WeaponType(WeaponType.Normal)
    ..setAttack2AttackType(AttackType.Normal)
    ..setAttack2CooldownTime(1.0)
    ..setAttack2DamageBase(10000) // To kill trees with 100k health in 10 hits
    ..setAttack2DamageNumberofDice(1)
    ..setAttack2DamageSidesperDie(2)
    ..setAttack2ProjectileSpeed(0)
    ..setAttack2Range(90)
    ..setAttack2TargetsAllowed(commaList(TargetsAllowed.tree))
    ..setAttack2WeaponSound(WeaponSound.MetalLightChop)
    ..setAttack2WeaponType(WeaponType.Normal)
    ..setAttacksEnabled(3) // Second attack lets builder chop down trees
    ..setDeathType(DeathType.CanRaiseDoesDecay)
    ..setDefenseBase(10)
    ..setArmorType(ArmorType.Medium)
    ..setDefenseUpgradeBonus(1)
    ..setHitPointsRegenerationRate(1.0)
    ..setManaMaximum(0)
    ..setManaInitialAmount(0)
    ..setSpeedBase(210)
    ..setCollisionSize(0)
    ..setStructuresBuilt(commaList(
      TlsUnitIds.foundationMedium,
      TlsUnitIds.foundationLarge,
      TlsUnitIds.foundationTower,
      TlsUnitIds.tunnelEntrance))
    ..setUpgradesUsed(commaList(
      TlsUpgradeIds.survivorHpBonus,
      TlsUpgradeIds.leatherArmor,
      TlsUpgradeIds.builderNoviceTraining,
      TlsUpgradeIds.builderFurtherStudy))
    ..setUnitClassification("Peon")
    ..setName("Builder")
    ..setCasterUpgradeNames("Initiate,Adept,Master")
    ..setCasterUpgradeTips("- Skilled Repair,- Skilled Repair|n- Impact Bracing,- Skilled Repair|n- Impact Bracing|n- Spiked Reinforcement")
    ..setCasterUpgradeArt("UI\\Widgets\\Console\\Human\\infocard-builder.blp")
    ..addUnitClass(TlsUnitClassification.HUMAN)
    ..addUnitClass(TlsUnitClassification.MELEE)
    ..build("The Builder can construct more advanced camp structures, repair structures faster and cut down trees to expand your base.",
      tooltipBuilder -> begin
        let abilities = new TooltipItem("Abilities: ")
        ..addValue("Skilled Repair")
        ..addValue("Lumber Harvest")
        ..addValue("Fell Trees")
        tooltipBuilder.addItem(abilities)
        let structuresBuilt = new TooltipItem("Can Build: ")
        ..addValue("Workshop")
        ..addValue("Barracks")
        ..addValue("Towers")
        tooltipBuilder.addItem(structuresBuilt)
      end)

  new AbilityDefinitionRepairHuman(TlsAbilityIds.builderRepair)
    ..setLevels(20)
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(2)
    ..setButtonPositionTurnOffX(1)
    ..setButtonPositionTurnOffY(2)
    ..presetRepairTimeRatio(lvl -> calculateRepairTimeRatio(lvl))
    ..presetCastRange(lvl -> 128.0)
    ..presetTargetsAllowed(lvl -> "mechanical,friend,nonancient,ground,air,structure,bridge,alive,dead,invu,vuln")
    ..presetTooltipNormal((int lvl) -> "Skilled Repair [|cffffcc00Level {0}|r]".format(lvl.toString()))
    ..presetTooltipNormalExtended((int lvl) -> "Mechanical units and structures are repaired {0}x faster than regular survivors.".format(
      (BASIC_REPAIR_REPAIR_TIME_RATIO / calculateRepairTimeRatio(lvl)).toString(1)))
    ..presetTooltipTurnOff(lvl ->"|cffc3dbffRight-click to activate auto-casting.|r")
    ..presetTooltipTurnOffExtended(lvl ->"|cffc3dbffRight-click to deactivate auto-casting.|r")

  new AbilityDefinition(TlsAbilityIds.builderImpactBracing, 'Ahan')
    ..setLevels(20)
    ..setButtonPositionNormalX(2)
    ..setButtonPositionNormalY(2)
    ..setIconNormal(Icons.bTNSupportBeam)
    ..setRequirements(commaList(TlsUpgradeIds.builderNoviceTraining))
    ..setRequirementsLevels("1")
    ..presetTargetsAllowed(lvl -> "")
    ..presetTooltipNormal((int lvl) -> "Impact Bracing [|cffffcc00Level {0}|r]".format(lvl.toString()))
    ..presetTooltipNormalExtended((int lvl) -> "While being repaired by this Builder, structures and mechanical units gain {0} bonus armor. This armor bonus lasts for {1} seconds after repairing has ended.|n|n{2}".format(
      calculateImpactBracingArmorBonus(lvl).floor().toString(),
      calculateImpactBracingDuration(lvl).toString(0),
      "Does not stack.".red()))

  for i = 0 to 19
    new BuffDefinition(THORNS_AURA_BUFF_ID[i], 'BEah')
      ..setIconNormal(1, Icons.bTNSpikedBarricades)
      ..setArtTarget(1, "Abilities\\Spells\\Orc\\ReinforcedTrollBurrow\\ReinforcedTrollBurrowTarget.mdl")
      ..setTooltipNormal(1, "Reinforced with Spikes")
      ..setTooltipNormalExtended(1, "This structure is reinforced with spikes")

  new AbilityDefinitionKeeperoftheGroveThornsAura(TlsAbilityIds.builderThornsAura)
    ..setLevels(20)
    ..setButtonPositionNormalX(3)
    ..setButtonPositionNormalY(2)
    ..setIconNormal(Icons.bTNSpikedBarricades)
    ..setHeroAbility(false)
    ..setRequirements(commaList(TlsUpgradeIds.builderNoviceTraining))
    ..setRequirementsLevels("2")
    ..presetAreaofEffect(lvl -> 200.0)
    ..presetDamageDealttoAttackers(lvl -> calculateThornsDamageReturned01(lvl))
    ..presetDamageisPercentReceived(lvl -> true)
    ..presetBuffs(lvl -> commaList(THORNS_AURA_BUFF_ID[lvl-1]))
    ..presetTargetsAllowed(lvl -> "structure,friend,vulnerable")
    ..presetTooltipNormal((int lvl) -> "Spiked Reinforcement [|cffffcc00Level {0}|r]".format(lvl.toString()))
    ..presetTooltipNormalExtended((int lvl) -> "An aura that gives friendly nearby structures a damage shield, which returns {0} of a melee attacker's damage back to it.|n|n{1}".format(
        calculateThornsDamageReturned01(lvl).toPercentageString01(),
        "Does not stack.".red()))

  new AbilityDefinition(TlsAbilityIds.fellTree, 'Ahan')
  ..setName("Chop Down Tree")
  ..setButtonPositionNormalX(2)
  ..setButtonPositionNormalY(1)
  ..presetTooltipNormal(lvl -> "Chop Down Tree")
  ..presetTooltipNormalExtended(lvl -> "Order the Builder to attack a tree to cut it down.")
  ..presetCooldown(lvl -> 0.0)
  ..presetManaCost(lvl -> 0)
  ..presetCastRange(lvl -> 0)
  ..presetButtonPosNormal(1, 2)
  ..presetIcon("ReplaceableTextures\\CommandButtons\\BTNFellTree.blp")
  ..setRequirements("")

  new UpgradeDefinition(TlsUpgradeIds.builderNoviceTraining)
    ..setLevels(2)
    
    ..setName(1, "Builder Adept Training")
    ..setTooltip(1, "Builder Adept Training")
    ..setTooltipExtended(1, "Increases Builders' armor, repair speed and gives them the Impact Bracing ability.")
    ..setIcon(1, Icons.bTNHumanBuild)
    ..setRequirements(1, "")
    
    ..setName(2, "Builder Master Training")
    ..setTooltip(2, "Builder Master Training")
    ..setTooltipExtended(2, "Increases Builders' armor, repair speed and gives them the Spiked Reinforcement ability.")
    ..setIcon(2, Icons.bTNAdvStruct)
    ..setRequirements(2, commaList(TlsUnitIds.headquarters2))

    ..setButtonPositionX(0)
    ..setButtonPositionY(2)
    ..setGoldCostBase(1)
    ..setGoldCostIncrement(1)
    ..setLumberCostBase(600)
    ..setLumberCostIncrement(600)
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderRepair.toRawCode())
    ..setClass(UpgradeClass.Caster)
    ..setTimeBase(10)
    ..setTimeIncrement(5)

  new UpgradeDefinition(TlsUpgradeIds.builderFurtherStudy)
    ..setLevels(5)

    ..setName(1, "Builder Further Study I")
    ..setTooltip(1, "Builder Further Study I")
    ..setTooltipExtended(1, "Further increases Builders' armor effectiveness of Skilled Repair, Impact Bracing and Spiked Reinforcement.")
    ..setIcon(1, Icons.bTNTome)
    ..setRequirements(1, commaList(TlsUpgradeIds.builderNoviceTraining))
    ..setRequirementsLevels(1, "2")
    
    ..setName(2, "Builder Further Study II")
    ..setTooltip(2, "Builder Further Study II")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Spiked Reinforcement.")
    ..setIcon(2, Icons.bTNTomeBrown)
    ..setRequirements(5, commaList(TlsUnitIds.headquarters3))
    
    ..setName(3, "Builder Further Study III")
    ..setTooltip(3, "Builder Further Study III")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Spiked Reinforcement.")
    ..setIcon(3, Icons.bTNTomeRed)
    
    ..setName(4, "Builder Further Study IV")
    ..setTooltip(4, "Builder Further Study IV")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Spiked Reinforcement.")
    ..setIcon(4, Icons.bTNSorceressAdept)
    ..setRequirements(5, commaList(TlsUnitIds.headquarters4))
    
    ..setName(5, "Builder Further Study V")
    ..setTooltip(5, "Builder Further Study V")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Spiked Reinforcement.")
    ..setIcon(5, Icons.bTNSorceressMaster)
    ..setRequirements(5, commaList(TlsUnitIds.headquarters5))
    
    ..setButtonPositionX(0)
    ..setButtonPositionY(2)
    ..setGoldCostBase(3)
    ..setGoldCostIncrement(1)
    ..setLumberCostBase(1800)
    ..setLumberCostIncrement(600)
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderRepair.toRawCode())
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderImpactBracing.toRawCode())
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderThornsAura.toRawCode())
    ..setClass(UpgradeClass.NONE)
    ..setTimeBase(10)
    ..setTimeIncrement(5)

// ============================================================================
function onRepairAddRemoveStartEnd()
  if (getRepairAbilityId() != TlsAbilityIds.builderRepair)
    return

  let repairingUnit = getRepairingUnit()
  let targetUnit = getRepairTargetUnit()

  if (repairingUnit.getOwner().getTechResearchLevel(TlsUpgradeIds.builderNoviceTraining) >= 1)
    updateImpactBracingAffector(targetUnit)

// ============================================================================
function removeImpactBracingAffector(unit targetUnit)
  let defenseBonusProp = targetUnit.getProperty(UnitProperty.DEFENSE_BONUS)
  let affector = defenseBonusProp.getAffectorByUserData(IMPACT_BRACING_AFFECTOR_ID)
  if (affector != INVALID_HANDLE)
    defenseBonusProp.removeAffector(affector)

// ============================================================================
function updateImpactBracingAffector(unit targetUnit)
  let defenseBonusProp = targetUnit.getProperty(UnitProperty.DEFENSE_BONUS)
  let existingAffector = defenseBonusProp.getAffectorByUserData(IMPACT_BRACING_AFFECTOR_ID)

  var existingAffectorValue = 0.0
  if (existingAffector != INVALID_HANDLE)
  //{
    let affectorValueResult = defenseBonusProp.getAffectorValue(existingAffector)
    if (affectorValueResult.succeeded())
      existingAffectorValue = affectorValueResult.value

    defenseBonusProp.removeAffector(existingAffector)
  //}

  // Make sure the impact bracing ability level is the highest of the currently repairing builders
  // since multiple players may be repairing the structure and each can have a different research level
  var maxAbilityLevel = 1
  var numberOfValidUnits = 0

  for repairingUnit in getRepairingUnits(targetUnit)
    if (repairingUnit.isAlive())
      let owner = repairingUnit.getOwner()
      if (owner.getTechResearchLevel(TlsUpgradeIds.builderNoviceTraining) >= 1)
        maxAbilityLevel = max(maxAbilityLevel, repairingUnit.getAbilityLevel(TlsAbilityIds.builderImpactBracing))
        numberOfValidUnits++

  // There are no longer any valid units but there was an affector active so that means
  // that any repairers contributing to impact bracing effect must have just finished repairing
  let contributingRepairEnded = numberOfValidUnits == 0 and existingAffector != INVALID_HANDLE

  let newAffectorValue = max(existingAffectorValue, calculateImpactBracingArmorBonus(maxAbilityLevel))
  let newAffectorDuration = contributingRepairEnded ? calculateImpactBracingDuration(maxAbilityLevel) : 0.0

  // Add the new affector with the max value and (optional) max duration
  defenseBonusProp.affectAdd(
    newAffectorValue,
    newAffectorDuration,
    IMPACT_BRACING_AFFECTOR_ID)

// ============================================================================
public function onResearchFinished()
  let researchTypeId = GetResearched()

  if (researchTypeId != TlsUpgradeIds.builderNoviceTraining)
    return

  let researchingUnit = GetResearchingUnit() 
  let owningPlayer = researchingUnit.getOwner()
  
  if (owningPlayer.getTechResearchLevel(researchTypeId) < 2)
    return

  owningPlayer.setTechAvailability(TlsUpgradeIds.builderFurtherStudy, true)

// ============================================================================
function unit.getThornsLevel() returns int
  for i = 1 to 20
    if (this.hasAbility(THORNS_AURA_BUFF_ID[i-1]))
      return i
  return 0

// ============================================================================
function onUnreducedDamageTaken()
  let damageSource = DamageEvent.getSource()

  if (not IsUnitType(damageSource, UNIT_TYPE_MELEE_ATTACKER))
    return
  
  let damageTarget = DamageEvent.getTarget()
  if (not IsUnitType(damageTarget, UNIT_TYPE_STRUCTURE))
    return

  if (not damageSource.isEnemyOf(damageTarget))
    return

  let thornsBuffLevel = damageTarget.getThornsLevel()
  if (thornsBuffLevel == 0)
    return

  let damageReturned01 = calculateThornsDamageReturned01(thornsBuffLevel)
  let damageReturned = damageReturned01 * DamageEvent.getUnreducedOriginalAmount()

  DamageEvent.setNextDamageFromCode()
  DamageEvent.setNextDamageId(THORNS_AURA_BUFF_ID[thornsBuffLevel-1])

  UnitDamageTarget(
    damageTarget,
    damageSource,
    damageReturned,
    false,
    false,
    ATTACK_TYPE_MAGIC,
    DAMAGE_TYPE_PLANT,
    null)

// ============================================================================
init
  if (g_builderDefinition == null)
    createObjectDefinitions()

  registerRepairAdd(function onRepairAddRemoveStartEnd)
  registerRepairRemove(function onRepairAddRemoveStartEnd)
  registerRepairStart(function onRepairAddRemoveStartEnd)
  registerRepairEnd(function onRepairAddRemoveStartEnd)

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_RESEARCH_FINISH, function onResearchFinished)
  
  DamageEvent.addUnreducedListener(DAMAGE_EVENT_PRIO_FINAL, () -> onUnreducedDamageTaken())

  for p in g_PlayingHumanPlayers
    p.setTechAvailability(TlsUpgradeIds.builderFurtherStudy, false)