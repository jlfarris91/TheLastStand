package Unit_Builder
import TlsUnitDefinition
import SurvivorUnitDefinition
import TlsUnitDefinitionBuilder
import TlsUpgradeIds
import TlsUpgradeDefinition
import Icons
import Math
import ColorUtility
import RealExtensions
import UnitPropertiesComponent
import SmartValue
import Handle
import PlayerExtensions
import Orders
import RepairTracking
import Ability_Repair
import BuffObjEditing
import Result
import UnitComponent
import ClosureTimers
import ChannelAbilityPreset

public SurvivorUnitDefinition g_builderDefinition

constant int BUILDER_ABILITY_MAX_LEVEL = 10
constant int IMPACT_BRACING_AFFECTOR_ID = 'IMBR'
constant buffTuple DEFLECTION_BUFF = compiletime(createDummyBuffObject("Deflection", "This structure is under the effect of Deflection; it has a chance to reflect Piercing attacks back to the source.", Icons.bTNEngineeringUpgrade, "abilities\\workstation\\workstationactiveoverhead.mdl", "overhead"))

// ============================================================================
function calculateRepairTimeRatio(int level) returns real
  // using hill function that arrives at 316% by lvl 10, 364% by lvl 20
  let x = parameterize01(1, BUILDER_ABILITY_MAX_LEVEL, level)
  return 1.34 - hill01(x, 0.155)

// ============================================================================
function calculateImpactBracingArmorBonus(int level) returns real
  return 10.0 + (level - 1) * 5

// ============================================================================
function calculateImpactBracingDuration(int level) returns real
  return 5.0 + (level - 1)
  
// ============================================================================
function calculateDeflectionChanceToDeflect(int level) returns real
  return 35.0 + (level - 1) * 5.0

// ============================================================================
function calculateDeflectionDamageDealt(int level) returns real
  return 1.0 + (level - 1) * 0.1

// ============================================================================
function calculateDeflectionDamageTaken(int level) returns real
  return 0.5 - (level - 1) * 0.025

// ============================================================================
function calculateDeflectionMagicDamageReduction01(int level) returns real
  return 0.5 - (level - 1) * 0.025

// ============================================================================
function calculateDeflectionDuration(int level) returns real
  return 5.0 + (level - 1)

// ============================================================================
@compiletime function createObjectDefinitions()

  g_builderDefinition = new SurvivorUnitDefinition(TlsUnitIds.Survivors.builder, UnitIds.peasant)
    ..setNormalAbilities(commaList(
      TlsAbilityIds.inventory2Slots,
      TlsAbilityIds.builderRepair,
      TlsAbilityIds.builderImpactBracing,
      TlsAbilityIds.builderDeflection,
      TlsAbilityIds.harvest,
      TlsAbilityIds.fellTree))
    ..setDefaultActiveAbility(commaList(TlsAbilityIds.builderRepair))
    ..setAcquisitionRange(500.0)
    ..setAttack1AttackType(AttackType.Normal)
    ..setAttack1CooldownTime(1.0)
    ..setAttack1Range(90)
    ..setAttack1WeaponType(WeaponType.Normal)
    ..setAttack2AttackType(AttackType.Normal)
    ..setAttack2CooldownTime(1.0)
    ..setAttack2DamageBase(10000) // To kill trees with 100k health in 10 hits
    ..setAttack2DamageNumberofDice(1)
    ..setAttack2DamageSidesperDie(2)
    ..setAttack2ProjectileSpeed(0)
    ..setAttack2Range(90)
    ..setAttack2TargetsAllowed(commaList(TargetsAllowed.tree))
    ..setAttack2WeaponSound(WeaponSound.MetalLightChop)
    ..setAttack2WeaponType(WeaponType.Normal)
    ..setAttacksEnabled(3) // Second attack lets builder chop down trees
    ..setDeathType(DeathType.CanRaiseDoesDecay)
    ..setDefenseBase(10)
    ..setArmorType(ArmorType.Medium)
    ..setDefenseUpgradeBonus(1)
    ..setHitPointsRegenerationRate(1.0)
    ..setManaMaximum(0)
    ..setManaInitialAmount(0)
    ..setSpeedBase(210)
    ..setStructuresBuilt(commaList(
      TlsUnitIds.foundationMedium,
      TlsUnitIds.foundationLarge,
      TlsUnitIds.foundationTower,
      TlsUnitIds.tunnelEntrance))
    ..setUpgradesUsed(commaList(
      TlsUpgradeIds.survivorHpBonus,
      TlsUpgradeIds.leatherArmor,
      TlsUpgradeIds.builderNoviceTraining,
      TlsUpgradeIds.builderFurtherStudy))
    ..setUnitClassification("Peon")
    ..setName("Builder")
    ..setCasterUpgradeNames("Initiate,Adept,Master")
    ..setCasterUpgradeTips("- Skilled Repair,- Skilled Repair|n- Impact Bracing,- Skilled Repair|n- Impact Bracing|n- Deflection")
    ..setCasterUpgradeArt("UI\\Widgets\\Console\\Human\\infocard-builder.blp")
    ..addUnitClass(TlsUnitClassification.HUMAN)
    ..addUnitClass(TlsUnitClassification.MELEE)
    ..build("The Builder can construct more advanced camp structures, repair structures faster and cut down trees to expand your base.",
      tooltipBuilder -> begin
        let abilities = new TooltipItem("Abilities: ")
        ..addValue("Skilled Repair")
        ..addValue("Lumber Harvest")
        ..addValue("Fell Trees")
        tooltipBuilder.addItem(abilities)
        let structuresBuilt = new TooltipItem("Can Build: ")
        ..addValue("Workshop")
        ..addValue("Barracks")
        ..addValue("Towers")
        tooltipBuilder.addItem(structuresBuilt)
      end)

  new AbilityDefinitionRepairHuman(TlsAbilityIds.builderRepair)
    ..setLevels(20)
    ..setButtonPositionNormalX(1)
    ..setButtonPositionNormalY(2)
    ..setButtonPositionTurnOffX(1)
    ..setButtonPositionTurnOffY(2)
    ..presetRepairTimeRatio(lvl -> calculateRepairTimeRatio(lvl))
    ..presetCastRange(lvl -> 128.0)
    ..presetTargetsAllowed(lvl -> "mechanical,friend,nonancient,ground,air,structure,bridge,alive,dead,invu,vuln")
    ..presetTooltipNormal((int lvl) -> "Skilled Repair [|cffffcc00Level {0}|r]".format(lvl.toString()))
    ..presetTooltipNormalExtended((int lvl) -> "Mechanical units and structures are repaired {0}x faster than regular survivors.|n|n{1}|n{2}".format(
      (BASIC_REPAIR_REPAIR_TIME_RATIO / calculateRepairTimeRatio(lvl)).toString(1),
      "Focused Repair".gold(),
      "When autocast is disabled, the Builder remembers the last structure he repaired and is ordered to immediately repair that structure when it is damaged."))
    ..presetTooltipTurnOff(lvl ->"|cffc3dbffRight-click to activate auto-casting.|r")
    ..presetTooltipTurnOffExtended(lvl ->"|cffc3dbffRight-click to deactivate auto-casting.|r")

  new AbilityDefinition(TlsAbilityIds.builderImpactBracing, 'Ahan')
    ..setLevels(20)
    ..setButtonPositionNormalX(2)
    ..setButtonPositionNormalY(2)
    ..setIconNormal(Icons.bTNSupportBeam)
    ..setRequirements(commaList(TlsUpgradeIds.builderNoviceTraining))
    ..setRequirementsLevels("1")
    ..presetTargetsAllowed(lvl -> "")
    ..presetTooltipNormal((int lvl) -> "Impact Bracing [|cffffcc00Level {0}|r]".format(lvl.toString()))
    ..presetTooltipNormalExtended((int lvl) -> "While being repaired by this Builder, structures and mechanical units gain {0} bonus armor. This armor bonus lasts for {1} seconds after repairing has ended.|n|n{2}".format(
      calculateImpactBracingArmorBonus(lvl).floor().toString(),
      calculateImpactBracingDuration(lvl).toString(0),
      "Does not stack.".red()))

  new AbilityDefinition(TlsAbilityIds.builderDeflection, 'Ahan')
    ..setLevels(20)
    ..setButtonPositionNormalX(3)
    ..setButtonPositionNormalY(2)
    ..setIconNormal(Icons.bTNDefend)
    ..setRequirements(commaList(TlsUpgradeIds.builderNoviceTraining))
    ..setRequirementsLevels("2")
    ..presetTargetsAllowed(lvl -> "")
    ..presetTooltipNormal((int lvl) -> "Deflection [|cffffcc00Level {0}|r]".format(lvl.toString()))
    ..presetTooltipNormalExtended((int lvl) -> "While being repaired by this Builder, structures and mechanical units have a {0} chance to reflect Piercing attacks upon the source, and to take only {1} of the damage from attacks that are not reflected. Deflection lasts for {2} seconds after repairing has ended.".format(
      calculateDeflectionChanceToDeflect(lvl).toPercentageString(),
      calculateDeflectionDamageTaken(lvl).toPercentageString01(),
      calculateDeflectionDuration(lvl).toString(0)))

  new AbilityDefinitionDefend(TlsAbilityIds.builderDeflectionTarget)
    ..setLevels(20)
    ..setButtonPositionNormalX(0)
    ..setButtonPositionNormalY(-11)
    ..setButtonPositionTurnOffX(0)
    ..setButtonPositionTurnOffY(-11)
    ..setRequirements("")
    ..presetAttackSpeedFactor((int lvl) -> 0.0)
    ..presetChancetoDeflect(lvl -> calculateDeflectionChanceToDeflect(lvl))
    ..presetDamageDealt(lvl -> 1.0)
    ..presetDamageTaken(lvl -> calculateDeflectionDamageTaken(lvl))
    ..presetDeflectDamageTakenPiercing((int lvl) -> 0.0)
    ..presetDeflectDamageTakenSpells((int lvl) -> 0.0)
    ..presetMagicDamageReduction(lvl -> calculateDeflectionMagicDamageReduction01(lvl))
    ..presetMovementSpeedFactor(lvl -> 0.0)

  new AbilityDefinition(TlsAbilityIds.fellTree, 'Ahan')
  ..setName("Chop Down Tree")
  ..setButtonPositionNormalX(2)
  ..setButtonPositionNormalY(1)
  ..presetTooltipNormal(lvl -> "Chop Down Tree")
  ..presetTooltipNormalExtended(lvl -> "Order the Builder to attack a tree to cut it down.")
  ..presetCooldown(lvl -> 0.0)
  ..presetManaCost(lvl -> 0)
  ..presetCastRange(lvl -> 0)
  ..presetButtonPosNormal(1, 2)
  ..presetIcon("ReplaceableTextures\\CommandButtons\\BTNFellTree.blp")
  ..setRequirements("")

  new UpgradeDefinition(TlsUpgradeIds.builderNoviceTraining)
    ..setLevels(2)
    
    ..setName(1, "Builder Adept Training")
    ..setTooltip(1, "Builder Adept Training")
    ..setTooltipExtended(1, "Increases Builders' armor, repair speed and gives them the Impact Bracing ability.")
    ..setIcon(1, Icons.bTNHumanBuild)
    ..setRequirements(1, "")
    
    ..setName(2, "Builder Master Training")
    ..setTooltip(2, "Builder Master Training")
    ..setTooltipExtended(2, "Increases Builders' armor, repair speed and gives them the Deflection ability.")
    ..setIcon(2, Icons.bTNAdvStruct)
    ..setRequirements(2, commaList(TlsUnitIds.obelisk2))

    ..setButtonPositionX(0)
    ..setButtonPositionY(2)
    ..setGoldCostBase(1)
    ..setGoldCostIncrement(1)
    ..setLumberCostBase(200)
    ..setLumberCostIncrement(200)
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderRepair.toRawCode())
    ..setClass(UpgradeClass.Caster)
    ..setTimeBase(10)
    ..setTimeIncrement(5)

  new UpgradeDefinition(TlsUpgradeIds.builderFurtherStudy)
    ..setLevels(5)

    ..setName(1, "Builder Further Study I")
    ..setTooltip(1, "Builder Further Study I")
    ..setTooltipExtended(1, "Further increases Builders' armor effectiveness of Skilled Repair, Impact Bracing and Deflection.")
    ..setIcon(1, Icons.bTNTome)
    ..setRequirements(1, commaList(TlsUpgradeIds.builderNoviceTraining))
    ..setRequirementsLevels(1, "2")
    
    ..setName(2, "Builder Further Study II")
    ..setTooltip(2, "Builder Further Study II")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Deflection.")
    ..setIcon(2, Icons.bTNTomeBrown)
    ..setRequirements(5, commaList(TlsUnitIds.obelisk3))
    
    ..setName(3, "Builder Further Study III")
    ..setTooltip(3, "Builder Further Study III")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Deflection.")
    ..setIcon(3, Icons.bTNTomeRed)
    
    ..setName(4, "Builder Further Study IV")
    ..setTooltip(4, "Builder Further Study IV")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Deflection.")
    ..setIcon(4, Icons.bTNSorceressAdept)
    ..setRequirements(5, commaList(TlsUnitIds.obelisk4))
    
    ..setName(5, "Builder Further Study V")
    ..setTooltip(5, "Builder Further Study V")
    ..setTooltipExtended(1, "Further increases Builders' armor and effectiveness of Skilled Repair, Impact Bracing and Deflection.")
    ..setIcon(5, Icons.bTNSorceressMaster)
    ..setRequirements(5, commaList(TlsUnitIds.obelisk4))
    
    ..setButtonPositionX(1)
    ..setButtonPositionY(2)
    ..setGoldCostBase(3)
    ..setGoldCostIncrement(1)
    ..setLumberCostBase(400)
    ..setLumberCostIncrement(200)
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderRepair.toRawCode())
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderImpactBracing.toRawCode())
    ..addEffectAbilityLevelBonus(1, 1, TlsAbilityIds.builderDeflection.toRawCode())
    ..setClass(UpgradeClass.NONE)
    ..setTimeBase(10)
    ..setTimeIncrement(5)

// ============================================================================
function onRepairAddRemoveStartEnd()
  if (getRepairAbilityId() != TlsAbilityIds.builderRepair)
    return

  let repairingUnit = getRepairingUnit()
  let targetUnit = getRepairTargetUnit()

  if (repairingUnit.getOwner().getTechResearchLevel(TlsUpgradeIds.builderNoviceTraining) >= 1)
    updateImpactBracingAffector(targetUnit)

  if (repairingUnit.getOwner().getTechResearchLevel(TlsUpgradeIds.builderNoviceTraining) >= 2)
    let deflectionComp = targetUnit.getOrAddDeflectionTargetComponent()
    deflectionComp.update()

// ============================================================================
function removeImpactBracingAffector(unit targetUnit)
  let defenseBonusProp = targetUnit.getProperty(UnitProperty.DEFENSE_BONUS)
  let affector = defenseBonusProp.getAffectorByUserData(IMPACT_BRACING_AFFECTOR_ID)
  if (affector != INVALID_HANDLE)
    defenseBonusProp.removeAffector(affector)

// ============================================================================
function updateImpactBracingAffector(unit targetUnit)
  let defenseBonusProp = targetUnit.getProperty(UnitProperty.DEFENSE_BONUS)
  let existingAffector = defenseBonusProp.getAffectorByUserData(IMPACT_BRACING_AFFECTOR_ID)

  var existingAffectorValue = 0.0
  if (existingAffector != INVALID_HANDLE)
  //{
    let affectorValueResult = defenseBonusProp.getAffectorValue(existingAffector)
    if (affectorValueResult.succeeded())
      existingAffectorValue = affectorValueResult.value

    defenseBonusProp.removeAffector(existingAffector)
  //}

  // Make sure the deflection ability level is the highest of the currently repairing builders
  // since multiple players may be repairing the structure and each can have a different research level
  var maxAbilityLevel = 1
  var numberOfValidUnits = 0

  for repairingUnit in getRepairingUnits(targetUnit)
    if (repairingUnit.isAlive())
      let owner = repairingUnit.getOwner()
      if (owner.getTechResearchLevel(TlsUpgradeIds.builderNoviceTraining) >= 1)
        maxAbilityLevel = max(maxAbilityLevel, repairingUnit.getAbilityLevel(TlsAbilityIds.builderImpactBracing))
        numberOfValidUnits++

  // There are no longer any valid units but there was an affector active so that means
  // that any repairers contributing to impact bracing effect must have just finished repairing
  let contributingRepairEnded = numberOfValidUnits == 0 and existingAffector != INVALID_HANDLE

  let newAffectorValue = max(existingAffectorValue, calculateImpactBracingArmorBonus(maxAbilityLevel))
  let newAffectorDuration = contributingRepairEnded ? calculateImpactBracingDuration(maxAbilityLevel) : 0.0

  // Add the new affector with the max value and (optional) max duration
  defenseBonusProp.affectAdd(
    newAffectorValue,
    newAffectorDuration,
    IMPACT_BRACING_AFFECTOR_ID)

// ============================================================================
public class DeflectionTargetComponent extends UnitComponent
  private CallbackManual m_disableTimer

  // --------------------------------------------------------------------------
  construct (IUnitMetadata owner)
    super(owner)

  // --------------------------------------------------------------------------
  override protected function onDisabled()
    super.onDisabled()

    destroy m_disableTimer
    m_disableTimer = null

  // --------------------------------------------------------------------------
  function restartTimer(real duration)
    let ownerUnit = getOwnerUnit()

    if (m_disableTimer == null)
      m_disableTimer = doManual(duration, true, () -> onTimerExpired(ownerUnit))
    else
      m_disableTimer.restart(duration)

  // --------------------------------------------------------------------------
  function onTimerExpired(unit ownerUnit)
    ownerUnit.issueImmediateOrderById(OrderIds.undefend)
    ownerUnit.removeAbility(TlsAbilityIds.builderDeflectionTarget)
    ownerUnit.removeAbility(DEFLECTION_BUFF.abilId)

  // --------------------------------------------------------------------------
  function update()

    let ownerUnit = getOwnerUnit()

    // Make sure the deflection ability level is the highest of the currently repairing builders
    // since multiple players may be repairing the structure and each can have a different research level
    var maxAbilityLevel = 0
    var contributingUnitCount = 0

    for repairingUnit in getRepairingUnits(ownerUnit)
      if (repairingUnit.isAlive())
        let owner = repairingUnit.getOwner()
        if (owner.getTechResearchLevel(TlsUpgradeIds.builderNoviceTraining) >= 2)
          maxAbilityLevel = max(maxAbilityLevel, repairingUnit.getAbilityLevel(TlsAbilityIds.builderDeflection))
          contributingUnitCount++

    if (maxAbilityLevel == 0 or contributingUnitCount == 0)
      return

    if (not ownerUnit.hasAbility(TlsAbilityIds.builderDeflectionTarget))
      ownerUnit.addAbility(TlsAbilityIds.builderDeflectionTarget)
    
    let currentAbilityLevel = ownerUnit.getAbilityLevel(TlsAbilityIds.builderDeflectionTarget)

    ownerUnit.setAbilityLevel(TlsAbilityIds.builderDeflectionTarget, max(currentAbilityLevel,maxAbilityLevel))
    ownerUnit.issueImmediateOrderById(OrderIds.defend)

    restartTimer(calculateDeflectionDuration(maxAbilityLevel))

// ============================================================================
public function IUnitMetadata.getDeflectionTargetComponent() returns DeflectionTargetComponent
  return this.getComponent(DeflectionTargetComponent.typeId) castTo DeflectionTargetComponent

// ============================================================================
public function IUnitMetadata.getOrAddDeflectionTargetComponent() returns DeflectionTargetComponent
  var component = this.getDeflectionTargetComponent()
  if (component == null)
    component = this.addComponent(new DeflectionTargetComponent(this)) castTo DeflectionTargetComponent
  return component

// ============================================================================
public function unit.getDeflectionTargetComponent() returns DeflectionTargetComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getDeflectionTargetComponent() : null

// ============================================================================
public function unit.getOrAddDeflectionTargetComponent() returns DeflectionTargetComponent
  let metadata = this.getMetadata()
  return metadata != null ? metadata.getOrAddDeflectionTargetComponent() : null

// ============================================================================
init
  if (g_builderDefinition == null)
    createObjectDefinitions()

  registerRepairAdd(function onRepairAddRemoveStartEnd)
  registerRepairRemove(function onRepairAddRemoveStartEnd)
  registerRepairStart(function onRepairAddRemoveStartEnd)
  registerRepairEnd(function onRepairAddRemoveStartEnd)