package Unit_Acolyte
import TlsUnitDefinition
import SurvivorUnitDefinition
import TlsUnitDefinitionBuilder
import Range

public SurvivorUnitDefinition g_acolyteDefinition

// ============================================================================
@compiletime function createObjectDefinitions()

  g_acolyteDefinition = new SurvivorUnitDefinition(TlsUnitIds.Survivors.acolyte, UnitIds.acolyte)
    ..setNormalAbilities(commaList(
      TlsAbilityIds.inventory2Slots,
      TlsAbilityIds.restore))
    ..setAcquisitionRange(600.0)
    ..setArmorSoundType(ArmorSoundType.Flesh)
    ..setAttack1AttackType(AttackType.Chaos)
    ..setAttack1CooldownTime(2)
    ..setAttack1DamageRange(rangeInt(60, 66))
    ..setAttack1ProjectileArc(0.0)
    ..setAttack1ProjectileArt("Abilities\\Weapons\\CryptFiendMissile\\CryptFiendMissile.mdl")
    ..setAttack1ProjectileHomingEnabled(false)
    ..setAttack1ProjectileSpeed(900)
    ..setAttack1Range(600)
    ..setAttack1WeaponSound(WeaponSound.Nothing)
    ..setAttack1WeaponType(WeaponType.Missile)
    ..setAttacksEnabled(1)
    ..setDeathType(DeathType.CanRaiseDoesDecay)
    ..setDefenseBase(0)
    ..setArmorType(ArmorType.Unarmored)
    ..setDefenseUpgradeBonus(1)
    ..setSpeedBase(250)
    ..setManaInitialAmount(100)
    ..setManaMaximum(100)
    ..setManaRegeneration(0.2)
    ..setStructuresBuilt(commaList(TlsUnitIds.altar))
    ..setName("Acolyte")
    ..addUnitClass(TlsUnitClassification.HUMAN)
    ..build("The Acolyte can build the Altar which can be used to revive dead heroes.",
      tooltipBuilder -> begin
        let structuresBuilt = new TooltipItem("Can Build: ")..addValue("Altar")
        tooltipBuilder.addItem(structuresBuilt)
      end)

// ============================================================================
init
  if (g_acolyteDefinition == null)
    createObjectDefinitions()