package Unit_GateCommon
import HashList
import TlsBuildingDefinition
import UnitIds
import ObjEditingCommons
import GameConstants
import ObjectIds
import TlsAbilityIds
import TlsUpgradeIds
import GateCardinalUnitDefinition
import CardinalUnitDefinition
import HashMap
import BuildingUndeadTarget

// If there are any moveable units in the way when a gate rotates using the old
// rotate ability (which used ReplaceUnitTLS) the gate had a chance of
// literally jumping to a new position. This method uses upgrades instead
// which avoids the jumping bug but adds a ton of complexity as you can see.
// We create 1 gate unit for each permutation of open/closed and a unit
// for "rotate" open/closed which is so that the open/closed gate can upgradeT
// to the rotated equivalent and avoid using replace. After the gate succesfully
// upgrades to its "rotate" counterpart it is replaced with the regular unit.

// We need one unit each for the open and closed variations since the pathing maps change
// The gate_build unit is the one the builder can actually build

constant int  UNIT_GATE_BUILD_TIME = 20             // How long it takes to build a gate
constant int  UNIT_GATE_GOLD_COST = 0               // How much it costs in gold
constant int  UNIT_GATE_LUMBER_COST = 350           // How much it costs in lumber
constant int  UNIT_GATE_REPAIR_GOLD = 0             // How much it costs to repair a gate from 0 to full health
constant int  UNIT_GATE_REPAIR_LUMBER = 50          // How much it costs to repair a gate from 0 to full health
constant int  UNIT_GATE_RECYCLE_GOLD = 0            // How much it costs to repair a gate from 0 to full health
constant int  UNIT_GATE_RECYCLE_LUMBER = 50         // How much it costs to repair a gate from 0 to full health
constant int  UNIT_GATE_REPAIR_TIME = 20            // How long it takes to repair a gate from 0 to full health

public HashList<int> g_allGateIds = new HashList<int>()
public HashList<int> g_allOpenGateIds = new HashList<int>()
public HashList<int> g_allClosedGateIds = new HashList<int>()
public HashList<int> g_allBuildGateIds = new HashList<int>()
HashMap<int, GateCardinalUnitDefinitionHelper> g_unitTypeToHelperMap = new HashMap<int, GateCardinalUnitDefinitionHelper>()

//=============================================================================
public function unit.isGate() returns bool
  return this.isClosedGate() or this.isOpenGate() or this.isBuildGate()

//=============================================================================
public function unit.isOpenGate() returns bool
  return g_allOpenGateIds.has(this.getTypeId())

//=============================================================================
public function unit.isClosedGate() returns bool
  return g_allClosedGateIds.has(this.getTypeId()) or this.isBuildGate()

//=============================================================================
public function unit.isBuildGate() returns bool
  return g_allBuildGateIds.has(this.getTypeId())

//=============================================================================
public function getGateHelperForUnitType(int unitType) returns GateCardinalUnitDefinitionHelper
  return g_unitTypeToHelperMap.get(unitType)

//=============================================================================
//
// Unit generation
//
//=============================================================================

//=============================================================================
public class BaseGateDefinition extends TlsBuildingDefinition
  construct(int newId)
    super(newId, UnitIds.scouttower)
    setName("Gate")
    setTintingColorRed(150)
    setTintingColorGreen(150)
    setTintingColorBlue(150)
    setShadowTextureBuilding("")
    setButtonPositionX(0)
    setButtonPositionY(0)
    setDeathTimeseconds(0.83)
    setGroundTexture("")
    setSelectionScale(4.0)
    setScalingValue(0.4)
    setArmorType(ArmorType.Fortified)
    setDeathType(DeathType.CannotRaiseDoesNotDecay)
    setCollisionSize(0.0)
    setPlacementRequires("unbuildable,unwalkable")
    setBuildTime(1)
    setCanFlee(false)
    setHideMinimapDisplay(true)
    setHitPointsMaximumBase(1000)
    setRepairTime(UNIT_GATE_REPAIR_TIME)
    setSightRadiusDay(STRUCTURE_LARGE_SIGHT_RANGE_DAY)
    setSightRadiusNight(STRUCTURE_LARGE_SIGHT_RANGE_NIGHT)
    setBuildTime(1) // Most gate variations are only buildable via upgrades
    setNormalAbilities(commaList(TlsAbilityIds.recycle))
    setRequirements("")
    setUpgradesUsed(commaList(TlsUpgradeIds.campDefense))

    setGoldCost(0)
    setMaterialCost(0)
    setRepairGoldCost(0)
    setRepairLumberCost(0)
    setRecycleGoldRewarded(UNIT_GATE_RECYCLE_GOLD)
    setRecycleLumberRewarded(UNIT_GATE_RECYCLE_LUMBER)

//=============================================================================
public function defineOpenGateUnit(
  GateCardinalUnitDefinitionHelper helper,
  int newId,
  CardinalUnitAngle angle,
  GateCardinalUnitDefinitionHelper upgradesToHelper) returns BaseGateDefinition

  let def = new BaseGateDefinition(newId)
  ..setTooltipBasic("Open |cffffcc00G|rate")
  ..setTooltipExtended("Open this gate so that units can pass through it")
  ..setIconGameInterface(helper.getOpenIconPath(angle))
  ..setModelFile(helper.getModelPath(angle))
  ..setPathingMap(helper.getOpenPathMap(angle))
  ..setButtonPositionX(0)
  ..setButtonPositionY(0)
  ..setRequiredAnimationNames(getGateAnimationProperties(angle, true))
  ..makeBuildingUndeadTarget()
  ..setHotkey("G")

  if (upgradesToHelper != null)
    let closedGateId = helper.getClosedId(angle)
    let nextLevelGateId = upgradesToHelper.getId(angle)
    def.setUpgradesTo(commaList(closedGateId, nextLevelGateId))
  else
    let closedGateId = helper.getClosedId(angle)
    def.setUpgradesTo(commaList(closedGateId))

  g_allGateIds.add(newId)
  g_allOpenGateIds.add(newId)
  g_unitTypeToHelperMap.put(newId, helper)

  return def

//=============================================================================
public function defineClosedGateUnit(
  GateCardinalUnitDefinitionHelper helper,
  int newId,
  CardinalUnitAngle angle,
  GateCardinalUnitDefinitionHelper upgradesToHelper) returns BaseGateDefinition

  let def = new BaseGateDefinition(newId)
  ..setTooltipBasic("Close |cffffcc00G|rate")
  ..setTooltipExtended("Close this gate so that units can no longer pass through it")
  ..setIconGameInterface(helper.getClosedIconPath(angle))
  ..setModelFile(helper.getModelPath(angle))
  ..setPathingMap(helper.getClosedPathMap(angle))
  ..setButtonPositionX(0)
  ..setButtonPositionY(0)
  ..setRequiredAnimationNames(getGateAnimationProperties(angle, false))
  ..makeBuildingUndeadTarget()
  ..setHotkey("G")

  if (upgradesToHelper != null)
    let closedGateId = helper.getOpenId(angle)
    let nextLevelGateId = upgradesToHelper.getId(angle)
    def.setUpgradesTo(commaList(closedGateId, nextLevelGateId))
  else
    let closedGateId = helper.getOpenId(angle)
    def.setUpgradesTo(commaList(closedGateId))

  g_allGateIds.add(newId)
  g_allClosedGateIds.add(newId)
  g_unitTypeToHelperMap.put(newId, helper)

  return def

//=============================================================================
public function defineBuildGateUnit(
  GateCardinalUnitDefinitionHelper helper,
  int newId,
  CardinalUnitAngle angle,
  GateCardinalUnitDefinitionHelper upgradesToHelper) returns BaseGateDefinition

  let def = new BaseGateDefinition(newId)
  ..setIconGameInterface(helper.getIconPath(angle))
  ..setModelFile(helper.getModelPath(angle))
  ..setPathingMap(helper.getPathMap(angle))
  ..setGoldCost(UNIT_GATE_GOLD_COST)
  ..setMaterialCost(UNIT_GATE_LUMBER_COST)
  ..setRepairGoldCost(UNIT_GATE_REPAIR_GOLD)
  ..setRepairLumberCost(UNIT_GATE_REPAIR_GOLD)
  ..setBuildTime(UNIT_GATE_BUILD_TIME)
  ..setTooltipBasic("Upgrade to |cffffcc00G|rate")
  ..setTooltipExtended("Upgrade to a stronger gate that can be opened and closed.")
  ..setButtonPositionX(0)
  ..setButtonPositionY(2)
  ..setRequiredAnimationNames(getGateAnimationProperties(angle, false))
  ..makeBuildingUndeadTarget()

  if (upgradesToHelper != null)
    let closedGateId = helper.getOpenId(angle)
    let nextLevelGateId = upgradesToHelper.getId(angle)
    def.setUpgradesTo(commaList(closedGateId, nextLevelGateId))
  else
    let closedGateId = helper.getOpenId(angle)
    def.setUpgradesTo(commaList(closedGateId))

  g_allGateIds.add(newId)
  g_allBuildGateIds.add(newId)
  g_unitTypeToHelperMap.put(newId, helper)

  return def