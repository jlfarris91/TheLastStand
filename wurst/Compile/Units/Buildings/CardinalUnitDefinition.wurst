package CardinalUnitDefinition

constant real CARDINAL_ANGLE_EW = 0
constant real CARDINAL_ANGLE_NESW = 225
constant real CARDINAL_ANGLE_NS = 270
constant real CARDINAL_ANGLE_NWSE = 315

// ============================================================================
public enum CardinalUnitAngle
  EW
  NESW
  NS
  NWSE

// ============================================================================
public function CardinalUnitAngle.toAngleDegrees() returns real
  switch (this)
    case CardinalUnitAngle.EW
      return CARDINAL_ANGLE_EW
    case CardinalUnitAngle.NESW
      return CARDINAL_ANGLE_NESW
    case CardinalUnitAngle.NS
      return CARDINAL_ANGLE_NS
    case CardinalUnitAngle.NWSE
      return CARDINAL_ANGLE_NWSE

// ============================================================================
public function CardinalUnitAngle.toAngleDegreesString() returns string
  return this.toAngleDegrees().toInt().toString()

// ============================================================================
public tuple optionalCardinalUnitAngle(bool hasValue, CardinalUnitAngle value, string error)

// ============================================================================
public function some(CardinalUnitAngle angle) returns optionalCardinalUnitAngle
  return optionalCardinalUnitAngle(true, angle, "")

// ============================================================================
public function none_CardinalUnitAngle() returns optionalCardinalUnitAngle
  return none_CardinalUnitAngle("")

// ============================================================================
public function none_CardinalUnitAngle(string error) returns optionalCardinalUnitAngle
  return optionalCardinalUnitAngle(false, 0 castTo CardinalUnitAngle, error)

// ============================================================================
public class CardinalUnitDefinitionHelper
  protected int array[4] m_ids
  protected string array[4] m_pathMaps
  protected string array[4] m_modelPaths
  protected string array[4] m_iconPaths

  // --------------------------------------------------------------------------
  function getAngleForUnitType(int unitType) returns optionalCardinalUnitAngle
    for i = 0 to 3
      if (unitType == m_ids[i])
        return some(i castTo CardinalUnitAngle)
    return none_CardinalUnitAngle()

  // --------------------------------------------------------------------------
  function getId(CardinalUnitAngle angle) returns int
    return m_ids[angle castTo int]

  // --------------------------------------------------------------------------
  function setId(CardinalUnitAngle angle, int unitId)
    m_ids[angle castTo int] = unitId

  // --------------------------------------------------------------------------
  function getPathMap(CardinalUnitAngle angle) returns string
    return m_pathMaps[angle castTo int]

  // --------------------------------------------------------------------------
  function setPathMap(CardinalUnitAngle angle, string pathMap)
    m_pathMaps[angle castTo int] = pathMap

  // --------------------------------------------------------------------------
  function getModelPath(CardinalUnitAngle angle) returns string
    return m_modelPaths[angle castTo int]

  // --------------------------------------------------------------------------
  function setModelPath(CardinalUnitAngle angle, string modelPath)
    m_modelPaths[angle castTo int] = modelPath

  // --------------------------------------------------------------------------
  function getIconPath(CardinalUnitAngle angle) returns string
    return m_iconPaths[angle castTo int]

  // --------------------------------------------------------------------------
  function setIconPath(CardinalUnitAngle angle, string iconPath)
    m_iconPaths[angle castTo int] = iconPath