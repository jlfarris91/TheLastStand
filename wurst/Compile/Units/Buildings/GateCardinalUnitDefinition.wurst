package GateCardinalUnitDefinition
import CardinalUnitDefinition

// ============================================================================
public function removeAllGateAnimationProperties(unit gateUnit)
  gateUnit.removeAnimationProperties("Alternate")
  gateUnit.removeAnimationProperties("First")
  gateUnit.removeAnimationProperties("Second")
  gateUnit.removeAnimationProperties("Third")
  gateUnit.removeAnimationProperties("Fourth")

// ============================================================================
public function getGateAnimationProperties(CardinalUnitAngle angle, bool open) returns string

  string facingDirectionProperty

  switch (angle)
    case CardinalUnitAngle.EW
      facingDirectionProperty = "First"
    case CardinalUnitAngle.NESW
      facingDirectionProperty = "Second"
    case CardinalUnitAngle.NS
      facingDirectionProperty = "Third"
    case CardinalUnitAngle.NWSE
      facingDirectionProperty = "Fourth"

  if (open)
    return "{0} Alternate".format(facingDirectionProperty)

  return facingDirectionProperty

// ============================================================================
public class GateCardinalUnitDefinitionHelper extends CardinalUnitDefinitionHelper
  private int array[4] m_openIds
  private int array[4] m_closedIds
  private string array[4] m_openPathMaps
  private string array[4] m_openIconPaths
  private string array[4] m_closedIconPaths

  // --------------------------------------------------------------------------
  construct()

    setPathMap(CardinalUnitAngle.EW, "PathTextures\\Gate_0_Closed.tga")
    setPathMap(CardinalUnitAngle.NESW, "PathTextures\\Gate_225_Closed.tga")
    setPathMap(CardinalUnitAngle.NS, "PathTextures\\Gate_270_Closed.tga")
    setPathMap(CardinalUnitAngle.NWSE, "PathTextures\\Gate_315_Closed.tga")

    setOpenPathMap(CardinalUnitAngle.EW, "PathTextures\\Gate_0_Open.tga")
    setOpenPathMap(CardinalUnitAngle.NESW, "PathTextures\\Gate_225_Open.tga")
    setOpenPathMap(CardinalUnitAngle.NS, "PathTextures\\Gate_270_Open.tga")
    setOpenPathMap(CardinalUnitAngle.NWSE, "PathTextures\\Gate_315_Open.tga")

  // --------------------------------------------------------------------------
  override function getAngleForUnitType(int unitType) returns optionalCardinalUnitAngle
    for i = 0 to 3
      if (unitType == m_ids[i] or
          unitType == m_openIds[i] or
          unitType == m_closedIds[i])
        return some(i castTo CardinalUnitAngle)
    return none_CardinalUnitAngle()

  // --------------------------------------------------------------------------
  function getOpenId(CardinalUnitAngle angle) returns int
    return m_openIds[angle castTo int]

  // --------------------------------------------------------------------------
  function setOpenId(CardinalUnitAngle angle, int unitId)
    m_openIds[angle castTo int] = unitId

  // --------------------------------------------------------------------------
  function getClosedId(CardinalUnitAngle angle) returns int
    return m_closedIds[angle castTo int]

  // --------------------------------------------------------------------------
  function setClosedId(CardinalUnitAngle angle, int unitId)
    m_closedIds[angle castTo int] = unitId

  // --------------------------------------------------------------------------
  function getOpenPathMap(CardinalUnitAngle angle) returns string
    return m_openPathMaps[angle castTo int]

  // --------------------------------------------------------------------------
  function setOpenPathMap(CardinalUnitAngle angle, string pathMap)
    m_openPathMaps[angle castTo int] = pathMap

  // --------------------------------------------------------------------------
  function getClosedPathMap(CardinalUnitAngle angle) returns string
    return super.getPathMap(angle)

  // --------------------------------------------------------------------------
  function setClosedPathMap(CardinalUnitAngle angle, string pathMap)
    super.setPathMap(angle, pathMap)

  // --------------------------------------------------------------------------
  function getOpenIconPath(CardinalUnitAngle angle) returns string
    return m_openIconPaths[angle castTo int]

  // --------------------------------------------------------------------------
  function setOpenIconPath(CardinalUnitAngle angle, string iconPath)
    m_openIconPaths[angle castTo int] = iconPath

  // --------------------------------------------------------------------------
  function getClosedIconPath(CardinalUnitAngle angle) returns string
    return m_closedIconPaths[angle castTo int]

  // --------------------------------------------------------------------------
  function setClosedIconPath(CardinalUnitAngle angle, string iconPath)
    m_closedIconPaths[angle castTo int] = iconPath