package Unit_Gate4
import ObjectIdGenerator
import UnitObjEditing
import TlsBuildingDefinition
import CardinalUnitDefinition
import GateCardinalUnitDefinition
import Unit_GateCommon
import ObjectIds
import TlsUnitIds
import HashList

constant int GOLD_COST = 20
constant int LUMBER_COST = 1050
constant int HEALTH_MAX = 4000
constant int ARMOR = 5
constant real SCALE_DIAGONAL = 0.36       // How large the diagonal gate model is
constant real SCALE_HORIZONTAL = 0.38     // How large the horizonta/vertical gate model is

public GateCardinalUnitDefinitionHelper g_gate4Helper = new Gate4CardinalUnitDefinitionHelper()
public HashList<int> g_gate4Ids = new HashList<int>()

//=============================================================================
public class Gate4Ids
  static constant int ew_build = compiletime(UNIT_ID_GEN.next())
  static constant int ew_open = compiletime(UNIT_ID_GEN.next())
  static constant int ew_closed = compiletime(UNIT_ID_GEN.next())
  static constant int nesw_build = compiletime(UNIT_ID_GEN.next())
  static constant int nesw_open = compiletime(UNIT_ID_GEN.next())
  static constant int nesw_closed = compiletime(UNIT_ID_GEN.next())
  static constant int ns_build = compiletime(UNIT_ID_GEN.next())
  static constant int ns_open = compiletime(UNIT_ID_GEN.next())
  static constant int ns_closed = compiletime(UNIT_ID_GEN.next())
  static constant int nwse_build = compiletime(UNIT_ID_GEN.next())
  static constant int nwse_open = compiletime(UNIT_ID_GEN.next())
  static constant int nwse_closed = compiletime(UNIT_ID_GEN.next())

//=============================================================================
class Gate4CardinalUnitDefinitionHelper extends GateCardinalUnitDefinitionHelper

  // --------------------------------------------------------------------------
  construct()
    setId(CardinalUnitAngle.EW, Gate4Ids.ew_build)
    setId(CardinalUnitAngle.NESW, Gate4Ids.nesw_build)
    setId(CardinalUnitAngle.NS, Gate4Ids.ns_build)
    setId(CardinalUnitAngle.NWSE, Gate4Ids.nwse_build)

    setOpenId(CardinalUnitAngle.EW, Gate4Ids.ew_open)
    setOpenId(CardinalUnitAngle.NESW, Gate4Ids.nesw_open)
    setOpenId(CardinalUnitAngle.NS, Gate4Ids.ns_open)
    setOpenId(CardinalUnitAngle.NWSE, Gate4Ids.nwse_open)

    setClosedId(CardinalUnitAngle.EW, Gate4Ids.ew_closed)
    setClosedId(CardinalUnitAngle.NESW, Gate4Ids.nesw_closed)
    setClosedId(CardinalUnitAngle.NS, Gate4Ids.ns_closed)
    setClosedId(CardinalUnitAngle.NWSE, Gate4Ids.nwse_closed)

    setModelPath(CardinalUnitAngle.EW, "Units\\ElfGate4Way\\elfgate4way.mdx")
    setModelPath(CardinalUnitAngle.NESW, "Units\\ElfGate4Way\\elfgate4way.mdx")
    setModelPath(CardinalUnitAngle.NS, "Units\\ElfGate4Way\\elfgate4way.mdx")
    setModelPath(CardinalUnitAngle.NWSE, "Units\\ElfGate4Way\\elfgate4way.mdx")

    setIconPath(CardinalUnitAngle.EW, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg0_Closed.TGA")
    setIconPath(CardinalUnitAngle.NESW, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg225_Closed.TGA")
    setIconPath(CardinalUnitAngle.NS, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg270_Closed.TGA")
    setIconPath(CardinalUnitAngle.NWSE, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg315_Closed.TGA")

    setOpenIconPath(CardinalUnitAngle.EW, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg0_Open.TGA")
    setOpenIconPath(CardinalUnitAngle.NESW, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg225_Open.TGA")
    setOpenIconPath(CardinalUnitAngle.NS, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg270_Open.TGA")
    setOpenIconPath(CardinalUnitAngle.NWSE, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg315_Open.TGA")

    setClosedIconPath(CardinalUnitAngle.EW, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg0_Closed.TGA")
    setClosedIconPath(CardinalUnitAngle.NESW, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg225_Closed.TGA")
    setClosedIconPath(CardinalUnitAngle.NS, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg270_Closed.TGA")
    setClosedIconPath(CardinalUnitAngle.NWSE, "ReplaceableTextures\\CommandButtons\\BTNElfGate_Deg315_Closed.TGA")

//=============================================================================
function createGateUnitVariations()
  createGateUnitVariations(CardinalUnitAngle.EW, "Vertical (EW)", SCALE_HORIZONTAL)
  createGateUnitVariations(CardinalUnitAngle.NESW, "Diagonal (NE SW)", SCALE_DIAGONAL)
  createGateUnitVariations(CardinalUnitAngle.NS, "Horizontal (NS)", SCALE_HORIZONTAL)
  createGateUnitVariations(CardinalUnitAngle.NWSE, "Diagonal (NW SE)", SCALE_DIAGONAL)

//=============================================================================
function createGateUnitVariations(CardinalUnitAngle angle, string name, real scale)

  g_gate4Ids
    ..add(Gate4Ids.ew_build)
    ..add(Gate4Ids.ew_open)
    ..add(Gate4Ids.ew_closed)
    ..add(Gate4Ids.nesw_build)
    ..add(Gate4Ids.nesw_open)
    ..add(Gate4Ids.nesw_closed)
    ..add(Gate4Ids.ns_build)
    ..add(Gate4Ids.ns_open)
    ..add(Gate4Ids.ns_closed)
    ..add(Gate4Ids.nwse_build)
    ..add(Gate4Ids.nwse_open)
    ..add(Gate4Ids.nwse_closed)

  defineOpenGateUnit(g_gate4Helper, g_gate4Helper.getOpenId(angle), angle, null)
    ..setScalingValue(scale)

  defineClosedGateUnit(g_gate4Helper, g_gate4Helper.getClosedId(angle), angle, null)
    ..setScalingValue(scale)

  defineBuildGateUnit(g_gate4Helper, g_gate4Helper.getId(angle), angle, null)
    ..setScalingValue(scale)
    ..setName("Decorated Gate")
    ..setTooltipBasic("Upgrade to Decorated Gate")
    ..setTooltipExtended("|cffffcc00" + name + "|r|nUpgrade to the strongest gate that can be opened and closed to allow or prevent access to your camp.")
    ..setGoldCost(GOLD_COST)
    ..setLumberCost(LUMBER_COST)
    ..setHitPointsMaximumBase(HEALTH_MAX)
    ..setDefenseBase(ARMOR)
    ..setRequirements(commaList(TlsUnitIds.headquarters4))

//=============================================================================
init
  createGateUnitVariations()

// ============================================================================
@compiletime
function init_compiletime()
  g_gate4Helper = new Gate4CardinalUnitDefinitionHelper()
  g_gate4Ids = new HashList<int>()
  createGateUnitVariations()