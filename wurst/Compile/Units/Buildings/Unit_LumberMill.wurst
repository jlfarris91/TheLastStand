package Unit_LumberMill
import TlsBuildingDefinition
import GameConstants
import TlsUpgradeIds
import BuildingUndeadTarget
import RealtimeUnitComponent
import SmartValue
import PlayerProperties
import WorkstationComponent
import ChannelAbilityPreset
import FX
import Handle
import TlsUnitDefinitionBuilder
import ColorUtility
import ClosureTimers
import RegisterEvents
import PlayerExtensions

public TlsBuildingDefinition g_lumberMillDefinition

constant int ACTIVE_ICON_ABILITY_ID   = compiletime(ABIL_ID_GEN.next())
constant int INACTIVE_ICON_ABILITY_ID = compiletime(ABIL_ID_GEN.next())

_handle array g_lumberHarvestAffectors

// ============================================================================
public class LumberMill

  // --------------------------------------------------------------------------
  static function getLumberGatherCooldownMod(int operatorLevel) returns real
    return (operatorLevel - 1) * 0.25

// ============================================================================
public class LumberMillComponent extends WorkstationAbilityComponent
  private SmartValue m_lumberGatherAmount
  private SmartValue m_lumberGatherCooldown
  private _handle m_lumberGatherCooldownMod
  private CallbackPeriodic m_gatherCallback

  // --------------------------------------------------------------------------
  construct (IUnitMetadata metadata)
    super(metadata)

  // --------------------------------------------------------------------------
  ondestroy

  // --------------------------------------------------------------------------
  override function onEnabled()
    super.onEnabled()
    
    m_lumberGatherCooldown = getOwnerUnit().getOwner().getProperty(PlayerProperty.LUMBERMILL_GATHER_COOLDOWN).attach(this)
    m_lumberGatherAmount = getOwnerUnit().getOwner().getProperty(PlayerProperty.LUMBERMILL_GATHER_AMOUNT).attach(this)

  // --------------------------------------------------------------------------
  override function onDisabled()
    super.onDisabled()
    
    if (m_lumberGatherCooldown != null)
      destroy m_lumberGatherCooldown
      m_lumberGatherCooldown = null
    
    if (m_lumberGatherAmount != null)
      destroy m_lumberGatherAmount
      m_lumberGatherAmount = null

    if (m_gatherCallback != null)
      destroy m_gatherCallback
      m_gatherCallback = null

  // --------------------------------------------------------------------------
  function getLumberGatherCooldown() returns real
    return m_lumberGatherCooldown != null ? m_lumberGatherCooldown.getValue() : 999.0

  // --------------------------------------------------------------------------
  function getLumberGatherAmount() returns int
    return m_lumberGatherAmount != null ? m_lumberGatherAmount.getIntValue() : 0

  // --------------------------------------------------------------------------
  override protected function updateState()
    super.updateState()

    let ownerUnit = getOwnerUnit()
    let operatorLevel = getOperatorLevel()

    if (m_lumberGatherCooldown != null)
      m_lumberGatherCooldown.removeAffector(m_lumberGatherCooldownMod)
      m_lumberGatherCooldownMod = m_lumberGatherCooldown.affectSub(LumberMill.getLumberGatherCooldownMod(operatorLevel))

    if (isWorkstationActive())
    //{
      ownerUnit.removeAbility(INACTIVE_ICON_ABILITY_ID)
      ownerUnit.addAbility(ACTIVE_ICON_ABILITY_ID)
      ownerUnit.setAbilityLevel(ACTIVE_ICON_ABILITY_ID, operatorLevel)

      if (m_gatherCallback == null)
        m_gatherCallback = doPeriodically(getLumberGatherCooldown()) (CallbackPeriodic cb) ->
          grantLumber()
    //}
    else
    //{
      ownerUnit.removeAbility(ACTIVE_ICON_ABILITY_ID)
      ownerUnit.addAbility(INACTIVE_ICON_ABILITY_ID)

      if (m_gatherCallback != null)
        destroy m_gatherCallback
        m_gatherCallback = null
    //}

  // --------------------------------------------------------------------------
  private function grantLumber()
    let amount = getLumberGatherAmount()
    getOwnerPlayer().addLumber(amount)
    FX.createGainedLumberTag(getOwnerUnit().getPos(), amount)

// ============================================================================
public function IUnitMetadata.getLumberMillComponent() returns LumberMillComponent
  return this.getComponent(LumberMillComponent.typeId) castTo LumberMillComponent

// ============================================================================
public function IUnitMetadata.getOrAddLumberMillComponent() returns LumberMillComponent
  var component = this.getLumberMillComponent()
  if (component == null)
    component = this.addComponent(new LumberMillComponent(this)) castTo LumberMillComponent
  return component

// ============================================================================
function onResearchFinished()
  let researchId = GetResearched()

  if (researchId != TlsUpgradeIds.lumberHarvest)
    return

  let researchingUnit = GetResearchingUnit()
  let researchingPlayer = researchingUnit.getOwner()
  let researchLevel = researchingPlayer.getTechResearchLevel(researchId)

  let gatherAmountProp = researchingPlayer.getProperty(PlayerProperty.LUMBERMILL_GATHER_AMOUNT)

  let affector = g_lumberHarvestAffectors[researchingPlayer.getId()]
  if (affector != INVALID_HANDLE)
    gatherAmountProp.removeAffector(affector)

  g_lumberHarvestAffectors[researchingPlayer.getId()] = gatherAmountProp.affectAdd(researchLevel * 5.0)

// ============================================================================
@compiletime function createObjectDefinitions()

  let description = "A structure used to harvest lumber and research improvements to lumber harvesting.|n|n{0}".format(
    "Periodically gathers lumber when operated by a Survivor".green())

  g_lumberMillDefinition = new TlsBuildingDefinition(TlsUnitIds.lumberMill, UnitIds.humanlumbermill)
    ..makeBuildingUndeadTarget()
    ..setName("Lumber Mill")
    ..setTooltipBasic("Build Lumber Mill")
    ..setHotkey("M")
    ..setButtonPositionX(0)
    ..setButtonPositionY(1)
    ..setDeathTimeseconds(2.34)
    ..setGroundTexture("HSMA")
    ..setTintingColorRed(150)
    ..setTintingColorBlue(150)
    ..setTintingColorGreen(150)
    ..setArmorType(ArmorType.Fortified)
    ..setPlacementRequires("unbuildable,unwalkable")
    ..setPathingMap(BUILDING_MEDIUM_PATH_MAP)
    ..setScalingValue(0.6)
    ..setSelectionScale(2.0)
    ..setShadowTextureBuilding("")
    ..setBuildTime(BUILD_TIME_BUILDING_MEDIUM)
    ..setRepairTime(REPAIR_TIME_BUILDING_MEDIUM)
    ..setHideMinimapDisplay(true)
    ..setSightRadiusDay(STRUCTURE_MEDIUM_SIGHT_RANGE_DAY)
    ..setSightRadiusNight(STRUCTURE_MEDIUM_SIGHT_RANGE_NIGHT)
    ..setUpgradesTo("")
    ..setUpgradesUsed(commaList(TlsUpgradeIds.campDefense))
    ..setNormalAbilities(commaList(
      TlsAbilityIds.recycle,
      TlsAbilityIds.blightDispelSmall,
      AbilityIds.returnLumber,
      TlsAbilityIds.workstationLoadUnit,
      TlsAbilityIds.workstationUnloadUnit,
      TlsAbilityIds.inventory2Slots))
    ..setResearchesAvailable(commaList(TlsUpgradeIds.lumberHarvest))
    ..setRequirements(commaList(TlsUnitIds.headquarters1))
    ..setHitPointsMaximumBase(500)
    ..setArmorType(ArmorType.Fortified)
    ..setDefenseBase(0)
    ..setGoldCost(1)
    ..setLumberCost(300)
    ..setCommonBuildingProperties()
    ..addUnitClass(TlsUnitClassification.BUILDING)
    ..addUnitClass(TlsUnitClassification.WORKSTATION)
    ..build(description,
      /*caresAboutCombatStats*/ false,
      tooltipBuilder -> begin
        let workstationItem = new WorkstationOperatorBonusesTooltipItem()
        ..addValue("Lumber gathering cooldown decreases with each operator level")
        tooltipBuilder.addItem(workstationItem)
      end)

  let activeWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(true)..setDescription(description)
  let inactiveWorkstationIconTooltipBuilder = new WorkstationIconTooltipBuilder(false)..setDescription(description)

  let properties = new WorkstationOperatorLevelBonusesTooltipItem()
  ..addValue(lvl -> "Lumber gathering cooldown is decreased by {0}s".format((LumberMill.getLumberGatherCooldownMod(lvl)).toString()))
  activeWorkstationIconTooltipBuilder.addItem(properties)

  new AbilityActiveWorkstationIconDefinition(ACTIVE_ICON_ABILITY_ID)
    ..setName("Lumber Mill")
    ..presetTooltipNormalExtended(lvl -> activeWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  new AbilityInactiveWorkstationIconDefinition(INACTIVE_ICON_ABILITY_ID)
    ..setName("Lumber Mill")
    ..presetTooltipNormalExtended(lvl -> inactiveWorkstationIconTooltipBuilder.getTooltipExtended(lvl))

  destroy activeWorkstationIconTooltipBuilder
  destroy inactiveWorkstationIconTooltipBuilder

// ============================================================================
init
  if (g_lumberMillDefinition == null)
    createObjectDefinitions()

  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_RESEARCH_FINISH, function onResearchFinished)