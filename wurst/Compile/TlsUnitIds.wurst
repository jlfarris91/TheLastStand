package TlsUnitIds
import ObjectIdGenerator
import GameConstants
import Preload

// ============================================================================
public class TlsUnitIds

  static constant int postLantern = compiletime(UNIT_ID_GEN.next())
  static constant int chest = compiletime(UNIT_ID_GEN.next())
  static constant int lampPowered = compiletime(UNIT_ID_GEN.next())
  static constant int lampUnpowered = compiletime(UNIT_ID_GEN.next())
  static constant int wallHorizontal = compiletime(UNIT_ID_GEN.next())
  static constant int wallCorner = compiletime(UNIT_ID_GEN.next())
  static constant int shop = compiletime(UNIT_ID_GEN.next())
  static constant int baseFooty = compiletime(UNIT_ID_GEN.next())
  static constant int altar = compiletime(UNIT_ID_GEN.next())

  static constant int workbench = compiletime(UNIT_ID_GEN.next())
  static constant int lumberMill = compiletime(UNIT_ID_GEN.next())
  static constant int forge = compiletime(UNIT_ID_GEN.next())

  static constant int foundationMedium = compiletime(UNIT_ID_GEN.next())
  static constant int foundationLarge = compiletime(UNIT_ID_GEN.next())
  static constant int foundationTower = compiletime(UNIT_ID_GEN.next())
  
  static constant int campFire = compiletime(UNIT_ID_GEN.next())
  static constant int campFireBuild = compiletime(UNIT_ID_GEN.next())
  static constant int campFireOff = compiletime(UNIT_ID_GEN.next())
  static constant int campFire2 = compiletime(UNIT_ID_GEN.next())
  
  static constant int obelisk = compiletime(HERO_ID_GEN.next())

  static constant int shelter1 = compiletime(UNIT_ID_GEN.next())
  static constant int shelter2 = compiletime(UNIT_ID_GEN.next())
  static constant int shelter3 = compiletime(UNIT_ID_GEN.next())

  static constant int array spikes = [
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next())
  ]

  static constant int barricade1 = compiletime(UNIT_ID_GEN.next())
  static constant int barricade2 = compiletime(UNIT_ID_GEN.next())
  static constant int barricade3 = compiletime(UNIT_ID_GEN.next())
  static constant int barricade4 = compiletime(UNIT_ID_GEN.next())

  // Defense
  static constant int workshop = compiletime(UNIT_ID_GEN.next())
  static constant int scoutTower = compiletime(UNIT_ID_GEN.next())
  static constant int array guardTowers = [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
  static constant int array cannonTowers = [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
  static constant int tunnelEntrance = compiletime(UNIT_ID_GEN.next())
  static constant int tunnelEntrance_trainUnit = compiletime(UNIT_ID_GEN.next())

  // Military
  static constant int blacksmith = compiletime(UNIT_ID_GEN.next())
  static constant int chapel = compiletime(UNIT_ID_GEN.next())
  static constant int spearmansTent = compiletime(UNIT_ID_GEN.next())
  static constant int munitionsDepot = compiletime(UNIT_ID_GEN.next())
  static constant int rangedTarget = compiletime(UNIT_ID_GEN.next())
  
  // Electricity
  static constant int manualGenerator = compiletime(UNIT_ID_GEN.next())
  static constant int solarGenerator = compiletime(UNIT_ID_GEN.next())
  static constant int battery = compiletime(UNIT_ID_GEN.next())

  static constant int turretPortable = compiletime(UNIT_ID_GEN.next())
  static constant int turretElemental = compiletime(UNIT_ID_GEN.next())
  static constant int turretPhysical = compiletime(UNIT_ID_GEN.next())
  static constant int turretFire = compiletime(UNIT_ID_GEN.next())
  static constant int turretFrost = compiletime(UNIT_ID_GEN.next())
  static constant int turretElectric = compiletime(UNIT_ID_GEN.next())
  static constant int turretBallista = compiletime(UNIT_ID_GEN.next())
  static constant int turretCannon = compiletime(UNIT_ID_GEN.next())

  // Heroes and skins
  static constant int heroDefault = compiletime(HERO_ID_GEN.next())

  // Trader
  static constant int trader = compiletime(UNIT_ID_GEN.next())
  static constant int traderHorse = compiletime(UNIT_ID_GEN.next())

  // Critters
  static constant int deer = compiletime(UNIT_ID_GEN.next())

  // --------------------------------------------------------------------------
  public static class Survivors
  //{
    static constant int survivorMale = compiletime(UNIT_ID_GEN.next())
    static constant int builder1 = compiletime(UNIT_ID_GEN.next())
    static constant int builder2 = compiletime(UNIT_ID_GEN.next())
    static constant int militia1 = compiletime(UNIT_ID_GEN.next())
    static constant int militia2 = compiletime(UNIT_ID_GEN.next())
    static constant int militia3 = compiletime(UNIT_ID_GEN.next())
    static constant int spearman1 = compiletime(UNIT_ID_GEN.next())
    static constant int spearman2 = compiletime(UNIT_ID_GEN.next())
    static constant int marksman1 = compiletime(UNIT_ID_GEN.next())
    static constant int marksman2 = compiletime(UNIT_ID_GEN.next())
    static constant int marksman3 = compiletime(UNIT_ID_GEN.next())
    static constant int priest1 = compiletime(UNIT_ID_GEN.next())
    static constant int priest2 = compiletime(UNIT_ID_GEN.next())
  //}

  // --------------------------------------------------------------------------
  public static class BuildItemUnits
  //{
    static constant int bandages = compiletime(UNIT_ID_GEN.next())
    static constant int staminaPotion1 = compiletime(UNIT_ID_GEN.next())
    static constant int armor1 = compiletime(UNIT_ID_GEN.next())
    static constant int shelter = compiletime(UNIT_ID_GEN.next())
    static constant int obelisk = compiletime(UNIT_ID_GEN.next())

    static constant int builder1 = compiletime(UNIT_ID_GEN.next())
    static constant int builder2 = compiletime(UNIT_ID_GEN.next())
    static constant int militia1 = compiletime(UNIT_ID_GEN.next())
    static constant int militia2 = compiletime(UNIT_ID_GEN.next())
    static constant int militia3 = compiletime(UNIT_ID_GEN.next())
    static constant int marksman1 = compiletime(UNIT_ID_GEN.next())
    static constant int spearman1 = compiletime(UNIT_ID_GEN.next())
    static constant int spearman2 = compiletime(UNIT_ID_GEN.next())
    static constant int priest1 = compiletime(UNIT_ID_GEN.next())
    static constant int priest2 = compiletime(UNIT_ID_GEN.next())
  //}

  // --------------------------------------------------------------------------
  public static class Undead
  //{
    static constant int array[MAX_ELITE_TIER] zombiesDay =            [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] zombiesNight =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] skeletonArchers =       [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] crows =                 [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] necromancers =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] tombstones =            [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] darkMinions =           [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] skeletonOrcs =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] ghosts =                [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] fiends =                [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] cultists =              [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] wagons =                [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] gargoyles =             [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] wyrms =                 [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] abominations =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] forgottenOnes =         [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] tentacles =             [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] fallenBandit =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] fallenMarksman =        [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] fallenWizard =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] fallenBanditLord =      [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]

    // Summons
    static constant int skeletonWarrior = compiletime(UNIT_ID_GEN.next())
    static constant int skeletonMage = compiletime(UNIT_ID_GEN.next())
    static constant int skeletonChampion = compiletime(UNIT_ID_GEN.next())
    static constant int phoenixEgg = compiletime(UNIT_ID_GEN.next())

    // Archimonde
    static constant int archimonde = compiletime(UNIT_ID_GEN.next())
    static constant int infernal = compiletime(UNIT_ID_GEN.next())
    static constant int felHound = compiletime(UNIT_ID_GEN.next())
    static constant int doomGuard = compiletime(UNIT_ID_GEN.next())
    
    // Dummies
    static constant int abomThrowCaster = compiletime(UNIT_ID_GEN.next())
  //}

  // Terrain map constants
  static constant int baseEasy = 'h00H'
  static constant int baseMedium = 'h00J'
  static constant int baseHard = 'h00K'
  static constant int spawnPoint = 'h00I'
  static constant int tradingPost = 'h00L'
  static constant int waygate = 'nwgt'

// ============================================================================
public class NotificationIds
  static constant int gateNotification = compiletime(HERO_ID_GEN.next())

// ============================================================================
public function unit.isTlsHero() returns bool
  let id = this.getTypeId()
  return id == TlsUnitIds.heroDefault

// ============================================================================
public function unit.isSurvivor() returns bool
  let targetTypeId = this.getTypeId()
  return  targetTypeId == TlsUnitIds.Survivors.survivorMale or
          targetTypeId == TlsUnitIds.Survivors.builder1 or
          targetTypeId == TlsUnitIds.Survivors.builder2 or
          targetTypeId == TlsUnitIds.Survivors.marksman1 or
          targetTypeId == TlsUnitIds.Survivors.priest1 or
          targetTypeId == TlsUnitIds.Survivors.priest2 or
          targetTypeId == TlsUnitIds.Survivors.militia1 or
          targetTypeId == TlsUnitIds.Survivors.militia2 or
          targetTypeId == TlsUnitIds.Survivors.militia3 or
          targetTypeId == TlsUnitIds.Survivors.spearman1 or
          targetTypeId == TlsUnitIds.Survivors.spearman2

// ============================================================================
public function unit.isAcolyte() returns bool
  return this.getTypeId() == TlsUnitIds.Survivors.priest2

// ============================================================================
public function unit.isObelisk() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.obelisk

// ============================================================================
public function unit.isShelter() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.shelter1 or
         targetTypeId == TlsUnitIds.shelter2 or
         targetTypeId == TlsUnitIds.shelter3

// ============================================================================
public function unit.isBarricade() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.barricade1 or
         targetTypeId == TlsUnitIds.barricade2 or
         targetTypeId == TlsUnitIds.barricade3 or
         targetTypeId == TlsUnitIds.barricade4

// ============================================================================
public function unit.isCampFire() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.campFireBuild or
         targetTypeId == TlsUnitIds.campFire or
         targetTypeId == TlsUnitIds.campFireOff or
         targetTypeId == TlsUnitIds.campFire2

// ============================================================================
public function unit.isChest() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.chest

// ============================================================================
public function unit.isLampPost() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.postLantern

// ============================================================================
public function unit.isRangedTarget() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.rangedTarget

// ============================================================================
public function unit.isSpikes() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.spikes[0] or
         targetTypeId == TlsUnitIds.spikes[1] or
         targetTypeId == TlsUnitIds.spikes[2] or
         targetTypeId == TlsUnitIds.spikes[3] or
         targetTypeId == TlsUnitIds.spikes[4]

// ============================================================================
public function unit.isWorkstation() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.scoutTower or 
         targetTypeId == TlsUnitIds.guardTowers[0] or
         targetTypeId == TlsUnitIds.guardTowers[1] or
         targetTypeId == TlsUnitIds.guardTowers[2] or
         targetTypeId == TlsUnitIds.cannonTowers[0] or
         targetTypeId == TlsUnitIds.cannonTowers[1] or
         targetTypeId == TlsUnitIds.cannonTowers[2]

// ============================================================================
public function unit.isZombie() returns bool
  return this.getTypeId().isZombie()

// ============================================================================
public function int.isZombie() returns bool
  return this == TlsUnitIds.Undead.zombiesNight[0] or
         this == TlsUnitIds.Undead.zombiesNight[1] or
         this == TlsUnitIds.Undead.zombiesNight[2]

// ============================================================================
public function unit.isTypeOfGhost() returns bool
  return this.getTypeId().isTypeOfFiend()

// ============================================================================
public function int.isTypeOfGhost() returns bool
  return this == TlsUnitIds.Undead.ghosts[0] or
         this == TlsUnitIds.Undead.ghosts[1] or
         this == TlsUnitIds.Undead.ghosts[2]

// ============================================================================
public function unit.isTypeOfFiend() returns bool
  return this.getTypeId().isTypeOfFiend()

// ============================================================================
public function int.isTypeOfFiend() returns bool
  return this == TlsUnitIds.Undead.fiends[0] or
         this == TlsUnitIds.Undead.fiends[1] or
         this == TlsUnitIds.Undead.fiends[2]

// ============================================================================
public function unit.isTypeOfNecromancer() returns bool
  return this.getTypeId().isTypeOfNecromancer()

// ============================================================================
public function int.isTypeOfNecromancer() returns bool
  return this == TlsUnitIds.Undead.necromancers[0] or
         this == TlsUnitIds.Undead.necromancers[1] or
         this == TlsUnitIds.Undead.necromancers[2]

// ============================================================================
public function unit.isTypeOfAbomination() returns bool
  return this.getTypeId().isTypeOfAbomination()

// ============================================================================
public function int.isTypeOfAbomination() returns bool
  return this == TlsUnitIds.Undead.abominations[0] or
         this == TlsUnitIds.Undead.abominations[1] or
         this == TlsUnitIds.Undead.abominations[2]

// ============================================================================
public function unit.isTypeOfTombstone() returns bool
  return this.getTypeId().isTypeOfTombstone()

// ============================================================================
public function int.isTypeOfTombstone() returns bool
  return this == TlsUnitIds.Undead.tombstones[0] or
         this == TlsUnitIds.Undead.tombstones[1] or
         this == TlsUnitIds.Undead.tombstones[2]

// ============================================================================
public function int.isTypeOfForgottenOne() returns bool
  return this == TlsUnitIds.Undead.forgottenOnes[0] or
         this == TlsUnitIds.Undead.forgottenOnes[1] or
         this == TlsUnitIds.Undead.forgottenOnes[2]

// ============================================================================
init
  
  Preload.registerUnitTypeId(TlsUnitIds.spawnPoint)
  Preload.registerUnitTypeId(TlsUnitIds.postLantern)
  Preload.registerUnitTypeId(TlsUnitIds.chest)
  Preload.registerUnitTypeId(TlsUnitIds.lampPowered)
  Preload.registerUnitTypeId(TlsUnitIds.lampUnpowered)
  Preload.registerUnitTypeId(TlsUnitIds.wallHorizontal)
  Preload.registerUnitTypeId(TlsUnitIds.wallCorner)
  Preload.registerUnitTypeId(TlsUnitIds.shop)
  Preload.registerUnitTypeId(TlsUnitIds.baseFooty)
  Preload.registerUnitTypeId(TlsUnitIds.deer)
  Preload.registerUnitTypeId(TlsUnitIds.lumberMill)
  Preload.registerUnitTypeId(TlsUnitIds.altar)
  Preload.registerUnitTypeId(TlsUnitIds.campFire)
  Preload.registerUnitTypeId(TlsUnitIds.campFireBuild)
  Preload.registerUnitTypeId(TlsUnitIds.campFireOff)
  Preload.registerUnitTypeId(TlsUnitIds.campFire2)
  Preload.registerUnitTypeId(TlsUnitIds.obelisk)
  Preload.registerUnitTypeId(TlsUnitIds.shelter1)
  Preload.registerUnitTypeId(TlsUnitIds.shelter2)
  Preload.registerUnitTypeId(TlsUnitIds.shelter3)
  Preload.registerUnitTypeId(TlsUnitIds.spikes[0])
  Preload.registerUnitTypeId(TlsUnitIds.spikes[1])
  Preload.registerUnitTypeId(TlsUnitIds.spikes[2])
  Preload.registerUnitTypeId(TlsUnitIds.spikes[3])
  Preload.registerUnitTypeId(TlsUnitIds.spikes[4])
  Preload.registerUnitTypeId(TlsUnitIds.barricade1)
  Preload.registerUnitTypeId(TlsUnitIds.barricade2)
  Preload.registerUnitTypeId(TlsUnitIds.barricade3)
  Preload.registerUnitTypeId(TlsUnitIds.barricade4)
  Preload.registerUnitTypeId(TlsUnitIds.workbench)
  Preload.registerUnitTypeId(TlsUnitIds.workshop)
  Preload.registerUnitTypeId(TlsUnitIds.scoutTower)
  Preload.registerUnitTypeId(TlsUnitIds.guardTowers[0])
  Preload.registerUnitTypeId(TlsUnitIds.guardTowers[1])
  Preload.registerUnitTypeId(TlsUnitIds.guardTowers[2])
  Preload.registerUnitTypeId(TlsUnitIds.cannonTowers[0])
  Preload.registerUnitTypeId(TlsUnitIds.cannonTowers[1])
  Preload.registerUnitTypeId(TlsUnitIds.cannonTowers[2])
  Preload.registerUnitTypeId(TlsUnitIds.tunnelEntrance)
  Preload.registerUnitTypeId(TlsUnitIds.tunnelEntrance_trainUnit)
  Preload.registerUnitTypeId(TlsUnitIds.blacksmith)
  Preload.registerUnitTypeId(TlsUnitIds.chapel)
  Preload.registerUnitTypeId(TlsUnitIds.spearmansTent)
  Preload.registerUnitTypeId(TlsUnitIds.munitionsDepot)
  Preload.registerUnitTypeId(TlsUnitIds.forge)
  Preload.registerUnitTypeId(TlsUnitIds.rangedTarget)
  Preload.registerUnitTypeId(TlsUnitIds.manualGenerator)
  Preload.registerUnitTypeId(TlsUnitIds.solarGenerator)
  Preload.registerUnitTypeId(TlsUnitIds.battery)
  Preload.registerUnitTypeId(TlsUnitIds.turretPortable)
  Preload.registerUnitTypeId(TlsUnitIds.turretElemental)
  Preload.registerUnitTypeId(TlsUnitIds.turretPhysical)
  Preload.registerUnitTypeId(TlsUnitIds.turretFire)
  Preload.registerUnitTypeId(TlsUnitIds.turretFrost)
  Preload.registerUnitTypeId(TlsUnitIds.turretElectric)
  Preload.registerUnitTypeId(TlsUnitIds.turretBallista)
  Preload.registerUnitTypeId(TlsUnitIds.turretCannon)
  Preload.registerUnitTypeId(TlsUnitIds.heroDefault)

  Preload.registerUnitTypeId(TlsUnitIds.Survivors.survivorMale)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.builder1)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.builder2)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.militia1)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.militia2)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.militia3)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.spearman1)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.spearman2)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.marksman1)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.marksman2)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.marksman3)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.priest1)
  Preload.registerUnitTypeId(TlsUnitIds.Survivors.priest2)

  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.bandages)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.staminaPotion1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.armor1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.shelter)

  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.builder1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.militia1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.militia2)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.militia3)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.marksman1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.spearman1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.spearman2)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.priest1)
  Preload.registerUnitTypeId(TlsUnitIds.BuildItemUnits.priest2)

  for i = 0 to MAX_ELITE_TIER-1
    Preload.registerUnitTypeId(TlsUnitIds.Undead.zombiesDay[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.zombiesNight[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.skeletonArchers[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.crows[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.necromancers[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.tombstones[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.darkMinions[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.skeletonOrcs[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.ghosts[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.fiends[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.cultists[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.wagons[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.gargoyles[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.wyrms[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.abominations[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.forgottenOnes[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.tentacles[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.fallenBandit[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.fallenMarksman[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.fallenWizard[i])
    Preload.registerUnitTypeId(TlsUnitIds.Undead.fallenBanditLord[i])

  Preload.registerUnitTypeId(TlsUnitIds.Undead.skeletonWarrior)
  Preload.registerUnitTypeId(TlsUnitIds.Undead.skeletonMage)
  Preload.registerUnitTypeId(TlsUnitIds.Undead.skeletonChampion)
  Preload.registerUnitTypeId(TlsUnitIds.Undead.archimonde)
  Preload.registerUnitTypeId(TlsUnitIds.Undead.infernal)
  Preload.registerUnitTypeId(TlsUnitIds.Undead.abomThrowCaster)