package TlsUnitIds
import ObjectIdGenerator
import GameConstants

// ============================================================================
public class TlsUnitIds
  static constant int spawnPoint = 'h00I'
  static constant int aidStation = compiletime(UNIT_ID_GEN.next())
  static constant int postLantern = compiletime(UNIT_ID_GEN.next())
  static constant int chest = compiletime(UNIT_ID_GEN.next())
  static constant int armory = compiletime(UNIT_ID_GEN.next())
  static constant int skills = compiletime(HERO_ID_GEN.next())
  static constant int lampPowered = compiletime(UNIT_ID_GEN.next())
  static constant int lampUnpowered = compiletime(UNIT_ID_GEN.next())
  static constant int workshop = compiletime(UNIT_ID_GEN.next())
  static constant int wallHorizontal = compiletime(UNIT_ID_GEN.next())
  static constant int wallCorner = compiletime(UNIT_ID_GEN.next())
  static constant int shop = compiletime(UNIT_ID_GEN.next())
  static constant int animalPen = compiletime(UNIT_ID_GEN.next())
  static constant int baseFooty = compiletime(UNIT_ID_GEN.next())
  static constant int rangedTarget = compiletime(UNIT_ID_GEN.next())
  static constant int spearmansTent = compiletime(UNIT_ID_GEN.next())
  static constant int waygate = 'nwgt' // this needs to match the map
  static constant int deer = compiletime(UNIT_ID_GEN.next())
  static constant int lumberMill = compiletime(UNIT_ID_GEN.next())
  static constant int altar = compiletime(UNIT_ID_GEN.next())
  
  static constant int campFire = compiletime(UNIT_ID_GEN.next())
  static constant int campFireBuild = compiletime(UNIT_ID_GEN.next())
  static constant int campFireOff = compiletime(UNIT_ID_GEN.next())
  static constant int campFire2 = compiletime(UNIT_ID_GEN.next())

  static constant int headquarters1 = compiletime(UNIT_ID_GEN.next())
  static constant int headquarters2 = compiletime(UNIT_ID_GEN.next())
  static constant int headquarters3 = compiletime(UNIT_ID_GEN.next())
  static constant int headquarters4 = compiletime(UNIT_ID_GEN.next())
  static constant int headquarters5 = compiletime(UNIT_ID_GEN.next())
  static constant int headquarters6 = compiletime(UNIT_ID_GEN.next())

  static constant int shelter1 = compiletime(UNIT_ID_GEN.next())
  static constant int shelter2 = compiletime(UNIT_ID_GEN.next())
  static constant int shelter3 = compiletime(UNIT_ID_GEN.next())

  static constant int array spikes = [
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next()),
    compiletime(UNIT_ID_GEN.next())
  ]

  static constant int barricade1 = compiletime(UNIT_ID_GEN.next())
  static constant int barricade2 = compiletime(UNIT_ID_GEN.next())
  static constant int barricade3 = compiletime(UNIT_ID_GEN.next())
  static constant int barricade4 = compiletime(UNIT_ID_GEN.next())

  static constant int workbench = compiletime(UNIT_ID_GEN.next())

  // Defense
  static constant int defenseWorkbench = compiletime(UNIT_ID_GEN.next())
  static constant int scoutTower = compiletime(UNIT_ID_GEN.next())
  static constant int guardTower = compiletime(UNIT_ID_GEN.next())
  static constant int tunnelEntrance = compiletime(UNIT_ID_GEN.next())
  static constant int tunnelEntrance_trainUnit = compiletime(UNIT_ID_GEN.next())
  
  // Electricity
  static constant int manualGenerator = compiletime(UNIT_ID_GEN.next())
  static constant int solarGenerator = compiletime(UNIT_ID_GEN.next())
  static constant int battery = compiletime(UNIT_ID_GEN.next())

  static constant int turretPortable = compiletime(UNIT_ID_GEN.next())
  static constant int turretElemental = compiletime(UNIT_ID_GEN.next())
  static constant int turretPhysical = compiletime(UNIT_ID_GEN.next())
  static constant int turretFire = compiletime(UNIT_ID_GEN.next())
  static constant int turretFrost = compiletime(UNIT_ID_GEN.next())
  static constant int turretElectric = compiletime(UNIT_ID_GEN.next())
  static constant int turretBallista = compiletime(UNIT_ID_GEN.next())
  static constant int turretCannon = compiletime(UNIT_ID_GEN.next())

  static constant int heroUnspecified = compiletime(HERO_ID_GEN.next())
  static constant int heroDefense = compiletime(HERO_ID_GEN.next())
  static constant int heroEngineering = compiletime(HERO_ID_GEN.next())
  static constant int heroMilitary = compiletime(HERO_ID_GEN.next())
  static constant int heroScout = compiletime(HERO_ID_GEN.next())

  // --------------------------------------------------------------------------
  public static class Survivors
  //{
    static constant int survivorMale = compiletime(HERO_ID_GEN.next())
    static constant int acolyte1 = compiletime(HERO_ID_GEN.next())

    static constant int defenseBuilder1 = compiletime(HERO_ID_GEN.next())
    static constant int operator1 = compiletime(HERO_ID_GEN.next())

    static constant int militaryBuilder1 = compiletime(HERO_ID_GEN.next())
    static constant int militia1 = compiletime(HERO_ID_GEN.next())
    static constant int militia2 = compiletime(HERO_ID_GEN.next())
    static constant int militia3 = compiletime(HERO_ID_GEN.next())
    static constant int spearman1 = compiletime(HERO_ID_GEN.next())
    static constant int spearman2 = compiletime(HERO_ID_GEN.next())
    static constant int marksman1 = compiletime(HERO_ID_GEN.next())
    static constant int marksman2 = compiletime(HERO_ID_GEN.next())
    static constant int marksman3 = compiletime(HERO_ID_GEN.next())
    static constant int priest1 = compiletime(HERO_ID_GEN.next())

    static constant int engineer1 = compiletime(HERO_ID_GEN.next())
  //}

  // --------------------------------------------------------------------------
  public static class BuildItemUnits
  //{
    static constant int militia1 = compiletime(UNIT_ID_GEN.next())
    static constant int marksman1 = compiletime(UNIT_ID_GEN.next())
    static constant int spearman1 = compiletime(UNIT_ID_GEN.next())
    static constant int medic1 = compiletime(UNIT_ID_GEN.next())
    static constant int defenseBuilder1 = compiletime(UNIT_ID_GEN.next())
    static constant int militaryBuilder1 = compiletime(UNIT_ID_GEN.next())
    static constant int bandages = compiletime(UNIT_ID_GEN.next())
    static constant int staminaPotion1 = compiletime(UNIT_ID_GEN.next())
    static constant int shelter = compiletime(UNIT_ID_GEN.next())
    static constant int engineer1 = compiletime(UNIT_ID_GEN.next())
    static constant int acolyte1 = compiletime(UNIT_ID_GEN.next())
    static constant int operator1 = compiletime(UNIT_ID_GEN.next())

    static constant int headquarters1 = compiletime(UNIT_ID_GEN.next())
    static constant int headquarters2 = compiletime(UNIT_ID_GEN.next())
    static constant int headquarters3 = compiletime(UNIT_ID_GEN.next())
  //}

  // --------------------------------------------------------------------------
  public static class Undead
  //{
    static constant int array[MAX_ELITE_TIER] zombiesDay =            [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] zombiesNight =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] skeletonArchers =       [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] crows =                 [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] necromancers =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] tombstones =            [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] darkMinions =           [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] skeletonOrcs =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] ghosts =                [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] fiends =                [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] cultists =              [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] mutants =               [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] wagons =                [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] gargoyles =             [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] wyrms =                 [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] abominations =          [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] forgottenOnes =         [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]
    static constant int array[MAX_ELITE_TIER] tentacles =             [compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next()), compiletime(UNIT_ID_GEN.next())]

    // Summons
    static constant int skeletonWarrior = compiletime(UNIT_ID_GEN.next())
    static constant int skeletonMage = compiletime(UNIT_ID_GEN.next())
    static constant int skeletonChampion = compiletime(UNIT_ID_GEN.next())

    // Archimonde
    static constant int archimonde = compiletime(UNIT_ID_GEN.next())
    static constant int infernal = compiletime(UNIT_ID_GEN.next())
    
    // Dummies
    static constant int abomThrowCaster = compiletime(UNIT_ID_GEN.next())
    static constant int cryptFiendBurrowDummy = compiletime(UNIT_ID_GEN.next())
  //}

  // --------------------------------------------------------------------------
  public static class BaseUnits
    static constant int baseEasy = 'h00H'
    static constant int baseMedium = 'h00J'
    static constant int baseHard = 'h00K'

// ============================================================================
public class NotificationIds
  static constant int gateNotification = compiletime(HERO_ID_GEN.next())

// ============================================================================
public function unit.isTlsHero() returns bool
  let id = this.getTypeId()
  return id == TlsUnitIds.heroUnspecified or
         id == TlsUnitIds.heroScout or
         id == TlsUnitIds.heroMilitary or
         id == TlsUnitIds.heroDefense or
         id == TlsUnitIds.heroEngineering

// ============================================================================
public function unit.isSurvivor() returns bool
  let targetTypeId = this.getTypeId()
  return  targetTypeId == TlsUnitIds.Survivors.survivorMale or
          targetTypeId == TlsUnitIds.Survivors.defenseBuilder1 or
          targetTypeId == TlsUnitIds.Survivors.militaryBuilder1 or
          targetTypeId == TlsUnitIds.Survivors.marksman1 or
          targetTypeId == TlsUnitIds.Survivors.priest1 or
          targetTypeId == TlsUnitIds.Survivors.acolyte1 or
          targetTypeId == TlsUnitIds.Survivors.militia1 or
          targetTypeId == TlsUnitIds.Survivors.militia2 or
          targetTypeId == TlsUnitIds.Survivors.militia3 or
          targetTypeId == TlsUnitIds.Survivors.spearman1 or
          targetTypeId == TlsUnitIds.Survivors.spearman2 or
          targetTypeId == TlsUnitIds.Survivors.engineer1 or
          targetTypeId == TlsUnitIds.Survivors.operator1

// ============================================================================
public function unit.isAcolyte() returns bool
  return this.getTypeId() == TlsUnitIds.Survivors.acolyte1

// ============================================================================
public function unit.isOperator() returns bool
  return this.getTypeId() == TlsUnitIds.Survivors.operator1

// ============================================================================
public function unit.isCampHeadquarters() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.headquarters1 or
         targetTypeId == TlsUnitIds.headquarters2 or
         targetTypeId == TlsUnitIds.headquarters3 or
         targetTypeId == TlsUnitIds.headquarters4 or
         targetTypeId == TlsUnitIds.headquarters5 or
         targetTypeId == TlsUnitIds.headquarters6

// ============================================================================
public function unit.isShelter() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.shelter1 or
         targetTypeId == TlsUnitIds.shelter2

// ============================================================================
public function unit.isBarricade() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.barricade1 or
         targetTypeId == TlsUnitIds.barricade2 or
         targetTypeId == TlsUnitIds.barricade3 or
         targetTypeId == TlsUnitIds.barricade4

// ============================================================================
public function unit.isCampFire() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.campFireBuild or
         targetTypeId == TlsUnitIds.campFire or
         targetTypeId == TlsUnitIds.campFireOff or
         targetTypeId == TlsUnitIds.campFire2

// ============================================================================
public function unit.isChest() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.chest

// ============================================================================
public function unit.isLampPost() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.postLantern

// ============================================================================
public function unit.isRangedTarget() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.rangedTarget

// ============================================================================
public function unit.isSpikes() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.spikes[0] or
         targetTypeId == TlsUnitIds.spikes[1] or
         targetTypeId == TlsUnitIds.spikes[2] or
         targetTypeId == TlsUnitIds.spikes[3] or
         targetTypeId == TlsUnitIds.spikes[4]

// ============================================================================
public function unit.isWorkstation() returns bool
  let targetTypeId = this.getTypeId()
  return targetTypeId == TlsUnitIds.scoutTower or 
         targetTypeId == TlsUnitIds.guardTower

// ============================================================================
public function unit.isZombie() returns bool
  return this.getTypeId().isZombie()

// ============================================================================
public function int.isZombie() returns bool
  return this == TlsUnitIds.Undead.zombiesNight[0] or
         this == TlsUnitIds.Undead.zombiesNight[1] or
         this == TlsUnitIds.Undead.zombiesNight[2]

// ============================================================================
public function unit.isTypeOfGhost() returns bool
  return this.getTypeId().isTypeOfFiend()

// ============================================================================
public function int.isTypeOfGhost() returns bool
  return this == TlsUnitIds.Undead.ghosts[0] or
         this == TlsUnitIds.Undead.ghosts[1] or
         this == TlsUnitIds.Undead.ghosts[2]

// ============================================================================
public function unit.isTypeOfFiend() returns bool
  return this.getTypeId().isTypeOfFiend()

// ============================================================================
public function int.isTypeOfFiend() returns bool
  return this == TlsUnitIds.Undead.fiends[0] or
         this == TlsUnitIds.Undead.fiends[1] or
         this == TlsUnitIds.Undead.fiends[2]

// ============================================================================
public function unit.isTypeOfNecromancer() returns bool
  return this.getTypeId().isTypeOfNecromancer()

// ============================================================================
public function int.isTypeOfNecromancer() returns bool
  return this == TlsUnitIds.Undead.necromancers[0] or
         this == TlsUnitIds.Undead.necromancers[1] or
         this == TlsUnitIds.Undead.necromancers[2]

// ============================================================================
public function unit.isTypeOfAbomination() returns bool
  return this.getTypeId().isTypeOfAbomination()

// ============================================================================
public function int.isTypeOfAbomination() returns bool
  return this == TlsUnitIds.Undead.abominations[0] or
         this == TlsUnitIds.Undead.abominations[1] or
         this == TlsUnitIds.Undead.abominations[2]

// ============================================================================
public function unit.isTypeOfTombstone() returns bool
  return this.getTypeId().isTypeOfTombstone()

// ============================================================================
public function int.isTypeOfTombstone() returns bool
  return this == TlsUnitIds.Undead.tombstones[0] or
         this == TlsUnitIds.Undead.tombstones[1] or
         this == TlsUnitIds.Undead.tombstones[2]