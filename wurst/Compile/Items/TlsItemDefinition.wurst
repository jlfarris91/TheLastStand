package TlsItemDefinition
import public ItemObjEditing
import public ObjectIds
import public TlsItemIds
import public TlsAbilityIds
import public MainItemLibrary
import public TlsObjEditingCommons
import HashMap
import public Classification
import Flags
import LinkedList
import StringUtils
import ItemType
import Items
import ColorUtility

HashMap<int, TlsItemDefinition> g_itemIdToDefinitionMap = new HashMap<int, TlsItemDefinition>()

// ============================================================================
public function registerItemDefinition(int itemId, TlsItemDefinition def)
  g_itemIdToDefinitionMap.put(itemId, def)

// ============================================================================
public function getItemDefinition(int itemId) returns TlsItemDefinition
  return g_itemIdToDefinitionMap.get(itemId)

// ============================================================================
public class TlsItemDefinition extends ItemDefinition
  private string m_name
  private string m_description
  private string m_tooltipBasic
  private string m_tooltipExtended
  private int m_goldCost
  private int m_lumberCost
  private string m_iconPath
  private bool m_activelyUsed
  private int m_unitClassRequirements = 0
  private LinkedList<int> m_abilities = new LinkedList<int>()

  // --------------------------------------------------------------------------
  construct (int newId, int baseId)
    super(newId, baseId)
    setGoldCost(0)
    setMaterialCost(0)
    setLevel(1)
    setLevelUnclassified(1)
    setNumberofCharges(0)
    setPriority(0)
    setStockInitial(0)
    setStockMaximum(99)
    setStockReplenishInterval(0)
    setStockStartDelay(0)
    setRequirements("")
    setButtonPositionX(0)
    setButtonPositionY(0)
    setCanBeDropped(true)
    setCanBeSoldToMerchants(true)
    setCanBeSoldByMerchants(true)
    setDroppedWhenCarrierDies(true)
    
    registerItemDefinition(newId, this)

  // --------------------------------------------------------------------------
  ondestroy
    destroy m_abilities

  // --------------------------------------------------------------------------
  function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  override function setName(string value)
    super.setName(value)
    m_name = value

  // --------------------------------------------------------------------------
  function getDescription() returns string
    return m_description

  // --------------------------------------------------------------------------
  override function setDescription(string value)
    super.setDescription(value)
    m_description = value

  // --------------------------------------------------------------------------
  function getTooltipBasic() returns string
    return m_tooltipBasic

  // --------------------------------------------------------------------------
  override function setTooltipBasic(string value)
    super.setTooltipBasic(value)
    m_tooltipBasic = value

  // --------------------------------------------------------------------------
  function getTooltipExtended() returns string
    return m_tooltipExtended

  // --------------------------------------------------------------------------
  override function setTooltipExtended(string value)
    super.setTooltipExtended(value)
    m_tooltipExtended = value

  // --------------------------------------------------------------------------
  override function setAbilities(string value)
    super.setAbilities(value)
    m_abilities.clear()
    let abilRawCodes = value.split(",")
    for rawCode in abilRawCodes
      if (rawCode != "")
        m_abilities.add(rawCode.fromRawCode())

  // --------------------------------------------------------------------------
  function getAbilities() returns LinkedList<int>
    return m_abilities

  // --------------------------------------------------------------------------
  function getGoldCost() returns int
    return m_goldCost

  // --------------------------------------------------------------------------
  override function setGoldCost(int value)
    super.setGoldCost(value)
    m_goldCost = value

  // --------------------------------------------------------------------------
  function getLumberCost() returns int
    return m_lumberCost

  // --------------------------------------------------------------------------
  override function setLumberCost(int value)
    super.setLumberCost(value)
    m_lumberCost = value

  // --------------------------------------------------------------------------
  function getMaterialCost() returns int
    return getLumberCost()

  // --------------------------------------------------------------------------
  function setMaterialCost(int value)
    setLumberCost(value)

  // --------------------------------------------------------------------------
  function getInterfaceIcon() returns string
    return m_iconPath

  // --------------------------------------------------------------------------
  override function setInterfaceIcon(string value)
    super.setInterfaceIcon(value)
    m_iconPath = value

  // --------------------------------------------------------------------------
  function getActivelyUsed() returns bool
    return m_activelyUsed

  // --------------------------------------------------------------------------
  override function setActivelyUsed(bool value)
    super.setActivelyUsed(value)
    m_activelyUsed = value

  // --------------------------------------------------------------------------
  function getTlsUnitClassRequirements() returns int
    return m_unitClassRequirements

  // --------------------------------------------------------------------------
  function addTlsUnitClassifications(vararg TlsUnitClassification values)
    for c in values
      m_unitClassRequirements = m_unitClassRequirements.setBit(c castTo int)

  // --------------------------------------------------------------------------
  function hasTlsUnitClassRequirement(vararg TlsUnitClassification values) returns bool
    for c in values
      if (not m_unitClassRequirements.isBitSet(c castTo int))
        return false
    return true

// ============================================================================
public function TlsItemDefinition.build()
  
  // Required for ItemType.getItemType to return anything
  defineItems()

  let itemType = ItemType.getItemType(this.getNewId())
  let itemRarity = itemType != null ? itemType.getRarity() : null
  let unitClassRequirements = this.getTlsUnitClassRequirements()

  var prefix = ""

  if (itemRarity != null)
    this.setName(this.getName().colorize(itemRarity.getColor()))
    if (itemRarity.getApplyColorToItems())
      this.setTintingColor1Red(itemRarity.getColor().red)
      this.setTintingColor2Green(itemRarity.getColor().green)
      this.setTintingColor3Blue(itemRarity.getColor().blue)
    prefix += itemRarity.getName().colorize(itemRarity.getColor())

  if (unitClassRequirements != 0)
  //{
    if (prefix != "")
      prefix += " "

    let symbolString = unitClassRequirements.getTlsUnitClassSymbolsColored()
    prefix += symbolString
  //}

  if (prefix != "")
    prefix += "|n|n"

  this.setDescription(prefix + this.getDescription())
  this.setTooltipExtended(prefix + this.getTooltipExtended())