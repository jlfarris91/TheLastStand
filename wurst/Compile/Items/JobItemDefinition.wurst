package JobItemDefinition
import public TlsItemDefinition
import StringExtensions
import StringBuilder
import ErrorHandling
import TlsUnitDefinition
import LinkedList
import ColorUtility

constant int JOB_ITEM_BASE_ID = 'ratc'
constant int MAX_JOB_DESC_ITEM_COUNT = 32
constant colorA ITEM_NAME_COLOR = fromHexString("FF3B97D3")
constant colorA ITEM_VALUE_COLOR = COLOR_GOLD
constant colorA ARROW_COLOR = fromHexString("FF6cf542")

// ============================================================================
public class JobItemDefinition extends TlsItemDefinition
  construct(int newId, int abilId)
    super(newId, JOB_ITEM_BASE_ID)
    setActivelyUsed(true)
    setPerishable(true)
    setAbilities(commaList(abilId))

// ============================================================================
public interface IJobDescriptionItem
  function getName() returns string
  function getValue(int index) returns string
  function getValueCount() returns int

// ============================================================================
public class JobDescriptionItem implements IJobDescriptionItem
  private string m_name
  private LinkedList<string> m_values

  // --------------------------------------------------------------------------
  construct(string name)
    m_values = new LinkedList<string>()
    m_name = name

  // --------------------------------------------------------------------------
  construct(string name, string value)
    m_values = new LinkedList<string>()
    m_name = name
    addValue(value)

  // --------------------------------------------------------------------------
  ondestroy
    clear()
    destroy m_values
    m_values = null

  // --------------------------------------------------------------------------
  function clear()
    m_name = null
    m_values.clear()

  // --------------------------------------------------------------------------
  override function getName() returns string
    return m_name

  // --------------------------------------------------------------------------
  override function getValue(int index) returns string
    return m_values.get(index)
  
  // --------------------------------------------------------------------------
  override function getValueCount() returns int
    return m_values.size()

  // --------------------------------------------------------------------------
  function addValue(string value) returns JobDescriptionItem
    if (m_values.size() == MAX_JOB_DESC_ITEM_COUNT)
      error("Reached limit of number of values " + I2S(MAX_JOB_DESC_ITEM_COUNT))
    m_values.add(value)
    return this

// ============================================================================
/*
  Sturdy Spears

  A quiver of sturdy spears. Good for killing undead at medium range.

  [Survivor Job Change]
  Use this item on a Survivor to give them new abilities.

  Survivor Male -> Spearman

  Does not attack air!

  Spearman
  Damage:       18-32
  Range:        350
  Abilities:    Ability 1
                Ability 2
                Ability 3
*/
public class JobItemTooltipBuilder
  private ITlsUnitDefinition m_fromUnit
  private ITlsUnitDefinition m_toUnit
  private string m_desc
  private LinkedList<IJobDescriptionItem> m_items

  // --------------------------------------------------------------------------
  construct()
    m_items = new LinkedList<IJobDescriptionItem>()

  // --------------------------------------------------------------------------
  ondestroy 
    clear()

    destroy m_items
    m_items = null

  // --------------------------------------------------------------------------
  function setUnits(ITlsUnitDefinition fromUnit, ITlsUnitDefinition toUnit) returns JobItemTooltipBuilder
    m_fromUnit = fromUnit
    m_toUnit = toUnit
    return this

  // --------------------------------------------------------------------------
  function getItemDescription() returns string
    return m_desc

  // --------------------------------------------------------------------------
  function setItemDescription(string desc) returns JobItemTooltipBuilder
    m_desc = desc
    return this

  // --------------------------------------------------------------------------
  function addItem(string name, string value) returns JobItemTooltipBuilder
    return addItem(new JobDescriptionItem(name, value))

  // --------------------------------------------------------------------------
  function addItem(IJobDescriptionItem itm) returns JobItemTooltipBuilder
    if (m_items.size() == MAX_JOB_DESC_ITEM_COUNT)
      error("Reached limit of job description items " + I2S(MAX_JOB_DESC_ITEM_COUNT))
    m_items.add(itm)
    return this

  // --------------------------------------------------------------------------
  function clear()
    m_fromUnit = null
    m_toUnit = null
    m_desc = null
    for itm in m_items
      destroy itm
    m_items.clear()

  // --------------------------------------------------------------------------
  function getDescriptionString() returns string
    let sb = new StringBuilder()

    if (m_desc != null)
      sb.appendLine(m_desc)
      sb.appendLine()

    sb.appendLine("[Survivor Job Change]".colorize(COLOR_GOLD))
    sb.appendLine("Use this item on a {0} to give them new abilities.".format(m_fromUnit.getName()))
    sb.appendLine()

    return sb.toStringAndDestroy()

  // --------------------------------------------------------------------------
  function getTooltipExtendedString() returns string
    let sb = new StringBuilder()

    sb.append(getDescriptionString())
    
    sb.append("Changes a ")
    sb.append(m_fromUnit.getName().colorize(COLOR_GOLD))
    sb.append(" to a ")
    sb.appendLine(m_toUnit.getName().colorize(COLOR_GOLD))
    sb.appendLine()

    let targetsAllowed = m_toUnit.getAttack1Targets()
    if (not targetsAllowed.isEmpty() and not targetsAllowed.has("Air"))
      sb.appendLine("Attacks ground only!".colorize(Colors.red))
      sb.appendLine()

    let padStr = " "
    for itm in m_items      
      sb.append(itm.getName().colorize(ITEM_NAME_COLOR))

      let itemValueCount = itm.getValueCount()
      if (itemValueCount == 1)
        sb.appendLine(itm.getValue(0).colorize(ITEM_VALUE_COLOR))
      else
        sb.appendLine()
        for j = 0 to itemValueCount - 1
          sb.append("- ".padLeft(10, padStr))
          sb.appendLine(itm.getValue(j).colorize(ITEM_VALUE_COLOR))

    return sb.toStringAndDestroy()

  // --------------------------------------------------------------------------
  static function createDefault(ITlsUnitDefinition fromUnit, ITlsUnitDefinition toUnit, string tip) returns JobItemTooltipBuilder
    let builder = new JobItemTooltipBuilder()

    builder.setUnits(fromUnit, toUnit)
    builder.setItemDescription(tip)

    builder.addItem("Health: ", toUnit.getHitPointsMaximumBase().toString())

    if (toUnit.getAttacksEnabled() > 0)
      builder.addItem("Range: ", toUnit.getAttack1Range().toString())
      builder.addItem("Damage: ", "{0} ({1} dps)".format(toUnit.getAttack1DamageRangeString(), toUnit.getApproxAttack1DPSString()))
      builder.addItem("Attack: ", toUnit.getAttack1AttackType().toString())

      let targetsAllowed = toUnit.getAttack1Targets()
      if (not targetsAllowed.isEmpty())
        builder.addItem("Targets: ", targetsAllowed.joinBy(", "))

    else
      builder.addItem("Attack: ", "Does not attack")
    
    builder.addItem("Armor: ", toUnit.getArmorType().toString())

    return builder