package Upgrade_SurvivorHPBonus
import TlsUpgradeIds
import TlsUpgradeDefinition
import RegisterEvents
import PlayerProperties
import Handle
import PlayerExtensions
import Icons
import IntegerExtensions
import TlsUnitIds
import ObjectIds

int g_survivorHpBonusResearch_Affector = 'SHPR'

//                         1     2     3     4     5     6     7     8     9    10
int array g_HPBonus = [   50,  100,  200,  300,  500,  700, 1000, 1300, 1700, 2100]

// ============================================================================
function getHPBonus(int level) returns int
  return g_HPBonus[level - 1]

// ============================================================================
@compiletime function createObjectDefinitions()

  new TlsUpgradeDefinition(TlsUpgradeIds.survivorHpBonusResearch, 10)
    ..presetName(lvl -> "Survivor HP Bonus")
    ..setLumberCostBase(100)
    ..setLumberCostIncrement(100)
    ..presetIcon(lvl -> Icons.bTNSkillz)
    ..presetTooltip(lvl -> "Research Survivor HP " + lvl.toRomanNumeral())
    ..presetTooltipExtended(lvl -> "Gives all survivors +{0} bonus max HP".format(getHPBonus(lvl).toString()))
    ..setButtonPositionX(0)
    ..setButtonPositionY(0)
    ..setTimeBase(10)
    ..setTimeIncrement(5)
    ..setRequirements(1,  commaList(TlsUnitIds.headquarters1))
    ..setRequirements(2,  commaList(TlsUnitIds.headquarters1))
    ..setRequirements(3,  commaList(TlsUnitIds.headquarters2))
    ..setRequirements(4,  commaList(TlsUnitIds.headquarters2))
    ..setRequirements(5,  commaList(TlsUnitIds.headquarters3))
    ..setRequirements(6,  commaList(TlsUnitIds.headquarters3))
    ..setRequirements(7,  commaList(TlsUnitIds.headquarters4))
    ..setRequirements(8,  commaList(TlsUnitIds.headquarters4))
    ..setRequirements(9,  commaList(TlsUnitIds.headquarters5))
    ..setRequirements(10, commaList(TlsUnitIds.headquarters5))

// ============================================================================
function onResearchFinished()
  if (GetResearched() != TlsUpgradeIds.survivorHpBonusResearch)
    return

  let ownerPlayer = GetResearchingUnit().getOwner()

  let survivorHPBonusProp = ownerPlayer.getProperty(PlayerProperty.SURVIVOR_HP_BONUS)

  let existingAffector = survivorHPBonusProp.getAffectorByUserData(g_survivorHpBonusResearch_Affector)
  if (existingAffector != INVALID_HANDLE)
    survivorHPBonusProp.removeAffector(existingAffector)

  let researchLevel = ownerPlayer.getTechResearchLevel(TlsUpgradeIds.survivorHpBonusResearch)
  survivorHPBonusProp.affectAdd(getHPBonus(researchLevel).toReal(), g_survivorHpBonusResearch_Affector)

// ============================================================================
init
  registerPlayerUnitEvent(EVENT_PLAYER_UNIT_RESEARCH_FINISH, function onResearchFinished)

  