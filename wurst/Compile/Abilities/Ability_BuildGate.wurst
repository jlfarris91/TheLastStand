// package Ability_BuildGate
// import RegisterEvents
// import TlsUnitIds
// import Unit_Gate
// import HumanPlayers
// import Orders
// import ChannelAbilityPreset

// public constant int ABILITY_ID_BUILD_GATE = compiletime(ABIL_ID_GEN.next())

// @compiletime
// function onRotateClockwiseCast()
//   new ChannelAbilityPreset(ABILITY_ID_BUILD_GATE, 1, true)
//     ..setName("Build Gate")
//     ..setTooltipNormal(1, "Build Gate")
//     ..setTooltipNormalExtended(1, "A special menu for building gates")
//     ..setIconNormal("ReplaceableTextures\\CommandButtons\\BTNGate.BLP")
//     ..setButtonPositionNormalX(1)
//     ..setButtonPositionNormalY(2)
//     ..setHeroAbility(false)
//     ..presetTargetTypes(Targettype.NONE)
//     ..presetOption(Option.VISIBLE, true)
//     ..presetHotkey("G")
//     ..presetCooldown(lvl -> 0.0)
//     ..presetManaCost(lvl -> 0)
//     ..presetCastRange(lvl -> 0.0)
//     ..setLevelSkipRequirement(0)
//     ..setAnimationNames("")
//     ..setArtCaster("")
//     ..setAreaofEffect(1, 0.0)
//     ..setDurationHero(1, 0.0)
//     ..setDurationNormal(1, 0.0)

// function onGateUpgradeFinish()
//   let caster = GetSpellAbilityUnit()
//   let p = caster.getOwner()
//   asd(false, p)
//   caster.issueImmediateOrderById(OrderIds.buildmenu)

// function asd(bool enabled, player p)
//   // Normal structures
//   SetPlayerUnitAvailableBJ(TlsUnitIds.spikes, enabled, p)
//   SetPlayerUnitAvailableBJ(TlsUnitIds.campFire, enabled, p)
//   SetPlayerUnitAvailableBJ(TlsUnitIds.tent, enabled, p)
//   SetPlayerUnitAvailableBJ(TlsUnitIds.barricade, enabled, p)
//   SetPlayerUnitAvailableBJ(TlsUnitIds.chest, enabled, p)

//   // Gate structures
//   SetPlayerUnitAvailableBJ(GateIds.gate_0_closed, not enabled, p)
//   SetPlayerUnitAvailableBJ(GateIds.gate_45_closed, not enabled, p)
//   SetPlayerUnitAvailableBJ(GateIds.gate_90_closed, not enabled, p)
//   SetPlayerUnitAvailableBJ(GateIds.gate_225_closed, not enabled, p)

// function asdasd()
//   let u = GetTriggerUnit()
//   let order = GetIssuedOrderIdBJ()
//   if (order == OrderIds.cancel)
//     asd(true, u.getOwner())
//   Log.debug("Order: " + I2S(order))

// init
//   //registerSpellEffectEvent(ABILITY_ID_BUILD_GATE, function onGateUpgradeFinish)
//   //registerPlayerUnitEvent(EVENT_PLAYER_UNIT_ISSUED_ORDER, function asdasd)

//   for p in g_HumanPlayers
//     asd(true, p)