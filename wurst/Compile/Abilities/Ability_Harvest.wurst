package Ability_Harvest
import AbilityObjEditing
import TlsAbilityIds
import UnitAnimations
import ColorUtility
import StringBuilder

public constant real TREE_HARVEST_INCOME_INTERVAL = UnitAnimations.VillagerMan.attack.duration
public constant int HARVEST_LUMBER_CAPACITY_BASE = 10
public constant int HARVEST_LUMBER_CAPACITY_PER_LEVEL = 2
public constant int HARVEST_RESEARCH_LEVELS = 3
public constant int HARVEST_UNIT_LEVELS = 10
public constant int HARVEST_LEVELS = HARVEST_RESEARCH_LEVELS * HARVEST_UNIT_LEVELS
public constant real HARVEST_MOVESPEED_START = 180.0
public constant real HARVEST_MOVESPEED_END = 250.0
constant real HARVEST_MOVESPEED_INC = (HARVEST_MOVESPEED_END - HARVEST_MOVESPEED_START) / 10.0
constant real HARVEST_MOVESPEED_INC_PERC = HARVEST_MOVESPEED_INC / HARVEST_MOVESPEED_START

// ============================================================================
public function getHarvestAbility(int researchLevel, int survivorLevel) returns int
  return TlsAbilityIds.harvest[researchLevel * HARVEST_UNIT_LEVELS + (survivorLevel - 1)]

// ============================================================================
@compiletime function createAbility()
  for r = 0 to HARVEST_RESEARCH_LEVELS - 1
    for i = 1 to HARVEST_UNIT_LEVELS
      createHarvestAbility(r, i)

// ============================================================================
function createHarvestAbility(int researchLevel, int level)
  let abilId = getHarvestAbility(researchLevel, level)

  let lumberPerHit = 1 + researchLevel
  let lumberCapacity = HARVEST_LUMBER_CAPACITY_BASE + (level - 1) * HARVEST_LUMBER_CAPACITY_PER_LEVEL

  let sb = new StringBuilder()
  sb.appendLine("Max lumber carried: {0}".format(lumberCapacity.toString().colorize(Colors.gold)))
  sb.appendLine()
  sb.appendLine("Each level of the Survivor increases the amount of lumber carried by {0} and movement speed by {1}%".format(
    HARVEST_LUMBER_CAPACITY_PER_LEVEL.toString().colorize(Colors.gold),
    (HARVEST_MOVESPEED_INC_PERC * 100.0).round().toString().colorize(Colors.gold)))

  new AbilityDefinitionHarvestLumber(abilId)
  ..setLevels(1)
  ..setName("Harvest")
  ..setEditorSuffix("(Level {0})".format(level.toString()))
  ..setTooltipNormal(1, researchLevel == 0 ? "Gather [Level {0}]".format(level.toString()) : "Gather [Level {0}] [Research {1}]".format(level.toString(), researchLevel.toString()))
  ..setTooltipNormalExtended(1, "Harvest lumber from trees without killing the tree. Somehow.|n|n" + sb.toString())
  ..setTooltipTurnOff(1, researchLevel == 0 ? "Return Resources [Level {0}]".format(level.toString()) : "Return Resources [Level {0}] [Research {1}]".format(level.toString(), researchLevel.toString()))
  ..setTooltipTurnOffExtended(1, "Return the carried lumber to the nearest HQ Tent.|n|n" + sb.toString())
  ..setLumberCapacity(1, lumberCapacity)
  ..setDamagetoTree(1, lumberPerHit)
  ..setButtonPositionNormalX(2)
  ..setButtonPositionNormalY(1)
  ..setButtonPositionTurnOffX(2)
  ..setButtonPositionTurnOffY(1)
  ..setTargetsAllowed(1, "tree,alive,dead")
  ..setDurationNormal(1, 0.0)
  ..setCastRange(1, 116.0)
  ..setAreaofEffect(1, 900.0)

  destroy sb